import math
from time import *
def prod(a, b):
    return a*b
def dot(a):
    return reduce(prod, a)

def amultList(a, lst1):
    return map(lambda x: a*x , lst1)

def norm2L(list):
    norm = 0.
    n = len(list)
    for a in list:
        norm += a**2
    norm = math.sqrt(norm)
    return norm

def norm2List(list):
    norm = 0.
    n = len(list)
    for i in range(n):
        norm += list[i]**2
    norm = math.sqrt(norm)
    return norm

l = [2]*1000
a = time()
norm2L(l)
b = time()
b-a
l = [2]*1000
a = time()
l2norm(l)
b = time()
b-a
l = [2]*1000
import numpy as npy
def l2norm(a):
    """
    Return the l2 norm of a, flattened out.

    Implemented as a separate function (not a call to norm() for speed).
    """
    return npy.sqrt(npy.sum(npy.absolute(a)**2))

def pui(n):
    iau = 10
    i = 1
    if n == 0:
        return 1
    while i<n:
        iau = iau*10
        i += 1

    return iau


#-------------------------
# mt3d importation methods
#-------------------------
from structuredmesh import *
import os                  # for file path
#from mesh import *         # for Meshes treating  
#
# the first step in the algorithm is non iteratif and can be a reason for the
# algorithm to lose accuracy. A variable porous simulation is necessarly made with CC.
#
# The way the boundary condition is considered with mt3d brings difficulties. Weighting
# factors considering the cell with the boundary condition are  minored by taking a cell of length multiplied by 500.
# The length of the domain is a parameter to be considered with attention due to the way b. c. are considered.
#
from chemicaltransport import ChemicalTransportProblem
from chemicaltransportmodule import ChemicalTransportModule

import sys

import getopt

from datamodel import * 

specificSurfaceArea = 1.6e+2

setProblemType("ChemicalTransport")
#print len(sys.argv)
short = 0
if len(sys.argv)==2:
    option = sys.argv[1]
    if option =='--short':
        short = 33

Phreeqc_url_bdd = "phreeqc.dat"
ChemicalStateList = []
newSpeciesList=[]
#
##
## Definition of aqueous states
## It will be modified
##
#
#
#
# Definition of the Aqueous column chemical State
#
#
temp = 25.0
pH = 7.0
pe = 4.0
Aqueousspecieslist_column = []


Si_column = ElementConcentration ('Si', 1.31e-4, "mol/l")
Aqueousspecieslist_column.append (Si_column)

AqueousSolution_column = AqueousSolution (Aqueousspecieslist_column, pH, pe)

gasPhase_column = []
gasPhasesolution_column = GasPhase (gasPhase_column)
#
#
temp = 25.0
pH = 7.0
pe = 4.0
Aqueousspecieslist_left_boundary = []


Si_left_boundary = ElementConcentration ('Si', 2.12e-3, "mol/l")
Aqueousspecieslist_left_boundary.append (Si_left_boundary)

AqueousSolution_left_boundary = AqueousSolution (Aqueousspecieslist_left_boundary, pH, pe)

gasPhase_left_boundary = []
gasPhasesolution_left_boundary = GasPhase (gasPhase_left_boundary)

gasPhasesolution_left_boundary = GasPhase (gasPhase_left_boundary)
#
##
## Thereafter, we define the sorption site: EXCHANGE_MASTER_SPECIES
##
#
SorbingSiteList = []
#
# V1
#
#
##
## Treatment of the Sorbed Secondary Species: EXCHANGE_SPECIES
##
#
#
##
##  ChemicalState Definitions
##
#
Mineralspecies_column = []

Mineral_column = TotalConcentration("Mineral", 0.0, "mol/l")
Mineralspecies_column.append (Mineral_column)

MineralPhaseSolution_column = []
MineralPhaseSolution_column = MineralPhase (Mineralspecies_column)

MineralPhaseSolution_left_boundary = []
MineralPhaseSolution_left_boundary = MineralPhase ([])
#
##
##  We finish by defining the Sorbing Site Capacity: EXCHANGE
##
#

#
##
##  EXCHANGE (V1)
##
#

IonicExchanger_column = []
IonicExchangerSolution_column = IonicExchangers (IonicExchanger_column)


IonicExchanger_left_boundary = []
IonicExchangerSolution_left_boundary = IonicExchangers (IonicExchanger_left_boundary)


SurfaceComplexation_left_boundary = []
SurfaceComplexationSolution_left_boundary = SurfaceComplexation (SurfaceComplexation_left_boundary)

#
##
##  Treatment of the AqueousMasterSpecies
##
#
##
##  Treatment of the MineralSecondarySpecies
##
#
# Mineral
Mineralreaction = []
Mineralreaction.append (("H4SiO4", 1.0))
Mineralreaction.append (("H2O", -2.0))
log_k = -3.872845
#log_k = -3.8827287
Mineral = MineralSecondarySpecies ("SiO2", Mineralreaction, log_k, "Mineral",Density(2648.29,'kg/m**3'))
newSpeciesList.append (Mineral)
#
##
##  Thereafter, we define the surface site: SURFACE_MASTER_SPECIES
##
#
#
##
##  Thereafter, we define the surface secondary species: SURFACE_SPECIES
##
#
#
##
##  Treatment of the SurfaceSiteMasterSpecies
##
#
#
##
##  Treatment of the solutionMasterSpecies
##
#
# Si
Si = AqueousMasterSpecies("H4SiO4", "Si", element = "SiO2", molarMass=MolarMass(28.0843,"kg/mol"), alkalinity = 0.0)
newSpeciesList.append(Si)
#
##
## Treatment of the Solution Secondary Species
##
#
# Si
Sireaction = []
Sireaction.append (("H4SiO4", 1))
log_k = 0.0
Si = AqueousSecondarySpecies ("H4SiO4", Sireaction, log_k, "Si")
newSpeciesList.append (Si)
# Si
Sireaction = []
Sireaction.append (("H4SiO4", 1))
log_k = 0.0
Si = AqueousSecondarySpecies ("H4SiO4", Sireaction, log_k, "Si")
newSpeciesList.append (Si)
##
##  Treatment of the SurfaceSiteMasterSpecies
##
#
SurfaceComplexation_column = []
SurfaceComplexationSolution_column = SurfaceComplexation (SurfaceComplexation_column)

SurfaceComplexation_left_boundary = []
SurfaceComplexationSolution_left_boundary = SurfaceComplexation (SurfaceComplexation_left_boundary)


ProblemName = "cas1_pn"
Phreeqc_file = "cas1_pn.txt"
#----------------------------------------------
#
# Definition of the mesh
#
mesh = StructuredMesh2D("global","XY")
nx = 201
ny = 1
dx = [0.001]*nx
dy = [1.0]
dx[0]=dx[0]*800.
pointlist_x = [0.0]
pointlist_y = [0.0]
for i in range (0, len (dx), 1):
    pointlist_x.append (pointlist_x[i] + dx[i])
#print     pointlist_x
#raw_input()
for i in range (0, len (dy), 1):
    pointlist_y.append (pointlist_y[i] + dy[i])
mesh.setAxis("X",pointlist_x)
mesh.setAxis("Y",pointlist_y)

andra_material = Material (name = "andra", effectiveDiffusion = EffectiveDiffusion (.79e-10),\
                             permeability = Permeability (value = 1.0),\
                             porosity = Porosity (value = 0.79),)

#
# End of Definitions for the mesh
#
column = StructuredMesh2D("ColumnT", "XY")
column.setZone ("ColumnT", index_min = Index2D (2, 1), index_max =
Index2D (nx, 1))

boundary = StructuredMesh2D("boundary", "XY")
boundary.setZone ("boundary", index_min = Index2D (1, 1), index_max =
Index2D (1, 1))

regions_list = []
initialconditions_list = []

reg0 = Region (column, andra_material)
regions_list.append (reg0)
kineticLaws = [ReversibleKineticLaw("Mineral",rate=ReactionRate(6.55e-15,"mol/m**2/s"),power=1.0,sphereModelExponent=0.0,\
											       specificSurfaceArea = specificSurfaceArea)]
Column = ChemicalState ("column_region", \
                                  AqueousSolution_column, \
			          MineralPhaseSolution_column, \
				  gasPhasesolution_column, \
				  IonicExchangerSolution_column)
				  
reg0_ic = InitialCondition (column, value = Column)
initialconditions_list.append (reg0_ic)

boundaryconditions_list = []
reg1 = Region (boundary, andra_material)
regions_list.append (reg1)
bc_left = ChemicalState ("bc_left",\
                          AqueousSolution_left_boundary,\
			  MineralPhaseSolution_left_boundary,\
			  gasPhasesolution_left_boundary, \
			  IonicExchangerSolution_left_boundary, \
			  SurfaceComplexationSolution_left_boundary)
			  
bc0 = BoundaryCondition (boundary, 'Dirichlet', value = bc_left)
boundaryconditions_list.append (bc0)
un_an = 365.25*24*3600
if short:
    tfinal= un_an
else:
    tfinal= un_an*26.84
    tfinal= un_an
    pass

Times=[0., tfinal]

outputlist = []
outputlist.append(ExpectedOutput(quantity='Concentration',unknow='Si',format='table',name='Si'))
outputlist.append(ExpectedOutput('porosity',timeSpecification=TimeSpecification(times=[tfinal]),format='table',save='file'))
				   
Rtransport=ChemicalTransportProblem("cas1_pn",\
			            regions_list,\
			            boundaryconditions_list,\
			            initialconditions_list,\
			            Times,\
				    sources=None,\
				    #darcyVelocity=Velocity(Vector([0.0, 0.0, 0.0])),\
				    darcyVelocity=None,\
			            bdd = Phreeqc_url_bdd,\
			            newSpeciesList=newSpeciesList,\
			            kineticLaws = kineticLaws,\
			            activityLaw= None,\
				    timeUnit='s',
				    porosityState = 'variable', 
			           # diffusionLaw = ProportionalDiffusionLaw(),
			            outputs = outputlist)

#
# Creation of the link between transport and chemistry
#
InitialTimeStep = 3.1558e+06*2

print "chemicaltransport module "
cas1_pn = ChemicalTransportModule()
cas1_pn.setData (Rtransport, trace = 0, mesh = mesh, algorithm="CC")
cas1_pn.setCouplingParameter(InitialTimeStep,
                           MaxTimeStep=3.1536e+07/3,
                           MinTimeStep=3.1536e+04,
                           CoefIncreaTimeStep=1.10,
                           CoefDecreaTimeStep=0.75,
                           CouplingPrecision=2.e-5,
                           MaxCouplingStep=20,
                           ObjectiveCouplingStep=15)
cas1_pn.setTransportParameters("TVD")
cas1_pn.setTransportParameters("JACOBI", 1.e-25)
list_of_species_toplot = []
pointtoplot = 0
if list_of_species_toplot !=[]:
    cas1_pn.setInteractivePlot(" cas1_pn ",list_of_species_toplot,pointtoplot,plotfrequency=10)
cas1_pn.setComponent("mt3d","phreeqc")
#
# Outputs for 1.3
#
#cas1_pn.setInteractiveSpatialPlot([	ExpectedOutput('Si',format='table'),
#					ExpectedOutput('Mineral',format='table')],interactivespatialplotfrequency = 5)
#cas1_pn.setInteractiveSpatialPlot([	ExpectedOutput('concentration',unknow = 'Si',format='table')],interactivespatialplotfrequency = 5)
cas1_pn.run()
#
name = 'Si'
outputs = cas1_pn.getOutput('Si')
print " loop over times "
i = 0
for output in outputs:
    i+=1
    time = i*InitialTimeStep
    file = name + "t%10.4e"%(time) + '.dat'
    #print output
    output[1].writeToFile(file)
    #print " fermeture du fichier "
    pass

#====================================================
# Comparison to the analytical solution at fial time 
#====================================================

print '================================= '
print 'Calcul d erreurs pour la porosite '
print '================================= '

ncell=100
Length=0.10

precision=20

equil_ct = 1.3101E-4
pore_diffus = 1.E-10
initial_porosity  = 0.79
conc_ini = equil_ct
conc_entree = 2.120270E-03
#conc_entree = 2.12E-03
conc_sortie = equil_ct
kinetic_ct  = 5.e-11*equil_ct
#kinetic_ct  = 5.23e-10*equil_ct
S0 = specificSurfaceArea
molar_volume = 22.68796e-03

step=Length/ncell
coef_lambda = kinetic_ct*S0/equil_ct
omega = sqrt(coef_lambda/pore_diffus)

A=((conc_sortie-equil_ct)-((conc_entree-equil_ct)*exp(-1.*omega*Length)))/(2.*sinh(omega*Length))
B=((-1.*(conc_sortie-equil_ct))+((conc_entree-equil_ct)*exp(omega*Length)))/(2.*sinh(omega*Length))

print conc_sortie,equil_ct,coef_lambda,omega,A,B,pi

b=[0]
if (abs(equil_ct-conc_ini)>1.E-15):
    for i in range(precision):
        n=i+1
        val1=(-2.*((equil_ct-conc_ini)/(n*pi))*((-1)**n - 1.))-((2.*n*pi)/((omega*Length)**2+(n*pi)**2))*(A*(((exp(omega*Length))*(-1)**n)-1.)+B*(((exp(-1.*omega*Length))*(-1)**n)-1.))
        b.append(val1)
        pass
    pass
else:
    for i in range(precision):
        n=i+1
        val1=-((2.*n*pi)/((omega*Length)**2+(n*pi)**2))*(A*(((exp(omega*Length))*(-1)**n)-1.)+B*(((exp(-1.*omega*Length))*(-1)**n)-1.))
        b.append(val1)
        pass
    pass

#print "b=",b

Cinfini=[0]*ncell
serie=[0]*ncell
new_analytic_porosity=[0]*ncell

for j in range(ncell):
    if (j!=0):
        x=j*step+step/2.
        Cinfini[j]=A*exp(omega*x) + B*exp(-1.*omega*x) + equil_ct
        serie[j]=0.
        for i in range(precision):
            n=i+1
            int_expo = tfinal*(pore_diffus*(n*pi)**2/(Length**2)+coef_lambda)
            if (int_expo < 300):
                serie[j]=serie[j]+b[n]/(pore_diffus*(n*pi)**2/Length**2+coef_lambda)*sin(n*pi/Length*x)*exp(-int_expo)
            pass
        new_analytic_porosity[j]=initial_porosity*exp(coef_lambda*molar_volume*(tfinal*(equil_ct-Cinfini[j])-serie[j]))
        pass
    else:
        new_analytic_porosity[j]=initial_porosity*exp(coef_lambda*molar_volume*(tfinal*(equil_ct-conc_entree)))
	print " initial poro ",initial_porosity,coef_lambda,molar_volume,tfinal,equil_ct,conc_entree
        pass
    pass

#filename = "porosity_"+ "%10.4e"%(tfinal) +'.tab'
filename = "cas1_pn.tab"
file = open(filename, 'r')
numeric_results = []
file.readline()
file.readline()
file.readline()
for i in file.readlines()[:-1]:
    numeric_results.append(float(i.split()[2]))
ind = 1
for i in new_analytic_porosity[1:100]:
     x=ind*step+step/2.
     print " x %15.10e analytic %15.10e numeric %15.10e diff %15.10e "%(x,i,numeric_results[ind],abs(numeric_results[ind]-i))
     ind+=1
ind = 0
error = 0.
for i in new_analytic_porosity[1:]:
    error0 = abs(numeric_results[ind]-i)
    error = max(error,error0)
    if abs(error0-error) < 1.e-8:
        ind_error = ind
#    print "error at ",ind,abs(numeric_results[ind]-i),i,numeric_results[ind]
    ind+=1
print " the maximum of the error is ",error," at time ",tfinal
epsilon_norme_porosity = 4E-2
if error > epsilon_norme_porosity:
    OKporo = 0
    print 'Be careful: error on the porosity higher than 1 per thousand'
    pass
else:
    OKporo = 1
    print 'Good agreement between numerical and analytical results for porosity, the error is ', error
    pass

if OKporo:
    print "\n \n ******************** Test-case 6.6 1D with PHREEQC / MT3D coupling OK ********************\n \n"
    pass
else:
    mess = " Problem for the Test-case 6.6 with constant diffusion ( PHREEQC / MT3D coupling)"
    raise(mess)
#

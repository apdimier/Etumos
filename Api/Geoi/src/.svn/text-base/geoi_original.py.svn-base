# -*- coding: cp1252 -*-
#============================================================================
#  ALLIANCES PROJECT
#  CEA - ANDRA
#  CHEMICAL-TRANSPORT COUPLING INTERFACE
#============================================================================
#  Authors :   Francois CORRIHONS   :    Apside Technologies
#              Alain DIMIER         :    Andra
#              Tony APPELO          :    Appelo consulting
#============================================================================
#  Version	: 2.0
#============================================================================
#  License type : GPL (see http://www.gnu.org/copyleft/gpl.html)
#  See the joined COPYING and README files.
#============================================================================
# The License type has been set by the initial contract between the 
# university of Pau and the Andra at the origin of this development.
# Thereafter all participants and users have been aware of these terms and agreed them.
#============================================================================
#  30.09.2002
#  In agreement with the Alliances prototype
#  18.11.2003
#  In agreement with the Alliances 1.2 version, first official 
#  delivery of the interface : version 1.0
#  18.06.2004
#  In agreement with the Alliances 1.3 version  
#  18.06.2006
#  In agreement with the Alliances 2.0 version  
#============================================================================


#-----------------------------
#  import of python modules

import sys, string, os
import time
from string import *
from tables import *
from Tkinter import *
from time import *
from re import sub, findall
#import wx
#import wx.html
#-----------------------------


#---------------------------
#  import of qt modules

from qt import *
from qttable import QTable
#---------------------------


#-------------------------------
#  import of Alliances Modules

from medmesh import *
from grace import *
#-------------------------------


#------------------------------------
#  Frames

Frames = ['Title',\
          'Units',\
          'Physics_Software',\
          'Chemistry_Tool',\
          'Point_Concentration_Over_Time',\
          'Concentration_Over_Space_And_Time',\
          'Postprocessing',\
          'Interactive_Contours',\
          'Postprocessing_Contours',\
          'Database',\
          'Aqueous_Component_Species',\
          'Aqueous_Secondary_Species',\
          'Mineral_Phase',\
          'Exchange_Master_Species',\
          'Exchange_Species',\
          'Surface_Master_Species',\
          'Surface_Species',\
          'Aqueous_Solution',\
          'Equilibrium_Phases',\
          'Exchange',\
          'Surface',\
          'Kinetics',\
          'Gas_Phase',\
          'Materials',\
          'Mesh_Direction',\
          'Mesh_Line_In_I',\
          'Mesh_Line_In_I_Parameters',\
          'Mesh_Line_In_J',\
	  'Module_Editor',\
          'Mesh_Line_In_J_Parameters',\
          'Set_Zones',\
          'Hydraulic_BC',\
          'Hydraulic_BC_Value',\
          'Modflow_Solver_Parameters',\
          'Mt3d_Solver_Parameters',\
          'Chemistry_Solver_Parameters',\
          'Run']
#------------------------------------



#------------------------------------
#  Comments associated to the upper part of the specific frame

Comments = {'Title': 'This frame is used to give a title to the study.',\
            'Units': 'This frame is used to define Units.',\
            'Physics_Software': 'Through this frame, the user determines the phenomenology to simulate,\nand thereafter the tools to be used for this simulation.',\
            'Chemistry_Tool': 'The user sets up here the tool he wants to use.\nThis choice determines the way a state will be defined.\nRefer to the on line help for a detailed explanation.',\
            'Point_Concentration_Over_Time': 'This frame is used to plot over species concentration time species evolution.',\
            'Concentration_Over_Space_And_Time': 'This frame is used to plot species evolution over space \n in terms of iteration frequency.',\
            'Postprocessing': '',\
            'Interactive_Contours': '',\
            'Postprocessing_Contours': 'This frame is used to define contours of elements to be saved for postprocessing.',\
            'Database': 'Here, the user makes the choice of the database to be emploied for the simulation.',\
            'Aqueous_Component_Species': 'The user can define here addenda to the available database.\nAqueous primary species are to be defined here in association with the molar weight and the alkalinity.\nComponent species are not reduced here to species names but can be associated to different oxydation states.',\
            'Aqueous_Secondary_Species': 'For the moment, the aqueous secondary species to be defined\nmust be the first element of the list.',\
            'Mineral_Phase': 'This frame is used to define the name, the chemical reaction, logK, \nand Temperature dependency of log K for each mineral that is used for \nspeciation and transport simulations.\nOnly additions and modifications of the available simulation database are introduced here. The name must be less than 20 characters',\
            'Exchange_Master_Species': 'This frame is used to define the name of an exchange site and the  \nassociated exchange master species formula that is used in simulations. \nOnly additions or modifications, specific to the ongoing simulation, of the available data file\nare introduced here.',\
            'Exchange_Species': 'This frame is used to define a half reaction and relative log K\nfor each exchange species. Only additions and modifications of the available \nsimulation database are introduced here.',\
            'Surface_Master_Species': 'This frame is used to define the name of a surface binding site and the  \nassociated surface master species formula that is used in simulations.\nOnly additions or modifications, specific to the ongoing simulation, of the available data file\nare introduced here.',\
            'Surface_Species': 'This frame is used to define a half reaction and relative log K\nfor each surface species. Only additions and modifications of the available\nsimulation database are introduced here.',\
            'Aqueous_Solution': 'This frame is used to define the temperature, the pH,the pe and chemical composition \nof a chemical state. The chemical state is defined through a list of element names \nor element valence names and their associated concentration in the solution.\nThe default temperature is 25°C, this value can be modified; netherveless it\'s modification has no \ninfluence on the simulated phenomenology.',\
            'Equilibrium_Phases': 'This frame is used to define the amounts of an assemblage \nof pure phases that can react with the aqueous phase \nthrough dissolution or precipitation while achieving equilibrium.',\
            'Exchange': 'This frame is used to define the amount of an assemblage of exchangers\nrelated to an aqueous solution. The initial composition can be \ndefined in two ways:\n     (1) explicitly by defining the quantity of exchange species  \n     (2) relating the amount of exchange species to ions of a mineral phase.',\
            'Surface': 'This frame is used to define the amount of a surface\nrelated to an aqueous solution. The initial composition can be\ndefined in two ways:\n     (1) explicitly by defining the quantity of exchange species\n     (2) relating the amount of exchange species to ions of a mineral phase.',\
            'Kinetics': 'This frame enables a kinetic law to be defined by the user.\nSee the on line help for a detailed discussion of the available kinetic law.',\
            'Gas_Phase': 'This frame is used to define the amount of a gas phase\nthat can react with an aqueous phase through\ndissolution or evaporation while achieving equilibrium.',\
            'Materials': 'The user defines here all necessary properties of a solid material\nfor the simulation of the involved phenomenology',\
            'Mesh_Direction': 'The user will define through this frame the point distribution over the two cartesian axes.',\
            'Mesh_Line_In_I': 'This frame is used, to define a new interval discretization\nor to modify an old one, for the X direction.',\
            'Mesh_Line_In_I_Parameters': 'This frame is used to define meshing parameters\nfor the concerned interval in the I direction.\nThe geometric ratio should lie between 0.8 and 1.2.',\
            'Mesh_Line_In_J': 'This frame is used, to define a new interval discretization\nor to modify an old one, for the X direction.',\
            'Mesh_Line_In_J_Parameters': 'This frame is used to define meshing parameters\nfor the concerned interval in the J direction.\nThe geometric ratio should lie between 0.8 and 1.2.',\
            'Set_Zones': 'This frame enables the user to make the association between geometry,\nmaterials and aqueous states.',\
            'Hydraulic_BC': 'This frame enables the user to specify hydraulic boundary conditions.',\
            'Hydraulic_BC_Value': 'This frame enables the user to specify the head associated to the hydraulic boundary condition.',\
            'setDarcyVelocity': 'for an uniform flow,\nthe user can specify here the Darcy velocity components.',\
            'Modflow_Solver_Parameters': 'The version 2 of the package should be used here',\
            'udm_import': 'Through this frame, the user can import its own modules',\
            'Module_Editor': 'Through this frame, the user can write down its own module \nthereafter to be used through an import.',\
            'Mt3d_Solver_Parameters': 'This frame can by used to modify default spatial approximation\ndefault algebraic system solver and associated parameters.\n'\
	                              'The upwind discretisation scheme has to be used carefully.',\
            'Chemistry_Solver_Parameters': 'This frame is used to modify Phreeqc convergence parameters.\nIt should only be used by advanced users.',\
            'Iterate': 'the user will define here: the simulation time\n,the coupling algorithm and associated parameters.',\
            'hydraulicRun': '',\
            'Tables': 'Within this frame, the user can define output tables over times to be used for posprocessing.',\
            'Materials': 'This frame is used to define the properties of the different materials over the domain.',\
            'Summary': 'Within this frame, the user can add notes and comments to the study.\n A file can be loaded and its content\n will be placed in the file named by the study name with txt as extension.'}

#------------------------------------




#------------------------------------
#  Tooltips

Tooltips = {}
#------------------------------------



#------------------------------------
#  Booleans

TRUE                              = 1
FALSE                             = 0
case_open                         = 0
Passed_Into_TitleFrame            = 0
Passed_Into_UnitsFrame            = 0
Passed_Into_Physics_SoftwareFrame = 0
#------------------------------------



#----------------------------------------------------------------------------
#  The following parameters are used to set the Spacing and Margin properties
#  of a frame.

    #  - Marge:
    #     It is the distance (in pixels) between the innermost pixel of
    #     the frame and he outermost pixel of the rectangle inside the frame.

    #  - Space:
    #     It is the space between widgets inside the frame.

    #  - QVBoxSpace:
    #     It is the space between widgets inside a QVBox (Qt Vertical Box).

Marge      = 5
Space      = 5
QVBoxSpace = 10
#----------------------------------------------------------------------------


import_boolean = 0


#============================================================================
#
#   DEFINE MENU GLOBAL PARAMETERS (BEGINNING)
#
#===============================================


#------------------------------------
#  TitleOfTheStudyFrame Parameters
#------------------------------------
Title = 'example_1'
#------------------------------------



#----------------------------------
#  SetUnitsFrame Parameters
#----------------------------------
Concentration_Unit      = 'moles/l'
Density_Unit            = 'kg/m3'
Dispersivity_Unit       = 'm'
EffectiveDiffusion_Unit = 'm2/s'
Enthalpy_Unit           = 'J/kg'
Head_Unit               = 'm'
Length_Unit             = 'm'
Permeability_Unit       = 'm/s'
Temperature_Unit        = 'Celcius'
Time_Unit               = 's'
#----------------------------------
from geoiaux import *


#-------------------------------
#  WhichSolverFrame Parameter
#-------------------------------
Solver = 'Modflow_Mt3d_PhreeqC'
PorosityState = 'constant'

Thermal = 'Off'
#-------------------------------



#---------------------------------
#  ChemistryToolFrame Parameter
#---------------------------------
ChemistryTool = 'PhreeqC'
#---------------------------------



#-------------------------------------------------------------
#  InteractiveXYPlotFrame Parameters (Time)
#-------------------------------------------------------------
InteractiveXYPlot_Parameters_list                 = [0, 0, 1]
InteractiveXYPlot_AqueousComponentsToPlot_list    = []
InteractiveXYPlot_AvailableAqueousComponents_list = []
#-------------------------------------------------------------



#---------------------------------------------------------------------------
#  InteractiveXYPlotFrame Parameters (Space & Time)
#---------------------------------------------------------------------------
InteractiveXYPlot_Space_and_Time_Parameters_list                 = ['I', 10]
InteractiveXYPlot_Space_and_Time_ElementsToPlot_list             = []
#---------------------------------------------------------------------------



#----------------------------------------
# TablesFrame Parameters
#----------------------------------------
ExpectedOutputs_list = []
Times_list           = []
#----------------------------------------



#----------------------------------------
# PostprocessingXYPlotFrame Parameter
#----------------------------------------
PostprocessingXYPlot_Parameters_list = []
Postprocessing_ElementsToPlot_list   = []
#----------------------------------------



#-------------------------------------------------------
#  InteractiveContoursFrame Parameters
#-------------------------------------------------------
InteractiveContours_Parameters_list                 = []
InteractiveContours_AqueousComponentsToPlot_list    = []
InteractiveContours_AvailableAqueousComponents_list = []
#-------------------------------------------------------



#------------------------------------------------------------------
# PostprocessingContoursFrame Parameters
#------------------------------------------------------------------
PostprocessingContours_Parameters_list                 = [200, 's']
PostprocessingContours_AqueousComponentsToPlot_list    = []
PostprocessingContours_AvailableAqueousComponents_list = []
#------------------------------------------------------------------


#==========================================
#
#   DEFINE MENU GLOBAL PARAMETERS (END)
#
#============================================================================





#============================================================================
#
#   CHEMISTRY MENU GLOBAL PARAMETERS (BEGINNING)
#
#===================================================


   #=========================================================================
   #   CHEMISTRY BASE ADDENDA (BEGINNING)
   #================================================


#-------------------------------------------------------------
#  DefaultDatabaseFrame Parameter
#----------------------------------------------------------------
DefaultDatabase = 'llnl.dat'
Available_Databases_list = ['phreeqc.dat']

try:
    fileName_path = os.environ ['ALLIANCES_DAT'] + '/share/alliances/resources/phreeqc.dat'
except:
    fileName_path = os.environ ['ALLI_BUILD'] + '/share/alliances/resources/phreeqc.dat'
    

Database_Solution_Species_list        = []

Database_Components_list               = []
Database_ComponentSpecies_Name_list    = []
Database_ComponentSpecies_Formula_list = []
Database_Components_Log_k_list         = []
Database_Components_gfw_list           = []

Database_AqueousSpecies_list            = []
Database_AqueousSpecies_Formula_list    = []
Database_AqueousSpecies_Log_k_list      = []
Database_AqueousSpecies_Species_list    = []

Database_Phases_Names_list   = []
Database_Phases_Formula_list = []
Database_Phases_Species_list = []
Database_Phases_Log_k_list   = []
Database_Phases_Delta_h_list = []

Database_ExchangeMasterSpecies_list         = []
Database_ExchangeMasterSpecies_Formula_list = []

Database_Exchange_Species_list        = []

Database_SurfaceMasterSpecies_list         = []
Database_SurfaceMasterSpecies_Formula_list = []

Database_SurfaceSpecies_list            = []
Database_SurfaceSpecies_Log_k_list      = []
Database_SurfaceSpecies_Reactants_list  = []

Database_gases_Names_list = []
#----------------------------------------------------------------



#-----------------------------------------
#  AqueousMasterSpeciesFrame Parameters
#-----------------------------------------
Components_list               = []
ComponentSpecies_Name_list    = []
ComponentSpecies_Formula_list = []
Components_Properties_list    = []
#-----------------------------------------



#---------------------------------------------------
#  AqueousSpeciesFrame Parameters
#---------------------------------------------------
AqueousSpecies_list            = []
AqueousSpecies_Formula_list    = []
AqueousSpecies_Properties_list = []
AqueousSpecies_Species_list    = []
#---------------------------------------------------



#----------------------------------
#  MineralPhasesFrame Parameters
#----------------------------------
MineralPhases_list            = []
MineralPhases_Formula_list    = []
MineralPhases_Properties_list = []
MineralPhases_Species_list    = []

#  Initialization parameters:
Default_log_k    = 0.0
Default_Enthalpy = 0.0
Default_Density  = 3000.0
#----------------------------------



#------------------------------------------
#  ExchangeMasterSpeciesFrame Parameters
#------------------------------------------
ExchangeMasterSpecies_list         = []
ExchangeMasterSpecies_Formula_list = []
#------------------------------------------



#------------------------------------
#  ExchangeSpeciesFrame Parameters
#------------------------------------
ExchangeSpecies_list            = []
ExchangeSpecies_Properties_list = []
ExchangeSpecies_Reactants_list  = []

#  Debye-Huckel Parameters
DebyeHuckel_a = 4.0
DebyeHuckel_b = 0.0

Default_DebyeHuckel_a = 4.0
Default_DebyeHuckel_b = 0.0
#------------------------------------



#----------------------------------------------------------
#  Data_SurfaceComplexationMasterSpeciesFrame Parameters
#----------------------------------------------------------
SurfaceMasterSpecies_list         = []
SurfaceMasterSpecies_Formula_list = []
#----------------------------------------------------------



#----------------------------------------------------
#  Data_SurfaceComplexationSpeciesFrame Parameters
#----------------------------------------------------
SurfaceSpecies_list            = []
SurfaceSpecies_Properties_list = []
SurfaceSpecies_Reactants_list  = []
#----------------------------------------------------


   #=======================================================
   #   CHEMISTRY BASE ADDENDA (END)
   #===========================================================================


   #===========================================================================
   #   CHEMICAL STATE DEFINITION (BEGINNING)
   #=======================================================


#-----------------------------------------
#  AqueousStateFrame Parameters
#-----------------------------------------
AqueousStates_list            = []
AqueousStates_Properties_list = []
AqueousStates_Species_list    = []

#  Initialization parameters:
AqueousStates_Default_Temperature = 25.0
AqueousStates_Default_pH          = 7.0
AqueousStates_Default_pe          = 4.0
AqueousStates_Default_Eh          = 0.23668639
#-----------------------------------------



#-----------------------------------------------
#  State_EquilibriumPhasesFrame Parameters
#-----------------------------------------------
AqueousStates_MineralPhases_list            = []
AqueousStates_MineralPhases_Properties_list = []
#-----------------------------------------------



#-------------------------------------------------
#  State_IonExchangeFrame Parameters
#-------------------------------------------------
AqueousStates_ExchangeSpecies_list            = []
AqueousStates_ExchangeSpecies_Properties_list = []
#-------------------------------------------------



#---------------------------------------------------------
#  State_SurfaceComplexationCompositionFrame Parameters
#---------------------------------------------------------
AqueousStates_SurfaceSpecies_list            = []
AqueousStates_SurfaceSpecies_Properties_list = []
#---------------------------------------------------------



#----------------------------------------------
#  State_KineticRatesFrame Parameters
#----------------------------------------------
KineticRates_list                          = []
AqueousStates_KineticRates_list            = []
AqueousStates_KineticRates_Properties_list = []

## Default Values:
Rate                   = "Standard"
TemkinNumber           = 1.0
KineticConstant        = 1.0
InitialExchangeSurface = 1.0
SphereModelExponent_On = 0
SphereModelExponent    = 0.6666
#----------------------------------------------



#-------------------------------------
#  State_GasPhaseFrame Parameters
#-------------------------------------
AqueousStates_Gas_list            = []
AqueousStates_Gas_Properties_list = []
#-------------------------------------



   #=======================================================
   #   CHEMICAL STATE DEFINITION (END)
   #===========================================================================


#==========================================================
#
#   CHEMISTRY MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   TRANSPORT MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#--------------------------------
#  MaterialsFrame Parameters
#--------------------------------
Materials_list            = []
Materials_Properties_list = []
DiffusionLaws_dict = {}
DiffusionState = "Constant"

#  Initialization parameters:
KxPermeability           = 1.0
KyPermeability           = 1.0
KzPermeability           = 1.0
EffectivePorosity        = 1.0
EffectiveDiffusion       = 4.e-10
LongitudinalDispersivity = 1.0
TransverseDispersivity   = 0.1

MaterialConductivity = 0.0
SpecificHeatCapacity = 0.0
#--------------------------------
var_diff_list = []



#--------------------------------------------------------------------
#  DefaultParametersFrame Parameters (dedicated to MaterialsFrame)
#--------------------------------------------------------------------
DefaultKxPermeability           = 1.0
DefaultKyPermeability           = 1.0
DefaultKzPermeability           = 1.0
DefaultEffectivePorosity        = 1.0
DefaultEffectiveDiffusion       = 4.e-10
DefaultLongitudinalDispersivity = 1.0
DefaultTransverseDispersivity   = 0.1
#--------------------------------------------------------------------



#--------------------------------------------
#  MeshBuildingUpDirectionFrame Parameters
#--------------------------------------------
MeshLine_Direction = "I"
#--------------------------------------------



#--------------------------------
#  MeshLineInIFrame Parameters
#--------------------------------
GridLineInI      = 'New'
LineNumberInI    = 0
NumberOfLinesInI = 0
#--------------------------------



#------------------------------------------
#  MeshLineInIParametersFrame Parameters
#------------------------------------------
Mesh_list_InI = []

MeshLineInINumberOfCells  = 0
MeshLineInILength         = 0
MeshLineInIGeometricRatio = 1
#------------------------------------------



#--------------------------------
#  MeshLineInJFrame Parameters
#--------------------------------
GridLineInJ      = 'New'
LineNumberInJ    = 0
NumberOfLinesInJ = 0
#--------------------------------



#------------------------------------------
#  MeshLineInJParametersFrame Parameters
#------------------------------------------
Mesh_list_InJ = []

MeshLineInJNumberOfCells  = 0
MeshLineInJLength         = 0
MeshLineInJGeometricRatio = 1
#------------------------------------------

Medfile = ''

#---------------------------------------
#  SetZonesFrame Parameters
#---------------------------------------
Zones_list                      = []
Zone_Material_AqueousState_list = []

BoundaryConditionTimeVariation_dict = {}
#---------------------------------------

Unstructured_Zone_Material_list = []


#-------------------------------
#  HydraulicBCFrame Parameter
#-------------------------------
Zone_BCKind_list = []
#-------------------------------

UnstructuredHydraulicBC_list = []

#-------------------------------------
#  HydraulicBCValuesFrame Parameter
#-------------------------------------
BCValues_list = []
#-------------------------------------



#-------------------------------------
#  SetDarcyVelocity Parameter
#-------------------------------------
DarcyVelocity_kind = 'By Component'
DarcyVelocity_list = ['0.0', '0.0', '0.0']
#-------------------------------------


#==========================================================
#
#   TRANSPORT MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   SOLVE MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#--------------------------------------------------------
#  SolverParametersFrame Parameters
#--------------------------------------------------------
   #  Modflow:
Modflow_accl   = 1.0           #  Under Relaxation Factor
Modflow_mxiter = 200           #  Number Of Iterations
Modflow_hclose = 1e-11         #  Residual Convergence

Modflow_Default_accl   = 1.0           #  Under Relaxation Factor
Modflow_Default_mxiter = 200           #  Number Of Iterations
Modflow_Default_hclose = 1e-11         #  Residual Convergence

   #  Mt3d:
Mt3d_mxiter                          = 1
Mt3d_iter1                           = 30
Mt3d_accl                            = 1.0
Mt3d_cclose                          = 1e-15
Mt3d_ConjugateGradientPreconditioner = 'JACOBI'
Mt3d_advection                       = 'TVD'

Mt3d_Default_mxiter                          = 1
Mt3d_Default_iter1                           = 30
Mt3d_Default_accl                            = 1.0
Mt3d_Default_cclose                          = 1e-15
Mt3d_Default_ConjugateGradientPreconditioner = 'JACOBI'
Mt3d_Default_advection                       = 'TVD'

   #  PhreeqC:
PhreeqC_NumberOfIterations   = 500
PhreeqC_ConvergenceCriterion = 1.e-15
PhreeqC_KNOBS = ''
PhreeqC_pe_step_size_list = ['0', '']

PhreeqC_Default_NumberOfIterations   = 500
PhreeqC_Default_ConvergenceCriterion = 1.e-15
PhreeqC_Default_KNOBS = ''
PhreeqC_Default_pe_step_size_list = ['0', '']

   #  Chess:
   #  a voir (id PhreeqC??)

   #  Traces:
Traces_Parameters = {'preconditioner': 'NEUM', 'accelerator': 'cg', 'iterSolver': 1000, 'tolSolver': 1e-14, 'thetaScheme': 1, 'library': 'Gauss'}
#--------------------------------------------------------


#-------------------------------
#  InitializeFrame Parameters
#-------------------------------
#
#-------------------------------


#==========================================================
#
#   SOLVE MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   RUN MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#------------------------------------------------
#  IterateFrame Parameters
#------------------------------------------------
Iterate_Algorithm = 'One_Step'

Iterate_InitialTime         = 0
Iterate_InitialTimeStepSize = 0
Iterate_SimulationTime      = 0

  #  for CC, TC, or TT Algorithms:
Iterate_MinTimeStep                       = 0
Iterate_MaxTimeStep                       = 0
Iterate_IterationTargetNumberForThePicard = 20
Iterate_MaxOfIterationsForThePicard       = 40
Iterate_CouplingPrecision                 = 1.e-5
Iterate_RelaxationMinFactor               = 0.8
Iterate_RelaxationMaxFactor               = 1.05
#------------------------------------------------


#==========================================================
#
#   RUN MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   DISPLAY MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#--------------------------------------
#  GridFrame Parameters
#--------------------------------------

#--------------------------------------



#--------------------------------------
#  ContoursFrame Parameters
#--------------------------------------

#--------------------------------------



#--------------------------------------
#  VelocityVectorsFrame Parameters
#--------------------------------------

#--------------------------------------



#==========================================================
#
#   DISPLAY MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   PLOT MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#--------------------------------------
# PostprocessingVariablesToPlotFrame
#--------------------------------------
PostprocessingVariablesToPlot_list = []
#--------------------------------------



#-----------------------------------
# PostprocessingFrame1 Parameter
#-----------------------------------
Postprocessing1_Parameters_list = []
#-----------------------------------



#----------------------------------------
# PostprocessingFrame2 Parameters
#----------------------------------------
Postprocessing2_VariablesToPlot_list = []
Postprocessing2_tmin = 0
Postprocessing2_tmax = 1
#----------------------------------------


#==========================================================
#
#   PLOT MENU GLOBAL PARAMETERS (END)
#
#==============================================================================





#==============================================================================
#
#   PARALLEL MENU GLOBAL PARAMETERS (BEGINNING)
#
#==========================================================


#----------------------------------------
# ParallelFrame Parameter
#----------------------------------------
Parallel_NumberOfNodes = 1
#----------------------------------------


#==========================================================
#
#   PARALLEL MENU GLOBAL PARAMETERS (END)
#
#==============================================================================




#-------------------------------------
#  EquilibrateFrame Parameter
#-------------------------------------
AqueousSolutionToEquilibrate_list = []
#  liste ou pas ????
#  pour l instant liste a 1 element...
#-------------------------------------






# rajouts Traces

InitialConditions_list = []
BoundaryConditions_list = []




# QProcess
IsRunning = 0




#========================================
#                                                                               
#  GLOBAL PARAMETERS (END)
#
#====================================================================


class Imports (QDialog):

    def __init__(self, parent = None, name = None, modal = 0, fl = 0):

        QDialog.__init__(self, parent, name, modal, fl)

        if name == None:
            self.setName('UserDefinedModulesImports')

        self.setCaption('User Defined Modules: Imports')
        setPosition (self)

        self.mainLayout = QVBoxLayout (self, 10, -1, 'imports_mainLayout')
        self.mainLayout.setMargin (Marge)
        self.mainLayout.setSpacing (Space)
	
        self.QHGroupBoxA = QHGroupBox (self)
	QToolTip.add (self.QHGroupBoxA, Comments ['udm_import'])

        self.QHGroupBoxA.setMargin (5)
        self.QHGroupBoxA.setMidLineWidth (0)
        self.QHGroupBoxA.setMinimumSize (80, 20)
        self.mainLayout.addWidget (self.QHGroupBoxA)

        self.QHGroupBox0 = QHGroupBox (self)
        self.QHGroupBox0.setMargin (10)
        self.QHGroupBox0.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox0)
        
        self.ImportsComboBox = QComboBox (self.QHGroupBox0)
        #self.ImportsComboBox.setMinimumSize (150, 25)

        self.QHGroupBox2 = QHGroupBox (self)
        self.QHGroupBox2.setMargin (10)
        self.QHGroupBox2.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox2)

        self.OKPB = QPushButton ('OK', self.QHGroupBox2)
        self.AddPB = QPushButton ('Add', self.QHGroupBox2)
        self.DeletePB = QPushButton ('Delete', self.QHGroupBox2)
        self.HelpPB = QPushButton ('&Help', self.QHGroupBox2)

        #self.connect (self.OKPB, SIGNAL ('clicked ()'), self.ok)
        #self.connect (self.HelpPB, SIGNAL ('clicked ()'), self.help)
    
        self.show ()

#
# Infos of Med Meshings
#
class mesh_info (QDialog):

    def __init__(self, parent = None,  name = None,modal = 0, fl = 0):
        QDialog.__init__(self, parent, name, modal, fl)

        if name == None:
            self.setName('Grid_Info')

        self.setCaption('Grid Info')
        self.setMinimumSize (450, 450)
        setPosition (self)

        self.mainLayout = QVBoxLayout (self, 10, -1, 'mesh_info_mainLayout')
        self.mainLayout.setMargin (Marge)
        self.mainLayout.setSpacing (Space)

        self.QHGroupBoxA = QHGroupBox (self)
	#QToolTip.add (self.QHGroupBoxA, mesh_info_comment)

        self.QHGroupBoxA.setMargin (5)
        self.QHGroupBoxA.setMidLineWidth (0)
        self.QHGroupBoxA.setMinimumSize (80, 20)
        self.mainLayout.addWidget (self.QHGroupBoxA)

        self.QHGroupBox0 = QHGroupBox (self)
        self.QHGroupBox0.setMargin (10)
        self.QHGroupBox0.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox0)
        
        self.InfoTextBrowser = QTextBrowser (self.QHGroupBox0)
        self.InfoTextBrowser.setMinimumSize (300, 350)

        self.QHGroupBox2 = QHGroupBox (self)
        self.QHGroupBox2.setMargin (10)
        self.QHGroupBox2.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox2)

        self.OKPB = QPushButton ('OK', self.QHGroupBox2)
        self.HelpPB = QPushButton ('&Help', self.QHGroupBox2)

        self.connect (self.OKPB, SIGNAL ('clicked ()'), self.ok)
        self.connect (self.HelpPB, SIGNAL ('clicked ()'), self.help)


# debug_info

       
        try:
            self.InfoTextBrowser.append ('Name of the meshing: \"'+str (mw.mesh_name)+'\"')        
            self.InfoTextBrowser.append ('\nDimension of the meshing: '+str (mw.mesh_dims))
            self.InfoTextBrowser.append ('Number of nodes: '+str (mw.mesh_nb_nodes))
            self.InfoTextBrowser.append ('\nZones: '+str (mw.mesh_zones_names))
            self.InfoTextBrowser.append ('\nBoundaries: '+str (mw.mesh_boundaries_names))
            self.InfoTextBrowser.append ('\nNumber of meshes:') 
            self.InfoTextBrowser.append ('     - MED_POINT1 (1):     '+str (mw.nbElements_CELL_1))            
            self.InfoTextBrowser.append ('     - MED_SEG2 (102):     '+str (mw.nbElements_CELL_102))            
            self.InfoTextBrowser.append ('     - MED_SEG3 (103):     '+str (mw.nbElements_CELL_103))            
            self.InfoTextBrowser.append ('     - MED_TRIA3 (203):    '+str (mw.nbElements_CELL_203))            
            self.InfoTextBrowser.append ('     - MED_TRIA6 (206):    '+str (mw.nbElements_CELL_206))            
            self.InfoTextBrowser.append ('     - MED_QUAD4 (204):    '+str (mw.nbElements_CELL_204))
            self.InfoTextBrowser.append ('     - MED_QUAD8 (208):    '+str (mw.nbElements_CELL_208))
            self.InfoTextBrowser.append ('     - MED_TETRA4 (304):   '+str (mw.nbElements_CELL_304))
            self.InfoTextBrowser.append ('     - MED_TETRA10 (310):  '+str (mw.nbElements_CELL_310))
            self.InfoTextBrowser.append ('     - MED_HEXA8 (308):    '+str (mw.nbElements_CELL_308))
            self.InfoTextBrowser.append ('     - MED_HEXA20 (320):   '+str (mw.nbElements_CELL_320))
            self.InfoTextBrowser.append ('     - MED_PENTA6 (306):   '+str (mw.nbElements_CELL_306))
            self.InfoTextBrowser.append ('     - MED_PENTA15 (315):  '+str (mw.nbElements_CELL_315))
            self.InfoTextBrowser.append ('     - MED_PYRA5 (305):    '+str (mw.nbElements_CELL_305))            
            self.InfoTextBrowser.append ('     - MED_PYRA13 (313):   '+str (mw.nbElements_CELL_313))
            self.InfoTextBrowser.append ('\nNumber of faces:') 
            self.InfoTextBrowser.append ('     - MED_TRIA3 (203): '+str (mw.nbElements_FACE_203))            
            self.InfoTextBrowser.append ('     - MED_TRIA6 (206): '+str (mw.nbElements_FACE_206))            
            self.InfoTextBrowser.append ('     - MED_QUAD4 (204): '+str (mw.nbElements_FACE_204))
            self.InfoTextBrowser.append ('     - MED_QUAD8 (208): '+str (mw.nbElements_FACE_208))            
            self.InfoTextBrowser.append ('\nNumber of edges:') 
            self.InfoTextBrowser.append ('     - MED_SEG2 (102): '+str (mw.nbElements_EDGE_102))            
            self.InfoTextBrowser.append ('     - MED_SEG3 (103): '+str (mw.nbElements_EDGE_103))            
            
            
        #self.InfoTextBrowser.append ('coordinates')
        #self.InfoTextBrowser.append (str (self.mesh_coordinates))
            self.InfoTextBrowser.setCursorPosition (0, 0)
            self.show ()

        except:
            self.MB = QMessageBox()
            self.MB.setCaption ('Error')
            self.MB.setText ('You have to read a med file at first.\nPlease use the Grid / Read menu.')
            self.MB.setIcon (QMessageBox.Critical)
            self.MB.show ()
    
    def ok (self):
    
        self.close ()    
        
    def help (self):
        
        mw.Help ()

#
# To let the user defining his modules
#
class edit_module (QFrame):

    def __init__(self, caption, parent = None, name = None):

        QFrame.__init__(self, parent, name)
        
        self.setMinimumSize (550, 450)
        self.caption = caption
        self.setCaption (caption)
        self.module_fileName = QString.null
        setPosition (self)

        self.mainLayout = QVBoxLayout (self, 10, -1, 'edit_module_mainLayout')
        self.mainLayout.setMargin (Marge)
        self.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #edit_module_comment = Comments ['Module_Editor']

        self.QHGroupBoxA = QHGroupBox (self)
	QToolTip.add (self.QHGroupBoxA, Comments ['Module_Editor'])

        self.QHGroupBoxA.setMargin (5)
        self.QHGroupBoxA.setMidLineWidth (0)
        self.QHGroupBoxA.setMinimumSize (80, 20)
        self.mainLayout.addWidget (self.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.QHGroupBox0 = QHGroupBox (self)
        self.QHGroupBox0.setMargin (10)
        self.QHGroupBox0.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox0)

        self.QTextEdit = QTextEdit (self.QHGroupBox0)
        self.QTextEdit.setMinimumSize (300, 350)
        
        self.QVGroupBox01 = QVGroupBox (self.QHGroupBox0)
        self.QVGroupBox01.setMargin (10)
        self.QVGroupBox01.setMidLineWidth (0)
        
        self.OpenPB = QPushButton ('&Open', self.QVGroupBox01)
        self.SavePB = QPushButton ('&Save', self.QVGroupBox01)
        self.SaveAsPB = QPushButton ('Save &As', self.QVGroupBox01)
        self.ClearPB = QPushButton ('Clear', self.QVGroupBox01)
        self.TestPB = QPushButton ('&Test', self.QVGroupBox01)

        self.connect (self.OpenPB, SIGNAL ('clicked ()'), self.Open)
        self.connect (self.SavePB, SIGNAL ('clicked ()'), self.save)
        self.connect (self.SaveAsPB, SIGNAL ('clicked ()'), self.saveAs)
        self.connect (self.ClearPB, SIGNAL ('clicked ()'), self.clear)
        self.connect (self.TestPB, SIGNAL ('clicked ()'), self.test)

        self.OpenPB.setAccel (Qt.CTRL + Qt.Key_O)
        self.SavePB.setAccel (Qt.CTRL + Qt.Key_S)
        self.SaveAsPB.setAccel (Qt.CTRL + Qt.Key_A)
        self.TestPB.setAccel (Qt.CTRL + Qt.Key_T)
	
#----------------------------------------------------------------------------------------------     

        self.QHGroupBox2 = QHGroupBox (self)
        self.QHGroupBox2.setMargin (10)
        self.QHGroupBox2.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QHGroupBox2)

        self.OKPB = QPushButton ('OK', self.QHGroupBox2)
        self.CancelPB = QPushButton ('Cancel', self.QHGroupBox2)
        self.HelpPB = QPushButton ('&Help', self.QHGroupBox2)

        self.connect (self.OKPB, SIGNAL ('clicked ()'), self.ok)
        self.connect (self.CancelPB, SIGNAL ('clicked ()'), self.cancel)
        self.connect (self.HelpPB, SIGNAL ('clicked ()'), self.help)

        self.show ()

    def Open (self):
    
        file = QFileDialog.getOpenFileName (QString.null, "*_user.py", self)  
        if file.isEmpty ():
            return
        self.module_fileName = str (file)
        try:
            load = open (self.module_fileName, 'r')
        except:
            return
        m = ''
        MC = QProgressDialog()
        MC.minimum = 0
        MC.maximum = 100
        MC.show ()
	
        for i in load.readlines ():
            m = m + i
        self.QTextEdit.setText (m)

    def save (self):

        if str (self.module_fileName) == '':
            self.saveAs()
            return
        try:
            user_module = open (str (self.module_fileName),'w+')
        except:
            self.saveMB = QMessageBox()
            self.saveMB.setCaption ('Error')
            self.saveMB.setText ('Could not write to\n'+self.module_fileName+'\nPlease take a look to its permissions: it may be read-only...')
            self.saveMB.setIcon (QMessageBox.Critical)
            self.saveMB.show ()
            return

        text = str (self.QTextEdit.text ())
        user_module.write (text)
        user_module.close ()	

    def saveAs (self):

        fn = QFileDialog.getSaveFileName ('./', '*_user.py', self)
        fn = str (fn)
        if fn != '':
            if fn [len (fn) - 8:] != '_user.py':    
                i = len (fn) - 1
                again = 1
                while i > -1 and again:
                    if fn [i] == '.':
                        again = 0
                        if '/' in fn [i:]:
                            fn = fn + '_user.py'
                        else:
                            fn = fn [:i] + '_user.py'
                    else:
                        pass
                    i = i-1
            else:
                pass
            fn = fn.replace (' ', '_')
            self.module_fileName = fn
            self.save ()
        else:
            pass

    def clear (self):
    
        nb = QMessageBox.warning (self, 'Warning', 'Do you really want to clear ?', QMessageBox.Yes | QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
        if nb == 3:         #  This number belongs to the "YES" button   
            self.QTextEdit.clear ()
        
    def test (self):

        import traceback    
        self.save ()            
        try:
            #sys.stderr = open ('traces.log', 'w')
            #sys.stdout = open ('traces2.log', 'w')
            execfile (self.module_fileName)
        except:
            #sys.stderr.write  ('truc')
            #case = open ('traces.log' , 'r')
            m = ''
            #for l in case.readlines ():
            #    m = m + l
            #case.close ()
            #print sys.stdout
            #print traceback.print_tb (traceback)
            #print traceback.print_exc ()
            self.testMB = QMessageBox()
            self.testMB.setCaption ('Error')
            #self.testMB.setText (str (m))
            self.testMB.setIcon (QMessageBox.Critical)
            self.testMB.show ()
        else:
            self.testMB2 = QMessageBox()
            self.testMB2.setCaption ('Info')
            self.testMB2.setText ('The syntax is ok.\nYou can import this module.')
            self.testMB2.setIcon (QMessageBox.Information)
            self.testMB2.show ()

# debug_edit_module


    def ok (self):

        self.save ()    
        self.close ()
    
    def cancel (self):
        
        self.close ()

    def help (self):

        mw.Help ()


#-------------------------
#  Useful mesh visualisation classes
class repere:
    
    def __init__(self,cv, xposition,yposition,name):
    
        self.name = name
        self.xposition = xposition
        self.yposition = yposition
        x= self.xposition
        y= self.yposition
        cv.create_line(x,y-3,x,y+4,fill='red')
        cv.create_line(x-3,y,x+3,y,fill='red')
        cv.create_text(x,y,fill='red',text='Gz')
        cv.create_line(x,y,x,y-20,fill='red')
        cv.create_text(x,y-20,fill='red',text='Gy')
        cv.create_line(x,y-20,x-3,y-17,fill='red')
        cv.create_line(x,y-20,x+3,y-17,fill='red')
        cv.create_line(x,y,x+20,y,fill='red')
        cv.create_text(x+20,y,fill='red',text='Gx')
        cv.create_line(x+20,y,x+17,y-3,fill='red')
        cv.create_line(x+20,y,x+17,y+3,fill='red')

class Mt3dTkMeshVis:
    
    def __init__(self,xgrid_end_points,ygrid_end_points,interv_x,interv_y):
    
        self.xgrid_end_points = xgrid_end_points
        self.ygrid_end_points = ygrid_end_points
        self.interv_x = interv_x
        self.interv_y = interv_y
        self.viewposition_x = 0
        self.viewposition_y = 0
        self.globalscaling = 1.0
        self.gdx = 0.
        self.gdy = 0.
        self.h = 512
        self.w = 512
        self.origin_x = self.h/5.
        self.origin_y = self.w/5.
        self.margin = 10
        lenx=self.h-self.origin_x-2*self.margin        
        leny=self.w-self.origin_y-2*self.margin
        coefx = lenx/self.xgrid_end_points[-1]
        coefy = leny/self.ygrid_end_points[-1]*self.ygrid_end_points[-1]/self.xgrid_end_points[-1]
        ind = 0
        for i in self.xgrid_end_points:
            self.xgrid_end_points[ind]*=coefx
            ind+=1
        ind = 0
        for i in self.ygrid_end_points:
            self.ygrid_end_points[ind]*=coefy
            ind+=1
        for i in self.xgrid_end_points:
            i =  self.origin_x + i
        for i in self.ygrid_end_points:
            i =  self.origin_y - i
        self.margin = 10
	
	self.fen1 = Tk()
        self.fen1.title("Mesh visualisation")
        self.can1 = Canvas(self.fen1,bg="black",height= self.h,width = self.w)
        self.can1.bind('<B3-Motion>',self.Zoom)
        self.can1.bind('<Button-2>',self.Initial)
        self.can1.bind('<B2-Motion>',self.Translate)
        self.can1.bind('<Button-1>',self.Isometry)
        self.can1.pack()

        ygrid_points = []
        ind = 0
        x = self.xgrid_end_points[0]
        origin_x = x
        xgrid_points = [x+self.margin]
        for i in interv_x:
            for j in range(0,i):
                len = abs(self.xgrid_end_points[ind+1]-self.xgrid_end_points[ind])/i
                x+=len
                xgrid_points.append(x+self.margin)
            ind+=1           
        ind = 0
        y = self.ygrid_end_points[0]
        origin_y = y
        ygrid_points = [y+self.margin]
        for i in interv_y:
            for j in range(0,i):
                len = abs(self.ygrid_end_points[ind+1]-self.ygrid_end_points[ind])/i
                y+=len
                ygrid_points.append(y+self.margin)
            ind+=1
        heigth = self.h
        width = self.w
        for x in xgrid_points:
            y0 = ygrid_points[0]
            for y in ygrid_points[1:]:
                self.can1.create_line(x,heigth-y0,x,heigth-y,width=1,fill='green')
                y0 = y
        for y in ygrid_points:
            x0 = xgrid_points[0]
            for x in xgrid_points[1:]:
                self. can1.create_line(x0,heigth-y,x,heigth-y,width=1,fill='green')
                x0 = x

        repere(self.can1,origin_x+self.margin,self.h-(origin_y+self.margin),'global')
        bou1 = Button(self.fen1,text = 'Quit',command =self.fen1.quit).pack()
	self.fen1.mainloop()
	self.fen1.destroy()

    def Zoom(self,event):
    
        xa = self.can1.canvasx(event.x)
        ya = self.can1.canvasx(event.y)
        if ya >= self.viewposition_y:
            self.can1.scale(ALL,self.origin_x,self.origin_y,1.1,1.1)
            ya = self.can1.canvasx(event.y)
            self.globalscaling*=1.1
            self.viewposition_x = int(xa)
            self.viewposition_y = int(ya)
        else:
            self.can1.scale(ALL,self.origin_x,self.origin_y,0.9,0.9)
            ya = self.can1.canvasx(event.y)
            self.globalscaling*=0.9
            self.viewposition_x = int(xa)
            self.viewposition_y = int(ya)
        return

    def Isometry (self,event):

        """ Enables to go back to initial 1.0 scaling """

        self.globalscaling = 1.0/self.globalscaling
        self.can1.scale(ALL,self.origin_x,self.origin_y,self.globalscaling,self.globalscaling)
        self.globalscaling=1
        xa = self.origin_x
        ya = self.origin_y
        self.can1.move(ALL, -self.gdx, -self.gdy);
        self.origin_x-= self.gdx
        self.origin_y-= self.gdy
        self.gdx = 0
        self.gdy = 0
        return

    def Translate(self,event):
    
        global viewposition_x,viewposition_y,origin_x,origin_y,gdx,gdy,xi,yi
        
        xa = int(self.can1.canvasx(event.x))
        ya = int(self.can1.canvasy(event.y))
        dx = int((-xa+xi)/100)
        dy = int((-ya+yi)/100)
        self.gdx +=dx
        self.gdy +=dy
        self.origin_x+= dx
        self.origin_y+= dy
        self.can1.move(ALL, dx, dy);
        return

    def Initial(self,event):
        global viewposition_x,viewposition_y,origin_x,origin_y,gdx,gdy,xi,yi
        xi = int(self.can1.canvasx(event.x))
        yi = int(self.can1.canvasy(event.y))
        return



#-------------------------------------------------------------------------------------------------- $ALLI_ROOT/ALLIANCES/src/Geoi
## class MyHtml(wx.Panel):
##     """
##     Html viewer
##     """
##     def __init__(self,parent,id):
##         wx.Panel.__init__(self,parent,id)
##         self.SetBackgroundColour("yellow")
##         self.html1 = wx.html.HtmlWindow(self,id,pos=(0,30),size = (602,310))
                                    
##         self.btn1 = wx.Button(self,-1,"Load Html File", pos=(0,0))
##         self.btn1.Bind(wx.EVT_BUTTON,self.OnLoadFile)
                                    
##         self.btn2 = wx.Button(self,-1,"Clear Page", pos=(120,0))
##         self.btn2.Bind(wx.EVT_BUTTON,self.OnClearPage)

##     def OnLoadFile(self,event):
##         dlg = wx.FileDialog(self,wildcard = "*.htm",style = wx.OPEN)
##         if dlg.ShowModal():
##             path = dlg.GetPath()
##             self.html1.LoadPage(path)
##         dlg.Destroy()

##     def OnClearPage(self,event):
##         self.html1.SetPage("")


#--------------------------------------------------------------------------------------------------

class ApplicationWindow (QMainWindow):

    def __init__(self):

        QMainWindow.__init__(self, None, 'ApplicationMainWindow', Qt.WDestructiveClose)

        self.setupCentralWidget ()
        self.filename = QString.null

    def setupCentralWidget (self):

        self.view = FCCentralWidget (self)
        self.view.show ()
        self.setCentralWidget (self.view)


        self.new_xpm = [
        "16 16 3 1",
        " 	c None",
        ".	c #000000000000",
        "X	c #FFFFFFFFFFFF",
        "                ",
        "   ......       ",
        "   .XXX.X.      ",
        "   .XXX.XX.     ",
        "   .XXX.XXX.    ",
        "   .XXX.....    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .XXXXXXX.    ",
        "   .........    ",
        "                ",
        "                "
        ]

        self.open_xpm = [
        "16 16 3 1",
        " 	c None",
        ".	c #000000000000",
        "X	c #FFFFFFFF0000",
        "                ",
        "                ",
        "         ....   ",
        "        .XXXX.  ",
        " .............. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .XXXXXXXXXXXX. ",
        " .............. ",
        "                "]

        self.save_xpm = [
        "16 16 3 1",
        " 	c None",
        ".	c #000000000000",
        "X	c #FFFFFFFFFFFF",
        "                ",
        "                ",
        "   .........    ",
        "  ...........   ",
        "  ........ ..   ",
        "  ...........   ",
        "  ...........   ",
        "  ...........   ",
        "  ...........   ",
        "  ...XXXXX...   ",
        "  ...XXXXX...   ",
        "  ...XXXXX...   ",
        "  ...XXXXX...   ",
        "   .........    ",
        "                ",
        "                "]
        


        #--------------------------------------------------
        #  Icons
        self.new_icon = QIconSet (QPixmap (self.new_xpm))
        self.open_icon = QIconSet (QPixmap (self.open_xpm))
        self.save_icon = QIconSet (QPixmap (self.save_xpm))
        #--------------------------------------------------


        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':

                #######################################
                #  MENUBAR: UNSTRUCTURED CASE
                #######################################

                #----------------------------
                # File Menu (Beginning)
                #----------------------------

                self.file = QPopupMenu (self)
                self.menuBar ().insertItem ('&File', self.file)
                QToolTip.add (self.file, 'File Menu')

                self.new_action = QAction ('New', self.new_icon, '&New', QAccel.stringToKey ('CTRL+N'), self)
                self.new_action.addTo (self.file)
                self.connect (self.new_action, SIGNAL ('activated()'), self.new)
                self.file.insertSeparator()
                
                self.open_action = QAction ('Open', self.open_icon, '&Open', QAccel.stringToKey ('CTRL+O'), self)
                self.open_action.addTo (self.file)
                self.connect (self.open_action, SIGNAL ('activated()'), self.open)
                self.file.insertSeparator()
                
                self.save_action = QAction ('Save', self.save_icon, '&Save', QAccel.stringToKey ('CTRL+S'), self)
                self.save_action.addTo (self.file)
                self.connect (self.save_action, SIGNAL ('activated()'), self.save)
                self.save_action.setEnabled (0)

                self.saveAsID = self.file.insertItem ('Save &As')
                self.file.connectItem (self.saveAsID, self.saveAs)
                self.file.setItemEnabled (self.saveAsID, 0)
                self.file.setAccel (Qt.CTRL + Qt.Key_A, self.saveAsID)
                self.file.insertSeparator()    
                
                self.hardcopyID = self.file.insertItem ('Hardcopy')
                #self.file.connectItem (self.hardcopyID, self.hardcopy)
                self.file.setItemEnabled (self.hardcopyID, 0)
                self.file.insertSeparator()        
                self.exitID = self.file.insertItem ('Exit')
                self.file.connectItem (self.exitID, self.exit)
                self.file.setItemEnabled (self.exitID, 1)
                self.file.setAccel (Qt.CTRL + Qt.Key_Q , self.exitID)
                
                #----------------------------
                # File Menu (End)
                #----------------------------
                
                #----------------------------
                #  Grid Menu (Beginning)
                #----------------------------
                
                self.grid_menu = QPopupMenu (self)
                self.menuBar().insertItem ('&Grid', self.grid_menu)
                QToolTip.add (self.grid_menu, 'Grid Menu')
                              
                self.readID = self.grid_menu.insertItem ('Read')
                self.grid_menu.connectItem (self.readID, self.read)
                self.grid_menu.setItemEnabled (self.readID, 1)
                self.grid_menu.insertSeparator ()                
                self.checkID = self.grid_menu.insertItem ('Check')
                self.grid_menu.connectItem (self.checkID, self.check)
                self.grid_menu.setItemEnabled (self.checkID, 0)
                self.grid_menu.insertSeparator ()                
                self.displayID = self.grid_menu.insertItem ('Display')
                self.grid_menu.connectItem (self.displayID, self.display)
                self.grid_menu.setItemEnabled (self.displayID, 0)
                self.grid_menu.insertSeparator ()                
                self.infoID = self.grid_menu.insertItem ('Info')
                self.grid_menu.connectItem (self.infoID, self.info)
                self.grid_menu.setItemEnabled (self.infoID, 0)
                self.grid_menu.insertSeparator ()                
                self.scaleID = self.grid_menu.insertItem ('Scale')
                self.grid_menu.connectItem (self.scaleID, self.scale)
                self.grid_menu.setItemEnabled (self.scaleID, 0)
                self.grid_menu.insertSeparator ()                
                self.smooth_swapID = self.grid_menu.insertItem ('Smooth / Swap')
                self.grid_menu.connectItem (self.smooth_swapID, self.smooth_swap)
                self.grid_menu.setItemEnabled (self.smooth_swapID, 0)
                self.grid_menu.insertSeparator ()     
                self.translateID = self.grid_menu.insertItem ('Translate')
                self.grid_menu.connectItem (self.translateID, self.translate)
                self.grid_menu.setItemEnabled (self.translateID, 0)
          
                #----------------------------
                #  Grid Menu (End)
                #----------------------------
                
                #----------------------------
                #  Define Menu (Beginning)
                #----------------------------
                
                self.define = QPopupMenu (self)
                self.menuBar().insertItem ('&Define', self.define)
                QToolTip.add (self.define, 'Define Menu')

        	self.Interactive = QPopupMenu (self)
        	self.over_timeID = self.Interactive.insertItem ('Point Concentration over Time')
        	self.Interactive.connectItem (self.over_timeID, self.interactive_XY_plot)
        	self.Interactive.setItemEnabled (self.over_timeID, 0)
        	self.Interactive.insertSeparator ()
        	self.over_space_and_timeID = self.Interactive.insertItem ('Concentration over Space and Time')
        	self.Interactive.connectItem (self.over_space_and_timeID, self.over_space_and_time)
        	self.Interactive.setItemEnabled (self.over_space_and_timeID, 0)

        	self.Plot = QPopupMenu (self)
    #       self.interactive_XY_plotID = self.Plot.insertItem ('Interactive')
    #	self.Plot.connectItem (self.interactive_XY_plotID, self.interactive_XY_plot)
    #	self.Plot.connectItem (self.interactive_XY_plotID, self.Interactive)
    #	self.Plot.setItemEnabled (self.interactive_XY_plotID, 0)
        	self.Plot.insertItem ('Interactive', self.Interactive)
        	self.Plot.insertSeparator ()
        	self.postprocessing_XY_plotID = self.Plot.insertItem ('Postprocessing')
        	self.Plot.connectItem (self.postprocessing_XY_plotID, self.postprocessing_XY_plot)
        	self.Plot.setItemEnabled (self.postprocessing_XY_plotID, 0)

        	self.Contours = QPopupMenu (self)
        	self.interactive_contoursID = self.Contours.insertItem ('Interactive')
        	self.Contours.connectItem (self.interactive_contoursID, self.interactive_contours)
        	self.Contours.setItemEnabled (self.interactive_contoursID, 0)
        	self.Contours.insertSeparator ()
        	self.postprocessing_contoursID = self.Contours.insertItem ('Postprocessing')
        	self.Contours.connectItem (self.postprocessing_contoursID, self.postprocessing_contours)
        	self.Contours.setItemEnabled (self.postprocessing_contoursID, 0)







                self.user_defined_function = QPopupMenu (self)
                self.interpretedID = self.user_defined_function.insertItem ('Interpreted  ')
                self.user_defined_function.connectItem (self.interpretedID, self.interpreted)
                self.user_defined_function.setItemEnabled (self.interpretedID, 0)
                self.user_defined_function.insertSeparator ()
                self.compiledID = self.user_defined_function.insertItem ('Compiled')
                self.user_defined_function.connectItem (self.compiledID, self.compiled)
                self.user_defined_function.setItemEnabled (self.compiledID, 0)
                self.user_defined_function.insertSeparator ()
                self.importsID = self.user_defined_function.insertItem ('Imports')
                self.user_defined_function.connectItem (self.importsID, self.imports)
                self.user_defined_function.setItemEnabled (self.importsID, 0)
                
                self.boundary_conditions_menu = QPopupMenu (self)
                self.HydraulicBCID = self.boundary_conditions_menu.insertItem ('Hydraulic B.C.')
                self.boundary_conditions_menu.connectItem (self.HydraulicBCID, self.unstructured_hydraulic_BC)
                self.boundary_conditions_menu.setItemEnabled (self.HydraulicBCID, 0)
                self.boundary_conditions_menu.insertSeparator ()
                self.ChemicalTransportBCID = self.boundary_conditions_menu.insertItem ('Chemical-Transport B.C.')
                self.boundary_conditions_menu.connectItem (self.ChemicalTransportBCID, self.unstructured_boundary_conditions)
                self.boundary_conditions_menu.setItemEnabled (self.ChemicalTransportBCID, 0)
#debug_menu                             
                self.title_of_the_studyID = self.define.insertItem ('Title')
                self.define.connectItem (self.title_of_the_studyID, self.title_of_the_study)
                self.define.setItemEnabled (self.title_of_the_studyID, 1)
                self.define.insertSeparator ()
                self.unitsID = self.define.insertItem ('Units')
                self.define.connectItem (self.unitsID, self.units)
                self.define.setItemEnabled (self.unitsID, 0)
                self.define.insertSeparator ()
                self.problemID = self.define.insertItem ('Problem')
                self.define.connectItem (self.problemID, self.problem)
                self.define.setItemEnabled (self.problemID, 0)
                self.define.insertSeparator ()                
                self.fluidID = self.define.insertItem ('Fluid Properties')
                #self.define.connectItem (self.fluidID, self.fluid)
                self.define.setItemEnabled (self.fluidID, 0)
                self.define.insertSeparator ()                
                self.materialsID = self.define.insertItem ('Materials')
                self.define.connectItem (self.materialsID, self.materials)
                self.define.setItemEnabled (self.materialsID, 0)
                self.define.insertSeparator ()                
                #self.phasesID = self.define.insertItem ('Phases')
                #self.define.connectItem (self.phasesID, self.phases)
                #self.define.setItemEnabled (self.phasesID, 1)
                #self.define.insertSeparator ()                
                self.initial_conditionsID = self.define.insertItem ('Initial Conditions')
                self.define.connectItem (self.initial_conditionsID, self.initial_conditions)
                self.define.setItemEnabled (self.initial_conditionsID, 0)
                self.define.insertSeparator ()     
                self.define.insertItem ('Boundary Conditions', self.boundary_conditions_menu)               
                self.define.insertSeparator ()                
                self.periodic_conditionsID = self.define.insertItem ('Periodic Conditions')
                self.define.connectItem (self.periodic_conditionsID, self.periodic_conditions)
                self.define.setItemEnabled (self.periodic_conditionsID, 0)
                self.define.insertSeparator ()
                self.define.insertItem ('XY Plot', self.Plot)
                self.define.insertSeparator ()
                self.define.insertItem ('Contours', self.Contours)
                self.define.insertSeparator ()
		self.tablesID = self.define.insertItem ('Tables')
		self.define.connectItem (self.tablesID, self.tables)
		self.define.setItemEnabled (self.tablesID, 0)		                
                #self.define.insertSeparator ()
                #self.define.insertItem ('User Defined Modules      ', self.user_defined_function)
                
                #----------------------------
                #  Define Menu (End)
                #----------------------------
                

                #----------------------------------------------------------------------------------------------
                #  Chemistry Menu (beginning)
                #----------------------------------------------------------------------------------------------


                    #----------------------------------------------------------------------------------------------
                    #  Chemistry/ChemistryBaseAddenda Menu (beginning)
                    #----------------------------------------------------------------------------------------------

                self.aqueous_phase = QPopupMenu (self)
                self.aqueous_master_speciesID = self.aqueous_phase.insertItem ('Aqueous Component Species')
                self.aqueous_phase.connectItem (self.aqueous_master_speciesID, self.aqueous_master_species)
                self.aqueous_phase.setItemEnabled (self.aqueous_master_speciesID, 0)
                self.aqueous_phase.insertSeparator ()
                self.aqueous_speciesID = self.aqueous_phase.insertItem ('Aqueous Secondary Species')
                self.aqueous_phase.connectItem (self.aqueous_speciesID, self.aqueous_species)
                self.aqueous_phase.setItemEnabled (self.aqueous_speciesID, 0)

                self.ion_exchange = QPopupMenu (self)
                self.exchange_master_speciesID = self.ion_exchange.insertItem ('Exchange Master Species')
                self.ion_exchange.connectItem (self.exchange_master_speciesID, self.exchange_master_species)
                self.ion_exchange.setItemEnabled (self.exchange_master_speciesID, 0)
                self.ion_exchange.insertSeparator ()
                self.exchange_speciesID = self.ion_exchange.insertItem ('Exchange Species')
                self.ion_exchange.connectItem (self.exchange_speciesID, self.exchange_species)
                self.ion_exchange.setItemEnabled (self.exchange_speciesID, 0)

                self.surface_complexation = QPopupMenu (self)
                self.surface_master_speciesID = self.surface_complexation.insertItem ('Surface Master Species')
                self.surface_complexation.connectItem (self.surface_master_speciesID, self.surface_master_species)
                self.surface_complexation.setItemEnabled (self.surface_master_speciesID, 0)
                self.surface_complexation.insertSeparator ()
                self.surface_speciesID = self.surface_complexation.insertItem ('Surface Species')
                self.surface_complexation.connectItem (self.surface_speciesID, self.surface_species)
                self.surface_complexation.setItemEnabled (self.surface_speciesID, 0)

                self.ChemistryBaseAddenda = QPopupMenu (self)

                self.ChemistryBaseAddenda.insertItem ('Aqueous Phase', self.aqueous_phase)
                self.ChemistryBaseAddenda.insertSeparator ()
                self.mineral_phaseID = self.ChemistryBaseAddenda.insertItem ('Mineral Phase')
                self.ChemistryBaseAddenda.connectItem (self.mineral_phaseID, self.mineral_phase)
                self.ChemistryBaseAddenda.setItemEnabled (self.mineral_phaseID, 0)
                self.ChemistryBaseAddenda.insertSeparator ()
                self.ChemistryBaseAddenda.insertItem ('Exchange', self.ion_exchange)
                self.ChemistryBaseAddenda.insertSeparator ()
                self.ChemistryBaseAddenda.insertItem ('Surface', self.surface_complexation)

                    #----------------------------------------------------------------------------------------------
                    #  Chemistry/ChemistryBaseAddenda Menu (end)
                    #----------------------------------------------------------------------------------------------


                    #----------------------------------------------------------------------------------------------
                    #  Chemistry/ChemistryStateDefinition Menu (beginning)
                    #----------------------------------------------------------------------------------------------

                self.ChemistryState = QPopupMenu (self)

                self.aqueous_solutionID = self.ChemistryState.insertItem ('Aqueous Solution')
                self.ChemistryState.connectItem (self.aqueous_solutionID, self.aqueous_solution)
                self.ChemistryState.setItemEnabled (self.aqueous_solutionID, 0)
                self.ChemistryState.insertSeparator ()
                self.equilibrium_phasesID = self.ChemistryState.insertItem ('Equilibrium Phases')
                self.ChemistryState.connectItem (self.equilibrium_phasesID, self.equilibrium_phases)
                self.ChemistryState.setItemEnabled (self.equilibrium_phasesID, 0)
                self.ChemistryState.insertSeparator ()
                self.ion_exchange_stateID = self.ChemistryState.insertItem ('Exchange')
                self.ChemistryState.connectItem (self.ion_exchange_stateID, self.ion_exchange_state)
                self.ChemistryState.setItemEnabled (self.ion_exchange_stateID, 0)
                self.ChemistryState.insertSeparator ()
                self.surface_complexation_stateID = self.ChemistryState.insertItem ('Surface')
                self.ChemistryState.connectItem (self.surface_complexation_stateID, self.surface_complexation_state)
                self.ChemistryState.setItemEnabled (self.surface_complexation_stateID, 0)
                self.ChemistryState.insertSeparator ()

                self.kinetics = QPopupMenu (self)
                self.kineticsID = self.kinetics.insertItem ('Kinetic Rates for Minerals')
                self.kinetics.connectItem (self.kineticsID, self.Kinetics)
                self.kinetics.setItemEnabled (self.kineticsID, 0)
                self.kinetics.insertSeparator ()
                self.kineticsForComponentsID = self.kinetics.insertItem ('Kinetic Rates for Species')
                self.kinetics.connectItem (self.kineticsForComponentsID, self.Kinetics_for_components)
                self.kinetics.setItemEnabled (self.kineticsForComponentsID, 0)

                self.KineticsID = self.ChemistryState.insertItem ('Kinetics', self.kinetics)
                self.ChemistryState.insertSeparator ()
                self.gas_phaseID = self.ChemistryState.insertItem ('Gas Phase')
                self.ChemistryState.connectItem (self.gas_phaseID, self.gas_phase)
                self.ChemistryState.setItemEnabled (self.gas_phaseID, 0)

                    #----------------------------------------------------------------------------------------------
                    #  Chemistry/ChemistryStateDefinition Menu (end)
                    #----------------------------------------------------------------------------------------------

                self.Chemistry = QPopupMenu (self)
                self.menuBar().insertItem ('&Chemistry', self.Chemistry)

                self.databaseID = self.Chemistry.insertItem ('Database')
                self.Chemistry.connectItem (self.databaseID, self.database)
                self.Chemistry.setItemEnabled (self.databaseID, 0)
                self.Chemistry.insertSeparator ()
                self.Chemistry.insertItem ('Chemistry Base Addenda', self.ChemistryBaseAddenda)
                self.Chemistry.insertSeparator ()
                self.Chemistry.insertItem ('Chemical State Definition ', self.ChemistryState)

                #----------------------------------------------------------------------------------------------
                #  Chemistry Menu (end)
                #----------------------------------------------------------------------------------------------



                #----------------------------------------------------------------------------------------------
                #  Transport Menu (beginning)
                #----------------------------------------------------------------------------------------------  

                self.Transport = QPopupMenu (self)
                self.menuBar().insertItem ('&Transport', self.Transport)

                self.set_zonesID = self.Transport.insertItem ('Set Zones')
                self.Transport.connectItem (self.set_zonesID, self.set_zones_unstructured)
                self.Transport.setItemEnabled (self.set_zonesID, 0)
                self.Transport.insertSeparator ()
                self.setDarcyVelocityID = self.Transport.insertItem ('Set Darcy Velocity')
                self.Transport.connectItem (self.setDarcyVelocityID, self.setDarcyVelocity)
                self.Transport.setItemEnabled (self.setDarcyVelocityID, 0)

                #----------------------------------------------------------------------------------------------
                #  Transport Menu (end)
                #----------------------------------------------------------------------------------------------  
        
                #----------------------------
                #  Solve Menu (Beginning)
                #----------------------------
# debug_solve
                
                self.solve = QPopupMenu (self)
                self.menuBar().insertItem ('&Solve', self.solve)
                QToolTip.add (self.solve, 'Solve Menu')

                self.solver_parametersID = self.solve.insertItem ('Solver parameters')
                self.solve.connectItem (self.solver_parametersID, self.solver_parameters)
                self.solve.setItemEnabled (self.solver_parametersID, 0)
                self.solve.insertSeparator ()
                #self.initializeID = self.solve.insertItem ('Initialize')
                #self.solve.connectItem (self.initializeID, self.initialize)
                #self.solve.setItemEnabled (self.initializeID, 0)
                self.runID = self.solve.insertItem ('&Run')
		self.solve.setAccel (Qt.CTRL + Qt.Key_R, self.runID)
                self.solve.connectItem (self.runID, self.Run)
                self.solve.setItemEnabled (self.runID, 0)
	                
                #----------------------------
                #  Solve Menu (End)
                #----------------------------
                
                #----------------------------------------------------------------------------------------------
                #  Run Menu (beginning)
                #----------------------------------------------------------------------------------------------    
                """
                self.run = QPopupMenu (self)
                self.menuBar().insertItem ('&Run', self.run)
                QToolTip.add (self.run, 'Run Menu')

        #  En procedant comme ca, on peut faire un raccourci,
        #  et egalement griser le sous-menu
                self.runID = self.run.insertItem ('&Run')
                self.run.setAccel (Qt.CTRL + Qt.Key_R, self.runID)
                self.run.connectItem (self.runID, self.Run)	
                ###self.run.connectItem (self.runID, self.iterate)
                ###self.run.connectItem (self.runID, self.hydraulicRun)
                self.run.setItemEnabled (self.runID, 0)
		"""

                #----------------------------------------------------------------------------------------------
                #  Run Menu (end)
                #----------------------------------------------------------------------------------------------  
                
                #----------------------------
                #  Display Menu (Beginning)
                #----------------------------
                
                self.display = QPopupMenu (self)
                self.menuBar().insertItem ('Display', self.display)
                QToolTip.add (self.display, "Display Menu")

                self.gridID = self.display.insertItem ('Grid')
                self.display.connectItem (self.gridID, self.grid)
                self.display.setItemEnabled (self.gridID, 0)
                self.display.insertSeparator ()
                self.contoursID = self.display.insertItem ('Contours')
                self.display.connectItem (self.contoursID, self.contours_2)
                self.display.setItemEnabled (self.contoursID, 0)
                self.display.insertSeparator ()
                self.velocityVectorsID = self.display.insertItem ('Velocity Vectors')
                self.display.connectItem (self.velocityVectorsID, self.velocity_vectors)
                self.display.setItemEnabled (self.velocityVectorsID, 0)
                
                #----------------------------
                #  Display Menu (End)
                #----------------------------
                
                #----------------------------
                #  Parallel Menu (Beginning)
                #----------------------------
                
                self.parallel = QPopupMenu (self)
                self.menuBar().insertItem ('&Parallel', self.parallel)
                QToolTip.add (self.parallel, 'Parallel Menu')
                
                self.auto_partitionID = self.parallel.insertItem ('Auto Partition')
                #self.parallel.connectItem (self.auto_partitionID, self.auto_partition)
                self.parallel.setItemEnabled (self.auto_partitionID, 0)
                self.parallel.insertSeparator ()
                self.partitionID = self.parallel.insertItem ('Partition')
                #self.parallel.connectItem (self.partitionID, self.partition)
                self.parallel.setItemEnabled (self.partitionID, 0)
                self.parallel.insertSeparator ()
                self.load_balanceID = self.parallel.insertItem ('Load Balance')
                #self.parallel.connectItem (self.load_balanceID, self.load_balance)
                self.parallel.setItemEnabled (self.load_balanceID, 0)
                self.parallel.insertSeparator ()
                self.network_databaseID = self.parallel.insertItem ('Network Database')
                #self.parallel.connectItem (self.network_databaseID, self.network_database)
                self.parallel.setItemEnabled (self.network_databaseID, 0)
                self.parallel.insertSeparator ()
                self.show_connectivityID = self.parallel.insertItem ('Show Connectivity')
                #self.parallel.connectItem (self.show_connectivityID, self.show_connectivity)
                self.parallel.setItemEnabled (self.show_connectivityID, 0)

                #----------------------------
                #  Parallel Menu (End)
                #----------------------------   
             
                #----------------------------
                #  Report Menu (Beginning)
                #----------------------------
                
                self.report = QPopupMenu (self)
                self.menuBar().insertItem ('&Report', self.report)
                QToolTip.add (self.report, 'Report Menu')
                
                self.summaryID = self.report.insertItem ('Summary')
                self.report.connectItem (self.summaryID, self.summary)
                self.report.setItemEnabled (self.summaryID, 0)
                self.report.insertSeparator ()
                self.fluxesID = self.report.insertItem ('Fluxes')
                #self.report.connectItem (self.fluxesID, self.fluxes)
                self.report.setItemEnabled (self.fluxesID, 0)
                self.report.insertSeparator ()
                self.forcesID = self.report.insertItem ('Forces')
                #self.report.connectItem (self.forcesID, self.forces)
                self.report.setItemEnabled (self.forcesID, 0)
                self.report.insertSeparator ()
                self.projected_areasID = self.report.insertItem ('Projected Areas')
                #self.report.connectItem (self.projected_areasID, self.projected_areas)
                self.report.setItemEnabled (self.projected_areasID, 0)
                self.report.insertSeparator ()
                self.surface_intID = self.report.insertItem ('Surface Int.')
                #self.report.connectItem (self.surface_intID, self.surface_int)
                self.report.setItemEnabled (self.surface_intID, 0)

                #----------------------------
                #  Report Menu (End)
                #----------------------------
                
# debug_menu   

            else:
                pass
        else:

            #######################################
            #  MENUBAR: STRUCTURED CASE
            #######################################

            #--------------------------------------------------------------------------------------------------
            #  File Menu (beginning)
            #--------------------------------------------------------------------------------------------------

            self.file = QPopupMenu (self)
            self.menuBar ().insertItem ('&File', self.file)
            #  QToolTip marche seulement si le menu en question est deroule
            QToolTip.add (self.file, 'File Menu')

            self.new_action = QAction ('New', self.new_icon, '&New', QAccel.stringToKey ('CTRL+N'), self)
            self.new_action.addTo (self.file)
            #self.connect (self.new_action, SIGNAL ('activated()'), self.new)
            self.file.insertSeparator()
                
            self.open_action = QAction ('Open', self.open_icon, '&Open', QAccel.stringToKey ('CTRL+O'), self)
            self.open_action.addTo (self.file)
            self.connect (self.open_action, SIGNAL ('activated()'), self.open)
            self.file.insertSeparator()
                
            self.save_action = QAction ('Save', self.save_icon, '&Save', QAccel.stringToKey ('CTRL+S'), self)
            self.save_action.addTo (self.file)
            self.connect (self.save_action, SIGNAL ('activated()'), self.save)
            self.save_action.setEnabled (0)

            self.saveAsID = self.file.insertItem ('Save &As')
            self.file.connectItem (self.saveAsID, self.saveAs)
            self.file.setItemEnabled (self.saveAsID, 0)
            self.file.setAccel (Qt.CTRL + Qt.Key_A, self.saveAsID)
            self.file.insertSeparator()        
            self.exitID = self.file.insertItem ('Exit')
            self.file.connectItem (self.exitID, self.exit)
            self.file.setItemEnabled (self.exitID, 1)
            self.file.setAccel (Qt.CTRL + Qt.Key_Q , self.exitID)
        
            #--------------------------------------------------------------------------------------------------
            #  File Menu (end)
            #--------------------------------------------------------------------------------------------------



            #--------------------------------------------------------------------------------------------------
            #  Define Menu (beginning)
            #--------------------------------------------------------------------------------------------------

            self.define = QPopupMenu (self)
            self.menuBar().insertItem ('&Define', self.define)
            QToolTip.add (self.define, 'Define Menu')

            self.Interactive = QPopupMenu (self)
            self.over_timeID = self.Interactive.insertItem ('Point Concentration over Time')
            self.Interactive.connectItem (self.over_timeID, self.interactive_XY_plot)
            self.Interactive.setItemEnabled (self.over_timeID, 0)
            self.Interactive.insertSeparator ()
            self.over_space_and_timeID = self.Interactive.insertItem ('Concentration over Space and Time')
            self.Interactive.connectItem (self.over_space_and_timeID, self.over_space_and_time)
            self.Interactive.setItemEnabled (self.over_space_and_timeID, 0)

            self.Plot = QPopupMenu (self)
#       self.interactive_XY_plotID = self.Plot.insertItem ('Interactive')
#	self.Plot.connectItem (self.interactive_XY_plotID, self.interactive_XY_plot)
#	self.Plot.connectItem (self.interactive_XY_plotID, self.Interactive)
#	self.Plot.setItemEnabled (self.interactive_XY_plotID, 0)
            self.Plot.insertItem ('Interactive', self.Interactive)
            self.Plot.insertSeparator ()
            self.postprocessing_XY_plotID = self.Plot.insertItem ('Postprocessing')
            self.Plot.connectItem (self.postprocessing_XY_plotID, self.postprocessing_XY_plot)
            self.Plot.setItemEnabled (self.postprocessing_XY_plotID, 0)

            self.Contours = QPopupMenu (self)
            self.interactive_contoursID = self.Contours.insertItem ('Interactive')
            self.Contours.connectItem (self.interactive_contoursID, self.interactive_contours)
            self.Contours.setItemEnabled (self.interactive_contoursID, 0)
            self.Contours.insertSeparator ()
            self.postprocessing_contoursID = self.Contours.insertItem ('Postprocessing')
            self.Contours.connectItem (self.postprocessing_contoursID, self.postprocessing_contours)
            self.Contours.setItemEnabled (self.postprocessing_contoursID, 0)

            self.user_defined_function = QPopupMenu (self)
            self.interpretedID = self.user_defined_function.insertItem ('Interpreted  ')
            self.user_defined_function.connectItem (self.interpretedID, self.interpreted)
            self.user_defined_function.setItemEnabled (self.interpretedID, 1)
            self.user_defined_function.insertSeparator ()
            self.compiledID = self.user_defined_function.insertItem ('Compiled')
            self.user_defined_function.connectItem (self.compiledID, self.compiled)
            self.user_defined_function.setItemEnabled (self.compiledID, 1)
            self.user_defined_function.insertSeparator ()
            self.importsID = self.user_defined_function.insertItem ('Imports')
            self.user_defined_function.connectItem (self.importsID, self.imports)
            self.user_defined_function.setItemEnabled (self.importsID, 1)

            self.title_of_the_studyID = self.define.insertItem ('Title')
            self.define.connectItem (self.title_of_the_studyID, self.title_of_the_study)
            self.define.setItemEnabled (self.title_of_the_studyID, 1)
            self.define.insertSeparator ()
            self.unitsID = self.define.insertItem ('Units')
            self.define.connectItem (self.unitsID, self.units)
            self.define.setItemEnabled (self.unitsID, 1)
            self.define.insertSeparator ()
            self.which_solverID = self.define.insertItem ('Physics / Software')
            self.define.connectItem (self.which_solverID, self.which_solver)
            self.define.setItemEnabled (self.which_solverID, 1)
            self.define.insertSeparator ()
            self.define.insertItem ('XY Plot', self.Plot)
            self.define.insertSeparator ()
            self.define.insertItem ('Contours', self.Contours)
            self.define.insertSeparator ()
	    self.tablesID = self.define.insertItem ('Tables')
	    self.define.connectItem (self.tablesID, self.tables)
	    self.define.setItemEnabled (self.tablesID, 0)		                
            #self.define.insertSeparator ()
            #self.define.insertItem ('User Defined Modules      ', self.user_defined_function)



            #----------------------------------------------------------------------------------------------
            #  Define Menu (end)
            #----------------------------------------------------------------------------------------------  



            #----------------------------------------------------------------------------------------------
            #  Chemistry Menu (beginning)
            #----------------------------------------------------------------------------------------------


                #----------------------------------------------------------------------------------------------
                #  Chemistry/ChemistryBaseAddenda Menu (beginning)
                #----------------------------------------------------------------------------------------------

            self.aqueous_phase = QPopupMenu (self)
            self.aqueous_master_speciesID = self.aqueous_phase.insertItem ('Aqueous Component Species')
            self.aqueous_phase.connectItem (self.aqueous_master_speciesID, self.aqueous_master_species)
            self.aqueous_phase.setItemEnabled (self.aqueous_master_speciesID, 0)
            self.aqueous_phase.insertSeparator ()
            self.aqueous_speciesID = self.aqueous_phase.insertItem ('Aqueous Secondary Species')
            self.aqueous_phase.connectItem (self.aqueous_speciesID, self.aqueous_species)
            self.aqueous_phase.setItemEnabled (self.aqueous_speciesID, 0)

            self.ion_exchange = QPopupMenu (self)
            self.exchange_master_speciesID = self.ion_exchange.insertItem ('Exchange Master Species')
            self.ion_exchange.connectItem (self.exchange_master_speciesID, self.exchange_master_species)
            self.ion_exchange.setItemEnabled (self.exchange_master_speciesID, 0)
            self.ion_exchange.insertSeparator ()
            self.exchange_speciesID = self.ion_exchange.insertItem ('Exchange Species')
            self.ion_exchange.connectItem (self.exchange_speciesID, self.exchange_species)
            self.ion_exchange.setItemEnabled (self.exchange_speciesID, 0)

            self.surface_complexation = QPopupMenu (self)
            self.surface_master_speciesID = self.surface_complexation.insertItem ('Surface Master Species')
            self.surface_complexation.connectItem (self.surface_master_speciesID, self.surface_master_species)
            self.surface_complexation.setItemEnabled (self.surface_master_speciesID, 0)
            self.surface_complexation.insertSeparator ()
            self.surface_speciesID = self.surface_complexation.insertItem ('Surface Species')
            self.surface_complexation.connectItem (self.surface_speciesID, self.surface_species)
            self.surface_complexation.setItemEnabled (self.surface_speciesID, 0)

            self.ChemistryBaseAddenda = QPopupMenu (self)

            self.ChemistryBaseAddenda.insertItem ('Aqueous Phase', self.aqueous_phase)
            self.ChemistryBaseAddenda.insertSeparator ()
            self.mineral_phaseID = self.ChemistryBaseAddenda.insertItem ('Mineral Phase')
            self.ChemistryBaseAddenda.connectItem (self.mineral_phaseID, self.mineral_phase)
            self.ChemistryBaseAddenda.setItemEnabled (self.mineral_phaseID, 0)
            self.ChemistryBaseAddenda.insertSeparator ()
            self.ChemistryBaseAddenda.insertItem ('Exchange', self.ion_exchange)
            self.ChemistryBaseAddenda.insertSeparator ()
            self.ChemistryBaseAddenda.insertItem ('Surface', self.surface_complexation)

                #----------------------------------------------------------------------------------------------
                #  Chemistry/ChemistryBaseAddenda Menu (end)
                #----------------------------------------------------------------------------------------------


                #----------------------------------------------------------------------------------------------
                #  Chemistry/ChemistryStateDefinition Menu (beginning)
                #----------------------------------------------------------------------------------------------

            self.ChemistryState = QPopupMenu (self)
	
            self.aqueous_solutionID = self.ChemistryState.insertItem ('Aqueous Solution')
            self.ChemistryState.connectItem (self.aqueous_solutionID, self.aqueous_solution)
            self.ChemistryState.setItemEnabled (self.aqueous_solutionID, 0)
            self.ChemistryState.insertSeparator ()
            self.equilibrium_phasesID = self.ChemistryState.insertItem ('Equilibrium Phases')
            self.ChemistryState.connectItem (self.equilibrium_phasesID, self.equilibrium_phases)
            self.ChemistryState.setItemEnabled (self.equilibrium_phasesID, 0)
            self.ChemistryState.insertSeparator ()
            self.ion_exchange_stateID = self.ChemistryState.insertItem ('Exchange')
            self.ChemistryState.connectItem (self.ion_exchange_stateID, self.ion_exchange_state)
            self.ChemistryState.setItemEnabled (self.ion_exchange_stateID, 0)
            self.ChemistryState.insertSeparator ()
            self.surface_complexation_stateID = self.ChemistryState.insertItem ('Surface')
            self.ChemistryState.connectItem (self.surface_complexation_stateID, self.surface_complexation_state)
            self.ChemistryState.setItemEnabled (self.surface_complexation_stateID, 0)
            self.ChemistryState.insertSeparator ()

            self.kinetics = QPopupMenu (self)
            self.kineticsID = self.kinetics.insertItem ('Kinetic Rates for Minerals')
            self.kinetics.connectItem (self.kineticsID, self.Kinetics)
            self.kinetics.setItemEnabled (self.kineticsID, 0)
            self.kinetics.insertSeparator ()
            self.kineticsForComponentsID = self.kinetics.insertItem ('Kinetic Rates for Species')
            self.kinetics.connectItem (self.kineticsForComponentsID, self.Kinetics_for_components)
            self.kinetics.setItemEnabled (self.kineticsForComponentsID, 0)

            self.KineticsID = self.ChemistryState.insertItem ('Kinetics', self.kinetics)
            self.ChemistryState.insertSeparator ()
            self.gas_phaseID = self.ChemistryState.insertItem ('Gas Phase')
            self.ChemistryState.connectItem (self.gas_phaseID, self.gas_phase)
            self.ChemistryState.setItemEnabled (self.gas_phaseID, 0)

                #----------------------------------------------------------------------------------------------
                #  Chemistry/ChemistryStateDefinition Menu (end)
                #----------------------------------------------------------------------------------------------

            self.Chemistry = QPopupMenu (self)
            self.menuBar().insertItem ('&Chemistry', self.Chemistry)

            self.databaseID = self.Chemistry.insertItem ('Database')
            self.Chemistry.connectItem (self.databaseID, self.database)
            self.Chemistry.setItemEnabled (self.databaseID, 0)
            self.Chemistry.insertSeparator ()
            self.Chemistry.insertItem ('Chemistry Base Addenda', self.ChemistryBaseAddenda)
            self.Chemistry.insertSeparator ()
            self.Chemistry.insertItem ('Chemical State Definition ', self.ChemistryState)

            #----------------------------------------------------------------------------------------------
            #  Chemistry Menu (end)
            #----------------------------------------------------------------------------------------------



            #----------------------------------------------------------------------------------------------
            #  Transport Menu (beginning)
            #----------------------------------------------------------------------------------------------  

            self.Transport = QPopupMenu (self)
            self.menuBar().insertItem ('&Transport', self.Transport)

            self.materialsID = self.Transport.insertItem ('Materials')

            self.Transport.connectItem (self.materialsID, self.materials)
            self.Transport.setItemEnabled (self.materialsID, 0)
            self.Transport.insertSeparator ()
            self.mesh_directionID = self.Transport.insertItem ('Mesh')
            self.Transport.connectItem (self.mesh_directionID, self.mesh_direction)
            self.Transport.setItemEnabled (self.mesh_directionID, 0)
            self.Transport.insertSeparator ()
            self.set_zonesID = self.Transport.insertItem ('Set Zones')
            self.Transport.connectItem (self.set_zonesID, self.set_zones)
            self.Transport.setItemEnabled (self.set_zonesID, 0)
            self.Transport.insertSeparator ()
            self.boundary_conditionsID = self.Transport.insertItem ('Hydraulic B.C.')
            self.Transport.connectItem (self.boundary_conditionsID, self.boundary_conditions)
            self.Transport.setItemEnabled (self.boundary_conditionsID, 0)
            self.Transport.insertSeparator ()
            self.setDarcyVelocityID = self.Transport.insertItem ('Set Darcy Velocity')
            self.Transport.connectItem (self.setDarcyVelocityID, self.setDarcyVelocity)
            self.Transport.setItemEnabled (self.setDarcyVelocityID, 0)

            #----------------------------------------------------------------------------------------------
            #  Transport Menu (end)
            #----------------------------------------------------------------------------------------------  
        


            #----------------------------------------------------------------------------------------------
            #  Solve Menu (beginning)
            #----------------------------------------------------------------------------------------------
# debug_solve
            self.solve = QPopupMenu (self)
            self.menuBar().insertItem ('&Solve', self.solve)
            QToolTip.add (self.solve, 'Solve Menu')

            self.solver_parameters_menu = QPopupMenu (self)
	    
	    self.chemistry_solver_parametersID = self.solver_parameters_menu.insertItem ('Chemistry')
	    self.solver_parameters_menu.connectItem (self.chemistry_solver_parametersID, self.chemistry_solver_parameters)
	    self.solver_parameters_menu.setItemEnabled (self.chemistry_solver_parametersID, 0)
	    
	    self.hydraulic_solver_parametersID = self.solver_parameters_menu.insertItem ('Hydraulic')
	    self.solver_parameters_menu.connectItem (self.hydraulic_solver_parametersID, self.hydraulic_solver_parameters)
	    self.solver_parameters_menu.setItemEnabled (self.hydraulic_solver_parametersID, 0)
	    
	    self.transport_solver_parametersID = self.solver_parameters_menu.insertItem ('Transport')
	    self.solver_parameters_menu.connectItem (self.transport_solver_parametersID, self.transport_solver_parameters)
	    self.solver_parameters_menu.setItemEnabled (self.transport_solver_parametersID, 0)

            self.solver_parameters_menu_ID = self.solve.insertItem ('Solver parameters', self.solver_parameters_menu)
	    
            #self.solve.connectItem (self.solver_parametersID, self.solver_parameters)
            #self.solve.setItemEnabled (self.solver_parametersID, 0)
            self.solve.insertSeparator ()
            #self.initializeID = self.solve.insertItem ('Initialize')
            #self.solve.connectItem (self.initializeID, self.initialize)
            #self.solve.setItemEnabled (self.initializeID, 0)
            self.runID = self.solve.insertItem ('&Run')
	    self.solve.setAccel (Qt.CTRL + Qt.Key_R, self.runID)
            self.solve.connectItem (self.runID, self.Run)
            self.solve.setItemEnabled (self.runID, 0)
	               
            #----------------------------------------------------------------------------------------------
            #  Solve Menu (end)
            #----------------------------------------------------------------------------------------------   



            #----------------------------------------------------------------------------------------------
            #  Run Menu (beginning)
            #----------------------------------------------------------------------------------------------    
            """
            self.run = QPopupMenu (self)
            self.menuBar().insertItem ('&Run', self.run)
            QToolTip.add (self.run, 'Run Menu')

    #  En procedant comme ca, on peut faire un raccourci,
    #  et egalement griser le sous-menu
            self.runID = self.run.insertItem ('&Run')
            self.run.setAccel (Qt.CTRL + Qt.Key_R, self.runID)
            self.run.connectItem (self.runID, self.Run)	
            #self.run.connectItem (self.runID, self.iterate)
            #self.run.connectItem (self.runID, self.hydraulicRun)
            self.run.setItemEnabled (self.runID, 0)
	    """

            #----------------------------------------------------------------------------------------------
            #  Run Menu (end)
            #----------------------------------------------------------------------------------------------  



            #----------------------------------------------------------------------------------------------
            #  Display Menu (beginning)
            #----------------------------------------------------------------------------------------------

            self.display = QPopupMenu (self)
            self.menuBar().insertItem ('Display', self.display)
            QToolTip.add (self.display, "Display Menu")
	
            self.gridID = self.display.insertItem ('Grid')
            self.display.connectItem (self.gridID, self.grid)
            self.display.setItemEnabled (self.gridID, 0)
            self.display.insertSeparator ()
            self.contoursID = self.display.insertItem ('Contours')
            self.display.connectItem (self.contoursID, self.contours_2)
            self.display.setItemEnabled (self.contoursID, 0)
            self.display.insertSeparator ()
            self.velocityVectorsID = self.display.insertItem ('Velocity Vectors')
            self.display.connectItem (self.velocityVectorsID, self.velocity_vectors)
            self.display.setItemEnabled (self.velocityVectorsID, 0)
	
            #----------------------------------------------------------------------------------------------
            #  Display Menu (end)
            #----------------------------------------------------------------------------------------------



            #----------------------------------------------------------------------------------------------
            #  Plot Menu (beginning)
            #----------------------------------------------------------------------------------------------

            self.plotting = QPopupMenu (self)
            self.menuBar().insertItem ('&Plot', self.plotting)
            QToolTip.add (self.plotting, 'Plot Menu')
	
            self.interactive_plotID = self.plotting.insertItem ('XY Plot')
            self.plotting.connectItem (self.interactive_plotID, self.xmgrace)
            self.plotting.setItemEnabled (self.interactive_plotID, 0)
            self.postProcessingID = self.plotting.insertItem ('Postprocessing')
            self.plotting.connectItem (self.postProcessingID, self.plot3)
            self.plotting.setItemEnabled (self.postProcessingID, 0)

            #----------------------------------------------------------------------------------------------
            #  Plot Menu (end)
            #----------------------------------------------------------------------------------------------



            #----------------------------------------------------------------------------------------------
            #  Parallel Menu (beginning)
            #----------------------------------------------------------------------------------------------

            self.parallel = QPopupMenu (self)
            self.menuBar().insertItem ('Para&llel', self.parallel)
            QToolTip.add (self.parallel, 'Parallel Menu')
	
            self.parallelID = self.parallel.insertItem ('Settings')
            self.parallel.connectItem (self.parallelID, self.parallel_frame)
            self.parallel.setItemEnabled (self.parallelID, 0)
	
            #----------------------------------------------------------------------------------------------
            #  Parallel Menu (end)
            #----------------------------------------------------------------------------------------------



            #----------------------------------------------------------------------------------------------
            #  Report menu (beginning)
            #----------------------------------------------------------------------------------------------

            self.report = QPopupMenu (self)
            self.menuBar().insertItem ('Report', self.report)
            QToolTip.add (self.report, 'Report menu')

            self.summaryID = self.report.insertItem ('Summary')
            self.report.connectItem (self.summaryID, self.summary)
            self.report.setItemEnabled (self.summaryID, 0)

            #----------------------------------------------------------------------------------------------
            #  Report menu (end)
            #----------------------------------------------------------------------------------------------



        #----------------------------------------------------------------------------------------------
        #  Help Menu (beginning)
        #----------------------------------------------------------------------------------------------

        self.help = QPopupMenu(self)
        self.menuBar().insertItem('&Help',self.help)
        QToolTip.add (self.help, 'Help Menu')

        self.helpID = self.help.insertItem ('User\'s Guide')
        self.help.connectItem (self.helpID, self.Help)
        self.help.setItemEnabled (self.helpID, 1)
        self.help.setAccel (Qt.CTRL + Qt.Key_H, self.helpID)
        self.help.insertSeparator ()
        self.aboutID = self.help.insertItem ('About')
        self.help.connectItem (self.aboutID, self.about)
        self.help.setItemEnabled (self.aboutID, 1)
        
        #----------------------------------------------------------------------------------------------
        #  Help Menu (end)
        #----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Status bar message ('text', time)
#----------------------------------------------------------------------------------------------

        self.statusBar().message('Ready',3000)

#----------------------------------------------------------------------------------------------

        self.resize(500,600)

#----------------------------------------------------------------------------------------------
##         l = [5] 
##         self.test_if_s_is_in_list (5, l)

# debug_activation

    def unstructured_open_menu_activation (self):
    
        # if you read an unstructured casefile
    
        global Solver
        # chemistry Tool...

        #-----------
        #  File Menu
        #------------------------------        
        self.save_action.setEnabled (1)
        self.file.setItemEnabled (self.saveAsID, 1)
        self.file.setItemEnabled (self.hardcopyID, 0)
        self.file.setItemEnabled (self.exitID, 1)
        #----------------------------------------
        #  Grid Menu
        #---------------------------------------------
        self.grid_menu.setItemEnabled (self.readID, 1)
        if Medfile != '':
            self.grid_menu.setItemEnabled (self.checkID, 1)
            self.grid_menu.setItemEnabled (self.displayID, 1)
            self.grid_menu.setItemEnabled (self.infoID, 1)
            self.grid_menu.setItemEnabled (self.scaleID, 1)
        self.grid_menu.setItemEnabled (self.smooth_swapID, 0)
        self.grid_menu.setItemEnabled (self.translateID, 0)
        #--------------------------------------------------
        #  Define Menu
        #--------------------------------------------------------
        self.define.setItemEnabled (self.title_of_the_studyID, 1)
        self.define.setItemEnabled (self.unitsID, 1)
        self.define.setItemEnabled (self.problemID, 1)
        self.define.setItemEnabled (self.materialsID, 1)

        self.define.setItemEnabled (self.initial_conditionsID, 1)
        
        # voir ici s'il n'est pas mieux de faire la difference suivant le solveur
        # i.e. si l'on fait de l'hydraulique on laisse dispo uniquement hydraulic B.C.
        # et si l'utilisateur veut avoir acces aux B.C. chimie transport il
        # doit d'abord modifier le type de probleme
        
        self.boundary_conditions_menu.setItemEnabled (self.HydraulicBCID, 1)
        self.boundary_conditions_menu.setItemEnabled (self.ChemicalTransportBCID, 1)

        self.define.setItemEnabled (self.periodic_conditionsID, 0)
        self.Interactive.setItemEnabled (self.over_timeID, 1)
       	self.Interactive.setItemEnabled (self.over_space_and_timeID, 1)
        self.define.setItemEnabled (self.tablesID, 1)
        self.user_defined_function.setItemEnabled (self.interpretedID, 1)
        self.user_defined_function.setItemEnabled (self.compiledID, 1)
        self.user_defined_function.setItemEnabled (self.importsID, 1)
        #------------------------------------------------------------
        #  Chemistry Menu
        #-------------------------------------------------
        self.Chemistry.setItemEnabled (self.databaseID, 1)
        self.aqueous_phase.setItemEnabled (self.aqueous_master_speciesID, 1)
        self.aqueous_phase.setItemEnabled (self.aqueous_speciesID, 1)
        self.ChemistryBaseAddenda.setItemEnabled (self.mineral_phaseID, 1)
        self.ion_exchange.setItemEnabled (self.exchange_master_speciesID, 1)
        self.ion_exchange.setItemEnabled (self.exchange_speciesID, 1)
        self.surface_complexation.setItemEnabled (self.surface_master_speciesID, 1)
        self.surface_complexation.setItemEnabled (self.surface_speciesID, 1)
        self.ChemistryState.setItemEnabled (self.aqueous_solutionID, 1)
        self.ChemistryState.setItemEnabled (self.equilibrium_phasesID, 1)
        self.ChemistryState.setItemEnabled (self.ion_exchange_stateID, 1)
        self.ChemistryState.setItemEnabled (self.surface_complexation_stateID, 1)
        self.kinetics.setItemEnabled (self.kineticsID, 1)
        self.kinetics.setItemEnabled (self.kineticsForComponentsID, 0)
        self.ChemistryState.setItemEnabled (self.gas_phaseID, 1)
        #-------------------------------------------------------
        #  Transport Menu
        #-------------------------------------------------- 
        self.Transport.setItemEnabled (self.set_zonesID, 1)
        self.Transport.setItemEnabled (self.setDarcyVelocityID, 1)
        #---------------------------------------------------------
        #  Solve Menu
        #------------------------------------------------------
        self.solve.setItemEnabled (self.solver_parametersID, 1)
        #self.solve.setItemEnabled (self.initializeID, 0)
        self.solve.setItemEnabled (self.runID, 1)
        #-----------------------------------------------
        #  Run Menu 
        #--------------------------------------
        #self.run.setItemEnabled (self.runID, 1)
        #--------------------------------------
        #  Display Menu
        #-------------------------------------------
        self.display.setItemEnabled (self.gridID, 1)
        self.display.setItemEnabled (self.contoursID, 1)
        self.display.setItemEnabled (self.velocityVectorsID, 0)
        #------------------------------------------------------
        #  Parallel Menu 
        #------------------------------------------------------
        self.parallel.setItemEnabled (self.auto_partitionID, 0)
        self.parallel.setItemEnabled (self.partitionID, 0)
        self.parallel.setItemEnabled (self.load_balanceID, 0)
        self.parallel.setItemEnabled (self.network_databaseID, 0)
        self.parallel.setItemEnabled (self.show_connectivityID, 0)
        #---------------------------------------------------------
        #  Report Menu
        #---------------------------------------------
        self.report.setItemEnabled (self.summaryID, 1)
        self.report.setItemEnabled (self.fluxesID, 0)
        self.report.setItemEnabled (self.forcesID, 0)
        self.report.setItemEnabled (self.projected_areasID, 0)
        self.report.setItemEnabled (self.surface_intID, 0)
        #-------------------------------------------------






# debug_solve


    def chemistry_solver_parameters (self):

        if ChemistryTool is 'PhreeqC':
            self.ChemistryConvergenceParameters ()
        elif ChemistryTool is 'Traces_PhreeqC':
            self.ChemistryConvergenceParameters ()
        else:
	    pass
	    
    def hydraulic_solver_parameters (self):

        if Solver is 'Modflow':
            self.ModflowSolverParameters ()
        elif Solver is 'Modflow_Mt3d':
            self.ModflowSolverParameters ()
	elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'PhreeqC':
            self.ModflowSolverParameters ()
        elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'Traces_PhreeqC':
            self.Traces_Parameters ()
        else:
	    pass
	    
    def transport_solver_parameters (self):

        if Solver is 'Modflow_Mt3d':
            self.Mt3d_SolverParameters ()            
        elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'PhreeqC':
            self.Mt3d_SolverParameters ()            
        elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'Traces_PhreeqC':
            self.Traces_Parameters ()
        else:
	    pass

#------------------------------------------------------------------------------------------------------------------


# debug_activation

    def menu_Activation (self):

        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame
        global Solver

        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
                mode = 'unstructured'
            else:
                mode = 'structured'
        else:
            mode = 'structured'


        

        if ((Passed_Into_TitleFrame == 1) and (Passed_Into_UnitsFrame == 1) and (Passed_Into_Physics_SoftwareFrame == 1)):

            self.save_action.setEnabled (1)
            self.file.setItemEnabled (self.saveAsID, 1)
            try:
                self.Interactive.setItemEnabled (self.over_timeID, 1)
                self.Interactive.setItemEnabled (self.over_space_and_timeID, 1)
#            self.Interactive.setItemEnabled (self.interactive_XY_plotID, 1)
                self.Plot.setItemEnabled (self.postprocessing_XY_plotID, 0)
                self.Contours.setItemEnabled (self.interactive_contoursID, 0)
                self.Contours.setItemEnabled (self.postprocessing_contoursID, 1)
            except:
                pass
            self.define.setItemEnabled (self.tablesID, 1)
            self.aqueous_phase.setItemEnabled (self.aqueous_speciesID, 1)
            self.aqueous_phase.setItemEnabled (self.aqueous_master_speciesID, 1)
            self.ion_exchange.setItemEnabled (self.exchange_speciesID, 1)
            self.ion_exchange.setItemEnabled (self.exchange_master_speciesID, 1)
            self.ChemistryBaseAddenda.setItemEnabled (self.mineral_phaseID, 1)
            self.surface_complexation.setItemEnabled (self.surface_master_speciesID, 1)
            self.surface_complexation.setItemEnabled (self.surface_speciesID, 1)

            self.ChemistryState.setItemEnabled (self.aqueous_solutionID, 1)
            self.ChemistryState.setItemEnabled (self.equilibrium_phasesID, 1)
            self.ChemistryState.setItemEnabled (self.ion_exchange_stateID, 1)
            self.ChemistryState.setItemEnabled (self.surface_complexation_stateID, 1)
            self.ChemistryState.setItemEnabled (self.kineticsID, 1)
            #self.ChemistryState.setItemEnabled (self.kineticsForComponentsID, 1)
            self.ChemistryState.setItemEnabled (self.gas_phaseID, 1)

            self.Chemistry.setItemEnabled (self.databaseID, 1)

            self.Transport.setItemEnabled (self.materialsID, 1)
            if mode == 'structured':
                self.Transport.setItemEnabled (self.mesh_directionID, 1)
                self.Transport.setItemEnabled (self.set_zonesID, 1)
                #self.Transport.setItemEnabled (self.boundary_conditionsID, 1)
            else:
                pass
                
                
                
            self.Transport.setItemEnabled (self.setDarcyVelocityID, 1)
# debug_solve
            #self.solve.setItemEnabled (self.solver_parametersID, 1)
	    self.solver_parameters_menu.setItemEnabled (self.chemistry_solver_parametersID, 1)
	    self.solver_parameters_menu.setItemEnabled (self.hydraulic_solver_parametersID, 1)
	    self.solver_parameters_menu.setItemEnabled (self.transport_solver_parametersID, 1)
	    
	    self.solve.setItemEnabled (self.runID, 1)

            #self.run.setItemEnabled (self.runID, 1)

            self.display.setItemEnabled (self.gridID, 1)
            self.display.setItemEnabled (self.contoursID, 1)

            try:
                self.plotting.setItemEnabled (self.postProcessingID, 0)
                self.plotting.setItemEnabled (self.interactive_plotID, 1)
            except:
                pass
                	
            try:
                self.parallel.setItemEnabled (self.parallelID, 1)
            except:
                pass
                
            self.report.setItemEnabled (self.summaryID, 1)
			
            if Solver == 'PhreeqC':
                
                self.Transport.setItemEnabled (self.materialsID, 0)
                self.Transport.setItemEnabled (self.mesh_directionID, 0)
                self.Transport.setItemEnabled (self.set_zonesID, 0)
                self.Transport.setItemEnabled (self.boundary_conditionsID, 0)
 
                self.display.setItemEnabled (self.gridID, 0)
 
                self.plotting.setItemEnabled (self.postProcessingID, 0)
                self.plotting.setItemEnabled (self.interactive_plotID, 0)

					    
						
    def activation_test (self): 

        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame

        if (Passed_Into_TitleFrame == 0):
            
            self.Title_MB = QMessageBox()
            self.Title_MB.setCaption ('Message')
            self.Title_MB.setText ('You have to set the title of the study.\nPlease go under Define/Title.')
            self.Title_MB.setIcon (QMessageBox.Information)
            self.Title_MB.show ()
            
        elif (Passed_Into_UnitsFrame == 0):

            self.Units_MB = QMessageBox()
            self.Units_MB.setCaption ('Message')
            self.Units_MB.setText ('You have to set Units.\nPlease go under Define/Units.')
            self.Units_MB.setIcon (QMessageBox.Information)
            self.Units_MB.show ()

        elif (Passed_Into_Physics_SoftwareFrame == 0):
            
            self.Physics_Software_MB = QMessageBox()
            self.Physics_Software_MB.setCaption ('Message')
            self.Physics_Software_MB.setText ('You have to choose the software.\nPlease go under Define/Physics_Software.')
            self.Physics_Software_MB.setIcon (QMessageBox.Information)
            self.Physics_Software_MB.show ()



    def imports (self):
    
        self.ImportsFrame = Imports (self)



    def check (self):
    
        try:
    
            self.med = importMedFromFile (self.medfileName)

            self.mesh = self.med.getMesh(self.med.getMeshesNames()[0])
            self.mesh_name = self.mesh.getName ()
            self.space_dims = self.mesh.getSpaceDimensions ()
            self.mesh_dims = self.mesh.getMeshDimensions ()
            self.mesh_coordinates_system = self.mesh.getCoordinatesSystem ()
            self.mesh_coordinates_names = self.mesh.getCoordinatesNames ()
            self.mesh_nb_nodes = self.mesh.getNbNodes ()
            self.mesh_coordinates = self.mesh.getCoordinates ()
            try:
                self.mesh_types_MED_CELL = self.mesh.getTypes (MED_CELL)
            except:
                pass
            try:
                self.nbElements_CELL_1 = self.mesh.getNbElements (MED_CELL, 1)
            except:
                self.nbElements_CELL_1 = 0    
            try:
                self.nbElements_CELL_102 = self.mesh.getNbElements (MED_CELL, 102)
            except:
                self.nbElements_CELL_102 = 0    
            try:
                self.nbElements_CELL_103 = self.mesh.getNbElements (MED_CELL, 103)
            except:
                self.nbElements_CELL_103 = 0    
            try:
                self.nbElements_CELL_203 = self.mesh.getNbElements (MED_CELL, 203)
            except:
                self.nbElements_CELL_203 = 0    
            try:
                self.nbElements_CELL_204 = self.mesh.getNbElements (MED_CELL, 204)
            except:
                self.nbElements_CELL_204 = 0    
            try:
                self.nbElements_CELL_206 = self.mesh.getNbElements (MED_CELL, 206)
            except:
                self.nbElements_CELL_206 = 0    
            try:
                self.nbElements_CELL_208 = self.mesh.getNbElements (MED_CELL, 208)
            except:
                self.nbElements_CELL_208 = 0    
            try:
                self.nbElements_CELL_304 = self.mesh.getNbElements (MED_CELL, 304)
            except:
                self.nbElements_CELL_304 = 0    
            try:
                self.nbElements_CELL_305 = self.mesh.getNbElements (MED_CELL, 305)
            except:
                self.nbElements_CELL_305 = 0    
            try:
                self.nbElements_CELL_306 = self.mesh.getNbElements (MED_CELL, 306)
            except:
                self.nbElements_CELL_306 = 0    
            try:
                self.nbElements_CELL_308 = self.mesh.getNbElements (MED_CELL, 308)
            except:
                self.nbElements_CELL_308 = 0    
            try:
                self.nbElements_CELL_310 = self.mesh.getNbElements (MED_CELL, 310)
            except:
                self.nbElements_CELL_310 = 0    
            try:
                self.nbElements_CELL_313 = self.mesh.getNbElements (MED_CELL, 313)
            except:
                self.nbElements_CELL_313 = 0    
            try:
                self.nbElements_CELL_315 = self.mesh.getNbElements (MED_CELL, 315)
            except:
                self.nbElements_CELL_315 = 0    
            try:
                self.nbElements_CELL_320 = self.mesh.getNbElements (MED_CELL, 320)
            except:
                self.nbElements_CELL_320 = 0    
            try:
                self.mesh_types_MED_FACE = self.mesh.getTypes (MED_FACE)
            except:
                pass
            try:
                self.nbElements_FACE_203 = self.mesh.getNbElements (MED_FACE, 203)
            except:
                self.nbElements_FACE_203 = 0    
            try:
                self.nbElements_FACE_204 = self.mesh.getNbElements (MED_FACE, 204)
            except:
                self.nbElements_FACE_204 = 0    
            try:
                self.nbElements_FACE_206 = self.mesh.getNbElements (MED_FACE, 206)
            except:
                self.nbElements_FACE_206 = 0    
            try:
                self.nbElements_FACE_208 = self.mesh.getNbElements (MED_FACE, 208)
            except:
                self.nbElements_FACE_208 = 0    
            try:
                self.mesh_types_MED_EDGE = self.mesh.getTypes (MED_EDGE)
            except:
                pass
            try:
                self.nbElements_EDGE_102 = self.mesh.getNbElements (MED_EDGE, 102)
            except:
                self.nbElements_EDGE_102 = 0    
            try:
                self.nbElements_EDGE_103 = self.mesh.getNbElements (MED_EDGE, 103)
            except:
                self.nbElements_EDGE_103 = 0    

            self.mesh_zones_names = self.mesh.getZonesNames ()
	    i = len (self.mesh_zones_names) - 1
            while i >= 0:
                if str (self.mesh_zones_names[i]).find ('FAM_')!=-1 or str (self.mesh_zones_names[i]).find ('fam-')!=-1:
	            del (self.mesh_zones_names[i])
                else:
	            pass
	        i = i-1
            self.mesh_boundaries_names = self.mesh.getBoundariesNames ()
	    i = len (self.mesh_boundaries_names) - 1
	    while i >= 0:
	        if str (self.mesh_boundaries_names[i]).find ('FAM_')!=-1 or str (self.mesh_boundaries_names[i]).find ('fam-')!=-1:
	            del (self.mesh_boundaries_names[i])
                else:
	            pass
	        i = i-1
            
        except:
            self.underDevelopment_MB = QMessageBox()
            self.underDevelopment_MB.setCaption ('Info')
            self.underDevelopment_MB.setText ('There is a problem with the unstructured meshing.')
            self.underDevelopment_MB.setIcon (QMessageBox.Information)
            self.underDevelopment_MB.show ()        
        else:
            self.underDevelopment_MB = QMessageBox()
            self.underDevelopment_MB.setCaption ('Info')
            self.underDevelopment_MB.setText ('The unstructured meshing was checked: ok.')
            self.underDevelopment_MB.setIcon (QMessageBox.Information)
            self.underDevelopment_MB.show ()

    def display (self):
        
        self.under_development()
    
    def scale (self):
    
        self.under_development()

    def smooth_swap (self):
    
        self.under_development()
    
    def translate (self):
    
        self.under_development()

    def under_development (self):
        
        self.underDevelopment_MB = QMessageBox()
        self.underDevelopment_MB.setCaption ('Info')
        self.underDevelopment_MB.setText ('This option is under development.')
        self.underDevelopment_MB.setIcon (QMessageBox.Information)
        self.underDevelopment_MB.show ()
        
#----------------------------------------------------------------------------------------------

    def interpreted (self):
    
        self.InterpretedFrame = edit_module ('Module Editor')
        
    def compiled (self):
    
        self.under_development ()

    def set_zones_unstructured (self):
    
        self.SetZonesFrame = QFrame ()
        self.SetZonesFrame.setCaption ('Set Zones')
        setPosition (self.SetZonesFrame)

        self.SetZonesFrame.mainLayout = QVBoxLayout (self.SetZonesFrame, 10,-1, 'SetZonesFrame_mainLayout')
        self.SetZonesFrame.mainLayout.setMargin (Marge)
        self.SetZonesFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #SetZones_comment = Comments ['Set_Zones']

        self.SetZonesFrame.QHGroupBoxA = QHGroupBox (self.SetZonesFrame)
        #QToolTip.add (self.SetZonesFrame.QHGroupBoxA,Comments[SetZones_comment])

        self.SetZonesFrame.QHGroupBoxA.setMargin (5)
        self.SetZonesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SetZonesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox1 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox1.setMargin (10)
        self.SetZonesFrame.QHGroupBox1.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox1)

        self.SetZonesFrame.QVBox10 = QVBox (self.SetZonesFrame.QHGroupBox1)
        self.SetZonesFrame.QVBox12 = QVBox (self.SetZonesFrame.QHGroupBox1)
        self.SetZonesFrame.QVBox11 = QVBox (self.SetZonesFrame.QHGroupBox1)

        self.SetZonesFrame.QVBox10.setMargin (0)
        self.SetZonesFrame.QVBox10.setSpacing (5)
        self.SetZonesFrame.QVBox11.setMargin (0)
        self.SetZonesFrame.QVBox11.setSpacing (5)

        self.SetZonesFrame.QVBox12.setMinimumSize (25, 25)
        self.SetZonesFrame.QVBox12.setMaximumSize (25, 25)

        self.SetZonesFrame.NewZoneNameLabel =  QLabel ('Zone Name', self.SetZonesFrame.QVBox10)
        self.SetZonesFrame.NewZoneNameLabel.setMinimumHeight (15)
        self.SetZonesFrame.NewZoneNameLabel.setMaximumHeight (15)

        self.SetZonesFrame.ZoneNameComboBox = QComboBox (self.SetZonesFrame.QVBox10)
        self.SetZonesFrame.ZoneNameComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.ZoneNameComboBox.setMaximumSize (200, 25)

        i = 0
        while i < len (self.mesh_zones_names):
            self.SetZonesFrame.ZoneNameComboBox.insertItem (str (self.mesh_zones_names [i])) 
            i = i+1
        i = 0

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox3 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox3.setMargin (10)
        self.SetZonesFrame.QHGroupBox3.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox3)

        self.SetZonesFrame.QVBox30 = QVBox (self.SetZonesFrame.QHGroupBox3)
        self.SetZonesFrame.QVBox31 = QVBox (self.SetZonesFrame.QHGroupBox3)

        self.SetZonesFrame.QVBox30.setMargin (0)
        self.SetZonesFrame.QVBox30.setSpacing (5)
        self.SetZonesFrame.QVBox31.setMargin (0)
        self.SetZonesFrame.QVBox31.setSpacing (5)

        self.SetZonesFrame.MaterialsLabel =  QLabel ('Zone Material', self.SetZonesFrame.QVBox30)

        self.SetZonesFrame.MaterialsComboBox = QComboBox (self.SetZonesFrame.QVBox30)
        self.SetZonesFrame.MaterialsComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.MaterialsComboBox.setMaximumSize (200, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Materiaux definis dans la fenetre 'Materials' 

        i = 0
        if (len (Materials_list) != 0):
            while i < len (Materials_list):        
                self.SetZonesFrame.MaterialsComboBox.insertItem (Materials_list [i])
                i = i+1
        else:
            self.SetZonesFrame.MB = QMessageBox()
            setPosition (self.SetZonesFrame.MB)
            self.SetZonesFrame.MB.setCaption ('Error')
            self.SetZonesFrame.MB.setText ('No Material has been defined.')
            self.SetZonesFrame.MB.setIcon (QMessageBox.Critical)
            self.SetZonesFrame.MB.show ()
            pass
        """                            
        self.SetZonesFrame.AqueousStateLabel =  QLabel ('Zone Aqueous State', self.SetZonesFrame.QVBox31)

        self.SetZonesFrame.AqueousStateComboBox = QComboBox (self.SetZonesFrame.QVBox31)
        self.SetZonesFrame.AqueousStateComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.AqueousStateComboBox.setMaximumSize (200, 25)
        
#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Solutions aqueuses definies dans la fenetre 'AqueousSolution' 

        i = 0
        if (len (AqueousStates_list) != 0):
            while i < len (AqueousStates_list):
                self.SetZonesFrame.AqueousStateComboBox.insertItem (AqueousStates_list [i])
                i = i+1
        else:
            self.SetZonesFrame.NoASMB = QMessageBox()
            setPosition (self.SetZonesFrame.NoASMB)
            self.SetZonesFrame.NoASMB.setCaption ('Error')
            self.SetZonesFrame.NoASMB.setText ('No Aqueous State has been defined.')
            self.SetZonesFrame.NoASMB.setIcon (QMessageBox.Critical)
            self.SetZonesFrame.NoASMB.show ()
            pass
        """
#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox6 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox6.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox6)

        self.SetZonesFrame.OKPB = QPushButton ('OK', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.CreateChangePB = QPushButton ('&Change/&Create', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.DeleteZonePB = QPushButton ('De&lete Zone', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.CancelPB = QPushButton ('Cancel', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.HelpPB = QPushButton ('&Help', self.SetZonesFrame.QHGroupBox6)

        QToolTip.add (self.SetZonesFrame.DeleteZonePB, 'Press CTRL+L to delete a Zone from the Zones Combo Box')
        QToolTip.add (self.SetZonesFrame.CancelPB, 'Press CTRL+Q to close this window')
        QToolTip.add (self.SetZonesFrame.HelpPB, 'Press CTRL+H for Help')

        self.SetZonesFrame.DeleteZonePB.setAccel (Qt.CTRL + Qt.Key_L)
        self.SetZonesFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        self.SetZonesFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.SetZonesFrame.OKPB, SIGNAL('clicked()'), self.SetZonesFrame_ok_u)
        self.connect (self.SetZonesFrame.CreateChangePB, SIGNAL('clicked()'), self.SetZonesFrame_createchange_u)
        self.connect (self.SetZonesFrame.DeleteZonePB, SIGNAL('clicked()'), self.SetZonesFrame_delete_zone_u)
        self.connect (self.SetZonesFrame.CancelPB, SIGNAL('clicked()'), self.SetZonesFrame_cancel_u)
        self.connect (self.SetZonesFrame.HelpPB, SIGNAL('clicked()'), self.SetZonesFrame_help_u)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def SetZonesFrame_ok_u (self):

        self.SetZonesFrame.close ()

    def SetZonesFrame_createchange_u (self):

        global Unstructured_Zone_Material_list
	
	tmp_list = []
        tmp_list.append (str (self.SetZonesFrame.ZoneNameComboBox.currentText ()))
        tmp_list.append (str (self.SetZonesFrame.MaterialsComboBox.currentText ()))
        
        Unstructured_Zone_Material_list.append (tmp_list)
        print Unstructured_Zone_Material_list
	
	

#debug_set_zones_unstructured
        """

        if self.SetZonesFrame.Organizer[0].isChecked ():
            
            ZoneName = str (self.SetZonesFrame.NewZoneNameLineEdit.text())
            Zones_list.append (ZoneName)
            ZoneMaterial = str (self.SetZonesFrame.MaterialsComboBox.currentText ())
            ZoneAqueousState = str (self.SetZonesFrame.AqueousStateComboBox.currentText ())
            IStartIndex = str (self.SetZonesFrame.IStartIndexLineEdit.text ())
            IEndIndex = str (self.SetZonesFrame.IEndIndexLineEdit.text ())
            JStartIndex = str (self.SetZonesFrame.JStartIndexLineEdit.text ())
            JEndIndex = str (self.SetZonesFrame.JEndIndexLineEdit.text ())

            Temp_list = []
            Temp_list.append (ZoneMaterial)
            Temp_list.append (ZoneAqueousState)
            Temp_list.append (IStartIndex)
            Temp_list.append (JStartIndex)
            Temp_list.append (IEndIndex)
            Temp_list.append (JEndIndex)
            if self.SetZonesFrame.DefineAsBoundaryCheckBox.isChecked ():
                Temp_list.append ('Boundary')
            else:
                Temp_list.append ('Zone')

            Zone_Material_AqueousState_list.append (Temp_list)          

            self.SetZonesFrame.ZonesComboBox.insertItem (ZoneName, self.SetZonesFrame.ZonesComboBox.currentItem ())
            self.SetZonesFrame.ZonesComboBox.setCurrentItem (0)

        elif self.SetZonesFrame.Organizer[1].isChecked ():
            
            ZoneName = str (self.SetZonesFrame.ZonesComboBox.currentText ())
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
	    
            ZoneMaterial = str (self.SetZonesFrame.MaterialsComboBox.currentText ())
            ZoneAqueousState = str (self.SetZonesFrame.AqueousStateComboBox.currentText ())
            IStartIndex = str (self.SetZonesFrame.IStartIndexLineEdit.text ())
            IEndIndex = str (self.SetZonesFrame.IEndIndexLineEdit.text ())
            JStartIndex = str (self.SetZonesFrame.JStartIndexLineEdit.text ())
            JEndIndex = str (self.SetZonesFrame.JEndIndexLineEdit.text ())

            Zone_Material_AqueousState_list  [index][0] = ZoneMaterial           
            Zone_Material_AqueousState_list  [index][1] = ZoneAqueousState  
            Zone_Material_AqueousState_list  [index][2] = IStartIndex         
            Zone_Material_AqueousState_list  [index][3] = JStartIndex  
            Zone_Material_AqueousState_list  [index][4] = IEndIndex 
            Zone_Material_AqueousState_list  [index][5] = JEndIndex
            if self.SetZonesFrame.BoundaryCheckBox.isChecked ():
                Zone_Material_AqueousState_list  [index][6] = 'Boundary' 
            else:
                Zone_Material_AqueousState_list  [index][6] = 'Zone'

        self.SetZonesFrame.NewZoneNameLineEdit.clear ()
        self.SetZonesFrame.IStartIndexLineEdit.clear ()
        self.SetZonesFrame.IEndIndexLineEdit.clear ()
        self.SetZonesFrame.JStartIndexLineEdit.clear ()
        self.SetZonesFrame.JEndIndexLineEdit.clear ()
        self.SetZonesFrame.Organizer[0].setChecked (1)
        self.SetZonesFrame.NewZoneNameLineEdit.setFocus ()
        self.SetZonesFrame_DefineANewZone_enable ()
        self.SetZonesFrame.DefineAsBoundaryCheckBox.setChecked (0)
        """
#-----------------------------------------------------------------------------------------

    def SetZonesFrame_delete_zone_u (self):

        if ((self.SetZonesFrame.ZonesComboBox.count ()) != 0):
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
            self.SetZonesFrame.ZonesComboBox.removeItem (self.SetZonesFrame.ZonesComboBox.currentItem ())
            self.SetZonesFrame.NewZoneNameLineEdit.clear ()
            self.SetZonesFrame.IStartIndexLineEdit.clear ()
            self.SetZonesFrame.IEndIndexLineEdit.clear ()
            self.SetZonesFrame.JStartIndexLineEdit.clear ()
            self.SetZonesFrame.JEndIndexLineEdit.clear ()
            del Zones_list [index]
            del Zone_Material_AqueousState_list [index]
            if ((self.SetZonesFrame.ZonesComboBox.count ()) != 0):
                self.SetZonesFrame.ZonesComboBox.setCurrentItem (0)
        else:
            self.SetZonesFrameMB = QMessageBox()
            self.SetZonesFrameMB.setCaption ('Error')
            self.SetZonesFrameMB.setText ('There is no more Zone.')
            self.SetZonesFrameMB.setIcon (QMessageBox.Critical)
            self.SetZonesFrameMB.show ()
           
#-----------------------------------------------------------------------------------------

    def SetZonesFrame_cancel_u (self):

        self.SetZonesFrame.close ()

#-----------------------------------------------------------------------------------------

    def SetZonesFrame_help_u (self):

        self.Help ()








    def SetZonesFrame_DefineANewZone_enable (self):

        self.SetZonesFrame.QHGroupBox1.setEnabled (1)
        self.SetZonesFrame.QHGroupBox2.setEnabled (0)
        self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
        self.SetZonesFrame_activateTimeVariation_2 ()
            
    def SetZonesFrame_AlreadyCreatedZones_enable (self):

        self.SetZonesFrame.QHGroupBox1.setEnabled (0)
        self.SetZonesFrame.QHGroupBox2.setEnabled (1)
        self.SetZonesFrame.DefineAsBoundaryCheckBox.setChecked (0)
        self.SetZonesFrame_activateTimeVariation ()
        try:
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
            if str (Zone_Material_AqueousState_list  [index][6]) == 'Boundary':
                self.SetZonesFrame.BoundaryCheckBox.setChecked (1)
            else:
                self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
                pass
        except:
            pass


# rappeler ici tous les parametres de la zone precedemment definie
    def SetZonesFrame_ZonesComboBox_activate (self):

        index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
        Mat = str (Zone_Material_AqueousState_list [index][0])
        AS = str (Zone_Material_AqueousState_list [index][1])
        index_mat = Materials_list.index (Mat)
        index_AS = AqueousStates_list.index (AS)
        self.SetZonesFrame.MaterialsComboBox.setCurrentItem (index_mat)
        self.SetZonesFrame.AqueousStateComboBox.setCurrentItem (index_AS)

        self.SetZonesFrame.IStartIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][2]))
        self.SetZonesFrame.JStartIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][3]))
        self.SetZonesFrame.IEndIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][4]))
        self.SetZonesFrame.JEndIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][5]))
        
        try:
            if str (Zone_Material_AqueousState_list  [index][6]) == 'Boundary':
                self.SetZonesFrame.BoundaryCheckBox.setChecked (1)
            else:
                self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
                pass
        except:
            pass
        
    def SetZonesFrame_activateTimeVariation (self):

        if self.SetZonesFrame.DefineAsBoundaryCheckBox.isOn ():
            self.SetZonesFrame.QHGroupBox11.setEnabled (1)
        else:
            self.SetZonesFrame.QHGroupBox11.setEnabled (0)
            self.SetZonesFrame.TimeVariationCheckBox.setChecked (0)

    def SetZonesFrame_activateTimeVariation_2 (self):

        if self.SetZonesFrame.BoundaryCheckBox.isOn ():
            self.SetZonesFrame.QHGroupBox11.setEnabled (1)
        else:
            self.SetZonesFrame.QHGroupBox11.setEnabled (0)
            self.SetZonesFrame.TimeVariationCheckBox.setChecked (0)

    def SetZonesFrame_timeVariation (self):

        global BoundaryConditionTimeVariation_dict

        if self.SetZonesFrame.TimeVariationCheckBox.isOn ():
            self.SetZonesFrame_timeVariation_on ()
            boundary = ''
            if mw.SetZonesFrame.Organizer[0].isChecked ():
                boundary = str (mw.SetZonesFrame.NewZoneNameLineEdit.text ())
            else:
                boundary = str (mw.SetZonesFrame.ZonesComboBox.currentText ())
            if BoundaryConditionTimeVariation_dict.has_key (boundary):
                pass
            else:
                BoundaryConditionTimeVariation_dict [boundary] = []
        else:
            pass

    def SetZonesFrame_timeVariation_on (self):

        global BoundaryConditionTimeVariation_dict

        self.BoundaryConditionTimeVariationFrame = QFrame ()
        self.BoundaryConditionTimeVariationFrame.setCaption ('Boundary Condition Time Variation')
        setPosition (self.BoundaryConditionTimeVariationFrame)

        self.BoundaryConditionTimeVariationFrame.mainLayout = QVBoxLayout (self.BoundaryConditionTimeVariationFrame, 10, -1, 'BoundaryConditionTimeVariation_mainLayout')
        self.BoundaryConditionTimeVariationFrame.mainLayout.setMargin (Marge)
        self.BoundaryConditionTimeVariationFrame.mainLayout.setSpacing (Space)

        #BoundaryConditionTimeVariationFrame_comment = Comments ['BoundaryConditionTimeVariation']

        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        #QToolTip.add (self.BoundaryConditionTimeVariation.QHGroupBoxA, BoundaryConditionTimeVariation_comment)

        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBoxA)

        self.BoundaryConditionTimeVariationFrame.QHGroupBox5 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox5.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox5.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox5)

        self.boundary = ''
        if mw.SetZonesFrame.Organizer[0].isChecked ():
            self.boundary = str (mw.SetZonesFrame.NewZoneNameLineEdit.text ())
        else:
            self.boundary = str (mw.SetZonesFrame.ZonesComboBox.currentText ())
        self.BoundaryConditionTimeVariationFrame.BoundaryLabel = QLabel ('Considered Boundary: '+self.boundary, self.BoundaryConditionTimeVariationFrame.QHGroupBox5)

        self.BoundaryConditionTimeVariationFrame.QHGroupBox0 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox0.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox0.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)

        self.BoundaryConditionTimeVariationFrame.QVBox00 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)
        self.BoundaryConditionTimeVariationFrame.QVBox01 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)

        self.BoundaryConditionTimeVariationFrame.QVBox00.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox00.setSpacing (5)
        self.BoundaryConditionTimeVariationFrame.QVBox01.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox01.setSpacing (5)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox.setMinimumSize (20, 20)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox.setMaximumSize (20, 20)

        self.BoundaryConditionTimeVariationFrame.TimeLabel = QLabel ('Time ('+str (Time_Unit)+')', self.BoundaryConditionTimeVariationFrame.QVBox01)

        self.BoundaryConditionTimeVariationFrame.TimeLineEdit = QLineEdit (self.BoundaryConditionTimeVariationFrame.QVBox01)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setMinimumSize (120, 25)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setMaximumSize (120, 25)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setFocus ()

        self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel = QLabel ('Aqueous States', self.BoundaryConditionTimeVariationFrame.QVBox00)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel.resize (self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel.sizeHint ())

        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox = QComboBox (self.BoundaryConditionTimeVariationFrame.QVBox00)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
#  connect
        i = 0
        while i < len (AqueousStates_list):
            self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i])
            i = i+1

        self.BoundaryConditionTimeVariationFrame.QHGroupBox1 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox1.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox1.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox1)

        self.BoundaryConditionTimeVariationFrame.QVBox10 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox1)
        self.BoundaryConditionTimeVariationFrame.QVBox10.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox10.setSpacing (0)

        self.BoundaryConditionTimeVariationFrame.AssociationsLabel = QLabel ('Already Associated', self.BoundaryConditionTimeVariationFrame.QVBox10)

        self.BoundaryConditionTimeVariationFrame.AssociationsListBox = QListBox (self.BoundaryConditionTimeVariationFrame.QVBox10)
        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.setMinimumHeight (100)
        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.setMaximumHeight (100)

        if BoundaryConditionTimeVariation_dict.has_key (self.boundary):
            for a in BoundaryConditionTimeVariation_dict [self.boundary]:
                self.BoundaryConditionTimeVariationFrame.AssociationsListBox.insertItem (a [0]+' - '+a [1])
        else:
            pass

        self.BoundaryConditionTimeVariationFrame.QHGroupBox2 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox2.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox2.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox2)

        self.BoundaryConditionTimeVariationFrame.DonePB = QPushButton ('Done', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.ApplyPB = QPushButton ('Apply', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.DeletePB = QPushButton ('Delete', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.HelpPB = QPushButton ('Help', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)

        self.connect (self.BoundaryConditionTimeVariationFrame.DonePB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_done)
        self.connect (self.BoundaryConditionTimeVariationFrame.ApplyPB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_apply)
        self.connect (self.BoundaryConditionTimeVariationFrame.DeletePB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_delete)
        self.connect (self.BoundaryConditionTimeVariationFrame.HelpPB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_help)

        self.BoundaryConditionTimeVariationFrame.show ()


# debug_time


    def BoundaryConditionTimeVariationFrame_done (self):

        self.BoundaryConditionTimeVariationFrame.close ()

    def BoundaryConditionTimeVariationFrame_apply (self):

        global BoundaryConditionTimeVariation_dict

        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.insertItem (str (self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.currentText ())+' - '+str (self.BoundaryConditionTimeVariationFrame.TimeLineEdit.text ()))
        tmp_list = []
        tmp_list.append (str (self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.currentText ()))
        tmp_list.append (str (self.BoundaryConditionTimeVariationFrame.TimeLineEdit.text ()))
        BoundaryConditionTimeVariation_dict [mw.boundary].append (tmp_list)
        print BoundaryConditionTimeVariation_dict

    def BoundaryConditionTimeVariationFrame_delete (self):

        global BoundaryConditionTimeVariation_dict

        if str (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.count ()) != '0':
            if str (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ()) != '-1':
                self.BoundaryConditionTimeVariationFrame.AssociationsListBox.removeItem (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ())
                del BoundaryConditionTimeVariation_dict [mw.boundary][self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ()]
            else:
                self.BoundaryConditionTimeVariationFrameMB = QMessageBox()
                self.BoundaryConditionTimeVariationFrameMB.setCaption ('Error')
                self.BoundaryConditionTimeVariationFrameMB.setText ('You have to select an association to delete it.')
                self.BoundaryConditionTimeVariationFrameMB.setIcon (QMessageBox.Critical)
                self.BoundaryConditionTimeVariationFrameMB.show ()
        else:
            self.BoundaryConditionTimeVariationFrameMB = QMessageBox()
            self.BoundaryConditionTimeVariationFrameMB.setCaption ('Error')
            self.BoundaryConditionTimeVariationFrameMB.setText ('There is no Association.')
            self.BoundaryConditionTimeVariationFrameMB.setIcon (QMessageBox.Critical)
            self.BoundaryConditionTimeVariationFrameMB.show ()
        print BoundaryConditionTimeVariation_dict

    def BoundaryConditionTimeVariationFrame_help (self):

        pass

    def initial_conditions (self):
    
        self.InitialConditionsFrame = QFrame ()
        self.InitialConditionsFrame.setCaption ('Initial Conditions')
        setPosition (self.InitialConditionsFrame)

        self.InitialConditionsFrame.mainLayout = QVBoxLayout (self.InitialConditionsFrame, 10,-1, 'InitialConditionsFrame_mainLayout')
        self.InitialConditionsFrame.mainLayout.setMargin (Marge)
        self.InitialConditionsFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #InitialConditions_comment = Comments ['InitialConditions']

        self.InitialConditionsFrame.QHGroupBoxA = QHGroupBox (self.InitialConditionsFrame)
        #QToolTip.add (self.InitialConditionsFrame.QHGroupBoxA, InitialConditions_comment)

        self.InitialConditionsFrame.QHGroupBoxA.setMargin (5)
        self.InitialConditionsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.InitialConditionsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.InitialConditionsFrame.mainLayout.addWidget (self.InitialConditionsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.InitialConditionsFrame.QHGroupBox1 = QHGroupBox (self.InitialConditionsFrame)
        self.InitialConditionsFrame.QHGroupBox1.setMargin (10)
        self.InitialConditionsFrame.QHGroupBox1.setMidLineWidth (0)
        self.InitialConditionsFrame.mainLayout.addWidget (self.InitialConditionsFrame.QHGroupBox1)

        self.InitialConditionsFrame.QVBox10 = QVBox (self.InitialConditionsFrame.QHGroupBox1)
        #self.InitialConditionsFrame.QVBox12 = QVBox (self.InitialConditionsFrame.QHGroupBox1)
        #self.InitialConditionsFrame.QVBox11 = QVBox (self.InitialConditionsFrame.QHGroupBox1)

        self.InitialConditionsFrame.QVBox10.setMargin (0)
        self.InitialConditionsFrame.QVBox10.setSpacing (5)
        #self.InitialConditionsFrame.QVBox11.setMargin (0)
        #self.InitialConditionsFrame.QVBox11.setSpacing (5)

        #self.InitialConditionsFrame.QVBox12.setMinimumSize (25, 25)
        #self.InitialConditionsFrame.QVBox12.setMaximumSize (25, 25)

        self.InitialConditionsFrame.NewZoneNameLabel =  QLabel ('Zone Name', self.InitialConditionsFrame.QVBox10)
        self.InitialConditionsFrame.NewZoneNameLabel.setMinimumHeight (15)
        self.InitialConditionsFrame.NewZoneNameLabel.setMaximumHeight (15)

        self.InitialConditionsFrame.ZoneNameComboBox = QComboBox (self.InitialConditionsFrame.QVBox10)
        self.InitialConditionsFrame.ZoneNameComboBox.setMinimumSize (200, 25)
        self.InitialConditionsFrame.ZoneNameComboBox.setMaximumSize (200, 25)

        i = 0
        while i < len (self.mesh_zones_names):
            self.InitialConditionsFrame.ZoneNameComboBox.insertItem (str (self.mesh_zones_names [i])) 
            i = i+1
        i = 0

#------------------------------------------------------------------------------------------------------------------------------------------

        self.InitialConditionsFrame.QHGroupBox3 = QHGroupBox (self.InitialConditionsFrame)
        self.InitialConditionsFrame.QHGroupBox3.setMargin (10)
        self.InitialConditionsFrame.QHGroupBox3.setMidLineWidth (0)
        self.InitialConditionsFrame.mainLayout.addWidget (self.InitialConditionsFrame.QHGroupBox3)

        self.InitialConditionsFrame.QVBox30 = QVBox (self.InitialConditionsFrame.QHGroupBox3)
        #self.InitialConditionsFrame.QVBox31 = QVBox (self.InitialConditionsFrame.QHGroupBox3)

        self.InitialConditionsFrame.QVBox30.setMargin (0)
        self.InitialConditionsFrame.QVBox30.setSpacing (5)
        #self.InitialConditionsFrame.QVBox31.setMargin (0)
        #self.InitialConditionsFrame.QVBox31.setSpacing (5)

        self.InitialConditionsFrame.AqueousStateLabel =  QLabel ('Zone Aqueous State', self.InitialConditionsFrame.QVBox30)

        self.InitialConditionsFrame.AqueousStateComboBox = QComboBox (self.InitialConditionsFrame.QVBox30)
        self.InitialConditionsFrame.AqueousStateComboBox.setMinimumSize (200, 25)
        self.InitialConditionsFrame.AqueousStateComboBox.setMaximumSize (200, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Solutions aqueuses definies dans la fenetre 'AqueousSolution' 

        i = 0
        if (len (AqueousStates_list) != 0):
            while i < len (AqueousStates_list):
                self.InitialConditionsFrame.AqueousStateComboBox.insertItem (AqueousStates_list [i])
                i = i+1
        else:
            self.InitialConditionsFrame.NoASMB = QMessageBox()
            setPosition (self.InitialConditionsFrame.NoASMB)
            self.InitialConditionsFrame.NoASMB.setCaption ('Error')
            self.InitialConditionsFrame.NoASMB.setText ('No Aqueous State has been defined.')
            self.InitialConditionsFrame.NoASMB.setIcon (QMessageBox.Critical)
            self.InitialConditionsFrame.NoASMB.show ()
            pass

#------------------------------------------------------------------------------------------------------------------------------------------

        self.InitialConditionsFrame.QHGroupBox6 = QHGroupBox (self.InitialConditionsFrame)
        self.InitialConditionsFrame.QHGroupBox6.setMidLineWidth (0)
        self.InitialConditionsFrame.mainLayout.addWidget (self.InitialConditionsFrame.QHGroupBox6)

        self.InitialConditionsFrame.OKPB = QPushButton ('OK', self.InitialConditionsFrame.QHGroupBox6)
        self.InitialConditionsFrame.ChangeCreatePB = QPushButton ('&Change/&Create', self.InitialConditionsFrame.QHGroupBox6)
        self.InitialConditionsFrame.DeleteZonePB = QPushButton ('De&lete', self.InitialConditionsFrame.QHGroupBox6)
        self.InitialConditionsFrame.CancelPB = QPushButton ('Cancel', self.InitialConditionsFrame.QHGroupBox6)
        self.InitialConditionsFrame.HelpPB = QPushButton ('&Help', self.InitialConditionsFrame.QHGroupBox6)

        #QToolTip.add (self.SetZonesFrame.DeleteZonePB, 'Press CTRL+L to delete a Zone from the Zones Combo Box')
        #QToolTip.add (self.SetZonesFrame.CancelPB, 'Press CTRL+Q to close this window')
        #QToolTip.add (self.SetZonesFrame.HelpPB, 'Press CTRL+H for Help')

        #self.SetZonesFrame.DeleteZonePB.setAccel (Qt.CTRL + Qt.Key_L)
        #self.SetZonesFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        #self.SetZonesFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.InitialConditionsFrame.OKPB, SIGNAL('clicked()'), self.InitialConditionsFrame_ok)
        self.connect (self.InitialConditionsFrame.ChangeCreatePB, SIGNAL('clicked()'), self.InitialConditionsFrame_changecreate)
        #self.connect (self.InitialConditionsFrame.DeleteZonePB, SIGNAL('clicked()'), self.InitialConditionsFrame_delete_zone)
        self.connect (self.InitialConditionsFrame.CancelPB, SIGNAL('clicked()'), self.InitialConditionsFrame_cancel)
        self.connect (self.InitialConditionsFrame.HelpPB, SIGNAL('clicked()'), self.InitialConditionsFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.InitialConditionsFrame.show ()



    def InitialConditionsFrame_ok (self):
    
        self.InitialConditionsFrame.close ()


    def InitialConditionsFrame_changecreate (self):

        global InitialConditions_list
	
	tmp_list = []
        tmp_list.append (str (self.InitialConditionsFrame.ZoneNameComboBox.currentText ()))
	tmp_list.append (str (self.InitialConditionsFrame.AqueousStateComboBox.currentText ()))
	
	InitialConditions_list.append (tmp_list)
	
	print InitialConditions_list


# debug_initialconditions

    def InitialConditionsFrame_cancel (self):
    
        self.InitialConditionsFrame.close ()

    def InitialConditionsFrame_help (self):
      
        self.Help ()












# debug_boundary

    def unstructured_boundary_conditions (self):
    
        self.BoundaryConditionsFrame = QFrame ()
        self.BoundaryConditionsFrame.setCaption ('Boundary Conditions')
        setPosition (self.BoundaryConditionsFrame)

        self.BoundaryConditionsFrame.mainLayout = QVBoxLayout (self.BoundaryConditionsFrame, 10,-1, 'BoundaryConditionsFrame_mainLayout')
        self.BoundaryConditionsFrame.mainLayout.setMargin (Marge)
        self.BoundaryConditionsFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #BoundaryConditions_comment = Comments ['BoundaryConditions']

        self.BoundaryConditionsFrame.QHGroupBoxA = QHGroupBox (self.BoundaryConditionsFrame)
        #QToolTip.add (self.BoundaryConditionsFrame.QHGroupBoxA, BoundaryConditions_comment)

        self.BoundaryConditionsFrame.QHGroupBoxA.setMargin (5)
        self.BoundaryConditionsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.BoundaryConditionsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.QHGroupBox1 = QHGroupBox (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.QHGroupBox1.setMargin (10)
        self.BoundaryConditionsFrame.QHGroupBox1.setMidLineWidth (0)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBox1)

        self.BoundaryConditionsFrame.QVBox10 = QVBox (self.BoundaryConditionsFrame.QHGroupBox1)
        #self.BoundaryConditionsFrame.QVBox12 = QVBox (self.InitialConditionsFrame.QHGroupBox1)
        #self.BoundaryConditionsFrame.QVBox11 = QVBox (self.InitialConditionsFrame.QHGroupBox1)

        self.BoundaryConditionsFrame.QVBox10.setMargin (0)
        self.BoundaryConditionsFrame.QVBox10.setSpacing (5)
        #self.InitialConditionsFrame.QVBox11.setMargin (0)
        #self.InitialConditionsFrame.QVBox11.setSpacing (5)

        #self.InitialConditionsFrame.QVBox12.setMinimumSize (25, 25)
        #self.InitialConditionsFrame.QVBox12.setMaximumSize (25, 25)

        self.BoundaryConditionsFrame.NewZoneNameLabel =  QLabel ('Boundary Name', self.BoundaryConditionsFrame.QVBox10)
        self.BoundaryConditionsFrame.NewZoneNameLabel.setMinimumHeight (15)
        self.BoundaryConditionsFrame.NewZoneNameLabel.setMaximumHeight (15)

        self.BoundaryConditionsFrame.ZoneNameComboBox = QComboBox (self.BoundaryConditionsFrame.QVBox10)
        self.BoundaryConditionsFrame.ZoneNameComboBox.setMinimumSize (200, 25)
        self.BoundaryConditionsFrame.ZoneNameComboBox.setMaximumSize (200, 25)

        i = 0
        while i < len (self.mesh_boundaries_names):
            self.BoundaryConditionsFrame.ZoneNameComboBox.insertItem (str (self.mesh_boundaries_names [i])) 
            i = i+1
        i = 0

#------------------------------------------------------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.QHGroupBox3 = QHGroupBox (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.QHGroupBox3.setMargin (10)
        self.BoundaryConditionsFrame.QHGroupBox3.setMidLineWidth (0)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBox3)

        self.BoundaryConditionsFrame.QVBox30 = QVBox (self.BoundaryConditionsFrame.QHGroupBox3)
        #self.InitialConditionsFrame.QVBox31 = QVBox (self.InitialConditionsFrame.QHGroupBox3)

        self.BoundaryConditionsFrame.QVBox30.setMargin (0)
        self.BoundaryConditionsFrame.QVBox30.setSpacing (5)
        #self.InitialConditionsFrame.QVBox31.setMargin (0)
        #self.InitialConditionsFrame.QVBox31.setSpacing (5)
                                   
        self.BoundaryConditionsFrame.AqueousStateLabel =  QLabel ('Zone Aqueous State', self.BoundaryConditionsFrame.QVBox30)

        self.BoundaryConditionsFrame.AqueousStateComboBox = QComboBox (self.BoundaryConditionsFrame.QVBox30)
        self.BoundaryConditionsFrame.AqueousStateComboBox.setMinimumSize (200, 25)
        self.BoundaryConditionsFrame.AqueousStateComboBox.setMaximumSize (200, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Solutions aqueuses definies dans la fenetre 'AqueousSolution' 

        i = 0
        if (len (AqueousStates_list) != 0):
            while i < len (AqueousStates_list):
                self.BoundaryConditionsFrame.AqueousStateComboBox.insertItem (AqueousStates_list [i])
                i = i+1
        else:
            self.BoundaryConditionsFrame.NoASMB = QMessageBox()
            setPosition (self.BoundaryConditionsFrame.NoASMB)
            self.BoundaryConditionsFrame.NoASMB.setCaption ('Error')
            self.BoundaryConditionsFrame.NoASMB.setText ('No Aqueous State has been defined.')
            self.BoundaryConditionsFrame.NoASMB.setIcon (QMessageBox.Critical)
            self.BoundaryConditionsFrame.NoASMB.show ()
            pass

#------------------------------------------------------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.QHGroupBox6 = QHGroupBox (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.QHGroupBox6.setMidLineWidth (0)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBox6)

        self.BoundaryConditionsFrame.OKPB = QPushButton ('OK', self.BoundaryConditionsFrame.QHGroupBox6)
        self.BoundaryConditionsFrame.ChangeCreatePB = QPushButton ('&Change/&Create', self.BoundaryConditionsFrame.QHGroupBox6)
        self.BoundaryConditionsFrame.DeleteZonePB = QPushButton ('De&lete', self.BoundaryConditionsFrame.QHGroupBox6)
        self.BoundaryConditionsFrame.CancelPB = QPushButton ('Cancel', self.BoundaryConditionsFrame.QHGroupBox6)
        self.BoundaryConditionsFrame.HelpPB = QPushButton ('&Help', self.BoundaryConditionsFrame.QHGroupBox6)

        #QToolTip.add (self.SetZonesFrame.DeleteZonePB, 'Press CTRL+L to delete a Zone from the Zones Combo Box')
        #QToolTip.add (self.SetZonesFrame.CancelPB, 'Press CTRL+Q to close this window')
        #QToolTip.add (self.SetZonesFrame.HelpPB, 'Press CTRL+H for Help')

        #self.SetZonesFrame.DeleteZonePB.setAccel (Qt.CTRL + Qt.Key_L)
        #self.SetZonesFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        #self.SetZonesFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.BoundaryConditionsFrame.OKPB, SIGNAL('clicked()'), self.UnstructuredBoundaryConditionsFrame_ok)
        self.connect (self.BoundaryConditionsFrame.ChangeCreatePB, SIGNAL('clicked()'), self.UnstructuredBoundaryConditionsFrame_changecreate)
        #self.connect (self.BoundaryConditionsFrame.DeleteZonePB, SIGNAL('clicked()'), self.UnstructuredBoundaryConditionsFrame_delete_zone)
        self.connect (self.BoundaryConditionsFrame.CancelPB, SIGNAL('clicked()'), self.UnstructuredBoundaryConditionsFrame_cancel)
        self.connect (self.BoundaryConditionsFrame.HelpPB, SIGNAL('clicked()'), self.UnstructuredBoundaryConditionsFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.show ()



    def UnstructuredBoundaryConditionsFrame_ok (self):
    
        self.BoundaryConditionsFrame.close ()
	
    def UnstructuredBoundaryConditionsFrame_changecreate (self):

        global BoundaryConditions_list
	
	tmp_list = []
        tmp_list.append (str (self.BoundaryConditionsFrame.ZoneNameComboBox.currentText ()))
	tmp_list.append (str (self.BoundaryConditionsFrame.AqueousStateComboBox.currentText ()))
	
	BoundaryConditions_list.append (tmp_list)
	
	print BoundaryConditions_list




    def UnstructuredBoundaryConditionsFrame_cancel (self):
    
        self.BoundaryConditionsFrame.close ()

    def UnstructuredBoundaryConditionsFrame_help (self):

        self.Help ()


# debug_boundary





    def periodic_conditions (self):
    
        self.under_development()




# debug_edit

    def read (self):
    
        global Medfile

# debug_read

        medfile = QFileDialog.getOpenFileName (os.environ['ALLI_BUILD'] + '/share/alliances/med/', "*.med", self)  
        if medfile.isEmpty ():
            return
        else:
            self.grid_menu.setItemEnabled (self.checkID, 1)
            self.grid_menu.setItemEnabled (self.displayID, 1)
            self.grid_menu.setItemEnabled (self.infoID, 1)
            self.grid_menu.setItemEnabled (self.scaleID, 1)
            self.grid_menu.setItemEnabled (self.smooth_swapID, 0)
            self.grid_menu.setItemEnabled (self.translateID, 0)
        self.medfileName = str (medfile)
        Medfile = str (medfile)
        self.import_unstructured_mesh_from_file (Medfile)


# debug_import_med

       
    def import_unstructured_mesh_from_file (self, medfile):
        
        self.med = importMedFromFile (medfile)

        self.mesh = self.med.getMesh(self.med.getMeshesNames()[0])
        self.mesh_name = self.mesh.getName ()
        self.space_dims = self.mesh.getSpaceDimensions ()
        self.mesh_dims = self.mesh.getMeshDimensions ()
        self.mesh_coordinates_system = self.mesh.getCoordinatesSystem ()
        self.mesh_coordinates_names = self.mesh.getCoordinatesNames ()
        self.mesh_nb_nodes = self.mesh.getNbNodes ()
        self.mesh_coordinates = self.mesh.getCoordinates ()
        try:
            self.mesh_types_MED_CELL = self.mesh.getTypes (MED_CELL)
        except:
            pass
        try:
            self.nbElements_CELL_1 = self.mesh.getNbElements (MED_CELL, 1)
        except:
            self.nbElements_CELL_1 = 0    
        try:
            self.nbElements_CELL_102 = self.mesh.getNbElements (MED_CELL, 102)
        except:
            self.nbElements_CELL_102 = 0    
        try:
            self.nbElements_CELL_103 = self.mesh.getNbElements (MED_CELL, 103)
        except:
            self.nbElements_CELL_103 = 0    
        try:
            self.nbElements_CELL_203 = self.mesh.getNbElements (MED_CELL, 203)
        except:
            self.nbElements_CELL_203 = 0    
        try:
            self.nbElements_CELL_204 = self.mesh.getNbElements (MED_CELL, 204)
        except:
            self.nbElements_CELL_204 = 0    
        try:
            self.nbElements_CELL_206 = self.mesh.getNbElements (MED_CELL, 206)
        except:
            self.nbElements_CELL_206 = 0    
        try:
            self.nbElements_CELL_208 = self.mesh.getNbElements (MED_CELL, 208)
        except:
            self.nbElements_CELL_208 = 0    
        try:
            self.nbElements_CELL_304 = self.mesh.getNbElements (MED_CELL, 304)
        except:
            self.nbElements_CELL_304 = 0    
        try:
            self.nbElements_CELL_305 = self.mesh.getNbElements (MED_CELL, 305)
        except:
            self.nbElements_CELL_305 = 0    
        try:
            self.nbElements_CELL_306 = self.mesh.getNbElements (MED_CELL, 306)
        except:
            self.nbElements_CELL_306 = 0    
        try:
            self.nbElements_CELL_308 = self.mesh.getNbElements (MED_CELL, 308)
        except:
            self.nbElements_CELL_308 = 0    
        try:
            self.nbElements_CELL_310 = self.mesh.getNbElements (MED_CELL, 310)
        except:
            self.nbElements_CELL_310 = 0    
        try:
            self.nbElements_CELL_313 = self.mesh.getNbElements (MED_CELL, 313)
        except:
            self.nbElements_CELL_313 = 0    
        try:
            self.nbElements_CELL_315 = self.mesh.getNbElements (MED_CELL, 315)
        except:
            self.nbElements_CELL_315 = 0    
        try:
            self.nbElements_CELL_320 = self.mesh.getNbElements (MED_CELL, 320)
        except:
            self.nbElements_CELL_320 = 0    
        try:
            self.mesh_types_MED_FACE = self.mesh.getTypes (MED_FACE)
        except:
            pass
        try:
            self.nbElements_FACE_203 = self.mesh.getNbElements (MED_FACE, 203)
        except:
            self.nbElements_FACE_203 = 0    
        try:
            self.nbElements_FACE_204 = self.mesh.getNbElements (MED_FACE, 204)
        except:
            self.nbElements_FACE_204 = 0    
        try:
            self.nbElements_FACE_206 = self.mesh.getNbElements (MED_FACE, 206)
        except:
            self.nbElements_FACE_206 = 0    
        try:
            self.nbElements_FACE_208 = self.mesh.getNbElements (MED_FACE, 208)
        except:
            self.nbElements_FACE_208 = 0    
        try:
            self.mesh_types_MED_EDGE = self.mesh.getTypes (MED_EDGE)
        except:
            pass
        try:
            self.nbElements_EDGE_102 = self.mesh.getNbElements (MED_EDGE, 102)
        except:
            self.nbElements_EDGE_102 = 0    
        try:
            self.nbElements_EDGE_103 = self.mesh.getNbElements (MED_EDGE, 103)
        except:
            self.nbElements_EDGE_103 = 0    

        self.mesh_zones_names = self.mesh.getZonesNames ()
	i = len (self.mesh_zones_names) - 1
	while i >= 0:
	    if str (self.mesh_zones_names[i]).find ('FAM_')!=-1 or str (self.mesh_zones_names[i]).find ('fam-')!=-1:
	        del (self.mesh_zones_names[i])
            else:
	        pass
	    i = i-1
        self.mesh_boundaries_names = self.mesh.getBoundariesNames ()
	i = len (self.mesh_boundaries_names) - 1
	while i >= 0:
	    if str (self.mesh_boundaries_names[i]).find ('FAM_')!=-1 or str (self.mesh_boundaries_names[i]).find ('fam-')!=-1:
	        del (self.mesh_boundaries_names[i])
            else:
	        pass
	    i = i-1


        #self.mesh_zones = []
        #for zone_name in self.mesh_zones_names:
        #    self.mesh_zones.append (self.mesh.getZone (zone_name))
            
# debug_read
# debug_command

    def size (self):
    
        pass

    def info (self):
    
        self.gridInfoFrame = mesh_info ()
        

###########################################################################################
##                                                                                       ##
##                         TITLE OF THE STUDY FRAME (BEGINNING)                          ##
##                                                                                       ##
###########################################################################################


    def title_of_the_study (self):

        self.TitleFrame = QFrame ()
        self.TitleFrame.setCaption ('Title of the study')
        setPosition (self.TitleFrame)

        self.TitleFrame.mainLayout = QVBoxLayout (self.TitleFrame, 10,-1, 'TitleFrame_mainLayout')
        self.TitleFrame.mainLayout.setMargin (Marge)
        self.TitleFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        TitleFrame_comment = Comments ['Title']

        self.TitleFrame.QHGroupBoxA = QHGroupBox (self.TitleFrame)
	QToolTip.add (self.TitleFrame.QHGroupBoxA, TitleFrame_comment)

        self.TitleFrame.QHGroupBoxA.setMargin (5)
        self.TitleFrame.QHGroupBoxA.setMidLineWidth (0)
        self.TitleFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.TitleFrame.mainLayout.addWidget (self.TitleFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.TitleFrame.QHGroupBox0 = QHGroupBox (self.TitleFrame)
        self.TitleFrame.QHGroupBox0.setMargin (10)
        self.TitleFrame.QHGroupBox0.setMidLineWidth (0)
        self.TitleFrame.mainLayout.addWidget (self.TitleFrame.QHGroupBox0)

        self.TitleFrame.NameOfTheStudyLabel = QLabel ('Title', self.TitleFrame.QHGroupBox0)
        self.TitleFrame.NameOfTheStudyLabel.resize (self.TitleFrame.NameOfTheStudyLabel.sizeHint ())

        self.TitleFrame.NameOfTheStudyLineEdit = QLineEdit (self.TitleFrame.QHGroupBox0)
        self.TitleFrame.NameOfTheStudyLineEdit.setMinimumSize (200, 25)
        self.TitleFrame.NameOfTheStudyLineEdit.setMaximumSize (200, 25)
        self.TitleFrame.NameOfTheStudyLineEdit.setText (Title)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.TitleFrame.QHGroupBox1 = QHGroupBox (self.TitleFrame)
        self.TitleFrame.QHGroupBox1.setMargin (10)
        self.TitleFrame.QHGroupBox1.setMidLineWidth (0)
        self.TitleFrame.mainLayout.addWidget (self.TitleFrame.QHGroupBox1)

        self.TitleFrame.OKPB = QPushButton ('OK', self.TitleFrame.QHGroupBox1)
        self.TitleFrame.OKPB.setFocus ()
        self.TitleFrame.CancelPB = QPushButton ('Cancel', self.TitleFrame.QHGroupBox1)
        self.TitleFrame.HelpPB = QPushButton ('&Help', self.TitleFrame.QHGroupBox1)

        self.connect (self.TitleFrame.OKPB, SIGNAL ('clicked ()'), self.TitleFrame_ok)
        self.connect (self.TitleFrame.CancelPB, SIGNAL ('clicked ()'), self.TitleFrame_cancel)
        self.connect (self.TitleFrame.HelpPB, SIGNAL ('clicked ()'), self.TitleFrame_help)

        self.TitleFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def TitleFrame_ok (self):

        global Title
        global Passed_Into_TitleFrame

        Title = str (self.TitleFrame.NameOfTheStudyLineEdit.text ())
        if Title == '':
            self.TitleMB = QMessageBox()
            self.TitleMB.setCaption ('Error')
            self.TitleMB.setText ('No title has been defined.')
            self.TitleMB.setIcon (QMessageBox.Critical)
            self.TitleMB.show ()
        else:
            Title = replace (str (Title), " ", "_")
            Passed_Into_TitleFrame = 1
            self.menu_Activation ()
            self.view.tree_menu_enabling ()
            self.define.setItemEnabled (self.unitsID, 1)
            if Passed_Into_UnitsFrame == 0 and mode == 'structured':
                self.units ()        
            self.TitleFrame.close ()
                        
    def TitleFrame_cancel (self):

        self.TitleFrame.close ()

    def TitleFrame_help (self):

        self.Help ()

###########################################################################################
##                                                                                       ##
##                           TITLE OF THE STUDY FRAME (END)                              ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                             SET UNITS FRAME (BEGINNING)                               ##
##                                                                                       ##
###########################################################################################
# debug_units

    def units (self):

        self.SetUnitsFrame = QFrame ()
        self.SetUnitsFrame.setCaption ('Units')
        setPosition (self.SetUnitsFrame)
        
        self.SetUnitsFrame.mainLayout = QVBoxLayout (self.SetUnitsFrame, 10, -1, "SetUnitsFrame_mainLayout")
        self.SetUnitsFrame.mainLayout.setSpacing (5)
        self.SetUnitsFrame.mainLayout.setMargin (5)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        SetUnitsFrame_comment = Comments ['Units']
        
        self.SetUnitsFrame.QHGroupBoxA = QHGroupBox (self.SetUnitsFrame)
	QToolTip.add (self.SetUnitsFrame.QHGroupBoxA, SetUnitsFrame_comment)

        self.SetUnitsFrame.QHGroupBoxA.setMargin (0)
        self.SetUnitsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SetUnitsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SetUnitsFrame.mainLayout.addWidget (self.SetUnitsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.QHGroupBox0 = QHGroupBox (self.SetUnitsFrame)
        self.SetUnitsFrame.QHGroupBox0.setMidLineWidth (0)
        self.SetUnitsFrame.mainLayout.addWidget (self.SetUnitsFrame.QHGroupBox0)

        self.SetUnitsFrame.QVBox01 = QVBox (self.SetUnitsFrame.QHGroupBox0)
        self.SetUnitsFrame.QVBox03 = QVBox (self.SetUnitsFrame.QHGroupBox0)
        self.SetUnitsFrame.QVBox02 = QVBox (self.SetUnitsFrame.QHGroupBox0)

        self.SetUnitsFrame.QVBox01.setMargin (0)
        self.SetUnitsFrame.QVBox01.setSpacing (6)
        self.SetUnitsFrame.QVBox02.setMargin (0)
        self.SetUnitsFrame.QVBox02.setSpacing (6)

        self.SetUnitsFrame.QVBox03.setMinimumSize (20, 10)
        self.SetUnitsFrame.QVBox03.setMaximumSize (20, 10)

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.CalorificCapacityLabel = QLabel ('Calorific Capacity', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.CalorificCapacityLabel.resize (self.SetUnitsFrame.CalorificCapacityLabel.sizeHint())

        self.SetUnitsFrame.CalorificCapacityComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.CalorificCapacityComboBox.resize (self.SetUnitsFrame.CalorificCapacityComboBox.sizeHint())
        self.SetUnitsFrame.CalorificCapacityComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.CalorificCapacityComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.CalorificCapacityComboBox.insertItem ("J/Kg/K", 0)

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.ConcentrationLabel = QLabel ('Concentration', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.ConcentrationLabel.resize (self.SetUnitsFrame.ConcentrationLabel.sizeHint())

        self.SetUnitsFrame.ConcentrationComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.ConcentrationComboBox.resize (self.SetUnitsFrame.ConcentrationComboBox.sizeHint())
        self.SetUnitsFrame.ConcentrationComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.ConcentrationComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.ConcentrationComboBox.insertItem ("moles/l", 0)
        self.SetUnitsFrame.ConcentrationComboBox.insertItem ("moles/m3", 1)

        if Concentration_Unit == 'moles/l':
            self.SetUnitsFrame.ConcentrationComboBox.setCurrentItem (0)
        elif Concentration_Unit == 'moles/m3':
            self.SetUnitsFrame.ConcentrationComboBox.setCurrentItem (1)

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.DensityLabel = QLabel ('Density', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.DensityLabel.resize (self.SetUnitsFrame.DensityLabel.sizeHint())

        self.SetUnitsFrame.DensityComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.DensityComboBox.resize (self.SetUnitsFrame.DensityComboBox.sizeHint())
        self.SetUnitsFrame.DensityComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.DensityComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.DensityComboBox.insertItem ("kg/m3", 0)

#----------------------------------------------------------------------------------------------
#  Pour l instant il n y a qu une unite...

##         if Density_Unit == 'kg/m3':
##             self.SetUnitsFrame.DensityComboBox.setCurrentItem (0)
##         elif Density_Unit == '...':
##             ...
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.DispersivityLabel = QLabel ('Dispersivity', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.DispersivityLabel.resize (self.SetUnitsFrame.DispersivityLabel.sizeHint())

        self.SetUnitsFrame.DispersivityComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.DispersivityComboBox.resize (self.SetUnitsFrame.DispersivityComboBox.sizeHint())
        self.SetUnitsFrame.DispersivityComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.DispersivityComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.DispersivityComboBox.insertItem ("m", 0)

#----------------------------------------------------------------------------------------------
#  Pour l instant il n y a qu une unite...

##         if Dispersivity_Unit == 'm':
##             self.SetUnitsFrame.DispersivityComboBox.setCurrentItem (0)
##         elif Dispersivity_Unit == '...':
##             ...
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.EffectiveDiffusionLabel = QLabel ('Effective Diffusion', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.EffectiveDiffusionLabel.resize (self.SetUnitsFrame.EffectiveDiffusionLabel.sizeHint())

        self.SetUnitsFrame.EffectiveDiffusionComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.EffectiveDiffusionComboBox.resize (self.SetUnitsFrame.EffectiveDiffusionComboBox.sizeHint())
        self.SetUnitsFrame.EffectiveDiffusionComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.EffectiveDiffusionComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.EffectiveDiffusionComboBox.insertItem ("m2/s", 0)
        self.SetUnitsFrame.EffectiveDiffusionComboBox.insertItem ("m2/year", 1)

        if EffectiveDiffusion_Unit == 'm2/s':
            self.SetUnitsFrame.EffectiveDiffusionComboBox.setCurrentItem (0)
        elif EffectiveDiffusion_Unit == 'm2/year':
            self.SetUnitsFrame.EffectiveDiffusionComboBox.setCurrentItem (1)            

#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.EnthalpyLabel = QLabel ('Enthalpy of Formation', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.EnthalpyLabel.resize (self.SetUnitsFrame.EnthalpyLabel.sizeHint())

        self.SetUnitsFrame.EnthalpyComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.EnthalpyComboBox.resize (self.SetUnitsFrame.EnthalpyComboBox.sizeHint())
        self.SetUnitsFrame.EnthalpyComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.EnthalpyComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.EnthalpyComboBox.insertItem ("J/kg", 0)
        self.SetUnitsFrame.EnthalpyComboBox.insertItem ("kJ/mol", 1)

        if Enthalpy_Unit == 'J/kg':
            self.SetUnitsFrame.EnthalpyComboBox.setCurrentItem (0)
        elif Enthalpy_Unit == 'kJ/mol':
            self.SetUnitsFrame.EnthalpyComboBox.setCurrentItem (1)            

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.HeadLabel = QLabel ('Head', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.HeadLabel.resize (self.SetUnitsFrame.HeadLabel.sizeHint())

        self.SetUnitsFrame.HeadComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.HeadComboBox.resize (self.SetUnitsFrame.HeadComboBox.sizeHint())
        self.SetUnitsFrame.HeadComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.HeadComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.HeadComboBox.insertItem ("m", 0)

#----------------------------------------------------------------------------------------------
#  Pour l instant il n y a qu une unite...

##         if Head_Unit == 'm':
##             self.SetUnitsFrame.HeadComboBox.setCurrentItem (0)
##         elif Head_Unit == '...':
##             ...
#----------------------------------------------------------------------------------------------
        
#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.LengthLabel = QLabel ('Length', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.LengthLabel.resize (self.SetUnitsFrame.LengthLabel.sizeHint())

        self.SetUnitsFrame.LengthComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.LengthComboBox.resize (self.SetUnitsFrame.LengthComboBox.sizeHint())
        self.SetUnitsFrame.LengthComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.LengthComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.LengthComboBox.insertItem ("m", 0)

#----------------------------------------------------------------------------------------------
#  Pour l instant il n y a qu une unite...

##         if Length_Unit == 'm':
##             self.SetUnitsFrame.LengthComboBox.setCurrentItem (0)
##         elif Length_Unit == '...':
##             ...
#----------------------------------------------------------------------------------------------        

#----------------------------------------------------------------------------------------------
          
        self.SetUnitsFrame.PermeabilityLabel = QLabel ('Permeability', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.PermeabilityLabel.resize (self.SetUnitsFrame.PermeabilityLabel.sizeHint())

        self.SetUnitsFrame.PermeabilityComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.PermeabilityComboBox.resize (self.SetUnitsFrame.PermeabilityComboBox.sizeHint())
        self.SetUnitsFrame.PermeabilityComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.PermeabilityComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.PermeabilityComboBox.insertItem ("m/s", 0)
        self.SetUnitsFrame.PermeabilityComboBox.insertItem ("m/year", 1)

        if Permeability_Unit == 'm/s':
            self.SetUnitsFrame.PermeabilityComboBox.setCurrentItem (0)
        elif Permeability_Unit == 'm/year':
            self.SetUnitsFrame.PermeabilityComboBox.setCurrentItem (1)            
        
#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.TemperatureLabel = QLabel ('Temperature', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.TemperatureLabel.resize (self.SetUnitsFrame.TemperatureLabel.sizeHint())

        self.SetUnitsFrame.TemperatureComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.TemperatureComboBox.resize (self.SetUnitsFrame.TemperatureComboBox.sizeHint())
        self.SetUnitsFrame.TemperatureComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.TemperatureComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.TemperatureComboBox.insertItem ("Kelvin", 0)
        self.SetUnitsFrame.TemperatureComboBox.insertItem ("Celcius", 1)

#----------------------------------------------------------------------------------------------

        if Temperature_Unit == 'Kelvin':
            self.SetUnitsFrame.TemperatureComboBox.setCurrentItem (0)
        elif Temperature_Unit == 'Celcius':
            self.SetUnitsFrame.TemperatureComboBox.setCurrentItem (1)

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.ThermalConductivityLabel = QLabel ('Thermal Conductivity', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.ThermalConductivityLabel.resize (self.SetUnitsFrame.ThermalConductivityLabel.sizeHint())

        self.SetUnitsFrame.ThermalConductivityComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.ThermalConductivityComboBox.resize (self.SetUnitsFrame.ThermalConductivityComboBox.sizeHint())
        self.SetUnitsFrame.ThermalConductivityComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.ThermalConductivityComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.ThermalConductivityComboBox.insertItem ("kg*m/s3/K", 0)

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.TimeLabel = QLabel ('Time', self.SetUnitsFrame.QVBox01)
        self.SetUnitsFrame.TimeLabel.resize (self.SetUnitsFrame.TimeLabel.sizeHint())

        self.SetUnitsFrame.TimeComboBox = QComboBox (self.SetUnitsFrame.QVBox02)
        self.SetUnitsFrame.TimeComboBox.resize (self.SetUnitsFrame.TimeComboBox.sizeHint())
        self.SetUnitsFrame.TimeComboBox.setMinimumSize (100, 25)
        self.SetUnitsFrame.TimeComboBox.setMaximumSize (100, 25)
        self.SetUnitsFrame.TimeComboBox.insertItem ("s", 0)
        self.SetUnitsFrame.TimeComboBox.insertItem ("year", 1)

        if Time_Unit == 's':
            self.SetUnitsFrame.TimeComboBox.setCurrentItem (0)
        elif Time_Unit == 'year':
            self.SetUnitsFrame.TimeComboBox.setCurrentItem (1)    

#----------------------------------------------------------------------------------------------

        self.SetUnitsFrame.QHGroupBox1 = QHGroupBox (self.SetUnitsFrame)
        self.SetUnitsFrame.QHGroupBox1.setMidLineWidth (0)
        self.SetUnitsFrame.mainLayout.addWidget (self.SetUnitsFrame.QHGroupBox1)

        self.SetUnitsFrameOKPB = QPushButton ('OK', self.SetUnitsFrame.QHGroupBox1, "SetUnitsFrame_ok")
        self.SetUnitsFrameOKPB.setFocus ()
        self.SetUnitsFrameSIPB = QPushButton ('S.I.', self.SetUnitsFrame.QHGroupBox1, "SetUnitsFrame_SI")
        self.SetUnitsFrameCancelPB = QPushButton ('&Cancel', self.SetUnitsFrame.QHGroupBox1, "SetUnitsFrame_cancel")
        self.SetUnitsFrameHelpPB = QPushButton ('&Help', self.SetUnitsFrame.QHGroupBox1, "SetUnitsFrame_help")

        self.connect (self.SetUnitsFrameOKPB, SIGNAL('clicked()'), self.SetUnitsFrame_ok)
        self.connect (self.SetUnitsFrameSIPB, SIGNAL('clicked()'), self.SetUnitsFrame_SI)
        self.connect (self.SetUnitsFrameCancelPB, SIGNAL('clicked()'), self.SetUnitsFrame_cancel)
        self.connect (self.SetUnitsFrameHelpPB, SIGNAL('clicked()'), self.SetUnitsFrame_help)

        QToolTip.add (self.SetUnitsFrameCancelPB, "Press CTRL+C to Close this Window")
        QToolTip.add (self.SetUnitsFrameHelpPB, "Press CTRL+H for Help")
        self.SetUnitsFrameCancelPB.setAccel(Qt.CTRL + Qt.Key_C)
        self.SetUnitsFrameHelpPB.setAccel(Qt.CTRL + Qt.Key_H)

        self.SetUnitsFrame.setMinimumSize (self.SetUnitsFrame.sizeHint())
        self.SetUnitsFrame.setMaximumSize (self.SetUnitsFrame.sizeHint())
        self.SetUnitsFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the SetUnitsFrame
#----------------------------------------------------------------------------------------------

    def SetUnitsFrame_ok (self):

        global Concentration_Unit
        global Density_Unit
        global Dispersivity_Unit
        global EffectiveDiffusion_Unit
        global Enthalpy_Unit
        global Head_Unit
        global Length_Unit
        global Permeability_Unit
        global Temperature_Unit
        global Time_Unit
        global Passed_Into_UnitsFrame

        Concentration_Unit = str (self.SetUnitsFrame.ConcentrationComboBox.currentText ())
        Density_Unit = str (self.SetUnitsFrame.DensityComboBox.currentText ())
        Dispersivity_Unit = str (self.SetUnitsFrame.DispersivityComboBox.currentText ())
        EffectiveDiffusion_Unit = str (self.SetUnitsFrame.EffectiveDiffusionComboBox.currentText ())
        Enthalpy_Unit = str (self.SetUnitsFrame.EnthalpyComboBox.currentText ())
        Head_Unit = str (self.SetUnitsFrame.HeadComboBox.currentText ())
        Length_Unit = str (self.SetUnitsFrame.LengthComboBox.currentText ())
        Permeability_Unit = str (self.SetUnitsFrame.PermeabilityComboBox.currentText ())
        Temperature_Unit = str (self.SetUnitsFrame.TemperatureComboBox.currentText ())
        Time_Unit = str (self.SetUnitsFrame.TimeComboBox.currentText ())

        Passed_Into_UnitsFrame = 1
        self.menu_Activation ()
#        self.activation_test ()
        self.view.tree_menu_enabling ()
        if Passed_Into_Physics_SoftwareFrame == 0 and mode == 'structured':
            self.which_solver ()
        if mode == 'unstructured':
            self.define.setItemEnabled (self.problemID, 1)
        self.SetUnitsFrame.close ()
       
    def SetUnitsFrame_SI (self):

        self.SetUnitsFrame.ConcentrationComboBox.setCurrentItem (1)
        self.SetUnitsFrame.DensityComboBox.setCurrentItem (0)
        self.SetUnitsFrame.DispersivityComboBox.setCurrentItem (0)
        self.SetUnitsFrame.EffectiveDiffusionComboBox.setCurrentItem (0)
        self.SetUnitsFrame.EnthalpyComboBox.setCurrentItem (0)
        self.SetUnitsFrame.HeadComboBox.setCurrentItem (0)
        self.SetUnitsFrame.LengthComboBox.setCurrentItem (0)
        self.SetUnitsFrame.PermeabilityComboBox.setCurrentItem (0)
        self.SetUnitsFrame.TemperatureComboBox.setCurrentItem (0)
        self.SetUnitsFrame.TimeComboBox.setCurrentItem (0)        
        self.SetUnitsFrameOKPB.setFocus ()
                       
    def SetUnitsFrame_cancel (self):

        self.SetUnitsFrame.close ()

    def SetUnitsFrame_help (self):

        self.Help ()




###########################################################################################
##                                                                                       ##
##                             SET UNITS FRAME (END)                                     ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                            WHICH SOLVER FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################



    def which_solver (self):

        self.WhichSolverFrame = QFrame ()
        self.WhichSolverFrame.setCaption ('Physics / Software')
        self.WhichSolverFrame.setMinimumSize (210, 180)
        self.WhichSolverFrame.setMaximumSize (210, 180)
        setPosition (self.WhichSolverFrame)

        self.WhichSolverFrame.mainLayout = QVBoxLayout (self.WhichSolverFrame, 10,-1, "WhichSolverFrame_mainLayout")
        self.WhichSolverFrame.mainLayout.setSpacing (Space)
        self.WhichSolverFrame.mainLayout.setMargin (Marge)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        WhichSolverFrame_comment = Comments ['Physics_Software']
        
        self.WhichSolverFrame.QHGroupBoxA = QHGroupBox (self.WhichSolverFrame)
        QToolTip.add (self.WhichSolverFrame.QHGroupBoxA, WhichSolverFrame_comment)

        self.WhichSolverFrame.QHGroupBoxA.setMargin (5)
        self.WhichSolverFrame.QHGroupBoxA.setMidLineWidth (0)
        self.WhichSolverFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.WhichSolverFrame.mainLayout.addWidget (self.WhichSolverFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.WhichSolverFrame.QHBoxLayout1 = QHBoxLayout ()
        self.WhichSolverFrame.mainLayout.addLayout (self.WhichSolverFrame.QHBoxLayout1)

        self.WhichSolverFrame.QButtonGroup1 = QButtonGroup (self.WhichSolverFrame, "WhichSolverFrame_QButtonGroup1" )
        self.WhichSolverFrame.QButtonGroup1.setMidLineWidth (0)
        self.WhichSolverFrame.QVBoxLayout10 = QVBoxLayout (self.WhichSolverFrame.QButtonGroup1, 10)
        self.WhichSolverFrame.QVBoxLayout10.setMargin (15)
        self.WhichSolverFrame.QVBoxLayout10.setSpacing (15)
        self.WhichSolverFrame.QHBoxLayout1.addWidget (self.WhichSolverFrame.QButtonGroup1)

        self.WhichSolverFrame.Organizer = range (3)

        self.WhichSolverFrame.Organizer[0] = QRadioButton (self.WhichSolverFrame.QButtonGroup1)
        self.WhichSolverFrame.Organizer[0].setText( 'Chemistry' )
        self.WhichSolverFrame.QVBoxLayout10.addWidget (self.WhichSolverFrame.Organizer[0])
        self.connect (self.WhichSolverFrame.Organizer[0], SIGNAL ('clicked ()'), self.disable_porosity)

        self.WhichSolverFrame.Organizer[1] = QRadioButton (self.WhichSolverFrame.QButtonGroup1)
        self.WhichSolverFrame.Organizer[1].setText( 'Transport - Chemistry' )
        self.WhichSolverFrame.QVBoxLayout10.addWidget (self.WhichSolverFrame.Organizer[1])
        self.connect (self.WhichSolverFrame.Organizer[1], SIGNAL ('clicked ()'), self.enable_porosity)

        self.WhichSolverFrame.Organizer[2] = QRadioButton (self.WhichSolverFrame.QButtonGroup1)
        self.WhichSolverFrame.Organizer[2].setText( 'Hydraulic')
        self.WhichSolverFrame.QVBoxLayout10.addWidget (self.WhichSolverFrame.Organizer[2])
        self.connect (self.WhichSolverFrame.Organizer[2], SIGNAL ('clicked ()'), self.disable_porosity)

        self.WhichSolverFrame.QVBoxLayout10.activate()
        self.WhichSolverFrame.QButtonGroup1.adjustSize ()

        if Solver is 'Chemistry':
            self.WhichSolverFrame.Organizer[0].setChecked (1)
        elif Solver is 'Modflow_Mt3d_PhreeqC':
            self.WhichSolverFrame.Organizer[1].setChecked (1)
        elif Solver is 'Modflow':
            self.WhichSolverFrame.Organizer[2].setChecked (1)

        self.WhichSolverFrame.QHGroupBox4 = QHGroupBox ('Porosity', self.WhichSolverFrame)
        self.WhichSolverFrame.QHGroupBox4.setMargin (10)
        self.WhichSolverFrame.QHGroupBox4.setMidLineWidth (0)
        self.WhichSolverFrame.mainLayout.addWidget (self.WhichSolverFrame.QHGroupBox4)

        if Solver == 'Chemistry':
            self.WhichSolverFrame.QHGroupBox4.setEnabled (0)
        elif Solver == 'Modflow_Mt3d_PhreeqC':
            self.WhichSolverFrame.QHGroupBox4.setEnabled (1)
        elif Solver == 'Modflow':
            self.WhichSolverFrame.QHGroupBox4.setEnabled (0)
            
        self.WhichSolverFrame.PorosityComboBox = QComboBox (self.WhichSolverFrame.QHGroupBox4)
        self.WhichSolverFrame.PorosityComboBox.setMinimumHeight (25)
        self.WhichSolverFrame.PorosityComboBox.insertItem ('Constant')
        self.WhichSolverFrame.PorosityComboBox.insertItem ('Variable')

        if PorosityState == 'constant':
            self.WhichSolverFrame.PorosityComboBox.setCurrentItem (0)
        elif PorosityState == 'variable':
            self.WhichSolverFrame.PorosityComboBox.setCurrentItem (1)
        else:
            print 'pb with PorosityState'

        self.WhichSolverFrame.QHGroupBox = QHGroupBox (self.WhichSolverFrame)
        self.WhichSolverFrame.QHGroupBox.setMidLineWidth (0)
        self.WhichSolverFrame.mainLayout.addWidget (self.WhichSolverFrame.QHGroupBox)

        self.WhichSolverFrame.OKPB = QPushButton ('OK', self.WhichSolverFrame.QHGroupBox )
        self.WhichSolverFrame.OKPB.setFocus ()
        self.WhichSolverFrame.CancelPB = QPushButton ('Cancel', self.WhichSolverFrame.QHGroupBox )
        self.WhichSolverFrame.HelpPB = QPushButton ('&Help', self.WhichSolverFrame.QHGroupBox )

        self.connect (self.WhichSolverFrame.OKPB, SIGNAL ('clicked ()'), self.WhichSolverFrame_ok)
        self.connect (self.WhichSolverFrame.CancelPB, SIGNAL ('clicked ()'), self.WhichSolverFrame_cancel)
        self.connect (self.WhichSolverFrame.HelpPB, SIGNAL ('clicked ()'), self.WhichSolverFrame_help)

        self.WhichSolverFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the WhichSolverFrame
#----------------------------------------------------------------------------------------------


    def WhichSolverFrame_ok (self):

        global Solver
        global PorosityState
        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame

        Passed_Into_Physics_SoftwareFrame = 1

        self.menu_Activation ()
        self.view.tree_menu_enabling ()

        if self.WhichSolverFrame.Organizer[0].isChecked ():
            Solver = 'Chemistry'
            #Solver = 'PhreeqC'
            self.chemistry_tool ()
        elif self.WhichSolverFrame.Organizer[1].isChecked ():
            Solver = 'Modflow_Mt3d_PhreeqC'
            self.chemistry_tool ()
        elif self.WhichSolverFrame.Organizer[2].isChecked ():
            Solver = 'Modflow'

        if (str (self.WhichSolverFrame.PorosityComboBox.currentText ())) == 'Constant':
            PorosityState = 'constant'
        else:
            PorosityState = 'variable'
        
       
        self.WhichSolverFrame.close ()

    def WhichSolverFrame_cancel (self):

        self.WhichSolverFrame.close ()

    def WhichSolverFrame_help (self):

        self.Help ()

    def enable_porosity (self):
        self.WhichSolverFrame.QHGroupBox4.setEnabled (1)

    def disable_porosity (self):
        self.WhichSolverFrame.QHGroupBox4.setEnabled (0)
        self.WhichSolverFrame.PorosityComboBox.setCurrentItem (0)



###########################################################################################
##                                                                                       ##
##                           WHICH SOLVER FRAME (END)                                    ##
##                                                                                       ##
###########################################################################################


# debug_problem


    def problem (self):

        self.ProblemFrame = QFrame ()
        self.ProblemFrame.setCaption ('Problem')
        self.ProblemFrame.setMinimumSize (210, 180)
        self.ProblemFrame.setMaximumSize (210, 180)
        setPosition (self.ProblemFrame)

        self.ProblemFrame.mainLayout = QVBoxLayout (self.ProblemFrame, 10,-1, "ProblemFrame_mainLayout")
        self.ProblemFrame.mainLayout.setSpacing (Space)
        self.ProblemFrame.mainLayout.setMargin (Marge)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #ProblemFrame_comment = Comments ['Problem']
        
        self.ProblemFrame.QHGroupBoxA = QHGroupBox (self.ProblemFrame)
        #QToolTip.add (self.ProblemFrame.QHGroupBoxA, ProblemFrame_comment)

        self.ProblemFrame.QHGroupBoxA.setMargin (5)
        self.ProblemFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ProblemFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ProblemFrame.mainLayout.addWidget (self.ProblemFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

# debug_problem


        self.ProblemFrame.QHBoxLayout1 = QHBoxLayout ()
        self.ProblemFrame.mainLayout.addLayout (self.ProblemFrame.QHBoxLayout1)

        self.ProblemFrame.QButtonGroup1 = QButtonGroup (self.ProblemFrame, "ProblemFrame_QButtonGroup1" )
        self.ProblemFrame.QButtonGroup1.setMidLineWidth (0)
        self.ProblemFrame.QVBoxLayout10 = QVBoxLayout (self.ProblemFrame.QButtonGroup1, 10)
        self.ProblemFrame.QVBoxLayout10.setMargin (15)
        self.ProblemFrame.QVBoxLayout10.setSpacing (15)
        self.ProblemFrame.QHBoxLayout1.addWidget (self.ProblemFrame.QButtonGroup1)

        self.ProblemFrame.Organizer = range (3)

        self.ProblemFrame.Organizer[0] = QRadioButton (self.ProblemFrame.QButtonGroup1)
        self.ProblemFrame.Organizer[0].setText( 'Chemistry' )
        self.ProblemFrame.QVBoxLayout10.addWidget (self.ProblemFrame.Organizer[0])
        #self.connect (self.ProblemFrame.Organizer[0], SIGNAL ('clicked ()'), self.enable_chemistry)

        self.ProblemFrame.Organizer[1] = QRadioButton (self.ProblemFrame.QButtonGroup1)
        self.ProblemFrame.Organizer[1].setText( 'Transport - Chemistry' )
        self.ProblemFrame.QVBoxLayout10.addWidget (self.ProblemFrame.Organizer[1])
        #self.connect (self.ProblemFrame.Organizer[1], SIGNAL ('clicked ()'), self.enable_chemistry)

        self.ProblemFrame.Organizer[2] = QRadioButton (self.ProblemFrame.QButtonGroup1)
        self.ProblemFrame.Organizer[2].setText( 'Hydraulic')
        self.ProblemFrame.QVBoxLayout10.addWidget (self.ProblemFrame.Organizer[2])
        #self.connect (self.ProblemFrame.Organizer[2], SIGNAL ('clicked ()'), self.disable_chemistry)

        self.ProblemFrame.QVBoxLayout10.activate()
        self.ProblemFrame.QButtonGroup1.adjustSize ()

        #self.ProblemFrame.QHGroupBox4 = QHGroupBox ('Temperature', self.ProblemFrame)
        self.ProblemFrame.QHGroupBox4 = QHGroupBox (self.ProblemFrame)
        self.ProblemFrame.QHGroupBox4.setMargin (10)
        self.ProblemFrame.QHGroupBox4.setMidLineWidth (0)
        self.ProblemFrame.mainLayout.addWidget (self.ProblemFrame.QHGroupBox4)
        
# debug_problem
        #self.ProblemFrame.TemperatureComboBox = QComboBox (self.ProblemFrame.QHGroupBox4)
        #self.ProblemFrame.TemperatureComboBox.setMinimumHeight (25)
        #self.ProblemFrame.TemperatureComboBox.insertItem ('No')
        #self.ProblemFrame.TemperatureComboBox.insertItem ('Yes')
        self.ProblemFrame.TemperatureCheckBox = QCheckBox (' Temperature', self.ProblemFrame.QHGroupBox4)
        if Thermal == 'On':
            self.ProblemFrame.TemperatureCheckBox.setChecked (1)
        else:
            self.ProblemFrame.TemperatureCheckBox.setChecked (0)

        if Solver is 'Chemistry':
            self.ProblemFrame.Organizer[0].setChecked (1)
            self.ProblemFrame.TemperatureCheckBox.setChecked (0)
            self.ProblemFrame.QHGroupBox4.setEnabled (0)
            self.enable_chemistry ()
        elif Solver is 'Modflow_Mt3d_PhreeqC':
            self.ProblemFrame.Organizer[1].setChecked (1)
            self.ProblemFrame.QHGroupBox4.setEnabled (1)
            self.enable_chemistry ()
        elif Solver is 'Modflow':
            self.ProblemFrame.Organizer[2].setChecked (1)
            self.ProblemFrame.TemperatureCheckBox.setChecked (0)
            self.ProblemFrame.QHGroupBox4.setEnabled (0)
            self.disable_chemistry ()

        self.ProblemFrame.QHGroupBox = QHGroupBox (self.ProblemFrame)
        self.ProblemFrame.QHGroupBox.setMidLineWidth (0)
        self.ProblemFrame.mainLayout.addWidget (self.ProblemFrame.QHGroupBox)

        self.ProblemFrame.OKPB = QPushButton ('OK', self.ProblemFrame.QHGroupBox )
        self.ProblemFrame.OKPB.setFocus ()
        self.ProblemFrame.CancelPB = QPushButton ('Cancel', self.ProblemFrame.QHGroupBox )
        self.ProblemFrame.HelpPB = QPushButton ('&Help', self.ProblemFrame.QHGroupBox )

        self.connect (self.ProblemFrame.OKPB, SIGNAL ('clicked ()'), self.ProblemFrame_ok)
        self.connect (self.ProblemFrame.CancelPB, SIGNAL ('clicked ()'), self.ProblemFrame_cancel)
        self.connect (self.ProblemFrame.HelpPB, SIGNAL ('clicked ()'), self.ProblemFrame_help)
        
        self.ProblemFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the WhichSolverFrame
#----------------------------------------------------------------------------------------------


    def ProblemFrame_ok (self):

        global Solver
        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame
        global Thermal

        Passed_Into_Physics_SoftwareFrame = 1

#        self.menu_Activation ()
#        self.activation_test ()
#        self.view.tree_menu_enabling ()
        self.unstructured_open_menu_activation ()

        if self.ProblemFrame.Organizer[0].isChecked ():
            Solver = 'Chemistry'
            #Solver = 'PhreeqC'
            self.chemistry_tool ()
        elif self.ProblemFrame.Organizer[1].isChecked ():
            Solver = 'Modflow_Mt3d_PhreeqC'
            self.chemistry_transport_tools ()
            if self.ProblemFrame.TemperatureCheckBox.isChecked ():
                Thermal = 'On'
            else:
                Thermal = 'Off'

        elif self.ProblemFrame.Organizer[2].isChecked ():
            Solver = 'Modflow'
            self.chemistry_transport_tools ()
       
        self.ProblemFrame.close ()

    def ProblemFrame_cancel (self):

        self.ProblemFrame.close ()

    def ProblemFrame_help (self):

        self.Help ()

    def disable_chemistry (self):
        pass
        #print 'disable_chemistry'
##         self.models.setItemEnabled (1, FALSE)

    def enable_chemistry (self):
        pass
        #print 'enable_chemistry'
        
##         self.models.setItemEnabled (1, TRUE)





###########################################################################################
##                                                                                       ##
##                       CHEMISTRY TOOL FRAME (BEGINNING)                                ##
##                                                                                       ##
###########################################################################################


    def chemistry_tool (self):

        self.ChemistryToolFrame = QFrame ()
        self.ChemistryToolFrame.setCaption ('Chemistry Tool')
        self.ChemistryToolFrame.setMinimumSize (180, 100)
        self.ChemistryToolFrame.setMaximumSize (180, 100)
        setPosition (self.ChemistryToolFrame)

        self.ChemistryToolFrame.mainLayout = QVBoxLayout (self.ChemistryToolFrame, 10, -1, 'ChemistryTool_mainLayout')
        self.ChemistryToolFrame.mainLayout.setMargin (Marge)
        self.ChemistryToolFrame.mainLayout.setSpacing (Space)
      
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        ChemistryToolFrame_comment = Comments ['Chemistry_Tool']

        self.ChemistryToolFrame.QHGroupBoxA = QHGroupBox (self.ChemistryToolFrame)
	QToolTip.add (self.ChemistryToolFrame.QHGroupBoxA, ChemistryToolFrame_comment)

        self.ChemistryToolFrame.QHGroupBoxA.setMargin (5)
        self.ChemistryToolFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ChemistryToolFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ChemistryToolFrame.mainLayout.addWidget (self.ChemistryToolFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ChemistryToolFrame.QHBox0 = QHBox (self.ChemistryToolFrame)
        self.ChemistryToolFrame.QHBox0.setMargin (0)
        self.ChemistryToolFrame.QHBox0.setSpacing (10)
        self.ChemistryToolFrame.QHBox0.setMidLineWidth (0)
        self.ChemistryToolFrame.mainLayout.addWidget (self.ChemistryToolFrame.QHBox0)

        self.ChemistryToolFrame.QButtonGroup1 = QButtonGroup ('', self.ChemistryToolFrame.QHBox0, 'ChemistryToolFrame_QButtonGroup1' )
        self.ChemistryToolFrame.QVBoxLayout10 = QVBoxLayout (self.ChemistryToolFrame.QButtonGroup1, 10)
        self.ChemistryToolFrame.QVBoxLayout10.setMargin (15)
        self.ChemistryToolFrame.QVBoxLayout10.setSpacing (15)

        self.ChemistryToolFrame.Organizer = range (2)

        self.ChemistryToolFrame.Organizer[0] = QRadioButton (self.ChemistryToolFrame.QButtonGroup1)
        self.ChemistryToolFrame.Organizer[0].setText('PhreeqC')
        self.ChemistryToolFrame.QVBoxLayout10.addWidget (self.ChemistryToolFrame.Organizer[0])

        self.ChemistryToolFrame.Organizer[1] = QRadioButton (self.ChemistryToolFrame.QButtonGroup1)
        self.ChemistryToolFrame.Organizer[1].setText('Chess')
        self.ChemistryToolFrame.QVBoxLayout10.addWidget (self.ChemistryToolFrame.Organizer[1])
#        self.connect (self.ChemistryToolFrame.Organizer[1], SIGNAL ('clicked ()'), self.chess_mb)

        if ChemistryTool == 'PhreeqC':
            self.ChemistryToolFrame.Organizer[0].setChecked (1)
        else:
            self.ChemistryToolFrame.Organizer[1].setChecked (1)

        self.ChemistryToolFrame.QVBoxLayout10.activate()

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryToolFrame.QHGroupBox0 = QHGroupBox (self.ChemistryToolFrame)
        self.ChemistryToolFrame.QHGroupBox0.setMargin (10)
        self.ChemistryToolFrame.QHGroupBox0.setMidLineWidth (0)
        self.ChemistryToolFrame.mainLayout.addWidget (self.ChemistryToolFrame.QHGroupBox0)

        self.ChemistryToolFrame.OKPB = QPushButton ('OK', self.ChemistryToolFrame.QHGroupBox0)
        self.ChemistryToolFrame.OKPB.setFocus ()
        self.ChemistryToolFrame.CancelPB = QPushButton ('Cancel', self.ChemistryToolFrame.QHGroupBox0)
        self.ChemistryToolFrame.HelpPB = QPushButton ('&Help', self.ChemistryToolFrame.QHGroupBox0)

        self.connect (self.ChemistryToolFrame.OKPB, SIGNAL ('clicked ()'), self.ChemistryToolFrame_ok)
        self.connect (self.ChemistryToolFrame.CancelPB, SIGNAL ('clicked ()'), self.ChemistryToolFrame_cancel)
        self.connect (self.ChemistryToolFrame.HelpPB, SIGNAL ('clicked ()'), self.ChemistryToolFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryToolFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def chess_mb (self):

        self.Chess_MB = QMessageBox()
        self.Chess_MB.setCaption ('Message')
        self.Chess_MB.setText ('This option is under development. You\nhave to choose PhreeqC for the moment.')
        self.Chess_MB.setIcon (QMessageBox.Information)
        self.Chess_MB.show ()
        self.ChemistryToolFrame.Organizer[0].setChecked (1)       

    def ChemistryToolFrame_ok (self):

        global ChemistryTool
        global DefaultDatabase
        global import_boolean

        if self.ChemistryToolFrame.Organizer[0].isChecked ():
            ChemistryTool = 'PhreeqC'
        else:
            ChemistryTool = 'Chess'

        if import_boolean:
            pass
        else:
            fileName_path = os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/' + DefaultDatabase
            self.import_database (fileName_path)
            import_boolean = 1

        self.ChemistryToolFrame.close ()

    def ChemistryToolFrame_cancel (self):

        self.ChemistryToolFrame.close ()

    def ChemistryToolFrame_help (self):

        self.Help ()

###########################################################################################
##                                                                                       ##
##                             CHEMISTRY TOOL FRAME (END)                                ##
##                                                                                       ##
###########################################################################################



    def chemistry_transport_tools (self):

        self.ChemistryTransportToolsFrame = QFrame ()
        self.ChemistryTransportToolsFrame.setCaption ('Chemistry Transport Tools')
        self.ChemistryTransportToolsFrame.setMinimumSize (260, 180)
        #self.ChemistryTransportToolsFrame.setMaximumSize (180, 100)
        setPosition (self.ChemistryTransportToolsFrame)

        self.ChemistryTransportToolsFrame.mainLayout = QVBoxLayout (self.ChemistryTransportToolsFrame, 10, -1, 'ChemistryTransportTools_mainLayout')
        self.ChemistryTransportToolsFrame.mainLayout.setMargin (Marge)
        self.ChemistryTransportToolsFrame.mainLayout.setSpacing (Space)
      
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #ChemistryTransportToolsFrame_comment = Comments ['Chemistry_Transport_Tools']

        self.ChemistryTransportToolsFrame.QHGroupBoxA = QHGroupBox (self.ChemistryTransportToolsFrame)
	#QToolTip.add (self.ChemistryTransportToolsFrame.QHGroupBoxA, ChemistryTransportToolsFrame_comment)

        self.ChemistryTransportToolsFrame.QHGroupBoxA.setMargin (5)
        self.ChemistryTransportToolsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ChemistryTransportToolsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ChemistryTransportToolsFrame.mainLayout.addWidget (self.ChemistryTransportToolsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ChemistryTransportToolsFrame.QHBox0 = QHBox (self.ChemistryTransportToolsFrame)
        self.ChemistryTransportToolsFrame.QHBox0.setMargin (0)
        self.ChemistryTransportToolsFrame.QHBox0.setSpacing (10)
        self.ChemistryTransportToolsFrame.QHBox0.setMidLineWidth (0)
        self.ChemistryTransportToolsFrame.mainLayout.addWidget (self.ChemistryTransportToolsFrame.QHBox0)

        self.ChemistryTransportToolsFrame.QButtonGroup1 = QButtonGroup ('Chemistry Solver', self.ChemistryTransportToolsFrame.QHBox0, 'ChemistryTransportToolsFrame_QButtonGroup1' )
        self.ChemistryTransportToolsFrame.QVBoxLayout10 = QVBoxLayout (self.ChemistryTransportToolsFrame.QButtonGroup1, 10)
        self.ChemistryTransportToolsFrame.QVBoxLayout10.setMargin (20)
        self.ChemistryTransportToolsFrame.QVBoxLayout10.setSpacing (10)

        self.ChemistryTransportToolsFrame.Organizer = range (2)

        self.ChemistryTransportToolsFrame.Organizer[0] = QRadioButton (self.ChemistryTransportToolsFrame.QButtonGroup1)
        self.ChemistryTransportToolsFrame.Organizer[0].setText('PhreeqC')
        self.ChemistryTransportToolsFrame.QVBoxLayout10.addWidget (self.ChemistryTransportToolsFrame.Organizer[0])

        self.ChemistryTransportToolsFrame.Organizer[1] = QRadioButton (self.ChemistryTransportToolsFrame.QButtonGroup1)
        self.ChemistryTransportToolsFrame.Organizer[1].setText('Chess')
        self.ChemistryTransportToolsFrame.QVBoxLayout10.addWidget (self.ChemistryTransportToolsFrame.Organizer[1])
#        self.connect (self.ChemistryTransportToolsFrame.Organizer[1], SIGNAL ('clicked ()'), self.chess_mb)

        self.ChemistryTransportToolsFrame.QVBoxLayout10.activate()

        if Solver is 'Modflow':
            self.ChemistryTransportToolsFrame.QHBox0.setEnabled (0)
            self.ChemistryTransportToolsFrame.Organizer[0].setChecked (1)
	    #self.ChemistryTransportToolsFrame.Organizer[0].setEnabled (0)
	    #self.ChemistryTransportToolsFrame.Organizer[1].setEnabled (0)
        else:
            if ChemistryTool == 'PhreeqC' or ChemistryTool == 'Traces_PhreeqC':
        	self.ChemistryTransportToolsFrame.Organizer[0].setChecked (1)
            else:
        	self.ChemistryTransportToolsFrame.Organizer[1].setChecked (1)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryTransportToolsFrame.QHBox1 = QHBox (self.ChemistryTransportToolsFrame)
        self.ChemistryTransportToolsFrame.QHBox1.setMargin (0)
        self.ChemistryTransportToolsFrame.QHBox1.setSpacing (10)
        self.ChemistryTransportToolsFrame.QHBox1.setMidLineWidth (0)
        self.ChemistryTransportToolsFrame.mainLayout.addWidget (self.ChemistryTransportToolsFrame.QHBox1)

        self.ChemistryTransportToolsFrame.QButtonGroup2 = QButtonGroup ('Hydraulic / Transport Solver', self.ChemistryTransportToolsFrame.QHBox1, 'ChemistryTransportToolsFrame_QButtonGroup2' )
        self.ChemistryTransportToolsFrame.QVBoxLayout20 = QVBoxLayout (self.ChemistryTransportToolsFrame.QButtonGroup2, 10)
        self.ChemistryTransportToolsFrame.QVBoxLayout20.setMargin (20)
        self.ChemistryTransportToolsFrame.QVBoxLayout20.setSpacing (10)

        self.ChemistryTransportToolsFrame.Organizer2 = range (2)

        self.ChemistryTransportToolsFrame.Organizer2[0] = QRadioButton (self.ChemistryTransportToolsFrame.QButtonGroup2)
        self.ChemistryTransportToolsFrame.Organizer2[0].setText('Traces')
        self.ChemistryTransportToolsFrame.QVBoxLayout20.addWidget (self.ChemistryTransportToolsFrame.Organizer2[0])

        self.ChemistryTransportToolsFrame.Organizer2[1] = QRadioButton (self.ChemistryTransportToolsFrame.QButtonGroup2)
        self.ChemistryTransportToolsFrame.Organizer2[1].setText('Castem')
        self.ChemistryTransportToolsFrame.Organizer2[1].setEnabled(0)
        self.ChemistryTransportToolsFrame.QVBoxLayout20.addWidget (self.ChemistryTransportToolsFrame.Organizer2[1])
#        self.connect (self.ChemistryTransportToolsFrame.Organizer2[1], SIGNAL ('clicked ()'), self.chess_mb)

        self.ChemistryTransportToolsFrame.Organizer2[0].setChecked (1)

        self.ChemistryTransportToolsFrame.QVBoxLayout20.activate()

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryTransportToolsFrame.QHGroupBox0 = QHGroupBox (self.ChemistryTransportToolsFrame)
        self.ChemistryTransportToolsFrame.QHGroupBox0.setMargin (10)
        self.ChemistryTransportToolsFrame.QHGroupBox0.setMidLineWidth (0)
        self.ChemistryTransportToolsFrame.mainLayout.addWidget (self.ChemistryTransportToolsFrame.QHGroupBox0)

        self.ChemistryTransportToolsFrame.OKPB = QPushButton ('OK', self.ChemistryTransportToolsFrame.QHGroupBox0)
        self.ChemistryTransportToolsFrame.OKPB.setFocus ()
        self.ChemistryTransportToolsFrame.CancelPB = QPushButton ('Cancel', self.ChemistryTransportToolsFrame.QHGroupBox0)
        self.ChemistryTransportToolsFrame.HelpPB = QPushButton ('&Help', self.ChemistryTransportToolsFrame.QHGroupBox0)

        self.connect (self.ChemistryTransportToolsFrame.OKPB, SIGNAL ('clicked ()'), self.ChemistryTransportToolsFrame_ok)
        self.connect (self.ChemistryTransportToolsFrame.CancelPB, SIGNAL ('clicked ()'), self.ChemistryTransportToolsFrame_cancel)
        self.connect (self.ChemistryTransportToolsFrame.HelpPB, SIGNAL ('clicked ()'), self.ChemistryTransportToolsFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryTransportToolsFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def chess_mb (self):

        self.Chess_MB = QMessageBox()
        self.Chess_MB.setCaption ('Message')
        self.Chess_MB.setText ('This option is under development. You\nhave to choose PhreeqC for the moment.')
        self.Chess_MB.setIcon (QMessageBox.Information)
        self.Chess_MB.show ()
        self.ChemistryToolFrame.Organizer[0].setChecked (1)
       

    def ChemistryTransportToolsFrame_ok (self):

        global ChemistryTool

        if self.ChemistryTransportToolsFrame.Organizer[0].isChecked () and self.ChemistryTransportToolsFrame.Organizer2[0].isChecked ():
            ChemistryTool = 'Traces_PhreeqC'
        else:
            ChemistryTool = 'Traces_Chess'

        self.ChemistryTransportToolsFrame.close ()
#debug_chemtrans
    def ChemistryTransportToolsFrame_cancel (self):

        self.ChemistryTransportToolsFrame.close ()

    def ChemistryTransportToolsFrame_help (self):

        self.Help ()
	
	
	
    def tables (self):
    
        self.TablesFrame = QFrame ()
        self.TablesFrame.setCaption ('Tables')
        setPosition (self.TablesFrame)

        self.TablesFrame.mainLayout = QVBoxLayout (self.TablesFrame, 10, -1, 'TablesFrame_mainLayout')
        self.TablesFrame.mainLayout.setMargin (Marge)
        self.TablesFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        self.TablesFrame.QHGroupBoxA = QHGroupBox (self.TablesFrame)
	
	QToolTip.add (self.TablesFrame.QHGroupBoxA, Comments ['Tables'])

        self.TablesFrame.QHGroupBoxA.setMargin (5)
        self.TablesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.TablesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.TablesFrame.mainLayout.addWidget (self.TablesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.TablesFrame.QHGroupBox0 = QHGroupBox (self.TablesFrame)
        self.TablesFrame.QHGroupBox0.setMargin (10)
        self.TablesFrame.QHGroupBox0.setMidLineWidth (0)
        self.TablesFrame.mainLayout.addWidget (self.TablesFrame.QHGroupBox0)

        self.TablesFrame.QVBox01 = QVBox (self.TablesFrame.QHGroupBox0)
        self.TablesFrame.QVBox02 = QVBox (self.TablesFrame.QHGroupBox0)
        self.TablesFrame.QVBox03 = QVBox (self.TablesFrame.QHGroupBox0)

        self.TablesFrame.QVBox01.setMargin (0)
        self.TablesFrame.QVBox01.setSpacing (5)
        self.TablesFrame.QVBox03.setMargin (0)
        self.TablesFrame.QVBox03.setSpacing (5)
       
        self.TablesFrame.QVBox02.setMinimumSize (10, 10)

        self.TablesFrame.OutputsToPlotLabel = QLabel ('Outputs to plot', self.TablesFrame.QVBox01)
        self.TablesFrame.OutputsToPlotLabel.resize (self.TablesFrame.OutputsToPlotLabel.sizeHint ())

        self.TablesFrame.OutputsToPlotComboBox = QComboBox (self.TablesFrame.QVBox01)
        self.TablesFrame.OutputsToPlotComboBox.setMinimumSize (200, 25)
        self.TablesFrame.OutputsToPlotComboBox.setMaximumSize (200, 25)
        #self.TablesFrame.OutputsToPlotComboBox.setEditable (1)
        
        i = 0
        while i < len (ExpectedOutputs_list):
            self.TablesFrame.OutputsToPlotComboBox.insertItem (str (ExpectedOutputs_list [i]))
            i = i+1
       
        self.TablesFrame.AvailableOutputsLabel = QLabel ('Available Outputs', self.TablesFrame.QVBox03)
        self.TablesFrame.AvailableOutputsLabel.resize (self.TablesFrame.AvailableOutputsLabel.sizeHint ())
        
        self.TablesFrame.AvailableOutputsComboBox = QComboBox (self.TablesFrame.QVBox03)
        self.TablesFrame.AvailableOutputsComboBox.setMinimumSize (200, 25)
        self.TablesFrame.AvailableOutputsComboBox.setMaximumSize (200, 25)
        self.connect (self.TablesFrame.AvailableOutputsComboBox, SIGNAL ('activated (int)'), self.TablesFrame_AvailableOutputsComboBox_activate)

#  We retrieve minerals...

        Tables_AvailableMineralPhases_list = []
        i = 0
        while i < len (MineralPhases_list):
            spec = str (MineralPhases_list [i])
            if (spec != ''):
                if spec in Tables_AvailableMineralPhases_list:
                    i = i+1
                else:
                    Tables_AvailableMineralPhases_list.append (str (spec))
                    i = i+1
            else:
                i = i+1

#
## Update of mineral list for contour postprocessing with available equilibrium minerals.
#
        for mineral in AqueousStates_MineralPhases_list:
	   if mineral[1] not in Tables_AvailableMineralPhases_list:
	       Tables_AvailableMineralPhases_list.append(mineral[1])
	       pass
	   pass

        Tables_AvailableMineralPhases_list.sort ()
        Tables_AvailableMineralPhases_list.reverse ()
        k = 0
        while k < len (Tables_AvailableMineralPhases_list):
            self.TablesFrame.AvailableOutputsComboBox.insertItem (Tables_AvailableMineralPhases_list [k], 0)
            k = k+1

#  We retrieve master species

        Components_species_tmp = []
        i = 0
        while i < len (Components_list):
            spec = str (Components_list [i])
            if (spec != ''):
                if spec in Components_species_tmp:
                    i = i+1
                elif spec.find ('(') != -1:
                    i = i+1
                else:
                    Components_species_tmp.append (str (spec))
                    i = i+1
            else: i = i+1
        Components_species_tmp.sort ()
        Components_species_tmp.reverse ()
        k = 0
        while k < len (Components_species_tmp):
            self.TablesFrame.AvailableOutputsComboBox.insertItem (Components_species_tmp [k], 0)
            k = k+1

#  On recupere les especes composantes aqueuses (on traite les redondances a la fois avec les master species mais
#  egalement entre les differents etats aqueux).
#  Ces especes sont stockees dans la liste Tables_AvailableAqueousComponents_list

        Tables_AvailableAqueousComponents_list = []        
        i = 0
        while i < len (AqueousStates_list):
            j = 0
            while (j < len (AqueousStates_Species_list [i])):
                spec = str (AqueousStates_Species_list [i][j][0])
                if (spec != ''):
                    if spec in Tables_AvailableAqueousComponents_list:
                        j = j+1
                    elif spec in Components_species_tmp:
                        j = j+1
                    else:
		        if spec.find ('mineral ') == -1:
                            Tables_AvailableAqueousComponents_list.append (str (spec))
                            j = j+1
			else:
			    j = j+1
                else:
                    break
            i = i+1

#  On effectue ensuite un tri et une inversion de cette liste,
#  puis on la recopie dans la boite combo correspondante

    #   Tri
        Tables_AvailableAqueousComponents_list.sort ()
        
    #   Inversion de l ordre des elements pour qu ils apparaissent dans l ordre lexicographique
        Tables_AvailableAqueousComponents_list.reverse ()

    #   Recopie
        k = 0
        while k < len (Tables_AvailableAqueousComponents_list):
            self.TablesFrame.AvailableOutputsComboBox.insertItem (Tables_AvailableAqueousComponents_list [k], 0)
            k = k+1

#  We add pH, pe, Eh, tc, H2O (mass), force ionique (mu)

        self.TablesFrame.AvailableOutputsComboBox.insertItem ('pH', 0)
        self.TablesFrame.AvailableOutputsComboBox.insertItem ('pe', 1)
        self.TablesFrame.AvailableOutputsComboBox.insertItem ('Eh', 2)
        self.TablesFrame.AvailableOutputsComboBox.insertItem ('tc', 3)            
        self.TablesFrame.AvailableOutputsComboBox.insertItem ('mass_water', 4)            
        self.TablesFrame.AvailableOutputsComboBox.insertItem ('ionicstrength', 5)            
	if PorosityState == 'variable':
            self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('porosity', 6)

             
#----------------------------------------------------------------------------------------------

        self.TablesFrame.QVGroupBox1 = QVGroupBox ('Times ('+str (Time_Unit)+')', self.TablesFrame)
        self.TablesFrame.QVGroupBox1.setMargin (10)
        self.TablesFrame.QVGroupBox1.setMidLineWidth (0)
        self.TablesFrame.mainLayout.addWidget (self.TablesFrame.QVGroupBox1)

        self.TablesFrame.QHBox10 = QHBox (self.TablesFrame.QVGroupBox1)
        self.TablesFrame.QHBox11 = QHBox (self.TablesFrame.QVGroupBox1)
        self.TablesFrame.QHBox12 = QHBox (self.TablesFrame.QVGroupBox1)
        self.TablesFrame.QHBox13 = QHBox (self.TablesFrame.QVGroupBox1)
        self.TablesFrame.QHBox14 = QHBox (self.TablesFrame.QVGroupBox1)

        self.TablesFrame.QHBox10.setMargin (0)
        self.TablesFrame.QHBox10.setSpacing (5)
        self.TablesFrame.QHBox11.setMargin (0)
        self.TablesFrame.QHBox11.setSpacing (5)
        self.TablesFrame.QHBox12.setMargin (0)
        self.TablesFrame.QHBox12.setSpacing (5)
        self.TablesFrame.QHBox13.setMargin (0)
        self.TablesFrame.QHBox13.setSpacing (5)
        self.TablesFrame.QHBox14.setMargin (0)
        self.TablesFrame.QHBox14.setSpacing (5)

        self.TablesFrame.t0Label = QLabel ('t0', self.TablesFrame.QHBox10)
        self.TablesFrame.t0LineEdit = QLineEdit (self.TablesFrame.QHBox10)

        self.TablesFrame.t1Label = QLabel ('      t1', self.TablesFrame.QHBox10)
        self.TablesFrame.t1LineEdit = QLineEdit (self.TablesFrame.QHBox10)

        self.TablesFrame.t2Label = QLabel ('t2', self.TablesFrame.QHBox11)
        self.TablesFrame.t2LineEdit = QLineEdit (self.TablesFrame.QHBox11)

        self.TablesFrame.t3Label = QLabel ('      t3', self.TablesFrame.QHBox11)
        self.TablesFrame.t3LineEdit = QLineEdit (self.TablesFrame.QHBox11)

        self.TablesFrame.t4Label = QLabel ('t4', self.TablesFrame.QHBox12)
        self.TablesFrame.t4LineEdit = QLineEdit (self.TablesFrame.QHBox12)

        self.TablesFrame.t5Label = QLabel ('      t5', self.TablesFrame.QHBox12)
        self.TablesFrame.t5LineEdit = QLineEdit (self.TablesFrame.QHBox12)

        self.TablesFrame.t6Label = QLabel ('t6', self.TablesFrame.QHBox13)
        self.TablesFrame.t6LineEdit = QLineEdit (self.TablesFrame.QHBox13)

        self.TablesFrame.t7Label = QLabel ('      t7', self.TablesFrame.QHBox13)
        self.TablesFrame.t7LineEdit = QLineEdit (self.TablesFrame.QHBox13)

        #self.TablesFrame.MorePB = QPushButton ('More...', self.TablesFrame.QHBox14)
        #self.TablesFrame.MorePB.resize (self.TablesFrame.MorePB.sizeHint ())
        #self.TablesFrame.MorePB.setMinimumSize (100, 25)
        #self.TablesFrame.MorePB.setMaximumSize (100, 25)
        #self.connect (self.TablesFrame.MorePB, SIGNAL ('clicked ()'), self.TablesFrame_more)


        l = len (Times_list)
        if l > 0:
            try:
                self.TablesFrame.t0LineEdit.setText (str (Times_list [0]))
            except:
                pass
            try:
                self.TablesFrame.t1LineEdit.setText (str (Times_list [1]))
            except:
                pass
            try:
                self.TablesFrame.t2LineEdit.setText (str (Times_list [2]))
            except:
                pass
            try:
                self.TablesFrame.t3LineEdit.setText (str (Times_list [3]))
            except:
                pass
            try:
                self.TablesFrame.t4LineEdit.setText (str (Times_list [4]))
            except:
                pass
            try:
                self.TablesFrame.t5LineEdit.setText (str (Times_list [5]))
            except:
                pass
            try:
                self.TablesFrame.t6LineEdit.setText (str (Times_list [6]))
            except:
                pass
            try:
                self.TablesFrame.t7LineEdit.setText (str (Times_list [7]))
            except:
                pass

         # completer dans le cas du "more"



#----------------------------------------------------------------------------------------------

        self.TablesFrame.QHGroupBox2 = QHGroupBox (self.TablesFrame)
        self.TablesFrame.QHGroupBox2.setMargin (10)
        self.TablesFrame.QHGroupBox2.setMidLineWidth (0)
        self.TablesFrame.mainLayout.addWidget (self.TablesFrame.QHGroupBox2)

        self.TablesFrame.OKPB = QPushButton ('OK', self.TablesFrame.QHGroupBox2)
        self.TablesFrame.OKPB.setFocus ()
        self.TablesFrame.DeletePB = QPushButton ('Delete', self.TablesFrame.QHGroupBox2)
        self.TablesFrame.CancelPB = QPushButton ('Cancel', self.TablesFrame.QHGroupBox2)
        self.TablesFrame.HelpPB = QPushButton ('&Help', self.TablesFrame.QHGroupBox2)

        self.connect (self.TablesFrame.OKPB, SIGNAL ('clicked ()'), self.TablesFrame_ok)
        self.connect (self.TablesFrame.DeletePB,  SIGNAL ('clicked ()'), self.TablesFrame_delete)
        self.connect (self.TablesFrame.CancelPB, SIGNAL ('clicked ()'), self.TablesFrame_cancel)
        self.connect (self.TablesFrame.HelpPB, SIGNAL ('clicked ()'), self.TablesFrame_help)

#----------------------------------------------------------------------------------------------

        self.TablesFrame.show ()

#----------------------------------------------------------------------------------------------

    def TablesFrame_ok (self):

        global ExpectedOutputs_list
        global Times_list
        
        Times_list = []

        if str (self.TablesFrame.t0LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t0LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t1LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t1LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t2LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t2LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t3LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t3LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t4LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t4LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t5LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t5LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t6LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t6LineEdit.text ()))
        else:
            pass
        if str (self.TablesFrame.t7LineEdit.text ()) != '':
            Times_list.append (str (self.TablesFrame.t7LineEdit.text ()))
        else:
            pass
        if (len (ExpectedOutputs_list) > 0 and len (Times_list) == 0):
            self.TablesFrameMB2 = QMessageBox()
            self.TablesFrameMB2.setCaption ('Error')
            self.TablesFrameMB2.setText ('You have to specify a time.')
            self.TablesFrameMB2.setIcon (QMessageBox.Warning)
            self.TablesFrameMB2.show ()
            self.TablesFrame.t0LineEdit.setFocus ()
        else:
            self.TablesFrame.close ()

    def TablesFrame_delete (self):

        global ExpectedOutputs_list
        global Times_list

        if ((self.TablesFrame.OutputsToPlotComboBox.count ()) != 0):
            text = str (self.TablesFrame.OutputsToPlotComboBox.currentText ())
            index = int (ExpectedOutputs_list.index (text))
            self.TablesFrame.OutputsToPlotComboBox.removeItem (self.TablesFrame.OutputsToPlotComboBox.currentItem ())
            del ExpectedOutputs_list [index]
            if ((self.TablesFrame.OutputsToPlotComboBox.count ()) != 0):
                self.TablesFrame.OutputsToPlotComboBox.setCurrentItem (0)
        else:
            self.TablesFrameMB0 = QMessageBox()
            self.TablesFrameMB0.setCaption ('Error')
            self.TablesFrameMB0.setText ('There is no more Element to plot.')
            self.TablesFrameMB0.setIcon (QMessageBox.Critical)
            self.TablesFrameMB0.show ()

    def TablesFrame_cancel (self):

        self.TablesFrame.close ()

    def TablesFrame_help (self):

        self.Help ()

    def TablesFrame_AvailableOutputsComboBox_activate (self):

        global ExpectedOutputs_list

        if (str (self.TablesFrame.AvailableOutputsComboBox.currentText ())) in ExpectedOutputs_list:
            self.TablesFrameMB1 = QMessageBox()
            self.TablesFrameMB1.setCaption ('Warning')
            self.TablesFrameMB1.setText ('This Element is already is the list.')
            self.TablesFrameMB1.setIcon (QMessageBox.Warning)
            self.TablesFrameMB1.show ()
        else:
            self.TablesFrame.OutputsToPlotComboBox.insertItem (self.TablesFrame.AvailableOutputsComboBox.currentText (), self.TablesFrame.OutputsToPlotComboBox.currentItem ())
            ExpectedOutputs_list.append (str (self.TablesFrame.AvailableOutputsComboBox.currentText ()))
            ExpectedOutputs_list.sort ()
            self.TablesFrame.OutputsToPlotComboBox.setCurrentItem (0)
            
    def TablesFrame_more (self):

        self.TablesFrame.QHGroupBox3 = QHGroupBox (self.TablesFrame)
        self.TablesFrame.QHGroupBox3.setMargin (10)
        self.TablesFrame.QHGroupBox3.setMidLineWidth (0)
        self.TablesFrame.mainLayout.addWidget (self.TablesFrame.QHGroupBox3)

        self.TablesFrame.OKPB2 = QPushButton ('OK', self.TablesFrame.QHGroupBox3)
        


###########################################################################################
##                                                                                       ##
##                             DATABASE FRAME (BEGINNING)                                ##
##                                                                                       ##
###########################################################################################



    def database (self):

        global DefaultDatabase
        global Available_Databases_list
	
        self.DatabaseFrame = QFrame ()
        self.DatabaseFrame.setCaption ('Thermochemical Database')
        setPosition (self.DatabaseFrame)
        
        self.DatabaseFrame.mainLayout = QVBoxLayout (self.DatabaseFrame, 10,-1, 'DatabaseFrame_mainLayout')
        self.DatabaseFrame.mainLayout.setMargin (Marge)
        self.DatabaseFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        DatabaseFrame_comment = Comments ['Database']
        
        self.DatabaseFrame.QHGroupBoxA = QHGroupBox (self.DatabaseFrame)
        QToolTip.add (self.DatabaseFrame.QHGroupBoxA, DatabaseFrame_comment)

        self.DatabaseFrame.QHGroupBoxA.setMargin (5)
        self.DatabaseFrame.QHGroupBoxA.setMidLineWidth (0)
        self.DatabaseFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.DatabaseFrame.mainLayout.addWidget (self.DatabaseFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.DatabaseFrame.QVGroupBox0 = QVGroupBox (self.DatabaseFrame)
        self.DatabaseFrame.QVGroupBox0.setMargin (10)
        self.DatabaseFrame.QVGroupBox0.setMidLineWidth (0)
        self.DatabaseFrame.mainLayout.addWidget (self.DatabaseFrame.QVGroupBox0)

        self.DatabaseFrame.DefaultDatabaseComboBox = QComboBox (self.DatabaseFrame.QVGroupBox0)
        self.DatabaseFrame.DefaultDatabaseComboBox.setMinimumSize (300, 25)

	self.DatabaseFrame_init ()

        self.DatabaseFrame.QHGroupBox0 = QHGroupBox (self.DatabaseFrame)
        self.DatabaseFrame.QHGroupBox0.setMargin (2)
        self.DatabaseFrame.QHGroupBox0.setMidLineWidth (0)
        self.DatabaseFrame.mainLayout.addWidget (self.DatabaseFrame.QHGroupBox0)

        self.DatabaseFrame.OKPB = QPushButton ('OK', self.DatabaseFrame.QHGroupBox0)
        self.DatabaseFrame.OKPB.setFocus ()
        self.DatabaseFrame.SelectPB = QPushButton ('Select', self.DatabaseFrame.QHGroupBox0)
        self.DatabaseFrame.CancelPB = QPushButton ('Cancel', self.DatabaseFrame.QHGroupBox0)
        self.DatabaseFrame.HelpPB = QPushButton ('Help', self.DatabaseFrame.QHGroupBox0)

        self.connect (self.DatabaseFrame.OKPB, SIGNAL ('clicked ()'), self.DatabaseFrame_ok)
        self.connect (self.DatabaseFrame.SelectPB, SIGNAL ('clicked ()'), self.DatabaseFrame_select)
        self.connect (self.DatabaseFrame.CancelPB, SIGNAL ('clicked ()'), self.DatabaseFrame_cancel)
        self.connect (self.DatabaseFrame.HelpPB, SIGNAL ('clicked ()'), self.DatabaseFrame_help)

        self.DatabaseFrame.show ()

#------------------------------------------------------------------------------------------------

    def DatabaseFrame_ok (self):

        global DefaultDatabase
        global Available_Databases_list
        global fileName_path
        global Database_Solution_Master_Species_list
        global Database_Solution_Species_list

        global Database_Phases_Names_list
        global Database_Phases_Log_k_list
        global Database_Phases_Delta_h_list

        global Database_Exchange_Master_Species_list
        global Database_Exchange_Species_list
        global Database_Surface_Master_Species_list
        global Database_Surface_Species_list

        global import_boolean

        DefaultDatabase = str (self.DatabaseFrame.DefaultDatabaseComboBox.currentText ())
        fileName_path = os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/' + DefaultDatabase
        self.import_database (fileName_path)
        import_boolean = 1
        self.DatabaseFrame.close ()

    def DatabaseFrame_select (self):

        global DefaultDatabase
        global Available_Databases_list
        global fileName_path

        if ChemistryTool == 'PhreeqC':
            fn = QFileDialog.getOpenFileName (os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/', "*.dat", self)
        elif ChemistryTool == 'Chess':
            fn = QFileDialog.getOpenFileName (os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/', "*.tdb", self)
        else:
            fn = QFileDialog.getOpenFileName (os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/', "*.dat", self)
           
        if fn.isEmpty ():
            self.statusBar ().message('Loading aborted', 5000)
            return
        fileName_path = str (fn)
        if fileName_path.find (os.environ['ALLIANCES_DAT'] + '/share/alliances/resources/') != -1:
            fileName = fileName_path
            trouve = 0
            while not trouve:	    
                index =  fileName.find ('/')
                fileName = fileName [index+1 : ]
                if fileName.find ('/') == -1:
                    trouve = 1               
	    self.DatabaseFrame.DefaultDatabaseComboBox.clear ()
	    self.DatabaseFrame.DefaultDatabaseComboBox.insertItem (fileName)
        else:
            path = os.environ ['ALLIANCES_DAT'] + '/share/alliances/resources/'
            self.DatabaseMB = QMessageBox()
            self.DatabaseMB.setCaption ('Error')
            self.DatabaseMB.setText ('You have to select the database in\n'+ path)
            self.DatabaseMB.setIcon (QMessageBox.Critical)
            self.DatabaseMB.show ()

    def DatabaseFrame_cancel (self):

        self.DatabaseFrame.close ()

    def DatabaseFrame_help (self):

        self.Help ()
	
    def DatabaseFrame_init (self):
    
        global DefaultDatabase
	
	self.DatabaseFrame.DefaultDatabaseComboBox.clear ()
	self.DatabaseFrame.DefaultDatabaseComboBox.insertItem (DefaultDatabase)

    def import_database (self, file):

        #a.setOverrideCursor (Qt.WaitCursor)
        cursor=QCursor(Qt.WaitCursor)
        #cursor=QCursor(Qt.BusyCursor)
        a.setOverrideCursor (cursor)

#debug_database
        #  Aqueous Component Species
        #  ok
        global Database_Components_list
        global Database_ComponentSpecies_Name_list
        global Database_ComponentSpecies_Formula_list
        global Database_Components_Log_k_list
        global Database_Components_gfw_list

        #  Aqueous Secondary Species
        #  ok
        global Database_AqueousSpecies_list
        global Database_AqueousSpecies_Formula_list
        global Database_AqueousSpecies_Log_k_list
        global Database_AqueousSpecies_Species_list

        #  Phases
        #  ok
        global Database_Phases_Names_list
        global Database_Phases_Formula_list
        global Database_Phases_Species_list
        global Database_Phases_Log_k_list
        global Database_Phases_Delta_h_list

        #  Exchange Master Species
        #  ok
        global Database_ExchangeMasterSpecies_list
        global Database_ExchangeMasterSpecies_Formula_list

        #  Exchange Species
        global Database_Exchange_Species_list

        #  Surface Master Species
        #  ok
        global Database_SurfaceMasterSpecies_list
        global Database_SurfaceMasterSpecies_Formula_list

        #  Surface Species
        #  ok
        global Database_SurfaceSpecies_list 
        global Database_SurfaceSpecies_Log_k_list
        global Database_SurfaceSpecies_Reactants_list

        #  Gases
        #  ok
        global Database_gases_Names_list
	        
        Database_Solution_Master_Species_list = []
        Database_Solution_Species_list = []
        Database_Phases_list = []
        Database_Exchange_Master_Species_list = []
        Database_Exchange_Species_list = []
        Database_Surface_Master_Species_list = []
        Database_Surface_Species_list = []
        Database_Rates_list = []

        datafile = open (file, 'r')    
        liste = []
        for line in datafile.readlines():
            if (line.find ("SOLUTION_MASTER_SPECIES") != -1):
                liste = Database_Solution_Master_Species_list
            elif (line.find ("SOLUTION_SPECIES") != -1):
                liste = Database_Solution_Species_list
            elif (line.find ("PHASES") != -1):
                liste = Database_Phases_list
            elif (line.find ("EXCHANGE_MASTER_SPECIES") != -1):
                liste = Database_Exchange_Master_Species_list
            elif (line.find ("EXCHANGE_SPECIES") != -1):
                liste = Database_Exchange_Species_list
            elif (line.find ("SURFACE_MASTER_SPECIES") != -1):
                liste = Database_Surface_Master_Species_list
            elif (line.find ("SURFACE_SPECIES") != -1):
                liste = Database_Surface_Species_list
            elif (line.find ("RATES") != -1):
                liste = Database_Rates_list
            else:
                pass
            if (line[0] != "#" and len (line) != 1) and line != "END\n":
                liste.append (line)
            else:
                pass

        #=========================================================
        #  Solution Master Species: Element name
        #=========================================================
        Database_Components_list = []
        Database_ComponentSpecies_Name_list = []
        Database_ComponentSpecies_Formula_list = []
        Database_Components_Log_k_list = []
        Database_Components_gfw_list = []

        for string in Database_Solution_Master_Species_list:
            string = string.replace ('\t', ' ')
            again = 1
            while string.find (' ') != -1 and again:
                if string.find (' ') != 0:
                    index = string.find (' ')
                    tmp1 = string [:index].replace (' ', '')
                    tmp1 = tmp1.replace ('\n', '')
                    tmp1 = tmp1.replace ('\t', '')
                    tmp1 = tmp1.replace ('\r', '')
                    Database_Components_list.append (tmp1)
                    string = string [index:]
                    again = 0
                    again_2 = 1
                    #=========================================================
                    #  Solution Master Species: Formula (including its charge)
                    #=========================================================
                    while again_2:
                        if string.find (' ') != 0:
                            index = string.find (' ')
                            tmp2 = string [:index].replace (' ', '')
                            tmp2 = tmp2.replace ('\n', '')
                            tmp2 = tmp2.replace ('\t', '')
                            tmp2 = tmp2.replace ('\r', '')
                            Database_ComponentSpecies_Name_list.append (tmp2)
                            string = string [index:]
                            again_2 = 0
                            again_3 = 1
                            #=========================================================
                            #  Solution Master Species: Alkalinity
                            #=========================================================
                            while again_3:
                                if string.find (' ') != 0:
                                    index = string.find (' ')
                                    tmp3 = string [:index].replace (' ', '')
                                    tmp3 = tmp3.replace ('\n', '')
                                    tmp3 = tmp3.replace ('\t', '')
                                    tmp3 = tmp3.replace ('\r', '')
                                    Database_Components_Log_k_list.append (tmp3)
                                    string = string [index:]
                                    again_3 = 0
                                    again_4 = 1
                                    #==========================================================================================================
                                    #  Solution Master Species: Gram Formula Weight or Chemical Formula (used to calculate gram formula weight)
                                    #==========================================================================================================
                                    while again_4:
                                        if string.find (' ') != 0:
                                            index = string.find (' ')
                                            tmp4 = string [:index].replace (' ', '')
                                            tmp4 = tmp4.replace ('\n', '')
                                            tmp4 = tmp4.replace ('\t', '')
                                            tmp4 = tmp4.replace ('\r', '')
                                            Database_ComponentSpecies_Formula_list.append (tmp4)
                                            string = string [index:]
                                            again_4 = 0
                                            #==========================================================
                                            #  Solution Master Species: Gram Formula Weight for Element
                                            #==========================================================
                                            if string == '':
                                                Database_Components_gfw_list.append ('')
                                            else:
                                                string = string.replace (' ', '')
                                                string = string.replace ('\n', '')
                                                string = string.replace ('\t', '')
                                                string = string.replace ('\r', '')
                                                Database_Components_gfw_list.append (string)
                                        else:
                                            string = string [1:]
                                else:
                                    string = string [1:]
                        else:
                            string = string [1:]
                else:
                    string = string [1:]
        #=========================================================


        #=========================================================
        #  Solution Secondary Species
        #=========================================================
        Database_AqueousSpecies_list         = []
        Database_AqueousSpecies_Formula_list = []
        Database_AqueousSpecies_Log_k_list   = []
        Database_AqueousSpecies_Species_list = []
        left_equ_tmp  = []
        right_equ_tmp = []
        for string in Database_Solution_Species_list:
            if string.find ('=') != -1:
                index = string.find ('=') + 1
                string_tmp    = string [index:]                
                left_equ_tmp.append (string [:index - 1])      
                again = 1
                while string_tmp.find ('\n') != 0 and again:
                    if string_tmp.find (' ') != 0:
                        index = string_tmp.find (' ')
                        right_equ_tmp.append (string_tmp [index:].replace ('\n', ''))
                        tmp1 = string_tmp [:index].replace (' ', '')
                        tmp1 = tmp1.replace ('\n', '')
                        tmp1 = tmp1.replace ('\t', '')
                        tmp1 = tmp1.replace ('\r', '')
                        Database_AqueousSpecies_Formula_list.append (tmp1)
                        #string_tmp = string_tmp [index:]
                        again = 0
                    else:
                        string_tmp = string_tmp [1:]			
            elif string.find ('log_k') != -1:
                index  = string.find ('log_k') + 5
                string = string [index:].replace (' ', '')            
                string = string.replace ('\n', '')            
                string = string.replace ('\t', '')            
                string = string.replace ('\r', '')            
                Database_AqueousSpecies_Log_k_list.append (string)
            # ATTENTION: pour le moment on ne recupere pas gamma...
            elif string.find ('gamma') != -1:
                pass

        Database_AqueousSpecies_list = Database_AqueousSpecies_Formula_list

        #  Right part of the equation
        reactions = right_equ_tmp
        temp_list_aux = []
        for string in reactions:
            for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                string = string.replace ('+'+character, '+ '+character)	    
                for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                    string = string.replace ('-'+character, '- '+character)	    
            string += '\n'
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-' + str (val))
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_1 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_1.append (aux_list)
            i = i+1       
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                if species_tmp_1 [i][j][1].find ('+') != -1:
                    index = species_tmp_1 [i][j][1].find ('+')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                elif species_tmp_1 [i][j][1].find ('-') != -1:
                    index = species_tmp_1 [i][j][1].find ('-')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str (val)
                else:
                    val = float (species_tmp_1 [i][j][1])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                j = j+1
            i = i+1

        tmp_list_right = left_equ_tmp
        temp_list_aux = []
        for string in tmp_list_right:
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-'+val)
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_2 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_2.append (aux_list)
            i = i+1

        # species_tmp_1 & species_tmp_2  ->  Database_AqueousSpecies_Species_list
        Database_AqueousSpecies_Species_list = species_tmp_2
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                Database_AqueousSpecies_Species_list [i].append (species_tmp_1 [i][j])
                j = j+1
            i = i+1
        #=========================================================


        #=========================================================
        #  Phases names
        #=========================================================
        Database_Phases_Names_list   = []
        Database_Phases_Formula_list = []
        Database_Phases_Species_list = []
        tmp_list       = []
        tmp_list_left  = []
        tmp_list_right = []
        for string in Database_Phases_list:
            if string [0] != '\t' and string [0] != ' ' and string.find ('PHASES') == -1:
                if string.find (' ') != -1:
                    index = string.find (' ')
                    Database_Phases_Names_list.append (string [0:index])
                elif string.find ('\t'):
                    index = string.find ('\t')
                    Database_Phases_Names_list.append (string [0:index])
                else:
                    Database_Phases_Names_list.append (string [0:len (string) - 1])
        #=========================================================
        #  Phases formation reactions
        #=========================================================
            elif string.find ('=') != -1:
                index = string.find ('=')
                tmp_list_left.append (string [0:index - 1])
                tmp_list_right.append (string [index + 1:])
            else:
                pass

        Database_gases_Names_list = []
        for string in Database_Phases_Names_list:
            if string.find ('(g)') != -1:
                index = Database_Phases_Names_list.index (string)
                Database_gases_Names_list.append (string)
                #del Database_Phases_Names_list [index]
            else:
                pass
		
        reactions = []
        reaction_left = ''
        for s_left in tmp_list_left:
            """
            formula = ''
            for char in s_left:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (formula != '') and (formula != ' '):
                        toto = formula
                        reaction_left = s_left [s_left.index (formula):]# + len (formula):]
                        formula = ''
                    else:
                        pass
#                elif char != ' ' :
#                    formula += char
                else:
                    formula += char
            Database_Phases_Formula_list.append (toto)
            if reaction_left == '' or reaction_left == ' ':
                reactions.append ('+')
            else:
                reactions.append (reaction_left)

        print len (Database_Phases_Formula_list)
        print len (reactions)	
        print reactions
            """	
# debug : pb lorsque l on a un '-' a gauche du '=' car on teste d abord la presence du '+'

            if s_left.find (' +') != -1:
                index = s_left.find (' +')
                formula = s_left [0:index]
                formula = formula.replace (' ', '')
                formula = formula.replace ('\t', '')
                reaction_left = s_left [index:]
            elif s_left.find (' -') != -1:
                index = s_left.find (' -')
                formula = s_left [0:index]
                formula = formula.replace (' ', '')
                formula = formula.replace ('\t', '')
                reaction_left = s_left [index:]
            else:
                formula = s_left
                formula = formula.replace (' ', '')
                formula = formula.replace ('\t', '')
                reaction_left = '+'

            Database_Phases_Formula_list.append (formula)
            reactions.append (reaction_left)
#debug_left
        # Left part of the equation
        temp_list_aux = []
        for string in reactions:
            for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                string = string.replace ('+'+character, '+ '+character)	    
                for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                    string = string.replace ('-'+character, '- '+character)	    
            string += '\n'
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-' + str (val))
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_1 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_1.append (aux_list)
            i = i+1       
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                if species_tmp_1 [i][j][1].find ('+') != -1:
                    index = species_tmp_1 [i][j][1].find ('+')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                elif species_tmp_1 [i][j][1].find ('-') != -1:
                    index = species_tmp_1 [i][j][1].find ('-')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str (val)
                else:
                    val = float (species_tmp_1 [i][j][1])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                j = j+1
            i = i+1

        # right part of the equation 
        temp_list_aux = []
        for string in tmp_list_right:
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-'+val)
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_2 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_2.append (aux_list)
            i = i+1

        # species_tmp_1 & species_tmp_2  ->  Database_Phases_Species_list
        Database_Phases_Species_list = species_tmp_2
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                Database_Phases_Species_list [i].append (species_tmp_1 [i][j])
                j = j+1
            i = i+1
        #=========================================================
        #  Phases property: log_k
        #=========================================================
        Database_Phases_Log_k_list = []
        for string in Database_Phases_list:
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            if (temp_list [0] == 'log_k'):
                Database_Phases_Log_k_list.append (temp_list [1])
            else:
                pass
        #=========================================================
        #  Phases property: Delta_h
        #=========================================================
        #  ATTENTION !!
        #  On obtient la liste des delta_h associes aux mineraux
        #  Le pb est que le delta h est un argument optionnel
        #  Les listes sont donc décalees et la correspondance des 
        #  indices est rompue (ex: phreeqc.dat: 65 minéraux, 54 delta h)
        #
        Database_Phases_Delta_h_list = []
        for string in Database_Phases_list:
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != ''):
                        temp_list.append (empty)
                        empty = ''
                else:
                    empty += char
            if (temp_list [0] == 'delta_h'):
                Database_Phases_Delta_h_list.append ([temp_list[1], temp_list[2]])
            else:
                pass
        #=========================================================



        #=========================================================
        #  Exchange Master Species: Exchange name
        #=========================================================
        Database_ExchangeMasterSpecies_list = []
        Database_ExchangeMasterSpecies_Formula_list = []
        for string in Database_Exchange_Master_Species_list:
            string = string.replace ('\t', ' ')
            again = 1
            while string.find (' ') != -1 and again:
                if string.find (' ') != 0:
                    index = string.find (' ')
                    Database_ExchangeMasterSpecies_list.append (string [:index])
                    string = string [index:]
                    again = 0
                    #=========================================================
                    #  Exchange Master Species: Formula
                    #=========================================================
                    if string == '':
                        Database_ExchangeMasterSpecies_Formula_list.append ('')
                    else:
                        string = string.replace (' ', '')
                        string = string.replace ('\n', '')
                        string = string.replace ('\t', '')
                        Database_ExchangeMasterSpecies_Formula_list.append (string)
                else:
                    string = string [1:]
        #=========================================================
        """
# debug_database
        print Database_Exchange_Species_list

        Database_ExchangeSpecies_list           = []
        Database_ExchangeSpecies_Log_k_list     = []
        Database_ExchangeSpecies_Reactants_list = []
	for e_s in Database_Exchange_Species_list:
            e_s = e_s.replace ('\t', '')   
            if '=' in e_s:
	        s1 = e_s [:e_s.find('=')]
	        s2 = e_s [e_s.find('=')+1:]
		print 's1', s1
		print 's2', s2
		l1 = s1.split (' ')
		l2 = []
		for e in l1:
		    if e != '':
		        l2.append (e)
                print l2
		
		
		ls21 = s2.split (' ')
		ls22 = []
		for e in ls21:
		    if e != '' and e.find ('#') == -1:
		        ls22.append (e.replace ('\n', ''))
			
	        print ls22
		
	
	
        """
	
        """
temp_list = []
print "---------------- exchange species ----------------------"
l_exs = []
for e_s in exchange_species :
    ind = 0
    str = ""
    temp_list = []
    for i in e_s:
#        print " i",i
        if i=="\t" or i=="\n" :
            if str !="" and ind == 0:
                pass
            elif str !=" " and ind!=0:
                temp_list.append(str)
#                print "temp_list ",temp_list
            str = ""
        else:
            ind+=1
            str +=i
#            print "string ",str
    l_exs.append(temp_list)
#print l_es
l_exs_equ = []
count = 0
for key in l_exs:
    if len(key)!=0:
        if (key[0]!="log_k" and key[0][0:5]!="-anal"
                           and key[0][0:7]!= 'delta_h'
                           and key[0]!= '-gamma'):
            str=""
            temp_list = []
#            print "key :",key[0]
            for i in key[0]:
                if i!=" " and i !="\n":
                    str+=i
                else:
                    if str !="+" and str!="=" and len(str)!=1:
                        temp_list.append(str)
                        str=""
                    if str =="+" or str=="=":
                        str=""
            temp_list.append(str)
            l_exs_equ.append(temp_list)
            count+=1
for i in l_exs_equ:
    print i
    print " number ",count
l_exs_k = [0.0]*count
    # l_exs_g contains the activity law coefficients
l_exs_g = [[4.0,0.0]]*count
    # l_ss_delta_h contains the enthalpy
l_exs_delta_h = [(0.0,"")]*count
##for i in range(0,count):
##    print i,l_ss[i]
count = -1
for key in l_exs:
    if len(key)!=0:
        if (key[0]!="log_k" and key[0][0:4]!="-ana"
                           and key[0][0:7]!= 'delta_h'
                           and key[0]!= '-gamma'):
            count+=1
        elif key[0]=="log_k":
#            print "log_k",key,key[0],key[1],count
            l_exs_k[count-1] = key[1]
        elif key[0]=='-gamma':
            l_exs_g[count] = [key[1],key[2]]
            print '-gamma',count,l_exs_g[count][0],key[1]
        elif key[0]=='delta_h':
#            print 'delta_h',key,key[1],key[2],count
            l_exs_delta_h[count][0] = key[1]
            l_exs_delta_h[count][1] = key[2]
print l_exs_k
phreeqcfile.close()

        """
        #=========================================================
        #  Surface Master Species: Surface Binding Site Name
        #=========================================================
        Database_SurfaceMasterSpecies_list         = []
        Database_SurfaceMasterSpecies_Formula_list = []
        for string in Database_Surface_Master_Species_list:
            string = string.replace ('\t', ' ')
            again = 1
            while string.find (' ') != -1 and again:
                if string.find (' ') != 0:
                    index = string.find (' ')
                    Database_SurfaceMasterSpecies_list.append (string [:index])
                    string = string [index:]
                    again = 0
                    #=========================================================
                    #  Surface Master Species: Formula
                    #=========================================================
                    if string == '':
                        Database_SurfaceMasterSpecies_Formula_list.append ('')
                    else:
                        string = string.replace (' ', '')
                        string = string.replace ('\n', '')
                        string = string.replace ('\t', '')
                        Database_SurfaceMasterSpecies_Formula_list.append (string)
                else:
                    string = string [1:]
        #=========================================================


        #=========================================================
        #  Surface Species
        #=========================================================
        Database_SurfaceSpecies_list           = []
        Database_SurfaceSpecies_Log_k_list     = []
        Database_SurfaceSpecies_Reactants_list = []
        left_equ_tmp  = []
        right_equ_tmp = []
        for string in Database_Surface_Species_list:
            if string.find ('=') != -1 and string.find ('log_k') == -1:
                index = string.find ('=') + 1
                string_tmp    = string [index:]                
                left_equ_tmp.append (string [:index - 1])      
                again = 1
                while string_tmp.find ('\n') != 0 and again:
                    if string_tmp.find (' ') != 0:
                        index = string_tmp.find (' ')
                        right_equ_tmp.append (string_tmp [index:].replace ('\n', ''))
                        tmp1 = string_tmp [:index].replace (' ', '')
                        tmp1 = tmp1.replace ('\n', '')
                        tmp1 = tmp1.replace ('\t', '')
                        tmp1 = tmp1.replace ('\r', '')
                        Database_SurfaceSpecies_list.append (tmp1)
                        again = 0
                    else:
                        string_tmp = string_tmp [1:]			
            elif string.find ('log_k') != -1:
                index  = string.find ('log_k') + 5
                string = string [index:].replace (' ', '')            
                string = string.replace ('\n', '')            
                string = string.replace ('\t', '')            
                string = string.replace ('\r', '')
                if string.find ('#') != -1:
                    index = string.find ('#')
                    Database_SurfaceSpecies_Log_k_list.append (string [:index]) 
                else:
                    Database_SurfaceSpecies_Log_k_list.append (string)

        #  Right part of the equation
        reactions = right_equ_tmp
        temp_list_aux = []
        for string in reactions:
            for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                string = string.replace ('+'+character, '+ '+character)	    
                for character in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' ']:
                    string = string.replace ('-'+character, '- '+character)	    
            string += '\n'
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-' + str (val))
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_1 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_1.append (aux_list)
            i = i+1       
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                if species_tmp_1 [i][j][1].find ('+') != -1:
                    index = species_tmp_1 [i][j][1].find ('+')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                elif species_tmp_1 [i][j][1].find ('-') != -1:
                    index = species_tmp_1 [i][j][1].find ('-')
                    val = float (species_tmp_1 [i][j][1][index+1:])
                    species_tmp_1 [i][j][1] = str (val)
                else:
                    val = float (species_tmp_1 [i][j][1])
                    species_tmp_1 [i][j][1] = str ('-' + str (val))
                j = j+1
            i = i+1

        tmp_list_right = left_equ_tmp
        temp_list_aux = []
        for string in tmp_list_right:
            temp_list = []
            empty = ''
            for char in string:
                if (char == '\t') or (char == '\n') or (char == ' '):
                    if (empty != '') and (empty != ' '):
                        temp_list.append (empty)
                        empty = ''
                    else:
                        pass
                else:
                    empty += char
            temp_list_aux.append (temp_list)
        i = 0
        species_tmp = []
        while i < len (temp_list_aux):
            species = []
            j = 0
            while j < len (temp_list_aux [i]): 
                count = 0
                always = 1
                for char in temp_list_aux [i][j]:
                    if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ' '] and always:
                        count = count + 1
                    else:
                        always = 0
                if count == 0:
		    species.append ([temp_list_aux [i][j].replace (' ', ''), '1'])
                elif count != 0 and temp_list_aux [i][j] != '':
                    species.append ([temp_list_aux [i][j][count:].replace (' ', ''), temp_list_aux [i][j][:count]])
                else:
                    pass
                j = j+1
            species_tmp.append (species)
            i = i+1
        species_tmp_aux = species_tmp
        i = 0
        while i < len (species_tmp_aux):
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] == '+':
                    pass
                elif species_tmp_aux [i][j][0] == '-':
                    val = float (species_tmp_aux [i][j+1][1])
                    species_tmp_aux [i][j+1][1] = str ('-'+val)
                elif species_tmp_aux [i][j][0] == '':
                    val = float (species_tmp_aux [i][j][1])
                    species_tmp_aux [i][j+1][1] = str (val)
                j = j+1
            i = i+1
        i = 0
        species_tmp_2 = []
        while i < len (species_tmp_aux):
            aux_list = []
            j = 0
            while j < len (species_tmp_aux [i]):
                if species_tmp_aux [i][j][0] != '+' and species_tmp_aux [i][j][0] != '-' and species_tmp_aux [i][j][0] != '':
                    aux_list.append (species_tmp_aux [i][j])
                else:
                    pass
                j = j+1
            species_tmp_2.append (aux_list)
            i = i+1

        # species_tmp_1 & species_tmp_2  ->  Database_SurfaceSpecies_Reactants_list
        Database_SurfaceSpecies_Reactants_list = species_tmp_2
        i = 0
        while i < len (species_tmp_1):
            j = 0
            while j < len (species_tmp_1 [i]):
                Database_SurfaceSpecies_Reactants_list [i].append (species_tmp_1 [i][j])
                j = j+1
            i = i+1
        #=========================================================



        a.restoreOverrideCursor ()

###########################################################################################
##                                                                                       ##
##                              DATABASE FRAME (END)                                     ##
##                                                                                       ##
###########################################################################################




#==============================================================================================
#
#                      BEGINNING OF THE CHEMISTRY BASE ADDENDA FRAMES
#
#==============================================================================================










###########################################################################################
##                                                                                       ##
##                   AQUEOUS MASTER SPECIES FRAME (BEGINNING)                            ##
##                                                                                       ##
###########################################################################################



    def aqueous_master_species (self):


#----------------------------------------------------------------------------------------------
#  List of Comments associated to widgets
#----------------------------------------------------------------------------------------------

        ToolTip_1 = 'An element name: the element name must begin with a capital letter,\n followed by small ones.\nExamples: Na or Si'
        ToolTip_2 = 'List of available solution master species, included in the database and defined by the user'
        ToolTip_3 = 'Solution master species formula.\nExamples:\n   - For Na: Na\n   - For Si: SiO2'
        ToolTip_4 = 'gram formula weight of the primary master species'
        ToolTip_5 = 'Alkalinity contribution of the master species'
        ToolTip_6 = 'Component species name, including valence.\nExamples:\n   - For Na: Na+\n   - For Si: H4SiO4'
		
#----------------------------------------------------------------------------------------------

        self.AqueousMasterSpeciesFrame = QFrame ()
        self.AqueousMasterSpeciesFrame.setCaption ('Aqueous Component Species')
        setPosition (self.AqueousMasterSpeciesFrame)

        self.AqueousMasterSpeciesFrame.mainLayout = QVBoxLayout (self.AqueousMasterSpeciesFrame, 10,-1, 'AqueousMasterSpeciesFrame_mainLayout')
        self.AqueousMasterSpeciesFrame.mainLayout.setSpacing (Space)
        self.AqueousMasterSpeciesFrame.mainLayout.setMargin (Marge)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        AqueousMasterSpecies_comment = Comments ['Aqueous_Component_Species']

        self.AqueousMasterSpeciesFrame.QHGroupBoxA = QHGroupBox (self.AqueousMasterSpeciesFrame)
        QToolTip.add (self.AqueousMasterSpeciesFrame.QHGroupBoxA, AqueousMasterSpecies_comment)

        self.AqueousMasterSpeciesFrame.QHGroupBoxA.setMargin (5)
        self.AqueousMasterSpeciesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.AqueousMasterSpeciesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.AqueousMasterSpeciesFrame.mainLayout.addWidget (self.AqueousMasterSpeciesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.AqueousMasterSpeciesFrame.QHGroupBox0 = QHGroupBox (self.AqueousMasterSpeciesFrame)
        self.AqueousMasterSpeciesFrame.mainLayout.addWidget (self.AqueousMasterSpeciesFrame.QHGroupBox0)

        self.AqueousMasterSpeciesFrame.QHGroupBox0.setMargin (10)
        self.AqueousMasterSpeciesFrame.QHGroupBox0.setMidLineWidth (0)

        self.AqueousMasterSpeciesFrame.QVBox01 = QVBox (self.AqueousMasterSpeciesFrame.QHGroupBox0)
        self.AqueousMasterSpeciesFrame.SpacerVBox = QVBox (self.AqueousMasterSpeciesFrame.QHGroupBox0)
        self.AqueousMasterSpeciesFrame.QVBox02 = QVBox (self.AqueousMasterSpeciesFrame.QHGroupBox0)

        self.AqueousMasterSpeciesFrame.QVBox01.setSpacing (5)
        self.AqueousMasterSpeciesFrame.QVBox01.setMargin (0)
        self.AqueousMasterSpeciesFrame.QVBox02.setSpacing (5)
        self.AqueousMasterSpeciesFrame.QVBox02.setMargin (0)
        self.AqueousMasterSpeciesFrame.SpacerVBox.setMinimumSize (10, 10)
        self.AqueousMasterSpeciesFrame.SpacerVBox.setMaximumSize (10, 10)

#----------------------------------------------------------------------------------------------

        self.AqueousMasterSpeciesFrame.ComponentNameLabel = QLabel (self.AqueousMasterSpeciesFrame.QVBox01)
#        self.AqueousMasterSpeciesFrame.ComponentNameLabel.setText ('Component Name')
        self.AqueousMasterSpeciesFrame.ComponentNameLabel.setText ('Element Name')
        self.AqueousMasterSpeciesFrame.ComponentNameLabel.resize (self.AqueousMasterSpeciesFrame.ComponentNameLabel.sizeHint ())

        self.AqueousMasterSpeciesFrame.ComponentNameLineEdit = QLineEdit (self.AqueousMasterSpeciesFrame.QVBox01)
        self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setMaximumSize (200, 25)
        self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setFocus ()
        QToolTip.add (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit, ToolTip_1)

        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesListLabel = QLabel (self.AqueousMasterSpeciesFrame.QVBox02)
#        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesListLabel.setText ('List of Components')
        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesListLabel.setText ('List of Component Species')
        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesListLabel.resize (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesListLabel.sizeHint ())

        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox = QComboBox (self.AqueousMasterSpeciesFrame.QVBox02)
        QToolTip.add (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox, ToolTip_2)
        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.setMaximumSize (200, 25)
        self.connect (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox, SIGNAL ('activated (int)'), self.AqueousMasterSpeciesFrame_highlighted)

        i = 0
        while i < len (Components_list):
            self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.insertItem (Components_list [i])
            i = i+1
        i = 0
        while i < len (Database_Components_list):
            self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.insertItem (Database_Components_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.AqueousMasterSpeciesFrame.QHBox1 = QHBox (self.AqueousMasterSpeciesFrame)
        self.AqueousMasterSpeciesFrame.mainLayout.addWidget (self.AqueousMasterSpeciesFrame.QHBox1)
        self.AqueousMasterSpeciesFrame.QHBox1.setMargin (0)
        self.AqueousMasterSpeciesFrame.QHBox1.setSpacing (5)

        self.AqueousMasterSpeciesFrame.QHGroupBox11 = QHGroupBox (self.AqueousMasterSpeciesFrame.QHBox1)
        self.AqueousMasterSpeciesFrame.QHGroupBox12 = QHGroupBox (self.AqueousMasterSpeciesFrame.QHBox1)

        self.AqueousMasterSpeciesFrame.QHGroupBox11.setMargin (10)
        self.AqueousMasterSpeciesFrame.QHGroupBox11.setMidLineWidth (0)

        self.AqueousMasterSpeciesFrame.QVBox111 = QVBox (self.AqueousMasterSpeciesFrame.QHGroupBox11)
        self.AqueousMasterSpeciesFrame.QVBox121 = QVBox (self.AqueousMasterSpeciesFrame.QHGroupBox12)

        self.AqueousMasterSpeciesFrame.QVBox111.setMargin (0)
        self.AqueousMasterSpeciesFrame.QVBox111.setSpacing (5)
        self.AqueousMasterSpeciesFrame.QVBox121.setMargin (0)
        self.AqueousMasterSpeciesFrame.QVBox121.setSpacing (5)

        #self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLabel = QLabel ('Component Species Name', self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLabel = QLabel ('Component Species Name', self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLabel.resize (self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLabel.sizeHint())

        self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit = QLineEdit (self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit, ToolTip_6)

        #self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLabel = QLabel ('Component Species Formula', self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLabel = QLabel ('Formula', self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLabel.resize (self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLabel.sizeHint())

        self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit = QLineEdit (self.AqueousMasterSpeciesFrame.QVBox111)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit, ToolTip_3)

        self.AqueousMasterSpeciesFrame.MolarWeightLabel = QLabel ('Molar Weight (g/mol)', self.AqueousMasterSpeciesFrame.QVBox121)
        self.AqueousMasterSpeciesFrame.MolarWeightLabel.resize (self.AqueousMasterSpeciesFrame.MolarWeightLabel.sizeHint ())
        self.AqueousMasterSpeciesFrame.MolarWeightLabel.setAlignment (Qt.AlignHCenter)

        self.AqueousMasterSpeciesFrame.MolarWeightLineEdit = QLineEdit (self.AqueousMasterSpeciesFrame.QVBox121)
        self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousMasterSpeciesFrame.MolarWeightLineEdit, ToolTip_4)

        self.AqueousMasterSpeciesFrame.AlkalinityLabel = QLabel ('Alkalinity', self.AqueousMasterSpeciesFrame.QVBox121)
        self.AqueousMasterSpeciesFrame.AlkalinityLabel.resize (self.AqueousMasterSpeciesFrame.AlkalinityLabel.sizeHint ())
        self.AqueousMasterSpeciesFrame.AlkalinityLabel.setAlignment (Qt.AlignHCenter)

        self.AqueousMasterSpeciesFrame.AlkalinityLineEdit = QLineEdit (self.AqueousMasterSpeciesFrame.QVBox121)
        self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.setMinimumSize (200, 25)
        self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousMasterSpeciesFrame.AlkalinityLineEdit, ToolTip_5)
            
#----------------------------------------------------------------------------------------------

        self.AqueousMasterSpeciesFrame.QHGroupBox2 = QHGroupBox (self.AqueousMasterSpeciesFrame)
        self.AqueousMasterSpeciesFrame.mainLayout.addWidget (self.AqueousMasterSpeciesFrame.QHGroupBox2)

        self.AqueousMasterSpeciesFrame.QHGroupBox2.setMargin (2)
        self.AqueousMasterSpeciesFrame.QHGroupBox2.setMidLineWidth (0)

        self.AqueousMasterSpeciesFrame.OKPB = QPushButton ('OK', self.AqueousMasterSpeciesFrame.QHGroupBox2)
        self.AqueousMasterSpeciesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.AqueousMasterSpeciesFrame.QHGroupBox2)
        self.AqueousMasterSpeciesFrame.DeletePB = QPushButton ('Delete', self.AqueousMasterSpeciesFrame.QHGroupBox2)
        self.AqueousMasterSpeciesFrame.CancelPB = QPushButton ('Cancel', self.AqueousMasterSpeciesFrame.QHGroupBox2)
        self.AqueousMasterSpeciesFrame.HelpPB = QPushButton ('&Help', self.AqueousMasterSpeciesFrame.QHGroupBox2)            

        self.connect (self.AqueousMasterSpeciesFrame.OKPB, SIGNAL ('clicked ()'), self.AqueousMasterSpeciesFrame_ok)
        self.connect (self.AqueousMasterSpeciesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.AqueousMasterSpeciesFrame_changecreate)
        self.connect (self.AqueousMasterSpeciesFrame.DeletePB, SIGNAL ('clicked ()'), self.AqueousMasterSpeciesFrame_delete)
        self.connect (self.AqueousMasterSpeciesFrame.CancelPB, SIGNAL ('clicked ()'), self.AqueousMasterSpeciesFrame_cancel)
        self.connect (self.AqueousMasterSpeciesFrame.HelpPB, SIGNAL ('clicked ()'), self.AqueousMasterSpeciesFrame_help)

        self.AqueousMasterSpeciesFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the Solution Master Species Frame
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  to exit saving changes
#----------------------------------------------------------------------------------------------
 
    def AqueousMasterSpeciesFrame_ok (self):

        self.AqueousMasterSpeciesFrame.close ()

#----------------------------------------------------------------------------------------------
#  to change or create master species
#----------------------------------------------------------------------------------------------

    def AqueousMasterSpeciesFrame_changecreate (self):

        global Components_list
        global ComponentSpecies_Name_list
        global ComponentSpecies_Formula_list
        global Components_Properties_list

        global Database_Components_list

        if (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ())) in Database_Components_list:
            self.AqueousMasterSpecies_DatabaseMB = QMessageBox()
            self.AqueousMasterSpecies_DatabaseMB.setCaption ('Warning')
            self.AqueousMasterSpecies_DatabaseMB.setText ('\"'+str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the element you want to define.')
            self.AqueousMasterSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.AqueousMasterSpecies_DatabaseMB.show ()
        else:
            if (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text()) in Components_list):
                index = Components_list.index (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text()))	    
                ComponentSpecies_Name_list [index] = str (self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.text())
                ComponentSpecies_Formula_list [index] = str (self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.text ())
                Components_Properties_list [index][0] = str (self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.text ())
                Components_Properties_list [index][1] = str (self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.text ())

                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.clear ()        
                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setFocus ()
            elif (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text()).replace(' ','') == ''):
                self.AqueousMasterSpecies_DatabaseMB = QMessageBox()
                self.AqueousMasterSpecies_DatabaseMB.setCaption ('Warning')
                self.AqueousMasterSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the element you want to define.")
                self.AqueousMasterSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
                self.AqueousMasterSpecies_DatabaseMB.show ()
            else:
                Components_list.append (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text()))
                ComponentSpecies_Name_list.append (str (self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.text()))
                ComponentSpecies_Formula_list.append (str (self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.text ()))
                Temp_list = []
                Temp_list.append (str (self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.text ()))
                Temp_list.append (str (self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.text ()))
                Components_Properties_list.append (Temp_list)

                length = len (Components_list) - 1
                self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.insertItem (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text(), length)
                self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.setCurrentItem (length)
            
                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.clear ()        
                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setFocus ()
       

    def AqueousMasterSpeciesFrame_delete (self):

        global Components_list
        global ComponentSpecies_Name_list
        global ComponentSpecies_Formula_list
        global Components_Properties_list

        global Database_Components_list

        if ((self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.count ()) != 0) and str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ()) != '':
            if (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ())) in Database_Components_list:
                self.AqueousMasterSpecies_DatabaseMB2 = QMessageBox()
                self.AqueousMasterSpecies_DatabaseMB2.setCaption ('Warning')
                self.AqueousMasterSpecies_DatabaseMB2.setText ('\"'+str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.AqueousMasterSpecies_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.AqueousMasterSpecies_DatabaseMB2.show ()
            else:
                index = Components_list.index (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ()))
                self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.removeItem (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.currentItem ())
                del Components_list [index]
                del ComponentSpecies_Name_list [index]
                del ComponentSpecies_Formula_list [index]
                del Components_Properties_list [index]
                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.clear ()
                self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.clear ()        
                self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setFocus ()
            
                if ((self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.count ()) != 0):
                    self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.setCurrentItem (0)
                else:
                    pass
        else:
            if ((self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.count ()) == 0):
                self.AqueousMasterSpeciesMB = QMessageBox()
                self.AqueousMasterSpeciesMB.setCaption ('Error')
                self.AqueousMasterSpeciesMB.setText ('There is no Master Species.')
                self.AqueousMasterSpeciesMB.setIcon (QMessageBox.Critical)
                self.AqueousMasterSpeciesMB.show ()
            elif str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ()) == '':
                self.AqueousMasterSpeciesMB2 = QMessageBox()
                self.AqueousMasterSpeciesMB2.setCaption ('Error')
                self.AqueousMasterSpeciesMB2.setText ('You have to select a Master Species.')
                self.AqueousMasterSpeciesMB2.setIcon (QMessageBox.Critical)
                self.AqueousMasterSpeciesMB2.show ()


#----------------------------------------------------------------------------------------------
#  to exit discarding changes
#----------------------------------------------------------------------------------------------

    def AqueousMasterSpeciesFrame_cancel (self):

        self.AqueousMasterSpeciesFrame.close ()

#----------------------------------------------------------------------------------------------
#  to display help about this window
#----------------------------------------------------------------------------------------------

    def AqueousMasterSpeciesFrame_help (self):
        
        self.Help ()
        
#----------------------------------------------------------------------------------------------
#  to put in the edit line the item highlighted in the Master Species Combo Box
#----------------------------------------------------------------------------------------------

    def AqueousMasterSpeciesFrame_highlighted (self):

        global Database_Components_list
        global Database_ComponentSpecies_Name_list
        global Database_ComponentSpecies_Formula_list
        global Database_Components_Log_k_list
        global Database_Components_gfw_list


        if str (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.currentText ()) in Database_Components_list:
            self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setText (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.currentText ())
            index = Database_Components_list.index (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ()))
            self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.setText (str (Database_ComponentSpecies_Name_list [index]))
            self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.setText (str (Database_ComponentSpecies_Formula_list [index]))
            self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.setText (str (Database_Components_gfw_list [index]))
            self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.setText (str (Database_Components_Log_k_list [index]))
        else:
            self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.setText (self.AqueousMasterSpeciesFrame.AqueousMasterSpeciesComboBox.currentText ())
            index = Components_list.index (str (self.AqueousMasterSpeciesFrame.ComponentNameLineEdit.text ()))
            self.AqueousMasterSpeciesFrame.ComponentSpeciesNameLineEdit.setText (str (ComponentSpecies_Name_list [index]))
            self.AqueousMasterSpeciesFrame.ComponentSpeciesFormulaLineEdit.setText (str (ComponentSpecies_Formula_list [index]))
            self.AqueousMasterSpeciesFrame.MolarWeightLineEdit.setText (str (Components_Properties_list [index][0]))
            self.AqueousMasterSpeciesFrame.AlkalinityLineEdit.setText (str (Components_Properties_list [index][1]))
        
  
###########################################################################################
##                                                                                       ##
##                        AQUEOUS MASTER SPECIES FRAME (END)                             ##
##                                                                                       ##
###########################################################################################



###########################################################################################
##                                                                                       ##
##                          AQUEOUS SPECIES FRAME (BEGINNING)                            ##
##                                                                                       ##
###########################################################################################


    def aqueous_species (self):
    
#----------------------------------------------------------------------------------------------
#  List of Comments associated to widgets
#----------------------------------------------------------------------------------------------

        ToolTip_1 = 'The species name must begin with a capital letter and contain only alphabetic characters '
        ToolTip_2 = 'List of available Aqueous Species within the database and defined by the user'
	ToolTip_3 = 'Aqueous Species formula'
	ToolTip_5 = 'List of species for the formation reaction with their respective stoechiometric coefficients'

        
        self.AqueousSpeciesFrame = QFrame ()
        self.AqueousSpeciesFrame.setCaption ('Aqueous Secondary Species')
        setPosition (self.AqueousSpeciesFrame)
    
        self.AqueousSpeciesFrame.mainLayout = QVBoxLayout (self.AqueousSpeciesFrame, 10, -1, 'AqueousSpecies_mainLayout')
        self.AqueousSpeciesFrame.mainLayout.setMargin (Marge)
        self.AqueousSpeciesFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        AqueousSpecies_comment = Comments ['Aqueous_Secondary_Species']

        self.AqueousSpeciesFrame.QHGroupBoxA = QHGroupBox (self.AqueousSpeciesFrame)
	QToolTip.add (self.AqueousSpeciesFrame.QHGroupBoxA,AqueousSpecies_comment)

        self.AqueousSpeciesFrame.QHGroupBoxA.setMargin (5)
        self.AqueousSpeciesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.AqueousSpeciesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.AqueousSpeciesFrame.mainLayout.addWidget (self.AqueousSpeciesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.QHGroupBox0 = QHGroupBox (self.AqueousSpeciesFrame)
        self.AqueousSpeciesFrame.QHGroupBox0.setMargin (10)
        self.AqueousSpeciesFrame.QHGroupBox0.setMidLineWidth (0)
        self.AqueousSpeciesFrame.mainLayout.addWidget (self.AqueousSpeciesFrame.QHGroupBox0)

        self.AqueousSpeciesFrame.QVBox01 = QVBox (self.AqueousSpeciesFrame.QHGroupBox0)
        self.AqueousSpeciesFrame.QVBox02 = QVBox (self.AqueousSpeciesFrame.QHGroupBox0)

        self.AqueousSpeciesFrame.QVBox01.setMargin (0)
        self.AqueousSpeciesFrame.QVBox01.setSpacing (5)
        self.AqueousSpeciesFrame.QVBox02.setMargin (0)
        self.AqueousSpeciesFrame.QVBox02.setSpacing (5)

        self.AqueousSpeciesFrame.AqueousSpeciesNameLabel = QLabel ('Name', self.AqueousSpeciesFrame.QVBox01)
        self.AqueousSpeciesFrame.AqueousSpeciesNameLabel.resize (self.AqueousSpeciesFrame.AqueousSpeciesNameLabel.sizeHint ())

        self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit = QLineEdit (self.AqueousSpeciesFrame.QVBox01)
        self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setMinimumSize (200, 25)
        self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit, ToolTip_1)
        self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()

        self.AqueousSpeciesFrame.AqueousSpeciesFormulaLabel = QLabel ('Chemical Formula', self.AqueousSpeciesFrame.QVBox01)
        self.AqueousSpeciesFrame.AqueousSpeciesFormulaLabel.resize (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLabel.sizeHint ())

        self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit = QLineEdit (self.AqueousSpeciesFrame.QVBox01)
        self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit, ToolTip_3)

        self.AqueousSpeciesFrame.AqueousSpeciesLabel = QLabel ('Aqueous Species', self.AqueousSpeciesFrame.QVBox02)
        self.AqueousSpeciesFrame.AqueousSpeciesLabel.resize (self.AqueousSpeciesFrame.AqueousSpeciesLabel.sizeHint ())

        self.AqueousSpeciesFrame.AqueousSpeciesComboBox = QComboBox (self.AqueousSpeciesFrame.QVBox02)
        self.AqueousSpeciesFrame.AqueousSpeciesComboBox.setMinimumSize (200, 25)
        self.AqueousSpeciesFrame.AqueousSpeciesComboBox.setMaximumSize (200, 25)
        QToolTip.add (self.AqueousSpeciesFrame.AqueousSpeciesComboBox, ToolTip_2)
        self.connect (self.AqueousSpeciesFrame.AqueousSpeciesComboBox, SIGNAL ('activated (int)'), self.AqueousSpeciesFrame_AqueousSpeciesComboBox_activate)
        i = 0
        while i < len (AqueousSpecies_list):
            self.AqueousSpeciesFrame.AqueousSpeciesComboBox.insertItem (AqueousSpecies_list [i])
            i = i+1
        i = 0
        while i < len (Database_AqueousSpecies_Formula_list):
            self.AqueousSpeciesFrame.AqueousSpeciesComboBox.insertItem (Database_AqueousSpecies_Formula_list [i])
            i = i+1
        self.SpacerLabel = QLabel ('      ', self.AqueousSpeciesFrame.QVBox02)
        self.SpacerLabel.setMinimumSize (200, 44)
        self.SpacerLabel.setMaximumSize (200, 44)
# debug
#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.QHBox1 = QHBox (self.AqueousSpeciesFrame)
        self.AqueousSpeciesFrame.mainLayout.addWidget (self.AqueousSpeciesFrame.QHBox1)
        self.AqueousSpeciesFrame.QHBox1.setSpacing (5)

        self.AqueousSpeciesFrame.QHGroupBox1 = QHGroupBox (self.AqueousSpeciesFrame.QHBox1)
        self.AqueousSpeciesFrame.QHGroupBox1.setMargin (10)
        self.AqueousSpeciesFrame.QHGroupBox1.setMidLineWidth (0)

        self.AqueousSpeciesFrame.QHGroupBox2 = QHGroupBox (self.AqueousSpeciesFrame.QHBox1)
        self.AqueousSpeciesFrame.QHGroupBox2.setMargin (10)
        self.AqueousSpeciesFrame.QHGroupBox2.setMidLineWidth (0)

        self.AqueousSpeciesFrame.QVBox11 = QVBox (self.AqueousSpeciesFrame.QHGroupBox1)
        self.AqueousSpeciesFrame.QVBox12 = QVBox (self.AqueousSpeciesFrame.QHGroupBox1)

        self.AqueousSpeciesFrame.QVBox21 = QVBox (self.AqueousSpeciesFrame.QHGroupBox2)
        self.AqueousSpeciesFrame.QVBox22 = QVBox (self.AqueousSpeciesFrame.QHGroupBox2)

        self.AqueousSpeciesFrame.QVBox11.setMargin (0)
        self.AqueousSpeciesFrame.QVBox11.setSpacing (5)
        self.AqueousSpeciesFrame.QVBox12.setMargin (0)
        self.AqueousSpeciesFrame.QVBox12.setSpacing (5)

        self.AqueousSpeciesFrame.QVBox21.setMargin (0)
        self.AqueousSpeciesFrame.QVBox21.setSpacing (5)
        self.AqueousSpeciesFrame.QVBox22.setMargin (0)
        self.AqueousSpeciesFrame.QVBox22.setSpacing (5)

        self.AqueousSpeciesFrame.log_kLabel = QLabel ('log k', self.AqueousSpeciesFrame.QVBox11)
        self.AqueousSpeciesFrame.log_kLabel.resize (self.AqueousSpeciesFrame.log_kLabel.sizeHint ())

        self.AqueousSpeciesFrame.EnthalpyOfFormationLabel = QLabel ('Enthalpy of Formation ('+str (Enthalpy_Unit)+')', self.AqueousSpeciesFrame.QVBox21)
        self.AqueousSpeciesFrame.EnthalpyOfFormationLabel.resize (self.AqueousSpeciesFrame.EnthalpyOfFormationLabel.sizeHint ())

        self.AqueousSpeciesFrame.log_kLineEdit = QLineEdit (self.AqueousSpeciesFrame.QVBox12)
        self.AqueousSpeciesFrame.log_kLineEdit.setMinimumSize (100, 25)
        self.AqueousSpeciesFrame.log_kLineEdit.setMaximumSize (100, 25)
        self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
#        QToolTip.add (self.AqueousSpeciesFrame.log_kLineEdit, ToolTip_3)

        self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit = QLineEdit (self.AqueousSpeciesFrame.QVBox22)
        self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setMinimumSize (50, 25)
        self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setMaximumSize (50, 25)
        self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
#        QToolTip.add (self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit, ToolTip_4)

#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.QHGroupBox2 = QHGroupBox (self.AqueousSpeciesFrame)
        self.AqueousSpeciesFrame.QHGroupBox2.setMargin (10)
        self.AqueousSpeciesFrame.QHGroupBox2.setMidLineWidth (0)
        self.AqueousSpeciesFrame.mainLayout.addWidget (self.AqueousSpeciesFrame.QHGroupBox2)

        self.AqueousSpeciesFrame.Table1 = QTable(self.AqueousSpeciesFrame.QHGroupBox2,'Table1')
        QToolTip.add (self.AqueousSpeciesFrame.Table1, ToolTip_5)
        self.AqueousSpeciesFrame.Table1.setNumCols(self.AqueousSpeciesFrame.Table1.numCols() + 1)
        self.AqueousSpeciesFrame.Table1.horizontalHeader().setLabel(self.AqueousSpeciesFrame.Table1.numCols() - 1,  ('Species'))
        self.AqueousSpeciesFrame.Table1.setNumCols(self.AqueousSpeciesFrame.Table1.numCols() + 1)
        self.AqueousSpeciesFrame.Table1.setColumnStretchable ( 1, 1)
        self.AqueousSpeciesFrame.Table1.setColumnStretchable ( 0, 1)
        self.AqueousSpeciesFrame.Table1.horizontalHeader().setLabel(self.AqueousSpeciesFrame.Table1.numCols() - 1,  ('Stoichiometric Coefficient'))

#----------------------------------------------------------------------------------------------
#  pour enlever les legendes concernant les lignes du tableau
#----------------------------------------------------------------------------------------------
        i = 0
        while i < 12:

            self.AqueousSpeciesFrame.Table1.setNumRows(self.AqueousSpeciesFrame.Table1.numRows() + 1)
            self.AqueousSpeciesFrame.Table1.verticalHeader().setLabel(self.AqueousSpeciesFrame.Table1.numRows() - 1,  (''))
            i = i+1
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.Table1.setGeometry(QRect(40,240,400,104))
        self.AqueousSpeciesFrame.Table1.setFrameShape(QTable.WinPanel)
        self.AqueousSpeciesFrame.Table1.setLineWidth(2)
        self.AqueousSpeciesFrame.Table1.setMargin(6)
        self.AqueousSpeciesFrame.Table1.setMidLineWidth(0)
        self.AqueousSpeciesFrame.Table1.setNumRows(12)
        self.AqueousSpeciesFrame.Table1.setNumCols(2)
        self.AqueousSpeciesFrame.Table1.setShowGrid(1)
        self.AqueousSpeciesFrame.Table1.setRowMovingEnabled(1)
        self.AqueousSpeciesFrame.Table1.setColumnMovingEnabled(1)
        self.AqueousSpeciesFrame.Table1.setSelectionMode(QTable.Multi)
        self.AqueousSpeciesFrame.Table1.setMinimumHeight (150)
        self.AqueousSpeciesFrame.Table1.setMaximumHeight (150)

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.QHGroupBox3 = QHGroupBox (self.AqueousSpeciesFrame)
        self.AqueousSpeciesFrame.QHGroupBox3.setMargin (10)
        self.AqueousSpeciesFrame.QHGroupBox3.setMidLineWidth (0)
        self.AqueousSpeciesFrame.mainLayout.addWidget (self.AqueousSpeciesFrame.QHGroupBox3)

        self.AqueousSpeciesFrame.OKPB = QPushButton ('OK', self.AqueousSpeciesFrame.QHGroupBox3)
        self.AqueousSpeciesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.AqueousSpeciesFrame.QHGroupBox3)
        self.AqueousSpeciesFrame.DeletePB = QPushButton ('Delete', self.AqueousSpeciesFrame.QHGroupBox3)
        self.AqueousSpeciesFrame.CancelPB = QPushButton ('Cancel', self.AqueousSpeciesFrame.QHGroupBox3)
        self.AqueousSpeciesFrame.HelpPB = QPushButton ('&Help', self.AqueousSpeciesFrame.QHGroupBox3)

        self.connect (self.AqueousSpeciesFrame.OKPB, SIGNAL ('clicked ()'), self.AqueousSpeciesFrame_ok)
        self.connect (self.AqueousSpeciesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.AqueousSpeciesFrame_changecreate)
        self.connect (self.AqueousSpeciesFrame.DeletePB, SIGNAL ('clicked ()'), self.AqueousSpeciesFrame_delete)
        self.connect (self.AqueousSpeciesFrame.CancelPB, SIGNAL ('clicked ()'), self.AqueousSpeciesFrame_cancel)
        self.connect (self.AqueousSpeciesFrame.HelpPB, SIGNAL ('clicked ()'), self.AqueousSpeciesFrame_help)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.AqueousSpeciesFrame.show ()

#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Methods of the AqueousSpeciesFrame
#----------------------------------------------------------------------------------------------

# debug_aqueous_secondary_species


    def AqueousSpeciesFrame_ok (self):

        self.AqueousSpeciesFrame.close ()

    def AqueousSpeciesFrame_changecreate (self):

        global AqueousSpecies_list
        global AqueousSpecies_Formula_list
        global AqueousSpecies_Properties_list
        global AqueousSpecies_Species_list

        global Components_list
        global ComponentSpecies_Name_list
        global ComponentSpecies_Formula_list
        global Components_Properties_list

        global Database_AqueousSpecies_list
        if (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ())) in Database_AqueousSpecies_list:
            self.AqueousSpecies_DatabaseMB = QMessageBox()
            self.AqueousSpecies_DatabaseMB.setCaption ('Warning')
            self.AqueousSpecies_DatabaseMB.setText ('\"'+str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the species you want to define.')
            self.AqueousSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.AqueousSpecies_DatabaseMB.show ()
        elif (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text()).replace(' ','') == ''):
                self.AqueousSpecies_DatabaseMB = QMessageBox()
                self.AqueousSpecies_DatabaseMB.setCaption ('Warning')
                self.AqueousSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the species you want to define.")
                self.AqueousSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
                self.AqueousSpecies_DatabaseMB.show ()
        else:

            Temp_Species_list = []
            i = 0
            while i < 12:
                Aux_Species_list = []
                Aux_Species_list.append (str (self.AqueousSpeciesFrame.Table1.text (i, 0)))
                if str (self.AqueousSpeciesFrame.Table1.text (i, 1)) != '':
                    Aux_Species_list.append (str (self.AqueousSpeciesFrame.Table1.text (i, 1)))
                elif str (self.AqueousSpeciesFrame.Table1.text (i, 0)) != '' and str (self.AqueousSpeciesFrame.Table1.text (i, 1)) == '':
                    Aux_Species_list.append ('0.0')
                else:
                    Aux_Species_list.append ('')
                Temp_Species_list.append (Aux_Species_list)
                i = i+1



            if (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) in AqueousSpecies_list):
                index = AqueousSpecies_list.index (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
                if ("(" in str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ()) ) or \
		    (str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ()) =='H2O-0.01'):
                    AqueousSpecies_Formula_list [index] = str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ())
                    AqueousSpecies_Properties_list [index][0] = str (self.AqueousSpeciesFrame.log_kLineEdit.text ())
                    AqueousSpecies_Properties_list [index][1] = str (self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.text ())

                    i = 0
                    while i < 12:
                	AqueousSpecies_Species_list [index][i][0] = str (self.AqueousSpeciesFrame.Table1.text (i, 0))
                	if str (self.AqueousSpeciesFrame.Table1.text (i, 1)) != '':
                            AqueousSpecies_Species_list [index][i][1] = str (self.AqueousSpeciesFrame.Table1.text (i, 1))
                	elif str (self.AqueousSpeciesFrame.Table1.text (i, 0)) != '' and str (self.AqueousSpeciesFrame.Table1.text (i, 1)) == '':
                            AqueousSpecies_Species_list [index][i][1] = '0.0'
                	else:
                            AqueousSpecies_Species_list [index][i][1] = ''
                	i = i+1

                    self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.clear ()
                    self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.clear ()
                    j = 0
                    while j < 12:
                	self.AqueousSpeciesFrame.Table1.clearCell (j,0)
                	self.AqueousSpeciesFrame.Table1.clearCell (j,1)
                	j = j+1

                    self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                    self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                    self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()
		    
		else:
                    aqueousspeciesstring = str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ())
                    s_test = split_formula(aqueousspeciesstring)
                    final = stoech (s_test)
                    ionList = []                    
                    for l in Temp_Species_list:
                        if l[0]!=''and l[1]!='':
                            l[1]=float(l[1])
                            ionList.append(l)
                    reactant = reactantListe (ionList)
                    if stoechBilanzierung(reactant,final):
                	AqueousSpecies_Formula_list [index] = str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ())
                	AqueousSpecies_Properties_list [index][0] = str (self.AqueousSpeciesFrame.log_kLineEdit.text ())
                	AqueousSpecies_Properties_list [index][1] = str (self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.text ())

                	i = 0
                	while i < 12:
                	    AqueousSpecies_Species_list [index][i][0] = str (self.AqueousSpeciesFrame.Table1.text (i, 0))
                	    if str (self.AqueousSpeciesFrame.Table1.text (i, 1)) != '':
                        	AqueousSpecies_Species_list [index][i][1] = str (self.AqueousSpeciesFrame.Table1.text (i, 1))
                	    elif str (self.AqueousSpeciesFrame.Table1.text (i, 0)) != '' and str (self.AqueousSpeciesFrame.Table1.text (i, 1)) == '':
                        	AqueousSpecies_Species_list [index][i][1] = '0.0'
                	    else:
                        	AqueousSpecies_Species_list [index][i][1] = ''
                	    i = i+1

                	self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.clear ()
                	self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.clear ()
                	j = 0
                	while j < 12:
                	    self.AqueousSpeciesFrame.Table1.clearCell (j,0)
                	    self.AqueousSpeciesFrame.Table1.clearCell (j,1)
                	    j = j+1

                	self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                	self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                	self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()
                    else:
                        self.AqueousSpecies_StoichiometricMB = QMessageBox()
                        self.AqueousSpecies_StoichiometricMB.setCaption ('Error')
                        self.AqueousSpecies_StoichiometricMB.setText ('The stoichiometry of the equation is not element balanced.\nCheck formula, aqueous species and stoichiometric coefficients.')
                        self.AqueousSpecies_StoichiometricMB.setIcon (QMessageBox.Critical)
                        self.AqueousSpecies_StoichiometricMB.show ()
		    
# debug_aqueous
		    
		  
		  
		  
		  
		  
		  
		    
		    
		    
    
            elif (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) not in AqueousSpecies_list) :
                #  Sinon on l'ajoute en fin de liste (par effet de bord)

                if ("(" in str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ())) or \
		    (str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ()) =='H2O-0.01'):
                    AqueousSpecies_list.append (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
                    AqueousSpecies_Formula_list.append (str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ()))

                    Temp_list = []
                    Temp_list.append (str (self.AqueousSpeciesFrame.log_kLineEdit.text ()))
                    Temp_list.append (str (self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.text ()))
                    AqueousSpecies_Properties_list.append (Temp_list)
                    AqueousSpecies_Species_list.append (Temp_Species_list)
                    length = len (AqueousSpecies_list) - 1
                    self.AqueousSpeciesFrame.AqueousSpeciesComboBox.insertItem (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text (), length)
                    self.AqueousSpeciesFrame.AqueousSpeciesComboBox.setCurrentItem (length)
                    self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.clear ()
                    self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.clear ()
                    j = 0
                    while j < 12:
                	self.AqueousSpeciesFrame.Table1.clearCell (j,0)
                	self.AqueousSpeciesFrame.Table1.clearCell (j,1)
                	j = j+1

                    self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                    self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                    self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()
                else:
                    aqueousspeciesstring = str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ())
                    s_test = split_formula(aqueousspeciesstring)
                    final = stoech (s_test)
                    ionList = []                    
                    for l in Temp_Species_list:
                        if l[0]!=''and l[1]!='':
                            l[1]=float(l[1])
                            ionList.append(l)
                    reactant = reactantListe (ionList)
                    if stoechBilanzierung(reactant,final):
                	AqueousSpecies_list.append (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
                	AqueousSpecies_Formula_list.append (str (self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.text ()))

                	Temp_list = []
                	Temp_list.append (str (self.AqueousSpeciesFrame.log_kLineEdit.text ()))
                	Temp_list.append (str (self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.text ()))
                	AqueousSpecies_Properties_list.append (Temp_list)
                	AqueousSpecies_Species_list.append (Temp_Species_list)
                	length = len (AqueousSpecies_list) - 1
                	self.AqueousSpeciesFrame.AqueousSpeciesComboBox.insertItem (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text (), length)
                	self.AqueousSpeciesFrame.AqueousSpeciesComboBox.setCurrentItem (length)
                	self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.clear ()
                	self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.clear ()
                	j = 0
                	while j < 12:
                	    self.AqueousSpeciesFrame.Table1.clearCell (j,0)
                	    self.AqueousSpeciesFrame.Table1.clearCell (j,1)
                	    j = j+1

                	self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                	self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                	self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()
                    else:
                        self.AqueousSpecies_StoichiometricMB = QMessageBox()
                        self.AqueousSpecies_StoichiometricMB.setCaption ('Error')
                        self.AqueousSpecies_StoichiometricMB.setText ('The stoichiometry of the equation is not element balanced.\nCheck formula, aqueous species and stoichiometric coefficients.')
                        self.AqueousSpecies_StoichiometricMB.setIcon (QMessageBox.Critical)
                        self.AqueousSpecies_StoichiometricMB.show ()





    def AqueousSpeciesFrame_delete (self):

        global AqueousSpecies_list
        global AqueousSpecies_Formula_list
        global AqueousSpecies_Properties_list
        global AqueousSpecies_Species_list

        global Database_AqueousSpecies_list

        if ((self.AqueousSpeciesFrame.AqueousSpeciesComboBox.count ()) != 0) and str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) != '':
            if (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ())) in Database_AqueousSpecies_list:
                self.AqueousSpecies_DatabaseMB2 = QMessageBox()
                self.AqueousSpecies_DatabaseMB2.setCaption ('Warning')
                self.AqueousSpecies_DatabaseMB2.setText ('\"'+str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.AqueousSpecies_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.AqueousSpecies_DatabaseMB2.show ()
            else:
                index = AqueousSpecies_list.index (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
                self.AqueousSpeciesFrame.AqueousSpeciesComboBox.removeItem (self.AqueousSpeciesFrame.AqueousSpeciesComboBox.currentItem ())
                del AqueousSpecies_list [index]
                del AqueousSpecies_Formula_list [index]
                del AqueousSpecies_Properties_list [index]
                del AqueousSpecies_Species_list [index]
                self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.clear ()
                self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.clear ()
                j = 0
                while j < 12:
                    self.AqueousSpeciesFrame.Table1.clearCell (j,0)
                    self.AqueousSpeciesFrame.Table1.clearCell (j,1)
                    j = j+1
                self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setFocus ()
            
                if ((self.AqueousSpeciesFrame.AqueousSpeciesComboBox.count ()) != 0):
                    self.AqueousSpeciesFrame.AqueousSpeciesComboBox.setCurrentItem (0)
                else:
                    pass
        else:
            if ((self.AqueousSpeciesFrame.AqueousSpeciesComboBox.count ()) == 0):
                self.AqueousSpeciesMB = QMessageBox()
                self.AqueousSpeciesMB.setCaption ('Error')
                self.AqueousSpeciesMB.setText ('There is no Species.')
                self.AqueousSpeciesMB.setIcon (QMessageBox.Critical)
                self.AqueousSpeciesMB.show ()
            elif str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) == '':
                self.AqueousSpeciesMB2 = QMessageBox()
                self.AqueousSpeciesMB2.setCaption ('Error')
                self.AqueousSpeciesMB2.setText ('You have to select a Secondary Species.')
                self.AqueousSpeciesMB2.setIcon (QMessageBox.Critical)
                self.AqueousSpeciesMB2.show ()

    def AqueousSpeciesFrame_cancel (self):

        self.AqueousSpeciesFrame.close ()

    def AqueousSpeciesFrame_help (self):

        self.Help ()

    def AqueousSpeciesFrame_AqueousSpeciesComboBox_activate (self):

        global Database_AqueousSpecies_list
        global Database_AqueousSpecies_Formula_list
        global Database_AqueousSpecies_Log_k_list
        global Database_AqueousSpecies_Species_list

        i = 0
        while i < 12:
            self.AqueousSpeciesFrame.Table1.clearCell (i, 0)
            self.AqueousSpeciesFrame.Table1.clearCell (i, 1)
            i = i+1

        if str (self.AqueousSpeciesFrame.AqueousSpeciesComboBox.currentText ()) in Database_AqueousSpecies_list:
            self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setText (self.AqueousSpeciesFrame.AqueousSpeciesComboBox.currentText ())            
            index = Database_AqueousSpecies_list.index (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
            self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.setText (str (Database_AqueousSpecies_Formula_list [index]))
            self.AqueousSpeciesFrame.log_kLineEdit.setText (str (Database_AqueousSpecies_Log_k_list [index]))
            #  Attention:  On ne lit pas encore l'enthalpie de formation
            self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText ('0.0')
            i = 0
            while i < len (Database_AqueousSpecies_Species_list [index]):
                self.AqueousSpeciesFrame.Table1.setText (i, 0, str (Database_AqueousSpecies_Species_list [index][i][0]))
                if float (Database_AqueousSpecies_Species_list [index][i][1]) == int (float (Database_AqueousSpecies_Species_list [index][i][1])):
                    self.AqueousSpeciesFrame.Table1.setText (i, 1, str (int (float (Database_AqueousSpecies_Species_list [index][i][1]))))
                else:
                    self.AqueousSpeciesFrame.Table1.setText (i, 1, str (Database_AqueousSpecies_Species_list [index][i][1]))             
                i = i+1
        else:
            self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.setText (self.AqueousSpeciesFrame.AqueousSpeciesComboBox.currentText ())
            if str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) in AqueousSpecies_list:
                index = AqueousSpecies_list.index (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
                self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.setText (str (AqueousSpecies_Formula_list [index]))
                self.AqueousSpeciesFrame.log_kLineEdit.setText (str (AqueousSpecies_Properties_list [index][0]))
                self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText (str (AqueousSpecies_Properties_list [index][1]))
                i = 0
                while i < 12:
                    self.AqueousSpeciesFrame.Table1.setText (i, 0, str (AqueousSpecies_Species_list [index][i][0]))
                    self.AqueousSpeciesFrame.Table1.setText (i, 1, str (AqueousSpecies_Species_list [index][i][1]))
                    i = i+1

##         elif  str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()) in Components_list:

##             index = Components_list.index (str (self.AqueousSpeciesFrame.AqueousSpeciesNameLineEdit.text ()))
            
##             self.AqueousSpeciesFrame.AqueousSpeciesFormulaLineEdit.setText (str (ComponentSpecies_Name_list [index]))
##             self.AqueousSpeciesFrame.log_kLineEdit.setText ('0.0')
##             self.AqueousSpeciesFrame.EnthalpyOfFormationLineEdit.setText ('0.0')
##             self.AqueousSpeciesFrame.Table1.setText (0, 0, str (ComponentSpecies_Name_list [index]))
##             self.AqueousSpeciesFrame.Table1.setText (0, 1, '1')   




###########################################################################################
##                                                                                       ##
##                          AQUEOUS SPECIES FRAME (END)                                  ##
##                                                                                       ##
###########################################################################################

###########################################################################################
##                                                                                       ##
##                           MINERAL PHASE FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################



    def mineral_phase (self):

        ToolTip_1 = 'Name of the mineral, only alphanumeric characters are allowed.\n Example: Calcite'
        ToolTip_2 = 'Already user defined minerals. Normally, minerals are accessible\n'+\
	            'through the database, only addenda or modifications are included\n'+\
		    'in the input file.'
	ToolTip_3 = 'Equilibrium Constant at 25 Celsius.'
	ToolTip_4 = 'Enthalpy of Formation at 25 Celsius\n'+\
	            ' the enthalpy is not considered in this version.'
	ToolTip_5 = 'Dissolution reaction for mineral phase to aqueous species.\n'+\
        'The phase in the chemical reaction has necessary 1 as stoichiometric coefficient.\n'+\
	'aqueous species ( including e-) are given with stoichiometric coefficients and valence.\nExample of the Calcite, CaCO3:\nCa++\t1\nCO3-2\t1\n'
	ToolTip_6 = 'Number of aqueous species included in the dissolution reaction.'
	ToolTip_7 = 'Chemical Formula for the defined phase.\nHere, digits can\'t preceed the name of the atom they are associated to.\n'+\
		    ' Brackets and : are treated.\n Example: CaCO3'

        self.MineralPhaseFrame = QFrame ()
        self.MineralPhaseFrame.setCaption ('Mineral Phase')
        setPosition (self.MineralPhaseFrame)

        self.MineralPhaseFrame.mainLayout = QVBoxLayout (self.MineralPhaseFrame, 10, -1, 'MineralPhase_mainLayout')
        self.MineralPhaseFrame.mainLayout.setMargin (Marge)
        self.MineralPhaseFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MineralPhase_comment = Comments ['Mineral_Phase']

        self.MineralPhaseFrame.QHGroupBoxA = QHGroupBox (self.MineralPhaseFrame)
        QToolTip.add (self.MineralPhaseFrame.QHGroupBoxA,MineralPhase_comment)

        self.MineralPhaseFrame.QHGroupBoxA.setMargin (5)
        self.MineralPhaseFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MineralPhaseFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.QHGroupBox0 = QHGroupBox (self.MineralPhaseFrame)
        self.MineralPhaseFrame.QHGroupBox0.setMargin (10)
        self.MineralPhaseFrame.QHGroupBox0.setMidLineWidth (0)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHGroupBox0)

        self.MineralPhaseFrame.QVBox01 = QVBox (self.MineralPhaseFrame.QHGroupBox0)
        self.MineralPhaseFrame.QVBox02 = QVBox (self.MineralPhaseFrame.QHGroupBox0)

        self.MineralPhaseFrame.QVBox01.setMargin (0)
        self.MineralPhaseFrame.QVBox01.setSpacing (5)
        self.MineralPhaseFrame.QVBox02.setMargin (0)
        self.MineralPhaseFrame.QVBox02.setSpacing (5)

        self.MineralPhaseFrame.MineralNameLabel = QLabel ('Name', self.MineralPhaseFrame.QVBox01)
        self.MineralPhaseFrame.MineralNameLabel.resize (self.MineralPhaseFrame.MineralNameLabel.sizeHint ())

        self.MineralPhaseFrame.MineralNameLineEdit = QLineEdit (self.MineralPhaseFrame.QVBox01)
        self.MineralPhaseFrame.MineralNameLineEdit.setMinimumSize (200, 25)
        self.MineralPhaseFrame.MineralNameLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.MineralPhaseFrame.MineralNameLineEdit, ToolTip_1)
        self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()

        self.MineralPhaseFrame.MineralFormulaLabel = QLabel ('Chemical Formula', self.MineralPhaseFrame.QVBox01)
        self.MineralPhaseFrame.MineralFormulaLabel.resize (self.MineralPhaseFrame.MineralFormulaLabel.sizeHint ())

        self.MineralPhaseFrame.MineralFormulaLineEdit = QLineEdit (self.MineralPhaseFrame.QVBox01)
        self.MineralPhaseFrame.MineralFormulaLineEdit.setMinimumSize (200, 25)
        self.MineralPhaseFrame.MineralFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.MineralPhaseFrame.MineralFormulaLineEdit, ToolTip_7)

        self.MineralPhaseFrame.MineralPhasesLabel = QLabel ('Mineral Phases', self.MineralPhaseFrame.QVBox02)
        self.MineralPhaseFrame.MineralPhasesLabel.resize (self.MineralPhaseFrame.MineralPhasesLabel.sizeHint ())

        self.MineralPhaseFrame.MineralPhasesComboBox = QComboBox (self.MineralPhaseFrame.QVBox02)
        self.MineralPhaseFrame.MineralPhasesComboBox.setMinimumSize (200, 25)
        self.MineralPhaseFrame.MineralPhasesComboBox.setMaximumSize (200, 25)
        QToolTip.add (self.MineralPhaseFrame.MineralPhasesComboBox, ToolTip_2)
        self.connect (self.MineralPhaseFrame.MineralPhasesComboBox, SIGNAL ('activated (int)'), self.MineralPhaseFrame_MineralPhasesComboBox_activate)
        i = 0
        while i < len (MineralPhases_list):
            self.MineralPhaseFrame.MineralPhasesComboBox.insertItem (MineralPhases_list [i])
            i = i+1
        i = 0
        while i < len (Database_Phases_Names_list):
            if Database_Phases_Names_list [i].find ('(g)') == -1:
                self.MineralPhaseFrame.MineralPhasesComboBox.insertItem (Database_Phases_Names_list [i])
            else:
                pass
            i = i+1
        self.SpacerLabel = QLabel ('      ', self.MineralPhaseFrame.QVBox02)
        self.SpacerLabel.setMinimumSize (200, 44)
        self.SpacerLabel.setMaximumSize (200, 44)

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.QHBox1 = QHBox (self.MineralPhaseFrame)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHBox1)
        self.MineralPhaseFrame.QHBox1.setSpacing (5)

        self.MineralPhaseFrame.QHGroupBox1 = QHGroupBox (self.MineralPhaseFrame.QHBox1)
        self.MineralPhaseFrame.QHGroupBox1.setMargin (10)
        self.MineralPhaseFrame.QHGroupBox1.setMidLineWidth (0)

        self.MineralPhaseFrame.QHGroupBox2 = QHGroupBox (self.MineralPhaseFrame.QHBox1)
        self.MineralPhaseFrame.QHGroupBox2.setMargin (10)
        self.MineralPhaseFrame.QHGroupBox2.setMidLineWidth (0)

        self.MineralPhaseFrame.QVBox11 = QVBox (self.MineralPhaseFrame.QHGroupBox1)
        self.MineralPhaseFrame.QVBox12 = QVBox (self.MineralPhaseFrame.QHGroupBox1)

        self.MineralPhaseFrame.QVBox21 = QVBox (self.MineralPhaseFrame.QHGroupBox2)
        self.MineralPhaseFrame.QVBox22 = QVBox (self.MineralPhaseFrame.QHGroupBox2)

        self.MineralPhaseFrame.QVBox11.setMargin (0)
        self.MineralPhaseFrame.QVBox11.setSpacing (5)
        self.MineralPhaseFrame.QVBox12.setMargin (0)
        self.MineralPhaseFrame.QVBox12.setSpacing (5)

        self.MineralPhaseFrame.QVBox21.setMargin (0)
        self.MineralPhaseFrame.QVBox21.setSpacing (5)
        self.MineralPhaseFrame.QVBox22.setMargin (0)
        self.MineralPhaseFrame.QVBox22.setSpacing (5)

        self.MineralPhaseFrame.log_kLabel = QLabel ('log k                   ', self.MineralPhaseFrame.QVBox11)
        self.MineralPhaseFrame.log_kLabel.resize (self.MineralPhaseFrame.log_kLabel.sizeHint ())

        self.MineralPhaseFrame.EnthalpyOfFormationLabel = QLabel ('Enthalpy of Formation ('+str (Enthalpy_Unit)+')', self.MineralPhaseFrame.QVBox21)
        self.MineralPhaseFrame.EnthalpyOfFormationLabel.resize (self.MineralPhaseFrame.EnthalpyOfFormationLabel.sizeHint ())

        self.MineralPhaseFrame.log_kLineEdit = QLineEdit (self.MineralPhaseFrame.QVBox12)
        self.MineralPhaseFrame.log_kLineEdit.setMinimumSize (100, 25)
        self.MineralPhaseFrame.log_kLineEdit.setMaximumSize (100, 25)
        self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
        QToolTip.add (self.MineralPhaseFrame.log_kLineEdit, ToolTip_3)

        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit = QLineEdit (self.MineralPhaseFrame.QVBox22)
        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setMinimumSize (50, 25)
        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setMaximumSize (50, 25)
        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
        QToolTip.add (self.MineralPhaseFrame.EnthalpyOfFormationLineEdit, ToolTip_4)

#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------



#========================================
#  Density Box
#

        self.MineralPhaseFrame.QHGroupBox8 = QHGroupBox (self.MineralPhaseFrame)
        self.MineralPhaseFrame.QHGroupBox8 .setMargin (10)
        self.MineralPhaseFrame.QHGroupBox8.setMidLineWidth (0)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHGroupBox8)

        self.MineralPhaseFrame.QVBox81 = QVBox (self.MineralPhaseFrame.QHGroupBox8)
        self.MineralPhaseFrame.QVBox82 = QVBox (self.MineralPhaseFrame.QHGroupBox8)
        self.MineralPhaseFrame.QVBox83 = QVBox (self.MineralPhaseFrame.QHGroupBox8)

        self.MineralPhaseFrame.QVBox81.setMargin (0)
        self.MineralPhaseFrame.QVBox81.setSpacing (5)
        self.MineralPhaseFrame.QVBox82.setMargin (0)
        self.MineralPhaseFrame.QVBox82.setSpacing (5)
        self.MineralPhaseFrame.QVBox83.setMargin (0)
        self.MineralPhaseFrame.QVBox83.setSpacing (5)
      
        self.MineralPhaseFrame.MineralDensityRadiobutton = QRadioButton (self.MineralPhaseFrame.QVBox81)
        self.connect (self.MineralPhaseFrame.MineralDensityRadiobutton, SIGNAL ('clicked ()'), self.mineralDensity_activated)

        self.MineralPhaseFrame.MineralDensityLabel = QLabel ('Density ('+str (Density_Unit)+')  ', self.MineralPhaseFrame.QVBox82)
        self.MineralPhaseFrame.MineralDensityLabel.resize (self.MineralPhaseFrame.MineralDensityLabel.sizeHint ())

        self.MineralPhaseFrame.MineralDensityLineEdit = QLineEdit (self.MineralPhaseFrame.QVBox83)
        self.MineralPhaseFrame.MineralDensityLineEdit.setMinimumSize (100, 25)
        self.MineralPhaseFrame.MineralDensityLineEdit.setMaximumSize (100, 25)
        self.MineralPhaseFrame.MineralDensityLineEdit.setEnabled (0)        

#=========================================



#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.QHGroupBox2 = QHGroupBox (self.MineralPhaseFrame)
        self.MineralPhaseFrame.QHGroupBox2.setMargin (10)
        self.MineralPhaseFrame.QHGroupBox2.setMidLineWidth (0)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHGroupBox2)

        self.MineralPhaseFrame.Table1 = QTable(self.MineralPhaseFrame.QHGroupBox2,'Table1')
        QToolTip.add (self.MineralPhaseFrame.Table1, ToolTip_5)
        self.MineralPhaseFrame.Table1.setNumCols(self.MineralPhaseFrame.Table1.numCols() + 1)
        self.MineralPhaseFrame.Table1.horizontalHeader().setLabel(self.MineralPhaseFrame.Table1.numCols() - 1,  ('Species'))
        self.MineralPhaseFrame.Table1.setNumCols(self.MineralPhaseFrame.Table1.numCols() + 1)
        self.MineralPhaseFrame.Table1.setColumnStretchable ( 1, 1)
        self.MineralPhaseFrame.Table1.setColumnStretchable ( 0, 1)
        self.MineralPhaseFrame.Table1.horizontalHeader().setLabel(self.MineralPhaseFrame.Table1.numCols() - 1,  ('Stoichiometric Coefficient'))

#----------------------------------------------------------------------------------------------
#  pour enlever les legendes concernant les lignes du tableau
#----------------------------------------------------------------------------------------------
        i = 0
        while i < 12:

            self.MineralPhaseFrame.Table1.setNumRows(self.MineralPhaseFrame.Table1.numRows() + 1)
            self.MineralPhaseFrame.Table1.verticalHeader().setLabel(self.MineralPhaseFrame.Table1.numRows() - 1,  (''))
            i = i+1
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.Table1.setGeometry(QRect(40,240,400,104))
        self.MineralPhaseFrame.Table1.setFrameShape(QTable.WinPanel)
        self.MineralPhaseFrame.Table1.setLineWidth(2)
        self.MineralPhaseFrame.Table1.setMargin(6)
        self.MineralPhaseFrame.Table1.setMidLineWidth(0)
        self.MineralPhaseFrame.Table1.setNumRows(12)
        self.MineralPhaseFrame.Table1.setNumCols(2)
        self.MineralPhaseFrame.Table1.setShowGrid(1)
        self.MineralPhaseFrame.Table1.setRowMovingEnabled(1)
        self.MineralPhaseFrame.Table1.setColumnMovingEnabled(1)
        self.MineralPhaseFrame.Table1.setSelectionMode(QTable.Multi)
        self.MineralPhaseFrame.Table1.setMinimumHeight (150)
        self.MineralPhaseFrame.Table1.setMaximumHeight (150)

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.QHGroupBox3 = QHGroupBox (self.MineralPhaseFrame)
        self.MineralPhaseFrame.QHGroupBox3.setMargin (10)
        self.MineralPhaseFrame.QHGroupBox3.setMidLineWidth (0)
        self.MineralPhaseFrame.mainLayout.addWidget (self.MineralPhaseFrame.QHGroupBox3)

        self.MineralPhaseFrame.OKPB = QPushButton ('OK', self.MineralPhaseFrame.QHGroupBox3)
        self.MineralPhaseFrame.ChangeCreatePB = QPushButton ('Change / Create', self.MineralPhaseFrame.QHGroupBox3)
        self.MineralPhaseFrame.DeletePB = QPushButton ('Delete', self.MineralPhaseFrame.QHGroupBox3)
        self.MineralPhaseFrame.CancelPB = QPushButton ('Cancel', self.MineralPhaseFrame.QHGroupBox3)
        self.MineralPhaseFrame.HelpPB = QPushButton ('&Help', self.MineralPhaseFrame.QHGroupBox3)

        self.connect (self.MineralPhaseFrame.OKPB, SIGNAL ('clicked ()'), self.MineralPhaseFrame_ok)
        self.connect (self.MineralPhaseFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.MineralPhaseFrame_changecreate)
        self.connect (self.MineralPhaseFrame.DeletePB, SIGNAL ('clicked ()'), self.MineralPhaseFrame_delete)
        self.connect (self.MineralPhaseFrame.CancelPB, SIGNAL ('clicked ()'), self.MineralPhaseFrame_cancel)
        self.connect (self.MineralPhaseFrame.HelpPB, SIGNAL ('clicked ()'), self.MineralPhaseFrame_help)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.MineralPhaseFrame.show ()

#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Methods of the MineralPhaseFrame
#----------------------------------------------------------------------------------------------

    def MineralPhaseFrame_ok (self):

        self.MineralPhaseFrame.close ()

    def MineralPhaseFrame_changecreate (self):

        global MineralPhases_list
        global MineralPhases_Formula_list
        global MineralPhases_Properties_list
        global MineralPhases_Species_list

        global Database_Phases_Names_list

        if (str (self.MineralPhaseFrame.MineralNameLineEdit.text ())) in Database_Phases_Names_list:
            self.MineralPhase_DatabaseMB = QMessageBox()
            self.MineralPhase_DatabaseMB.setCaption ('Warning')
            self.MineralPhase_DatabaseMB.setText ('\"'+str (self.MineralPhaseFrame.MineralNameLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the phase you want to define.')
            self.MineralPhase_DatabaseMB.setIcon (QMessageBox.Warning)
            self.MineralPhase_DatabaseMB.show ()
        elif (str (self.MineralPhaseFrame.MineralNameLineEdit.text()).replace(' ','') == ''):
                self.MineralPhase_DatabaseMB = QMessageBox()
                self.MineralPhase_DatabaseMB.setCaption ('Warning')
                self.MineralPhase_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the Mineral you want to define.")
                self.MineralPhase_DatabaseMB.setIcon (QMessageBox.Warning)
                self.MineralPhase_DatabaseMB.show ()
        else:
        
        # refresh properties
        
            if (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) in MineralPhases_list):

                index = MineralPhases_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))





                Temp_Species_list = []
                i = 0
    	#       voir cette boucle (ainsi que les autres du meme type: 12  n est pas suffisant pour certains...)
                while i < 12:
                    Aux_Species_list = []
                    Aux_Species_list.append (str (self.MineralPhaseFrame.Table1.text (i, 0)))
                    Aux_Species_list.append (str (self.MineralPhaseFrame.Table1.text (i, 1)))
                    Temp_Species_list.append (Aux_Species_list)
                    i = i+1

# debug_test    

##-------------------------------------------------------------------------------------------
## Pour le moment l'analyse de la reaction de formation ne traite pas les parentheses
## une fois ce traitement effectue cette partie disparaitra
##-------------------------------------------------------------------------------------------
                if "(" in str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ()) :
            	    MineralPhases_Formula_list [index] = str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ())

                    MineralPhases_Properties_list [index][0] = str (self.MineralPhaseFrame.log_kLineEdit.text ())
                    MineralPhases_Properties_list [index][1] = str (self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.text ())
                    density_ok = 0
                    if self.MineralPhaseFrame.MineralDensityRadiobutton.isOn ():
                        MineralPhases_Properties_list [index][2] = 'Density'
                        if str (self.MineralPhaseFrame.MineralDensityLineEdit.text ()) == '':
                            self.MineralPhaseDensityMB = QMessageBox()
                            self.MineralPhaseDensityMB.setCaption ('Error')
                            self.MineralPhaseDensityMB.setText ('You have to define a density.')
                            self.MineralPhaseDensityMB.setIcon (QMessageBox.Critical)
                            self.MineralPhaseDensityMB.show ()
                            self.MineralPhaseFrame.MineralDensityLineEdit.setFocus ()
                            density_ok = 0
                        else:
                            MineralPhases_Properties_list [index][3] = str (self.MineralPhaseFrame.MineralDensityLineEdit.text ())
                            density_ok = 1
                    else:
                        MineralPhases_Properties_list [index][2] = ''
                        MineralPhases_Properties_list [index][3] = ''
                        density_ok = 1


                    # debug_density


                    if density_ok:
                        i = 0
                        while i < 12:
                            MineralPhases_Species_list [index][i][0] = str (self.MineralPhaseFrame.Table1.text (i, 0))
                            MineralPhases_Species_list [index][i][1] = str (self.MineralPhaseFrame.Table1.text (i, 1))
                            i = i+1

                        self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                        self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                        j = 0
                        while j < 12:
                            self.MineralPhaseFrame.Table1.clearCell (j,0)
                            self.MineralPhaseFrame.Table1.clearCell (j,1)
                            j = j+1

                        self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                        self.mineralDensity_released ()
                        self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                        self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
                    else:
                        pass
##-------------------------------------------------------------------------------------------
                    
                else:
                    mineralstring = str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ())
                    yes = 1
		    if ":" in mineralstring:
		        mineralstring = mineralstring.split(':')
                        s_test = split_formula(mineralstring[0])
			coef = Mineral_wa(mineralstring[1])
			if check_H2O (mineralstring[1]):
			    yes = 1
		        else:
			    yes = 0
		    else:
                        s_test = split_formula(mineralstring)
			coef = 0.
			yes = 1
			
		    if yes:	
                	final = stoech (s_test)
                	ionList = []                    
                	for l in Temp_Species_list:
                            if l[0]!=''and l[1]!='':
                        	l[1]=float(l[1])
                        	ionList.append(l)
			ionList.append(["H2O", -1.*coef])   
                	reactant = reactantListe (ionList)
                	if stoechBilanzierung(final,reactant):
            	            MineralPhases_Formula_list [index] = str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ())

                            MineralPhases_Properties_list [index][0] = str (self.MineralPhaseFrame.log_kLineEdit.text ())
                            MineralPhases_Properties_list [index][1] = str (self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.text ())
                            density_ok = 0
                            if self.MineralPhaseFrame.MineralDensityRadiobutton.isOn ():
                        	MineralPhases_Properties_list [index][2] = 'Density'
                        	if str (self.MineralPhaseFrame.MineralDensityLineEdit.text ()) == '':
                                    self.MineralPhaseDensityMB = QMessageBox()
                                    self.MineralPhaseDensityMB.setCaption ('Error')
                                    self.MineralPhaseDensityMB.setText ('You have to define a density.')
                                    self.MineralPhaseDensityMB.setIcon (QMessageBox.Critical)
                                    self.MineralPhaseDensityMB.show ()
                                    self.MineralPhaseFrame.MineralDensityLineEdit.setFocus ()
                                    density_ok = 0
                        	else:
                                    MineralPhases_Properties_list [index][3] = str (self.MineralPhaseFrame.MineralDensityLineEdit.text ())
                                    density_ok = 1
                            else:
                        	MineralPhases_Properties_list [index][2] = ''
                        	MineralPhases_Properties_list [index][3] = ''
                        	density_ok = 1


                            # debug_density


                            if density_ok:
                        	i = 0
                        	while i < 12:
                                    MineralPhases_Species_list [index][i][0] = str (self.MineralPhaseFrame.Table1.text (i, 0))
                                    MineralPhases_Species_list [index][i][1] = str (self.MineralPhaseFrame.Table1.text (i, 1))
                                    i = i+1

                        	self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                        	self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                        	j = 0
                        	while j < 12:
                                    self.MineralPhaseFrame.Table1.clearCell (j,0)
                                    self.MineralPhaseFrame.Table1.clearCell (j,1)
                                    j = j+1

                        	self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                        	self.mineralDensity_released ()
                        	self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                        	self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                        	self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
                            else:
                        	pass

                	else:
                            self.MineralPhase_StoichiometricMB = QMessageBox()
                            self.MineralPhase_StoichiometricMB.setCaption ('Error')
                            self.MineralPhase_StoichiometricMB.setText ('The stoichiometry of the equation is not element balanced.\nCheck formula, aqueous species and stoichiometric coefficients.')
                            self.MineralPhase_StoichiometricMB.setIcon (QMessageBox.Critical)
                            self.MineralPhase_StoichiometricMB.show ()
                    else:
		        pass

            else:

                # new element

                density_ok = 0
                Temp_list = []
                Temp_list.append (str (self.MineralPhaseFrame.log_kLineEdit.text ()))
                Temp_list.append (str (self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.text ()))
                if self.MineralPhaseFrame.MineralDensityRadiobutton.isOn ():
                    Temp_list.append ('Density')
                    if str (self.MineralPhaseFrame.MineralDensityLineEdit.text ()) == '':
                        self.MineralPhaseDensityMB = QMessageBox()
                        self.MineralPhaseDensityMB.setCaption ('Error')
                        self.MineralPhaseDensityMB.setText ('You have to define a density.')
                        self.MineralPhaseDensityMB.setIcon (QMessageBox.Critical)
                        self.MineralPhaseDensityMB.show ()
                        self.MineralPhaseFrame.MineralDensityLineEdit.setFocus ()
                        density_ok = 0
                    else:
                        Temp_list.append (str (self.MineralPhaseFrame.MineralDensityLineEdit.text ()))
                        density_ok = 1
                else:
                    Temp_list.append ('')
                    Temp_list.append ('')
                    density_ok = 1
                
                if density_ok:
                    Temp_Species_list = []
                    i = 0
    	    #       voir cette boucle (ainsi que les autres du meme type: 12  n est pas suffisant pour certains...)
                    while i < 12:
                        Aux_Species_list = []
                        Aux_Species_list.append (str (self.MineralPhaseFrame.Table1.text (i, 0)))
                        Aux_Species_list.append (str (self.MineralPhaseFrame.Table1.text (i, 1)))
# mettre un test pour qu on ne puisse pas avoir une valeur '' avec une valeur != ''
                        Temp_Species_list.append (Aux_Species_list)
                        i = i+1

# debug_test
##-------------------------------------------------------------------------------------------
## Pour le moment l'analyse de la reaction de formation ne traite pas les parentheses
## une fois ce traitement effectue cette partie disparaitra
##-------------------------------------------------------------------------------------------
           
                    if "(" in str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ()):
                        MineralPhases_list.append (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                        MineralPhases_Formula_list.append (str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ()))
                        MineralPhases_Properties_list.append (Temp_list)
                        MineralPhases_Species_list.append (Temp_Species_list)
                        length = len (MineralPhases_list) - 1
                        self.MineralPhaseFrame.MineralPhasesComboBox.insertItem (self.MineralPhaseFrame.MineralNameLineEdit.text (), length)
                        self.MineralPhaseFrame.MineralPhasesComboBox.setCurrentItem (length)
                        self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                        self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                        j = 0
                        while j < 12:
                            self.MineralPhaseFrame.Table1.clearCell (j,0)
                            self.MineralPhaseFrame.Table1.clearCell (j,1)
                            j = j+1

                        self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                        self.mineralDensity_released ()
                        self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                        self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                        self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
##-------------------------------------------------------------------------------------------

                    else:
                	mineralstring = str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ())
			yes = 1
			if ":" in mineralstring:
		            mineralstring = mineralstring.split(':')			    
                            s_test = split_formula(mineralstring[0])
			    coef = Mineral_wa(mineralstring[1])
			    if check_H2O (mineralstring[1]):
			        yes = 1
		            else:
			        yes = 0
			else:
                            s_test = split_formula(mineralstring)
			    coef = 0.
			    yes = 1
			if yes:
                	    final = stoech (s_test)
                	    ionList = []                    
                	    for l in Temp_Species_list:
                        	if l[0]!=''and l[1]!='':
                        	    l[1]=float(l[1])
                        	    ionList.append(l)
			    ionList.append(["H2O", -1.*coef])   

                            #s_test = split_formula(str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ()))
                            #final = stoech (s_test)
                            #ionList = []                    
                            #for l in Temp_Species_list:
                            #    if l[0]!=''and l[1]!='':
                            #        l[1]=float(l[1])
                            #        ionList.append(l)
                            reactant = reactantListe (ionList)
                            if stoechBilanzierung(final,reactant):
                        	MineralPhases_list.append (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                        	MineralPhases_Formula_list.append (str (self.MineralPhaseFrame.MineralFormulaLineEdit.text ()))
                        	MineralPhases_Properties_list.append (Temp_list)
                        	MineralPhases_Species_list.append (Temp_Species_list)
                        	length = len (MineralPhases_list) - 1
                        	self.MineralPhaseFrame.MineralPhasesComboBox.insertItem (self.MineralPhaseFrame.MineralNameLineEdit.text (), length)
                        	self.MineralPhaseFrame.MineralPhasesComboBox.setCurrentItem (length)
                        	self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                        	self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                        	j = 0
                        	while j < 12:
                                    self.MineralPhaseFrame.Table1.clearCell (j,0)
                                    self.MineralPhaseFrame.Table1.clearCell (j,1)
                                    j = j+1

                        	self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                        	self.mineralDensity_released ()
                        	self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                        	self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                        	self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
                            else:
                        	self.MineralPhase_StoichiometricMB = QMessageBox()
                        	self.MineralPhase_StoichiometricMB.setCaption ('Error')
                        	self.MineralPhase_StoichiometricMB.setText ('The stoichiometry of the equation is not element balanced.\nCheck formula, aqueous species and stoichiometric coefficients.')
                        	self.MineralPhase_StoichiometricMB.setIcon (QMessageBox.Critical)
                        	self.MineralPhase_StoichiometricMB.show ()
				
		         
			else: 
			    pass  
                else:
                    pass
        
    def MineralPhaseFrame_cancel (self):

        self.MineralPhaseFrame.close ()

    def MineralPhaseFrame_delete (self):

        global MineralPhases_list
        global MineralPhases_Formula_list
        global MineralPhases_Properties_list
        global MineralPhases_Species_list

        global Database_Phases_Names_list

        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list
        
        if ((self.MineralPhaseFrame.MineralPhasesComboBox.count ()) != 0) and str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) != '':
        
            min_tmp = []
            for l in AqueousStates_MineralPhases_list:
                min_tmp.append (l[1])
            if (str (self.MineralPhaseFrame.MineralNameLineEdit.text ())) in Database_Phases_Names_list:
                self.MineralPhase_DatabaseMB2 = QMessageBox()
                self.MineralPhase_DatabaseMB2.setCaption ('Warning')
                self.MineralPhase_DatabaseMB2.setText ('\"'+str (self.MineralPhaseFrame.MineralNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.MineralPhase_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.MineralPhase_DatabaseMB2.show ()
            elif str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) in min_tmp:
                self.deleteMinMB = QMessageBox.warning (self.MineralPhaseFrame, 'Warning', 'This mineral has already been associated with an aqueous solution\nin the \"Equilibrium Phases\" window.\nDo you really want to delete it, and therefore delete the association too ?', QMessageBox.Yes | QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
                if self.deleteMinMB == 3:         #  This number corresponds to the "YES" button   

                    while str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) in min_tmp:
                        index = min_tmp.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                        del AqueousStates_MineralPhases_list [index]
                        del AqueousStates_MineralPhases_Properties_list [index]
                        del min_tmp [index]
                        min_tmp = []
                        for l in AqueousStates_MineralPhases_list:
                            min_tmp.append (l[1])
    
    
                        
               #     index = min_tmp.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
               #     del AqueousStates_MineralPhases_list [index]
               #     del AqueousStates_MineralPhases_Properties_list [index]
               #     self.MineralPhaseFrame_delete ()
                index = MineralPhases_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                self.MineralPhaseFrame.MineralPhasesComboBox.removeItem (self.MineralPhaseFrame.MineralPhasesComboBox.currentItem ())
                del MineralPhases_list [index]
                del MineralPhases_Formula_list [index]
                del MineralPhases_Properties_list [index]
                del MineralPhases_Species_list [index]
                self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                j = 0
                while j < 12:
                    self.MineralPhaseFrame.Table1.clearCell (j,0)
                    self.MineralPhaseFrame.Table1.clearCell (j,1)
                    j = j+1
                self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                self.mineralDensity_released ()
                self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
            
                if ((self.MineralPhaseFrame.MineralPhasesComboBox.count ()) != 0):
                    self.MineralPhaseFrame.MineralPhasesComboBox.setCurrentItem (0)
            
# debug_min



            else:
                index = MineralPhases_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                self.MineralPhaseFrame.MineralPhasesComboBox.removeItem (self.MineralPhaseFrame.MineralPhasesComboBox.currentItem ())
                del MineralPhases_list [index]
                del MineralPhases_Formula_list [index]
                del MineralPhases_Properties_list [index]
                del MineralPhases_Species_list [index]
                self.MineralPhaseFrame.MineralNameLineEdit.clear ()
                self.MineralPhaseFrame.MineralFormulaLineEdit.clear ()
                j = 0
                while j < 12:
                    self.MineralPhaseFrame.Table1.clearCell (j,0)
                    self.MineralPhaseFrame.Table1.clearCell (j,1)
                    j = j+1
                self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                self.mineralDensity_released ()
                self.MineralPhaseFrame.log_kLineEdit.setText (str (Default_log_k))
                self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (Default_Enthalpy))
                self.MineralPhaseFrame.MineralNameLineEdit.setFocus ()
            
                if ((self.MineralPhaseFrame.MineralPhasesComboBox.count ()) != 0):
                    self.MineralPhaseFrame.MineralPhasesComboBox.setCurrentItem (0)
        else:
            if ((self.MineralPhaseFrame.MineralPhasesComboBox.count ()) == 0):
                self.MineralPhaseMB = QMessageBox()
                self.MineralPhaseMB.setCaption ('Error')
                self.MineralPhaseMB.setText ('There is no Mineral Phase.')
                self.MineralPhaseMB.setIcon (QMessageBox.Critical)
                self.MineralPhaseMB.show ()
            elif str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) == '':
                self.MineralPhaseMB2 = QMessageBox()
                self.MineralPhaseMB2.setCaption ('Error')
                self.MineralPhaseMB2.setText ('You have to select a Mineral Phase.')
                self.MineralPhaseMB2.setIcon (QMessageBox.Critical)
                self.MineralPhaseMB2.show ()

    def MineralPhaseFrame_help (self):

        self.Help ()

    def MineralPhaseFrame_MineralPhasesComboBox_activate (self):

        global Database_Phases_Names_list
        global Database_Phases_Formula_list
        global Database_Phases_Species_list
        global Database_Phases_Log_k_list
        global Database_Phases_Delta_h_list

        i = 0
        while i < 12:
            self.MineralPhaseFrame.Table1.clearCell (i, 0)
            self.MineralPhaseFrame.Table1.clearCell (i, 1)
            i = i+1

        if str (self.MineralPhaseFrame.MineralPhasesComboBox.currentText ()) in Database_Phases_Names_list:
            self.MineralPhaseFrame.MineralNameLineEdit.setText (self.MineralPhaseFrame.MineralPhasesComboBox.currentText ())
            index = Database_Phases_Names_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
            self.MineralPhaseFrame.MineralFormulaLineEdit.setText (str (Database_Phases_Formula_list [index]))
            self.MineralPhaseFrame.log_kLineEdit.setText (str (Database_Phases_Log_k_list [index]))   
# Attention:  On ne lit pas encore l'enthalpie de formation
            self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
            self.mineralDensity_released ()
            i = 0
            while i < len (Database_Phases_Species_list [index]):
                self.MineralPhaseFrame.Table1.setText (i, 0, str (Database_Phases_Species_list [index][i][0]))
                if float (Database_Phases_Species_list [index][i][1]) == int (float (Database_Phases_Species_list [index][i][1])):
                    self.MineralPhaseFrame.Table1.setText (i, 1, str (int (float (Database_Phases_Species_list [index][i][1]))))
                else:
                    self.MineralPhaseFrame.Table1.setText (i, 1, str (Database_Phases_Species_list [index][i][1]))
                i = i+1
        else:
            self.MineralPhaseFrame.MineralNameLineEdit.setText (self.MineralPhaseFrame.MineralPhasesComboBox.currentText ())
            index = MineralPhases_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
            self.MineralPhaseFrame.MineralFormulaLineEdit.setText (str (MineralPhases_Formula_list [index]))
            self.MineralPhaseFrame.log_kLineEdit.setText (str (MineralPhases_Properties_list [index][0]))
            self.MineralPhaseFrame.EnthalpyOfFormationLineEdit.setText (str (MineralPhases_Properties_list [index][1]))
            if  str (MineralPhases_Properties_list [index][2]) is 'Density':
                self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (1)
                self.MineralPhaseFrame.MineralDensityLineEdit.setEnabled (1)
                density = str (MineralPhases_Properties_list [index][3])
                self.MineralPhaseFrame.MineralDensityLineEdit.setText (density)
            else:
                self.MineralPhaseFrame.MineralDensityRadiobutton.setOn (0)
                self.mineralDensity_released ()
            i = 0
            while i < 12:
                self.MineralPhaseFrame.Table1.setText (i, 0, str (MineralPhases_Species_list [index][i][0]))
                self.MineralPhaseFrame.Table1.setText (i, 1, str (MineralPhases_Species_list [index][i][1]))
                i = i+1

    def mineralDensity_activated (self):

        if self.MineralPhaseFrame.MineralDensityRadiobutton.isOn ():
            self.MineralPhaseFrame.MineralDensityLineEdit.setEnabled (1)
            if str (self.MineralPhaseFrame.MineralNameLineEdit.text ()) is '':
                self.MineralPhaseFrame.MineralDensityLineEdit.setText (str (Default_Density))
            else:
                try:
                    index = MineralPhases_list.index (str (self.MineralPhaseFrame.MineralNameLineEdit.text ()))
                    density = str (MineralPhases_Properties_list [index][3])
                    self.MineralPhaseFrame.MineralDensityLineEdit.setText (density)
                except:
                    self.MineralPhaseFrame.MineralDensityLineEdit.setText (str (Default_Density))
                    
            self.MineralPhaseFrame.MineralDensityLineEdit.setFocus ()
        else:
            self.mineralDensity_released ()

    def mineralDensity_released (self):
            
        self.MineralPhaseFrame.MineralDensityLineEdit.setEnabled (0)
        self.MineralPhaseFrame.MineralDensityLineEdit.clear ()
         


###########################################################################################
##                                                                                       ##
##                           MINERAL PHASE FRAME (END)                                   ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                      EXCHANGE MASTER SPECIES FRAME (BEGINNING)                        ##
##                                                                                       ##
###########################################################################################

 

    def exchange_master_species (self):

        self.ExchangeMasterSpeciesFrame = QFrame ()
        self.ExchangeMasterSpeciesFrame.setCaption ('Exchange master species')
        setPosition (self.ExchangeMasterSpeciesFrame)

        self.ExchangeMasterSpeciesFrame.mainLayout = QVBoxLayout (self.ExchangeMasterSpeciesFrame, 10,-1, 'ExchangeMasterSpeciesFrame_mainLayout')
        self.ExchangeMasterSpeciesFrame.mainLayout.setSpacing (Space)
        self.ExchangeMasterSpeciesFrame.mainLayout.setMargin (Marge)
	
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        ExchangeMasterSpecies_comment = Comments ['Exchange_Master_Species']

        self.ExchangeMasterSpeciesFrame.QHGroupBoxA = QHGroupBox (self.ExchangeMasterSpeciesFrame)
	QToolTip.add (self.ExchangeMasterSpeciesFrame.QHGroupBoxA,ExchangeMasterSpecies_comment)

        self.ExchangeMasterSpeciesFrame.QHGroupBoxA.setMargin (5)
        self.ExchangeMasterSpeciesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ExchangeMasterSpeciesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ExchangeMasterSpeciesFrame.mainLayout.addWidget (self.ExchangeMasterSpeciesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ExchangeMasterSpeciesFrame.QHGroupBox0 = QHGroupBox (self.ExchangeMasterSpeciesFrame)
        self.ExchangeMasterSpeciesFrame.mainLayout.addWidget (self.ExchangeMasterSpeciesFrame.QHGroupBox0)

        self.ExchangeMasterSpeciesFrame.QHGroupBox0.setMargin (10)
        self.ExchangeMasterSpeciesFrame.QHGroupBox0.setMidLineWidth (0)

        self.ExchangeMasterSpeciesFrame.QVBox01 = QVBox (self.ExchangeMasterSpeciesFrame.QHGroupBox0)
        self.ExchangeMasterSpeciesFrame.QVBox02 = QVBox (self.ExchangeMasterSpeciesFrame.QHGroupBox0)

        self.ExchangeMasterSpeciesFrame.QVBox01.setSpacing (5)
        self.ExchangeMasterSpeciesFrame.QVBox01.setMargin (0)
        self.ExchangeMasterSpeciesFrame.QVBox02.setSpacing (5)
        self.ExchangeMasterSpeciesFrame.QVBox02.setMargin (0)

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLabel = QLabel (self.ExchangeMasterSpeciesFrame.QVBox01)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLabel.setText ('Exchange Master Species Name')
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLabel.resize (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLabel.sizeHint())

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit = QLineEdit (self.ExchangeMasterSpeciesFrame.QVBox01)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setMinimumSize (200, 25)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setMaximumSize (200, 25)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setFocus ()
        QToolTip.add (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit, 'Name of an exchange site to define or to change')

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesListLabel = QLabel (self.ExchangeMasterSpeciesFrame.QVBox02)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesListLabel.setText ('List of Exchange Master Species')
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesListLabel.resize (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesListLabel.sizeHint())

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox = QComboBox (self.ExchangeMasterSpeciesFrame.QVBox02)
        QToolTip.add (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox, 'List of available user defined master species for ion exchange')
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.setMinimumSize (200, 25)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.setMaximumSize (200, 25)
        self.connect (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox, SIGNAL ('activated (int)'), self.ExchangeMasterSpeciesFrame_ExchangeMasterSpeciesComboBox_activate)
        i = 0
        while i < len (ExchangeMasterSpecies_list):
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.insertItem (ExchangeMasterSpecies_list [i])
            i = i+1
        i = 0
        while i < len (Database_ExchangeMasterSpecies_list):
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.insertItem (Database_ExchangeMasterSpecies_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.ExchangeMasterSpeciesFrame.QHGroupBox1 = QHGroupBox (self.ExchangeMasterSpeciesFrame)
        self.ExchangeMasterSpeciesFrame.mainLayout.addWidget (self.ExchangeMasterSpeciesFrame.QHGroupBox1)

        self.ExchangeMasterSpeciesFrame.QHGroupBox1.setMargin (10)
        self.ExchangeMasterSpeciesFrame.QHGroupBox1.setMidLineWidth (0)

        self.ExchangeMasterSpeciesFrame.QVBox11 = QVBox (self.ExchangeMasterSpeciesFrame.QHGroupBox1)
        self.ExchangeMasterSpeciesFrame.QVBox12 = QVBox (self.ExchangeMasterSpeciesFrame.QHGroupBox1)

        self.ExchangeMasterSpeciesFrame.QVBox11.setMargin (0)
        self.ExchangeMasterSpeciesFrame.QVBox11.setSpacing (5)
        self.ExchangeMasterSpeciesFrame.QVBox12.setMargin (0)
        self.ExchangeMasterSpeciesFrame.QVBox12.setSpacing (5)

        self.ExchangeMasterSpeciesFrame.QVBox12.setMinimumSize (210, 40)
        self.ExchangeMasterSpeciesFrame.QVBox12.setMaximumSize (210, 40)

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLabel = QLabel (self.ExchangeMasterSpeciesFrame.QVBox11)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLabel.setText ('Exchange Master Species Formula')
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLabel.resize (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLabel.sizeHint())

        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit = QLineEdit (self.ExchangeMasterSpeciesFrame.QVBox11)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit, 'Exchange master species formula: X- as an example')
          
#----------------------------------------------------------------------------------------------

        self.ExchangeMasterSpeciesFrame.QHGroupBox2 = QHGroupBox (self.ExchangeMasterSpeciesFrame)
        self.ExchangeMasterSpeciesFrame.mainLayout.addWidget (self.ExchangeMasterSpeciesFrame.QHGroupBox2)

        self.ExchangeMasterSpeciesFrame.QHGroupBox2.setMargin (2)
        self.ExchangeMasterSpeciesFrame.QHGroupBox2.setMidLineWidth (0)

        self.ExchangeMasterSpeciesFrame.OKPB = QPushButton ('OK', self.ExchangeMasterSpeciesFrame.QHGroupBox2)
        self.ExchangeMasterSpeciesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.ExchangeMasterSpeciesFrame.QHGroupBox2)
        self.ExchangeMasterSpeciesFrame.DeletePB = QPushButton ('Delete', self.ExchangeMasterSpeciesFrame.QHGroupBox2)
        self.ExchangeMasterSpeciesFrame.CancelPB = QPushButton ('Cancel', self.ExchangeMasterSpeciesFrame.QHGroupBox2)
        self.ExchangeMasterSpeciesFrame.HelpPB = QPushButton ('&Help', self.ExchangeMasterSpeciesFrame.QHGroupBox2)            

        self.connect (self.ExchangeMasterSpeciesFrame.OKPB, SIGNAL ('clicked ()'), self.ExchangeMasterSpeciesFrame_ok)
        self.connect (self.ExchangeMasterSpeciesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.ExchangeMasterSpeciesFrame_changecreate)
        self.connect (self.ExchangeMasterSpeciesFrame.DeletePB, SIGNAL ('clicked ()'), self.ExchangeMasterSpeciesFrame_delete)
        self.connect (self.ExchangeMasterSpeciesFrame.CancelPB, SIGNAL ('clicked ()'), self.ExchangeMasterSpeciesFrame_cancel)
        self.connect (self.ExchangeMasterSpeciesFrame.HelpPB, SIGNAL ('clicked ()'), self.ExchangeMasterSpeciesFrame_help)

        self.ExchangeMasterSpeciesFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the Exchange Master Species Frame
#----------------------------------------------------------------------------------------------


    def ExchangeMasterSpeciesFrame_ok (self):

        self.ExchangeMasterSpeciesFrame.close ()    

    def ExchangeMasterSpeciesFrame_changecreate (self):

        global ExchangeMasterSpecies_list
        global ExchangeMasterSpecies_Formula_list

        global Database_ExchangeMasterSpecies_list

        if (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ())) in Database_ExchangeMasterSpecies_list:
            self.ExchangeMasterSpecies_DatabaseMB = QMessageBox()
            self.ExchangeMasterSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeMasterSpecies_DatabaseMB.setText ('\"'+str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the Exchange Master Species you want to define.')
            self.ExchangeMasterSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeMasterSpecies_DatabaseMB.show ()
        elif (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text()).replace(' ','') == ''):
            self.ExchangeMasterSpecies_DatabaseMB = QMessageBox()
            self.ExchangeMasterSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeMasterSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the exchange master"\
	                                                   +" species you want to define.")
            self.ExchangeMasterSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeMasterSpecies_DatabaseMB.show ()
        else:
            if (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text()) in ExchangeMasterSpecies_list):
                index = ExchangeMasterSpecies_list.index (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text()))    
                ExchangeMasterSpecies_Formula_list [index] = str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.text ())
	    
            else:
                ExchangeMasterSpecies_list.append (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()))
                ExchangeMasterSpecies_Formula_list.append (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.text ()))

                length = len (ExchangeMasterSpecies_list) - 1
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.insertItem (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text (), length)
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.setCurrentItem (length)

            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.clear ()
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.clear ()
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setFocus ()
	
    def ExchangeMasterSpeciesFrame_delete (self):

        global ExchangeMasterSpecies_list
        global ExchangeMasterSpecies_Formula_list

        global Database_ExchangeMasterSpecies_list

        if ((self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.count ()) != 0) and str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()) != '':
            if (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ())) in Database_ExchangeMasterSpecies_list:
                self.ExchangeMasterSpecies_DatabaseMB2 = QMessageBox()
                self.ExchangeMasterSpecies_DatabaseMB2.setCaption ('Warning')
                self.ExchangeMasterSpecies_DatabaseMB2.setText ('\"'+str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.ExchangeMasterSpecies_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.ExchangeMasterSpecies_DatabaseMB2.show ()
            else:
                index = ExchangeMasterSpecies_list.index (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()))
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.removeItem (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.currentItem ())
                del ExchangeMasterSpecies_list [index]
                del ExchangeMasterSpecies_Formula_list [index]
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.clear ()
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.clear ()
                self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setFocus ()

                if ((self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.count ()) != 0):
                    self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.setCurrentItem (0)
                else:
                    pass
        else:
            if ((self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.count ()) == 0):
                self.ExchangeMasterSpeciesMB = QMessageBox()
                self.ExchangeMasterSpeciesMB.setCaption ('Error')
                self.ExchangeMasterSpeciesMB.setText ('There is no Exchange Master Species.')
                self.ExchangeMasterSpeciesMB.setIcon (QMessageBox.Critical)
                self.ExchangeMasterSpeciesMB.show ()
            elif str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()) == '':
                self.ExchangeMasterSpeciesMB2 = QMessageBox()
                self.ExchangeMasterSpeciesMB2.setCaption ('Error')
                self.ExchangeMasterSpeciesMB2.setText ('You have to select an Exchange Master Species.')
                self.ExchangeMasterSpeciesMB2.setIcon (QMessageBox.Critical)
                self.ExchangeMasterSpeciesMB2.show ()

    def ExchangeMasterSpeciesFrame_cancel (self):

        self.ExchangeMasterSpeciesFrame.close ()

    def ExchangeMasterSpeciesFrame_help (self):
        
        self.Help ()
        
    def ExchangeMasterSpeciesFrame_ExchangeMasterSpeciesComboBox_activate (self):

        global Database_ExchangeMasterSpecies_list
        global Database_ExchangeMasterSpecies_Formula_list

        global Database_ExchangeMasterSpecies_list
        global Database_ExchangeMasterSpecies_Formula_list

        if str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.currentText ()) in Database_ExchangeMasterSpecies_list:
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setText (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.currentText ())            
            index = Database_ExchangeMasterSpecies_list.index (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()))        
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.setText (str (Database_ExchangeMasterSpecies_Formula_list [index]))
        else:
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.setText (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesComboBox.currentText ())
            index = ExchangeMasterSpecies_list.index (str (self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesNameLineEdit.text ()))        
            self.ExchangeMasterSpeciesFrame.ExchangeMasterSpeciesFormulaLineEdit.setText (str (ExchangeMasterSpecies_Formula_list [index]))
               


###########################################################################################
##                                                                                       ##
##                        EXCHANGE MASTER SPECIES FRAME (END)                            ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                        EXCHANGE SPECIES FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################



    def exchange_species (self):

        self.ExchangeSpeciesFrame = QFrame ()
        self.ExchangeSpeciesFrame.setCaption ('Exchange Species')
        setPosition (self.ExchangeSpeciesFrame)

        self.ExchangeSpeciesFrame.mainLayout = QVBoxLayout (self.ExchangeSpeciesFrame, 10,-1, 'ExchangeSpeciesFrame_mainLayout')
        self.ExchangeSpeciesFrame.mainLayout.setSpacing (Space)
        self.ExchangeSpeciesFrame.mainLayout.setMargin (Marge)
	
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        ExchangeSpecies_comment = Comments ['Exchange_Species']

        self.ExchangeSpeciesFrame.QHGroupBoxA = QHGroupBox (self.ExchangeSpeciesFrame)
        QToolTip.add (self.ExchangeSpeciesFrame.QHGroupBoxA,ExchangeSpecies_comment)

        self.ExchangeSpeciesFrame.QHGroupBoxA.setMargin (5)
        self.ExchangeSpeciesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ExchangeSpeciesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ExchangeSpeciesFrame.mainLayout.addWidget (self.ExchangeSpeciesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ExchangeSpeciesFrame.QHGroupBox1 = QHGroupBox (self.ExchangeSpeciesFrame)
        self.ExchangeSpeciesFrame.QHGroupBox1.setMargin (0)
        self.ExchangeSpeciesFrame.QHGroupBox1.setMidLineWidth (0)
        self.ExchangeSpeciesFrame.mainLayout.addWidget (self.ExchangeSpeciesFrame.QHGroupBox1)

        self.ExchangeSpeciesFrame.QVBox11 = QVBox (self.ExchangeSpeciesFrame.QHGroupBox1)
        self.ExchangeSpeciesFrame.QVBox13 = QVBox (self.ExchangeSpeciesFrame.QHGroupBox1)
        self.ExchangeSpeciesFrame.QVBox12 = QVBox (self.ExchangeSpeciesFrame.QHGroupBox1)

        self.ExchangeSpeciesFrame.QVBox11.setSpacing (5)
        self.ExchangeSpeciesFrame.QVBox11.setMargin (0)
        self.ExchangeSpeciesFrame.QVBox12.setSpacing (5)
        self.ExchangeSpeciesFrame.QVBox12.setMargin (0)
        self.ExchangeSpeciesFrame.QVBox13.setMinimumSize (10, 10)
        self.ExchangeSpeciesFrame.QVBox13.setMaximumSize (10, 10)

#----------------------------------------------------------------------------------------------

        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLabel = QLabel ('Exchange Species Formula', self.ExchangeSpeciesFrame.QVBox11)
        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLabel.resize (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLabel.sizeHint())

        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QVBox11)
        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit, 'Formula for Species formed at the sorption surface')
        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setFocus ()
       
        self.ExchangeSpeciesFrame.ExchangeSpeciesLabel = QLabel (self.ExchangeSpeciesFrame.QVBox12)
        self.ExchangeSpeciesFrame.ExchangeSpeciesLabel.setText ('Exchange Species')
        self.ExchangeSpeciesFrame.ExchangeSpeciesLabel.resize (self.ExchangeSpeciesFrame.ExchangeSpeciesLabel.sizeHint())

        self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox = QComboBox (self.ExchangeSpeciesFrame.QVBox12)
        QToolTip.add (self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox, 'List of already user defined exchanged species;\n\
	normally included in the database,only modifications or additions are included here  ')
        self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.setMinimumSize (200, 25)
        self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.setMaximumSize (200, 25)

        self.connect (self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox, SIGNAL ('activated (int)'), self.ExchangeSpeciesFrame_ExchangeSpeciesComboBox_activate)
        j = 0
        while j < len (ExchangeMasterSpecies_list):
            self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.insertItem (ExchangeMasterSpecies_list [j])
            j = j+1
        i = 0
        while i < len (ExchangeSpecies_list):
            self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.insertItem (ExchangeSpecies_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.ExchangeSpeciesFrame.QHBox0 = QHBox (self.ExchangeSpeciesFrame)
        self.ExchangeSpeciesFrame.QHBox0.setMargin (0)
        self.ExchangeSpeciesFrame.QHBox0.setSpacing (5)
        self.ExchangeSpeciesFrame.QHBox0.setMidLineWidth (0)
        self.ExchangeSpeciesFrame.mainLayout.addWidget (self.ExchangeSpeciesFrame.QHBox0)

        self.ExchangeSpeciesFrame.QVGroupBox21 = QVGroupBox (self.ExchangeSpeciesFrame.QHBox0)
        self.ExchangeSpeciesFrame.QVGroupBox21.setTitle ('log k')

        #self.ExchangeSpeciesFrame.log_kLabel = QLabel ('', self.ExchangeSpeciesFrame.QVGroupBox21)

        self.ExchangeSpeciesFrame.log_kLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QVGroupBox21)
        #self.ExchangeSpeciesFrame.log_kLineEdit.setMinimumSize (50, 25)
        #self.ExchangeSpeciesFrame.log_kLineEdit.setMaximumSize (50, 25)
        self.ExchangeSpeciesFrame.log_kLineEdit.setText ('0.0')
        QToolTip.add (self.ExchangeSpeciesFrame.log_kLineEdit, 'log k: log of the equilibrium constant at 25 Celcius degrees')

        #self.ExchangeSpeciesFrame.QButtonGroup1 = QButtonGroup (self.ExchangeSpeciesFrame.QHBox0, 'self.ExchangeSpeciesFrame_QButtonGroup1' )
        #self.ExchangeSpeciesFrame.QButtonGroup1.setTitle ('gamma')
        #self.ExchangeSpeciesFrame.QVBoxLayout100 = QVBoxLayout (self.ExchangeSpeciesFrame.QButtonGroup1, 20, 20)
        #QToolTip.add (self.ExchangeSpeciesFrame.QButtonGroup1, 'Activity Coefficient Formula')

        #self.ExchangeSpeciesFrame.Organizer = range (2)

        #self.ExchangeSpeciesFrame.Organizer[0] = QRadioButton (self.ExchangeSpeciesFrame.QButtonGroup1)
        #self.ExchangeSpeciesFrame.Organizer[0].setChecked (1)
        #self.ExchangeSpeciesFrame.Organizer[0].setText('Davies')
        #self.ExchangeSpeciesFrame.QVBoxLayout100.addWidget (self.ExchangeSpeciesFrame.Organizer[0])
        #self.connect (self.ExchangeSpeciesFrame.Organizer[0], SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_DebyeHuckel_disable)
        
        #self.ExchangeSpeciesFrame.Organizer[1] = QRadioButton (self.ExchangeSpeciesFrame.QButtonGroup1)
        #self.ExchangeSpeciesFrame.Organizer[1].setText('Debye Huckel')
        #self.ExchangeSpeciesFrame.QVBoxLayout100.addWidget (self.ExchangeSpeciesFrame.Organizer[1])
        #self.connect (self.ExchangeSpeciesFrame.Organizer[1], SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_DebyeHuckel_enable)

        #self.ExchangeSpeciesFrame.QVBoxLayout100.activate()

        #self.ExchangeSpeciesFrame.QButtonGroup1.adjustSize ()

        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox = QVGroupBox (self.ExchangeSpeciesFrame.QHBox0)
        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setTitle ('Debye Huckel Coefficients')
        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setMargin (2)
        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
            
        #self.ExchangeSpeciesFrame.QHBox1 = QHBox (self.ExchangeSpeciesFrame.CoefficientsQVGroupBox)
        #self.ExchangeSpeciesFrame.QHBox1.setMargin (2)
        #self.ExchangeSpeciesFrame.QHBox1.setSpacing (2)

        #self.ExchangeSpeciesFrame.QHBox2 = QHBox (self.ExchangeSpeciesFrame.CoefficientsQVGroupBox)
        #self.ExchangeSpeciesFrame.QHBox2.setMargin (2)
        #self.ExchangeSpeciesFrame.QHBox2.setSpacing (2)

        #self.ExchangeSpeciesFrame.aLabel = QLabel ('a', self.ExchangeSpeciesFrame.QHBox1)
        #self.ExchangeSpeciesFrame.aLabel.resize (self.ExchangeSpeciesFrame.aLabel.sizeHint())

        #self.ExchangeSpeciesFrame.aLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QHBox1)
        #self.ExchangeSpeciesFrame.aLineEdit.setMinimumSize (35, 25)
        #self.ExchangeSpeciesFrame.aLineEdit.setMaximumSize (35, 25)
        #self.ExchangeSpeciesFrame.aLineEdit.setText (str (DebyeHuckel_a))

        #self.ExchangeSpeciesFrame.bLabel = QLabel ('b', self.ExchangeSpeciesFrame.QHBox2)
        #self.ExchangeSpeciesFrame.bLabel.resize (self.ExchangeSpeciesFrame.bLabel.sizeHint())

        #self.ExchangeSpeciesFrame.bLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QHBox2)
        #self.ExchangeSpeciesFrame.bLineEdit.setMinimumSize (35, 25)
        #self.ExchangeSpeciesFrame.bLineEdit.setMaximumSize (35, 25)
        #self.ExchangeSpeciesFrame.bLineEdit.setText (str (DebyeHuckel_b))

# debug_exchange

        self.ExchangeSpeciesFrame.QVGroupBox22 = QVGroupBox (self.ExchangeSpeciesFrame.QHBox0)
        self.ExchangeSpeciesFrame.QVGroupBox22.setTitle ('Activity Law')

        self.ExchangeSpeciesFrame.QHBox221 = QHBox (self.ExchangeSpeciesFrame.QVGroupBox22)
        self.ExchangeSpeciesFrame.QHBox221.setSpacing (5)
	
	self.ExchangeSpeciesFrame.ActivityLawComboBox = QComboBox (self.ExchangeSpeciesFrame.QHBox221)
	self.ExchangeSpeciesFrame.ActivityLawComboBox.insertItem ('Default')
	self.ExchangeSpeciesFrame.ActivityLawComboBox.insertItem ('Davies')
	self.ExchangeSpeciesFrame.ActivityLawComboBox.insertItem ('Debye Huckel')	
        self.connect (self.ExchangeSpeciesFrame.ActivityLawComboBox, SIGNAL ('activated (int)'), self.ExchangeSpeciesFrame_ActivityLawComboBox_activate)
	
	#self.ExchangeSpeciesFrame.ActivityLaw_Debye_Huckel_a = QLineEdit (self.ExchangeSpeciesFrame.QVGroupBox22)

	#self.ExchangeSpeciesFrame.ActivityLaw_Debye_Huckel_b = QLineEdit (self.ExchangeSpeciesFrame.QVGroupBox22)

        self.ExchangeSpeciesFrame.CoefficientsQVGroupBox = QVGroupBox (self.ExchangeSpeciesFrame.QHBox0)
        self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setTitle ('Debye Huckel Coefficients')
        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setMargin (2)
        self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
        #self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (1)
            
        self.ExchangeSpeciesFrame.QHBox1 = QHBox (self.ExchangeSpeciesFrame.CoefficientsQVGroupBox)
        #self.ExchangeSpeciesFrame.QHBox1.setMargin (2)
        self.ExchangeSpeciesFrame.QHBox1.setSpacing (2)

        self.ExchangeSpeciesFrame.QHBox2 = QHBox (self.ExchangeSpeciesFrame.CoefficientsQVGroupBox)
        #self.ExchangeSpeciesFrame.QHBox2.setMargin (2)
        self.ExchangeSpeciesFrame.QHBox2.setSpacing (2)

        self.ExchangeSpeciesFrame.aLabel = QLabel ('a', self.ExchangeSpeciesFrame.QHBox1)
        self.ExchangeSpeciesFrame.aLabel.resize (self.ExchangeSpeciesFrame.aLabel.sizeHint())

        self.ExchangeSpeciesFrame.aLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QHBox1)
        #self.ExchangeSpeciesFrame.aLineEdit.setMinimumSize (35, 25)
        #self.ExchangeSpeciesFrame.aLineEdit.setMaximumSize (35, 25)
        self.ExchangeSpeciesFrame.aLineEdit.setText (str (Default_DebyeHuckel_a))

        self.ExchangeSpeciesFrame.bLabel = QLabel ('b', self.ExchangeSpeciesFrame.QHBox2)
        self.ExchangeSpeciesFrame.bLabel.resize (self.ExchangeSpeciesFrame.bLabel.sizeHint())

        self.ExchangeSpeciesFrame.bLineEdit = QLineEdit (self.ExchangeSpeciesFrame.QHBox2)
        #self.ExchangeSpeciesFrame.bLineEdit.setMinimumSize (35, 25)
        #self.ExchangeSpeciesFrame.bLineEdit.setMaximumSize (35, 25)
        self.ExchangeSpeciesFrame.bLineEdit.setText (str (Default_DebyeHuckel_b))

#----------------------------------------------------------------------------------------------

        self.ExchangeSpeciesFrame.QVGroupBox2 = QVGroupBox (self.ExchangeSpeciesFrame)
        self.ExchangeSpeciesFrame.QVGroupBox2.setMidLineWidth (0)
        self.ExchangeSpeciesFrame.QVGroupBox2.setMargin (10)

        self.ExchangeSpeciesFrame.mainLayout.addWidget (self.ExchangeSpeciesFrame.QVGroupBox2)

        self.ExchangeSpeciesFrame.ExchangeSpeciesHalfReactionLabel = QLabel (self.ExchangeSpeciesFrame.QVGroupBox2)
        self.ExchangeSpeciesFrame.ExchangeSpeciesHalfReactionLabel.setText ('Exchange Species Half Reaction')
        self.ExchangeSpeciesFrame.ExchangeSpeciesHalfReactionLabel.resize (self.ExchangeSpeciesFrame.ExchangeSpeciesHalfReactionLabel.sizeHint ())

        self.ExchangeSpeciesFrame.Table1 = QTable(self.ExchangeSpeciesFrame.QVGroupBox2,'Table1')
        QToolTip.add (self.ExchangeSpeciesFrame.Table1, 'Association reaction for exchange species')
        self.ExchangeSpeciesFrame.Table1.setNumCols(self.ExchangeSpeciesFrame.Table1.numCols() + 1)
        self.ExchangeSpeciesFrame.Table1.horizontalHeader().setLabel(self.ExchangeSpeciesFrame.Table1.numCols() - 1,  ('Species reactants'))
        self.ExchangeSpeciesFrame.Table1.setNumCols(self.ExchangeSpeciesFrame.Table1.numCols() + 1)
        self.ExchangeSpeciesFrame.Table1.setColumnStretchable ( 1, 1)
        self.ExchangeSpeciesFrame.Table1.setColumnStretchable ( 0, 1)
        self.ExchangeSpeciesFrame.Table1.setMinimumHeight (150)
        self.ExchangeSpeciesFrame.Table1.setMaximumHeight (150)

        self.ExchangeSpeciesFrame.Table1.horizontalHeader().setLabel(self.ExchangeSpeciesFrame.Table1.numCols() - 1,  ('Stoichiometric Coefficients'))
        i = 0
        while i < 12:
            self.ExchangeSpeciesFrame.Table1.setNumRows(self.ExchangeSpeciesFrame.Table1.numRows() + 1)
            self.ExchangeSpeciesFrame.Table1.verticalHeader().setLabel(self.ExchangeSpeciesFrame.Table1.numRows() - 1,  (''))
            i = i+1
        self.ExchangeSpeciesFrame.Table1.setGeometry(QRect(40,240,400,104))
        self.ExchangeSpeciesFrame.Table1.setFrameShape(QTable.WinPanel)
        self.ExchangeSpeciesFrame.Table1.setLineWidth(2)
        self.ExchangeSpeciesFrame.Table1.setMargin(6)
        self.ExchangeSpeciesFrame.Table1.setMidLineWidth(0)
        self.ExchangeSpeciesFrame.Table1.setNumRows(12)
        self.ExchangeSpeciesFrame.Table1.setNumCols(2)
        self.ExchangeSpeciesFrame.Table1.setShowGrid(1)
        self.ExchangeSpeciesFrame.Table1.setRowMovingEnabled(1)
        self.ExchangeSpeciesFrame.Table1.setColumnMovingEnabled(1)
        self.ExchangeSpeciesFrame.Table1.setSelectionMode(QTable.Multi)

	if self.ExchangeSpeciesFrame.log_kLineEdit.hasFocus ():
            self.ExchangeSpeciesFrame.Table1.setText (0, 1, '1')

#----------------------------------------------------------------------------------------------

        self.ExchangeSpeciesFrame.QHGroupBox3 = QHGroupBox (self.ExchangeSpeciesFrame)
        self.ExchangeSpeciesFrame.QHGroupBox3.setMargin (10)
        self.ExchangeSpeciesFrame.QHGroupBox3.setMidLineWidth (0)
        self.ExchangeSpeciesFrame.mainLayout.addWidget (self.ExchangeSpeciesFrame.QHGroupBox3)

        self.ExchangeSpeciesFrame.OKPB = QPushButton ('OK', self.ExchangeSpeciesFrame.QHGroupBox3)
        self.ExchangeSpeciesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.ExchangeSpeciesFrame.QHGroupBox3)
        self.ExchangeSpeciesFrame.DeletePB = QPushButton ('Delete', self.ExchangeSpeciesFrame.QHGroupBox3)
        self.ExchangeSpeciesFrame.CancelPB = QPushButton ('Cancel', self.ExchangeSpeciesFrame.QHGroupBox3)
        self.ExchangeSpeciesFrame.HelpPB = QPushButton ('&Help', self.ExchangeSpeciesFrame.QHGroupBox3)

        self.connect (self.ExchangeSpeciesFrame.OKPB, SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_ok)
        self.connect (self.ExchangeSpeciesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_changecreate)
        self.connect (self.ExchangeSpeciesFrame.DeletePB, SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_delete)
        self.connect (self.ExchangeSpeciesFrame.CancelPB, SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_cancel)
        self.connect (self.ExchangeSpeciesFrame.HelpPB, SIGNAL ('clicked ()'), self.ExchangeSpeciesFrame_help)

        self.ExchangeSpeciesFrame.show ()
            
#----------------------------------------------------------------------------------------------
#  Methods of the Exchange Species Frame
#----------------------------------------------------------------------------------------------


    def ExchangeSpeciesFrame_ok (self):

        self.ExchangeSpeciesFrame.close ()

    def ExchangeSpeciesFrame_changecreate (self):

        global ExchangeSpecies_list
        global ExchangeSpecies_Properties_list
        global ExchangeSpecies_Reactants_list
        global DebyeHuckel_a
        global DebyeHuckel_b

	if (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()) in ExchangeSpecies_list):

	    index = ExchangeSpecies_list.index (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()))
	    
	    ExchangeSpecies_Properties_list [index][0] = str (self.ExchangeSpeciesFrame.log_kLineEdit.text ())
	    if str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Default':
		ExchangeSpecies_Properties_list [index][1] = 'Default'
		ExchangeSpecies_Properties_list [index][2] = '0'
		ExchangeSpecies_Properties_list [index][3] = '0'	    
	    elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Davies':
		ExchangeSpecies_Properties_list [index][1] = 'Davies'
		ExchangeSpecies_Properties_list [index][2] = '0'
		ExchangeSpecies_Properties_list [index][3] = '0'		
	    elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Debye Huckel':
	        ExchangeSpecies_Properties_list [index][1] = 'Debye'
		ExchangeSpecies_Properties_list [index][2] = float (str (self.ExchangeSpeciesFrame.aLineEdit.text ()))
		ExchangeSpecies_Properties_list [index][3] = float (str (self.ExchangeSpeciesFrame.bLineEdit.text ()))
            else:
	        pass

            i = 0
            while i < 12:
		ExchangeSpecies_Reactants_list [index][i][0] = str (self.ExchangeSpeciesFrame.Table1.text (i, 0))
		ExchangeSpecies_Reactants_list [index][i][1] = str (self.ExchangeSpeciesFrame.Table1.text (i, 1))
		i = i+1

            j = 0
            while j < 12:
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,0)
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,1)
        	j = j+1

            self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
            self.ExchangeSpeciesFrame_ActivityLawComboBox_activate()
            self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.clear ()
            self.ExchangeSpeciesFrame.log_kLineEdit.clear ()
	    self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setFocus ()

        elif (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()).replace(' ','') == ''):
            self.ExchangeSpecies_DatabaseMB = QMessageBox()
            self.ExchangeSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the exchange species you want to define.")
            self.ExchangeSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeSpecies_DatabaseMB.show ()

        elif str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) in ExchangeSpecies_list:

            self.MineralPhase_ExchangeMB8 = QMessageBox()
            self.MineralPhase_ExchangeMB8.setCaption ('Error')
            self.MineralPhase_ExchangeMB8.setText ('\"'+str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text())+'\" is already an exchange master species.\nYou can\'t add it by this way.')
            self.MineralPhase_ExchangeMB8.setIcon (QMessageBox.Critical)
            self.MineralPhase_ExchangeMB8.show ()
		
	else:

            ExchangeSpecies_list.append (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()))

            Temp_list = []
            Temp_list.append (str (self.ExchangeSpeciesFrame.log_kLineEdit.text ()))
	    if str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Default':
        	Temp_list.append ('Default')
        	Temp_list.append ('0')
        	Temp_list.append ('0')	    
	    elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Davies':
        	Temp_list.append ('Davies')
        	Temp_list.append ('0')
        	Temp_list.append ('0')		
	    elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText())=='Debye Huckel':
	        Temp_list.append ('Debye')
		Temp_list.append (float (str (self.ExchangeSpeciesFrame.aLineEdit.text ())))
		Temp_list.append (float (str (self.ExchangeSpeciesFrame.bLineEdit.text ())))
            else:
	        pass

            ExchangeSpecies_Properties_list.append (Temp_list)

            self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.insertItem (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text(), self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.currentItem ())
            self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.setCurrentItem (0)
            self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.clear ()

            Temp_Species_list = []
            i = 0
            while i < 12:
        	Aux_Species_list = []
        	Aux_Species_list.append (str (self.ExchangeSpeciesFrame.Table1.text (i, 0)))
        	Aux_Species_list.append (str (self.ExchangeSpeciesFrame.Table1.text (i, 1)))

        	Temp_Species_list.append (Aux_Species_list)
        	i = i+1

            ExchangeSpecies_Reactants_list.append (Temp_Species_list)

            j = 0
            while j < 12:
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,0)
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,1)
        	j = j+1

            self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
            self.ExchangeSpeciesFrame_ActivityLawComboBox_activate()
            self.ExchangeSpeciesFrame.log_kLineEdit.setText ('0.0')
            self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setFocus ()
	    
    def ExchangeSpeciesFrame_delete (self):

        global ExchangeSpecies_list
        global ExchangeSpecies_Properties_list
        global ExchangeSpecies_Reactants_list
        global DebyeHuckel_a
        global DebyeHuckel_b

        
	if str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) in ExchangeMasterSpecies_list:
            self.ExchangeSpeciesMB2 = QMessageBox()
            self.ExchangeSpeciesMB2.setCaption ('Error')
            self.ExchangeSpeciesMB2.setText ('This Element is an Exchange master Species.\nYou can\'t delete it.')
            self.ExchangeSpeciesMB2.setIcon (QMessageBox.Critical)
            self.ExchangeSpeciesMB2.show ()
	    
	else:
	
	
	
	
	    if ((self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.count ()) != 0) and str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) != '':
        	if 0:
                    pass
        	#if (str (self.MineralPhaseFrame.MineralNameLineEdit.text ())) in Database_Phases_Names_list:
        	 #   self.MineralPhase_DatabaseMB2 = QMessageBox()
        	  #  self.MineralPhase_DatabaseMB2.setCaption ('Warning')
        	   # self.MineralPhase_DatabaseMB2.setText ('\"'+str (self.MineralPhaseFrame.MineralNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                    #self.MineralPhase_DatabaseMB2.setIcon (QMessageBox.Warning)
                    #self.MineralPhase_DatabaseMB2.show ()
        	else:
                    index = ExchangeSpecies_list.index (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()))
                    self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.removeItem (self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.currentItem ())
                    del ExchangeSpecies_list [index]
                    del ExchangeSpecies_Properties_list [index]
                    del ExchangeSpecies_Reactants_list [index]
                    self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.clear ()
                    j = 0
                    while j < 12:
                	self.ExchangeSpeciesFrame.Table1.clearCell (j,0)
                	self.ExchangeSpeciesFrame.Table1.clearCell (j,1)
                	j = j+1
                    self.ExchangeSpeciesFrame.log_kLineEdit.setText (str (Default_log_k))
                    if ((self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.count ()) != 0):
                	self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.setCurrentItem (0)
                    self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
                    self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
	            self.ExchangeSpeciesFrame.aLineEdit.clear()
                    self.ExchangeSpeciesFrame.bLineEdit.clear()



            else:
        	if ((self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.count ()) == 0):
                    self.ExchangeSpeciesMB = QMessageBox()
                    self.ExchangeSpeciesMB.setCaption ('Error')
                    self.ExchangeSpeciesMB.setText ('There is no Exchange Species.')
                    self.ExchangeSpeciesMB.setIcon (QMessageBox.Critical)
                    self.ExchangeSpeciesMB.show ()
        	elif str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) == '':
                    self.ExchangeSpeciesMB2 = QMessageBox()
                    self.ExchangeSpeciesMB2.setCaption ('Error')
                    self.ExchangeSpeciesMB2.setText ('You have to select an Exchange Species.')
                    self.ExchangeSpeciesMB2.setIcon (QMessageBox.Critical)
                    self.ExchangeSpeciesMB2.show ()
        	#elif str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) in ExchangeMasterSpecies_list:
        	#    self.ExchangeSpeciesMB2 = QMessageBox()
        	#    self.ExchangeSpeciesMB2.setCaption ('Error')
        	#    self.ExchangeSpeciesMB2.setText ('This Element is an Exchange master Species.\nYou can\'t delete it.')
        	#    self.ExchangeSpeciesMB2.setIcon (QMessageBox.Critical)
        	#    self.ExchangeSpeciesMB2.show ()








        
 # debug_exchange


    def ExchangeSpeciesFrame_cancel (self):

        self.ExchangeSpeciesFrame.close ()

    def ExchangeSpeciesFrame_help (self):

        self.Help ()

    def ExchangeSpeciesFrame_ExchangeSpeciesComboBox_activate (self):

        global ExchangeSpecies_list
        global ExchangeSpecies_Properties_list
        global ExchangeSpecies_Reactants_list
        global DebyeHuckel_a
        global DebyeHuckel_b

        self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.setText (self.ExchangeSpeciesFrame.ExchangeSpeciesComboBox.currentText ())

        if str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) in ExchangeSpecies_list:

            index = ExchangeSpecies_list.index (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()))

            self.ExchangeSpeciesFrame.log_kLineEdit.setText (str (ExchangeSpecies_Properties_list [index][0]))
            
	    if ExchangeSpecies_Properties_list [index][1] is 'Default':
	        self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
                self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
	    elif ExchangeSpecies_Properties_list [index][1] is 'Davies':
	        self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (1)
                self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
            elif ExchangeSpecies_Properties_list [index][1] is 'Debye':
                self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (2)      
                self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (1)
            else:
	        self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
                self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
		

            self.ExchangeSpeciesFrame.aLineEdit.setText(str (ExchangeSpecies_Properties_list [index][2]))
            self.ExchangeSpeciesFrame.bLineEdit.setText(str (ExchangeSpecies_Properties_list [index][3]))
		
		
#	if str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()) in ExchangeSpecies_list:
#            index = ExchangeSpecies_list.index (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text()))
#	    DebyeHuckel_a = ExchangeSpecies_Properties_list [index][2]
#	    DebyeHuckel_b = ExchangeSpecies_Properties_list [index][3]
#	else:
#	    DebyeHuckel_a = Default_DebyeHuckel_a
#	    DebyeHuckel_b = Default_DebyeHuckel_b
#        self.ExchangeSpeciesFrame.aLineEdit.setText(str (DebyeHuckel_a))	    
#        self.ExchangeSpeciesFrame.bLineEdit.setText(str (DebyeHuckel_b))	    




            i = 0
            again = 1
            while i < len (ExchangeSpecies_Reactants_list [index]) and again:
                tmp = str (ExchangeSpecies_Reactants_list [index][i][0])
                if tmp == '':
                    again = 0
                else:
                    pass
                self.ExchangeSpeciesFrame.Table1.setText (i, 0, str (ExchangeSpecies_Reactants_list [index][i][0]))
                self.ExchangeSpeciesFrame.Table1.setText (i, 1, str (ExchangeSpecies_Reactants_list [index][i][1]))
                i = i+1

        elif str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()) in ExchangeMasterSpecies_list:

            index = ExchangeMasterSpecies_list.index (str (self.ExchangeSpeciesFrame.ExchangeSpeciesFormulaLineEdit.text ()))
            self.ExchangeSpeciesFrame.log_kLineEdit.setText ('0.0')
            self.ExchangeSpeciesFrame.ActivityLawComboBox.setCurrentItem (0)
	    self.ExchangeSpeciesFrame.aLineEdit.clear()
            self.ExchangeSpeciesFrame.bLineEdit.clear()
            self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)

            j = 0
            while j < 12:
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,0)
        	self.ExchangeSpeciesFrame.Table1.clearCell (j,1)
        	j = j+1
            self.ExchangeSpeciesFrame.Table1.setText (0, 0, str (ExchangeMasterSpecies_Formula_list [index]))
            self.ExchangeSpeciesFrame.Table1.setText (0, 1, '1')
	    
	self.ExchangeSpeciesFrame.OKPB.setFocus ()

    def ExchangeSpeciesFrame_DebyeHuckel_enable (self):

        self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (1)

    def ExchangeSpeciesFrame_DebyeHuckel_disable (self):

        self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)

    def ExchangeSpeciesFrame_ActivityLawComboBox_activate (self):
    
        global ExchangeSpecies_list
        global ExchangeSpecies_Properties_list
        global ExchangeSpecies_Reactants_list
        global DebyeHuckel_a
        global DebyeHuckel_b

        if str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText ()) == 'Default':
            self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
            #self.ExchangeSpeciesFrame.aLineEdit.setText(str (Default_DebyeHuckel_a))	    
            #self.ExchangeSpeciesFrame.aLineEdit.setText(str (Default_DebyeHuckel_a))	    
            self.ExchangeSpeciesFrame.aLineEdit.clear()	    
            self.ExchangeSpeciesFrame.bLineEdit.clear()	    
        elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText ()) == 'Davies':
            self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (0)
            self.ExchangeSpeciesFrame.aLineEdit.clear()	    
            self.ExchangeSpeciesFrame.bLineEdit.clear()	    
        elif str (self.ExchangeSpeciesFrame.ActivityLawComboBox.currentText ()) == 'Debye Huckel':
            self.ExchangeSpeciesFrame.CoefficientsQVGroupBox.setEnabled (1)
            self.ExchangeSpeciesFrame.aLineEdit.setText(str (Default_DebyeHuckel_a))	    
            self.ExchangeSpeciesFrame.bLineEdit.setText(str (Default_DebyeHuckel_b))	    
            self.ExchangeSpeciesFrame.aLineEdit.setFocus()
	else:
	    pass

       

###########################################################################################
##                                                                                       ##
##                           EXCHANGE SPECIES FRAME (END)                                ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                  (DATA) SURFACE MASTER SPECIES FRAME (BEGINNING)                      ##
##                                                                                       ##
###########################################################################################

 

    def surface_master_species (self):

    
#----------------------------------------------------------------------------------------------
#  List of Comments associated to widgets
#----------------------------------------------------------------------------------------------

        ToolTip_1 = 'surface master species name to define or to change\n'+\
	'It must begin with a capital letter'
	ToolTip_2 = 'List of already user defined master species for surface complexation'
	ToolTip_3 = 'Formula for the surface master species,\n'+\
	' usually the OH-form of the binding site'

#----------------------------------------------------------------------------------------------

        self.surfaceMasterSpeciesFrame = QFrame ()
        self.surfaceMasterSpeciesFrame.setCaption ('Surface Complexation Master Species')
        setPosition (self.surfaceMasterSpeciesFrame)

        self.surfaceMasterSpeciesFrame.mainLayout = QVBoxLayout (self.surfaceMasterSpeciesFrame, 10,-1,'surfaceMasterSpeciesFrame_mainLayout')
        self.surfaceMasterSpeciesFrame.mainLayout.setMargin (Marge)
        self.surfaceMasterSpeciesFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        surfaceMasterSpecies_comment = Comments ['Surface_Master_Species']

        self.surfaceMasterSpeciesFrame.QHGroupBoxA = QHGroupBox (self.surfaceMasterSpeciesFrame)
	QToolTip.add (self.surfaceMasterSpeciesFrame.QHGroupBoxA,surfaceMasterSpecies_comment)

        self.surfaceMasterSpeciesFrame.QHGroupBoxA.setMargin (5)
        self.surfaceMasterSpeciesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.surfaceMasterSpeciesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.surfaceMasterSpeciesFrame.mainLayout.addWidget (self.surfaceMasterSpeciesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.surfaceMasterSpeciesFrame.QHBoxLayout1 = QHGroupBox (self.surfaceMasterSpeciesFrame)
        self.surfaceMasterSpeciesFrame.mainLayout.addWidget (self.surfaceMasterSpeciesFrame.QHBoxLayout1)

        self.surfaceMasterSpeciesFrame.QHBoxLayout1.setMargin (10)
        self.surfaceMasterSpeciesFrame.QHBoxLayout1.setMidLineWidth (0)

        self.surfaceMasterSpeciesFrame.QVBoxLayout11 = QVBox (self.surfaceMasterSpeciesFrame.QHBoxLayout1)
        self.surfaceMasterSpeciesFrame.QVBoxLayout12 = QVBox (self.surfaceMasterSpeciesFrame.QHBoxLayout1)

        self.surfaceMasterSpeciesFrame.QVBoxLayout11.setMargin (0)
        self.surfaceMasterSpeciesFrame.QVBoxLayout11.setSpacing (5)
        self.surfaceMasterSpeciesFrame.QVBoxLayout12.setMargin (0)
        self.surfaceMasterSpeciesFrame.QVBoxLayout12.setSpacing (5)

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLabel = QLabel (self.surfaceMasterSpeciesFrame.QVBoxLayout11)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLabel.setText ('Surface Master Species Name')
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLabel.resize (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLabel.sizeHint())

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit = QLineEdit (self.surfaceMasterSpeciesFrame.QVBoxLayout11)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setMinimumSize (200, 25)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setMaximumSize (200, 25)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setFocus ()
        QToolTip.add (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit, ToolTip_1)

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesListLabel = QLabel (self.surfaceMasterSpeciesFrame.QVBoxLayout12)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesListLabel.setText ('List of Surface Master Species')
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesListLabel.resize (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesListLabel.sizeHint())

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox = QComboBox (self.surfaceMasterSpeciesFrame.QVBoxLayout12)
        QToolTip.add (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox,ToolTip_2)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.setMinimumSize (200, 25)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.setMaximumSize (200, 25)
        self.connect (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox, SIGNAL ('activated (int)'), self.surfaceMasterSpeciesFrame_surfaceMasterSpeciesComboBox_activate)
        i = 0
        while i < len (SurfaceMasterSpecies_list):
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.insertItem (SurfaceMasterSpecies_list [i])
            i = i+1
        i = 0
        while i < len (Database_SurfaceMasterSpecies_list):
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.insertItem (Database_SurfaceMasterSpecies_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.surfaceMasterSpeciesFrame.QHBoxLayout2 = QHGroupBox (self.surfaceMasterSpeciesFrame)
        self.surfaceMasterSpeciesFrame.mainLayout.addWidget (self.surfaceMasterSpeciesFrame.QHBoxLayout2)

        self.surfaceMasterSpeciesFrame.QHBoxLayout2.setMargin (10)
        self.surfaceMasterSpeciesFrame.QHBoxLayout2.setMidLineWidth (0)

        self.surfaceMasterSpeciesFrame.QVBoxLayout21 = QVBox (self.surfaceMasterSpeciesFrame.QHBoxLayout2)
        self.surfaceMasterSpeciesFrame.QVBoxLayout22 = QVBox (self.surfaceMasterSpeciesFrame.QHBoxLayout2)

        self.surfaceMasterSpeciesFrame.QVBoxLayout21.setMargin (0)
        self.surfaceMasterSpeciesFrame.QVBoxLayout21.setSpacing (5)
        self.surfaceMasterSpeciesFrame.QVBoxLayout22.setMargin (0)
        self.surfaceMasterSpeciesFrame.QVBoxLayout22.setSpacing (5)

        self.surfaceMasterSpeciesFrame.QVBoxLayout22.setMinimumSize (210, 40)
        self.surfaceMasterSpeciesFrame.QVBoxLayout22.setMaximumSize (210, 40)

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLabel = QLabel (self.surfaceMasterSpeciesFrame.QVBoxLayout21)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLabel.setText ('Surface Master Species Formula')
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLabel.resize (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLabel.sizeHint())

        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit = QLineEdit (self.surfaceMasterSpeciesFrame.QVBoxLayout21)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        QToolTip.add (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit,ToolTip_3)
          
#----------------------------------------------------------------------------------------------

        self.surfaceMasterSpeciesFrame.QHBoxLayout3 = QHGroupBox (self.surfaceMasterSpeciesFrame)
        self.surfaceMasterSpeciesFrame.mainLayout.addWidget (self.surfaceMasterSpeciesFrame.QHBoxLayout3)

        self.surfaceMasterSpeciesFrame.QHBoxLayout3.setMargin (2)
        self.surfaceMasterSpeciesFrame.QHBoxLayout3.setMidLineWidth (0)

        self.surfaceMasterSpeciesFrame.OKPB = QPushButton ('OK', self.surfaceMasterSpeciesFrame.QHBoxLayout3)
        self.surfaceMasterSpeciesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.surfaceMasterSpeciesFrame.QHBoxLayout3)
        self.surfaceMasterSpeciesFrame.DeletePB = QPushButton ('Delete', self.surfaceMasterSpeciesFrame.QHBoxLayout3)
        self.surfaceMasterSpeciesFrame.CancelPB = QPushButton ('Cancel', self.surfaceMasterSpeciesFrame.QHBoxLayout3)
        self.surfaceMasterSpeciesFrame.HelpPB = QPushButton ('&Help', self.surfaceMasterSpeciesFrame.QHBoxLayout3)            

        self.connect (self.surfaceMasterSpeciesFrame.OKPB, SIGNAL ('clicked ()'), self.surfaceMasterSpeciesFrame_ok)
        self.connect (self.surfaceMasterSpeciesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.surfaceMasterSpeciesFrame_changecreate)
        self.connect (self.surfaceMasterSpeciesFrame.CancelPB, SIGNAL ('clicked ()'), self.surfaceMasterSpeciesFrame_cancel)
        self.connect (self.surfaceMasterSpeciesFrame.DeletePB, SIGNAL ('clicked ()'), self.surfaceMasterSpeciesFrame_delete)
        self.connect (self.surfaceMasterSpeciesFrame.HelpPB, SIGNAL ('clicked ()'), self.surfaceMasterSpeciesFrame_help)

        self.surfaceMasterSpeciesFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the surface Master Species Frame
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  to exit saving changes
#----------------------------------------------------------------------------------------------
      
    def surfaceMasterSpeciesFrame_ok (self):

        self.surfaceMasterSpeciesFrame.close ()    

    def surfaceMasterSpeciesFrame_changecreate (self):

        global SurfaceMasterSpecies_list
        global SurfaceMasterSpecies_Formula_list

        global Database_SurfaceMasterSpecies_list


        if (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()) in Database_SurfaceMasterSpecies_list):
            self.SurfaceMasterSpecies_DatabaseMB = QMessageBox()
            self.SurfaceMasterSpecies_DatabaseMB.setCaption ('Warning')
            self.SurfaceMasterSpecies_DatabaseMB.setText ('\"'+str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the Surface Master Species you want to define.')
            self.SurfaceMasterSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.SurfaceMasterSpecies_DatabaseMB.show ()
	    
        elif (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text()).replace(' ','') == ''):
            self.ExchangeSpecies_DatabaseMB = QMessageBox()
            self.ExchangeSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the surface master species you want to define.")
            self.ExchangeSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeSpecies_DatabaseMB.show ()
        else:
            if (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()) in SurfaceMasterSpecies_list):
                index = SurfaceMasterSpecies_list.index (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()))
                SurfaceMasterSpecies_Formula_list [index] = str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.text ())
            else:
                SurfaceMasterSpecies_list.append (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()))
                SurfaceMasterSpecies_Formula_list.append (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.text ()))

                length = len (SurfaceMasterSpecies_list) - 1        
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.insertItem (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text (), length)
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.setCurrentItem (length)
            
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.clear ()
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.clear ()
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setFocus ()
      
#----------------------------------------------------------------------------------------------
#  to delete an element
#---------------------------------------------------------------------------------------------

    def surfaceMasterSpeciesFrame_delete (self):

        global SurfaceMasterSpecies_list
        global SurfaceMasterSpecies_Formula_list

        global Database_SurfaceMasterSpecies_list

        if ((self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.count ()) != 0) and str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()) != '':
            if (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ())) in Database_SurfaceMasterSpecies_list:
                self.SurfaceMasterSpecies_DatabaseMB2 = QMessageBox()
                self.SurfaceMasterSpecies_DatabaseMB2.setCaption ('Warning')
                self.SurfaceMasterSpecies_DatabaseMB2.setText ('\"'+str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.SurfaceMasterSpecies_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.SurfaceMasterSpecies_DatabaseMB2.show ()
            else:
                index = SurfaceMasterSpecies_list.index (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()))
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.removeItem (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.currentItem ())
                del SurfaceMasterSpecies_list [index]
                del SurfaceMasterSpecies_Formula_list [index]
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.clear ()
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.clear ()
                self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setFocus ()

                if ((self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.count ()) != 0):
                    self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.setCurrentItem (0)
                else:
                    pass
        else:
            if ((self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.count ()) == 0):
                self.SurfaceMasterSpeciesMB = QMessageBox()
                self.SurfaceMasterSpeciesMB.setCaption ('Error')
                self.SurfaceMasterSpeciesMB.setText ('There is no Surface Master Species.')
                self.SurfaceMasterSpeciesMB.setIcon (QMessageBox.Critical)
                self.SurfaceMasterSpeciesMB.show ()
            elif str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()) == '':
                self.SurfaceMasterSpeciesMB2 = QMessageBox()
                self.SurfaceMasterSpeciesMB2.setCaption ('Error')
                self.SurfaceMasterSpeciesMB2.setText ('You have to select a Surface Master Species.')
                self.SurfaceMasterSpeciesMB2.setIcon (QMessageBox.Critical)
                self.SurfaceMasterSpeciesMB2.show ()
              
#----------------------------------------------------------------------------------------------
#  to exit discarding changes
#----------------------------------------------------------------------------------------------

    def surfaceMasterSpeciesFrame_cancel (self):

        self.surfaceMasterSpeciesFrame.close ()

#----------------------------------------------------------------------------------------------
#  to display help about this window
#----------------------------------------------------------------------------------------------

    def surfaceMasterSpeciesFrame_help (self):
        
        self.Help ()

    def surfaceMasterSpeciesFrame_surfaceMasterSpeciesComboBox_activate (self):

        global SurfaceMasterSpecies_list
        global SurfaceMasterSpecies_Formula_list

        global Database_SurfaceMasterSpecies_list
        global Database_SurfaceMasterSpecies_Formula_list

        if str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.currentText ()) in Database_SurfaceMasterSpecies_list:
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setText (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.currentText ())
            index = Database_SurfaceMasterSpecies_list.index (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()))        
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.setText (str (Database_SurfaceMasterSpecies_Formula_list [index]))
        else:
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.setText (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesComboBox.currentText ())
            index = SurfaceMasterSpecies_list.index (str (self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesNameLineEdit.text ()))        
            self.surfaceMasterSpeciesFrame.surfaceMasterSpeciesFormulaLineEdit.setText (str (SurfaceMasterSpecies_Formula_list [index]))



###########################################################################################
##                                                                                       ##
##                     SURFACE MASTER SPECIES FRAME (END)                                ##
##                                                                                       ##
###########################################################################################



    
###########################################################################################
##                                                                                       ##
##                 (DATA) SURFACE COMPLEXATION SPECIES FRAME (BEGINNING)                 ##
##                                                                                       ##
###########################################################################################


       
    def surface_species (self):

        self.SurfaceFrame = QFrame ()
        self.SurfaceFrame.setCaption ('Surface Complexation Species')
        setPosition (self.SurfaceFrame)

        self.SurfaceFrame.mainLayout = QVBoxLayout (self.SurfaceFrame, 10,-1, 'SurfaceFrame_mainLayout')
        self.SurfaceFrame.mainLayout.setSpacing (Space)
        self.SurfaceFrame.mainLayout.setMargin (Marge)


#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        SurfaceSpecies_comment = Comments ['Surface_Species']

        self.SurfaceFrame.QHGroupBoxA = QHGroupBox (self.SurfaceFrame)
	QToolTip.add (self.SurfaceFrame.QHGroupBoxA,SurfaceSpecies_comment)

        self.SurfaceFrame.QHGroupBoxA.setMargin (5)
        self.SurfaceFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SurfaceFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SurfaceFrame.mainLayout.addWidget (self.SurfaceFrame.QHGroupBoxA)
#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
       
        self.SurfaceFrame.QHGroupBox1 = QHGroupBox (self.SurfaceFrame)
        self.SurfaceFrame.QHGroupBox1.setMargin (5)
        self.SurfaceFrame.QHGroupBox1.setMidLineWidth (0)
        self.SurfaceFrame.mainLayout.addWidget (self.SurfaceFrame.QHGroupBox1)

        self.SurfaceFrame.QVBox11 = QVBox (self.SurfaceFrame.QHGroupBox1)
        self.SurfaceFrame.QVBox13 = QVBox (self.SurfaceFrame.QHGroupBox1)
        self.SurfaceFrame.QVBox12 = QVBox (self.SurfaceFrame.QHGroupBox1)

        self.SurfaceFrame.QVBox11.setSpacing (5)
        self.SurfaceFrame.QVBox11.setMargin (0)
        self.SurfaceFrame.QVBox12.setSpacing (5)
        self.SurfaceFrame.QVBox12.setMargin (0)
        self.SurfaceFrame.QVBox13.setMargin (0)

        self.SurfaceFrame.QVBox13.setMinimumSize (10, 10)
        self.SurfaceFrame.QVBox13.setMaximumSize (10, 10)
            
#----------------------------------------------------------------------------------------------

        self.SurfaceFrame.SurfaceSpeciesFormulaLabel = QLabel ('Surface Species Formula                ', self.SurfaceFrame.QVBox11)
        self.SurfaceFrame.SurfaceSpeciesFormulaLabel.resize (self.SurfaceFrame.SurfaceSpeciesFormulaLabel.sizeHint ())

        self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit = QLineEdit (self.SurfaceFrame.QVBox11)
        self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setMaximumSize (200, 25)
        self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setFocus ()
        QToolTip.add (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit, 'Formula for Species formed at the sorption surface')

        self.SurfaceFrame.SurfaceSpeciesLabel = QLabel ('Surface Species List', self.SurfaceFrame.QVBox12)
        self.SurfaceFrame.SurfaceSpeciesLabel.resize (self.SurfaceFrame.SurfaceSpeciesLabel.sizeHint ())

        self.SurfaceFrame.SurfaceSpeciesComboBox = QComboBox (self.SurfaceFrame.QVBox12)
        QToolTip.add (self.SurfaceFrame.SurfaceSpeciesComboBox, 'List of already defined Surface species')
        self.SurfaceFrame.SurfaceSpeciesComboBox.setMinimumSize (200, 25)
        self.SurfaceFrame.SurfaceSpeciesComboBox.setMaximumSize (200, 25)
        self.connect (self.SurfaceFrame.SurfaceSpeciesComboBox, SIGNAL ('activated (int)'), self.SurfaceFrame_SurfaceSpeciesComboBox_activate)
        j = 0
        while j < len (SurfaceSpecies_list):
            self.SurfaceFrame.SurfaceSpeciesComboBox.insertItem (SurfaceSpecies_list [j])
            j = j+1
        i = 0
        while i < len (Database_SurfaceSpecies_list):
            self.SurfaceFrame.SurfaceSpeciesComboBox.insertItem (Database_SurfaceSpecies_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.SurfaceFrame.QHGroupBox2 = QHGroupBox (self.SurfaceFrame)
        self.SurfaceFrame.QHGroupBox2.setMargin (5)
        self.SurfaceFrame.QHGroupBox2.setMidLineWidth (0)
        self.SurfaceFrame.mainLayout.addWidget (self.SurfaceFrame.QHGroupBox2)

        self.SurfaceFrame.QVBox21 = QVBox (self.SurfaceFrame.QHGroupBox2)
        self.SurfaceFrame.QVBox23 = QVBox (self.SurfaceFrame.QHGroupBox2)
        self.SurfaceFrame.QVBox22 = QVBox (self.SurfaceFrame.QHGroupBox2)

        self.SurfaceFrame.QVBox21.setSpacing (5)
        self.SurfaceFrame.QVBox21.setMargin (0)
        self.SurfaceFrame.QVBox22.setSpacing (5)
        self.SurfaceFrame.QVBox22.setMargin (0)
        self.SurfaceFrame.QVBox23.setMargin (0)

        self.SurfaceFrame.QVBox23.setMinimumSize (50, 10)
        self.SurfaceFrame.QVBox23.setMaximumSize (50, 10)

        self.SurfaceFrame.log_kLabel = QLabel (self.SurfaceFrame.QVBox21)
        self.SurfaceFrame.log_kLabel.setText ('log k')
        self.SurfaceFrame.log_kLabel.resize (self.SurfaceFrame.log_kLabel.sizeHint ())

        self.SurfaceFrame.log_kLineEdit = QLineEdit (self.SurfaceFrame.QVBox22)
        self.SurfaceFrame.log_kLineEdit.setMinimumSize (65, 25)
        self.SurfaceFrame.log_kLineEdit.setMaximumSize (65, 25)
        QToolTip.add (self.SurfaceFrame.log_kLineEdit, 'log k: log of the equilibrium constant at 25 Celcius degrees')
        self.SurfaceFrame.log_kLineEdit.setText (str (Default_log_k))
           
#----------------------------------------------------------------------------------------------

        self.SurfaceFrame.QVGroupBox2 = QVGroupBox ('Surface Species Half Reaction', self.SurfaceFrame)
        self.SurfaceFrame.QVGroupBox2.setMidLineWidth (0)
        self.SurfaceFrame.QVGroupBox2.setMargin (10)

        self.SurfaceFrame.mainLayout.addWidget (self.SurfaceFrame.QVGroupBox2)

        self.SurfaceFrame.Table1 = QTable(self.SurfaceFrame.QVGroupBox2,'Table1')
        QToolTip.add (self.SurfaceFrame.Table1, 'Association reaction for Surface species')
        self.SurfaceFrame.Table1.setNumCols(self.SurfaceFrame.Table1.numCols() + 1)
        self.SurfaceFrame.Table1.horizontalHeader().setLabel(self.SurfaceFrame.Table1.numCols() - 1,  ('Species reactants'))
        self.SurfaceFrame.Table1.setNumCols(self.SurfaceFrame.Table1.numCols() + 1)
        self.SurfaceFrame.Table1.setColumnStretchable ( 1, 1)
        self.SurfaceFrame.Table1.setColumnStretchable ( 0, 1)
        self.SurfaceFrame.Table1.horizontalHeader().setLabel(self.SurfaceFrame.Table1.numCols() - 1,  ('Stoichiometric Coefficients'))

        i = 0
        while i < 12:
            self.SurfaceFrame.Table1.setNumRows(self.SurfaceFrame.Table1.numRows() + 1)
            self.SurfaceFrame.Table1.verticalHeader().setLabel(self.SurfaceFrame.Table1.numRows() - 1,  (''))
            i = i+1

        self.SurfaceFrame.Table1.setGeometry(QRect(40,240,400,104))
        self.SurfaceFrame.Table1.setFrameShape(QTable.WinPanel)
        self.SurfaceFrame.Table1.setLineWidth(2)
        self.SurfaceFrame.Table1.setMargin(6)
        self.SurfaceFrame.Table1.setMidLineWidth(0)
        self.SurfaceFrame.Table1.setNumRows(12)
        self.SurfaceFrame.Table1.setNumCols(2)
        self.SurfaceFrame.Table1.setShowGrid(1)
        self.SurfaceFrame.Table1.setRowMovingEnabled(1)
        self.SurfaceFrame.Table1.setColumnMovingEnabled(1)
        self.SurfaceFrame.Table1.setSelectionMode(QTable.Multi)
        self.SurfaceFrame.Table1.setMinimumHeight (150)
        self.SurfaceFrame.Table1.setMaximumHeight (150)

        if self.SurfaceFrame.log_kLineEdit.hasFocus ():
            self.SurfaceFrame.Table1.setText (0, 1, '1')

#----------------------------------------------------------------------------------------------

        self.SurfaceFrame.QHGroupBox3 = QHGroupBox (self.SurfaceFrame)
        self.SurfaceFrame.QHGroupBox3.setMargin (10)
        self.SurfaceFrame.QHGroupBox3.setMidLineWidth (0)
        self.SurfaceFrame.mainLayout.addWidget (self.SurfaceFrame.QHGroupBox3)

        self.SurfaceFrame.OKPB = QPushButton ('OK', self.SurfaceFrame.QHGroupBox3)
        self.SurfaceFrame.ChangeCreatePB = QPushButton ('Change / Create', self.SurfaceFrame.QHGroupBox3)
        self.SurfaceFrame.DeletePB = QPushButton ('Delete', self.SurfaceFrame.QHGroupBox3)
        self.SurfaceFrame.CancelPB = QPushButton ('Cancel', self.SurfaceFrame.QHGroupBox3)
        self.SurfaceFrame.HelpPB = QPushButton ('&Help', self.SurfaceFrame.QHGroupBox3)

        self.connect (self.SurfaceFrame.OKPB, SIGNAL ('clicked ()'), self.SurfaceFrame_ok)
        self.connect (self.SurfaceFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.SurfaceFrame_changecreate)
        self.connect (self.SurfaceFrame.DeletePB, SIGNAL ('clicked ()'), self.SurfaceFrame_delete)
        self.connect (self.SurfaceFrame.CancelPB, SIGNAL ('clicked ()'), self.SurfaceFrame_cancel)
        self.connect (self.SurfaceFrame.HelpPB, SIGNAL ('clicked ()'), self.SurfaceFrame_help)

        self.SurfaceFrame.show ()
            
#----------------------------------------------------------------------------------------------
#  Methods of the Surface Species Frame
#----------------------------------------------------------------------------------------------


    def SurfaceFrame_ok (self):

        self.SurfaceFrame.close ()

    def SurfaceFrame_changecreate (self):

        global SurfaceSpecies_list
        global SurfaceSpecies_Properties_list
        global SurfaceSpecies_Reactants_list
       
        global Database_SurfaceSpecies_list

        if (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ())) in Database_SurfaceSpecies_list:
            self.SurfaceSpecies_DatabaseMB = QMessageBox()
            self.SurfaceSpecies_DatabaseMB.setCaption ('Warning')
            self.SurfaceSpecies_DatabaseMB.setText ('\"'+str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ())+'\" already exists in the database.\nYou are not allowed to modify it.\nPlease rename the species you want to define.')
            self.SurfaceSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.SurfaceSpecies_DatabaseMB.show ()

        elif (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text()).replace(' ','') == ''):
            self.ExchangeSpecies_DatabaseMB = QMessageBox()
            self.ExchangeSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the surface species you want to define.")
            self.ExchangeSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeSpecies_DatabaseMB.show ()
        else:
            if (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text()) in SurfaceSpecies_list):
                index = SurfaceSpecies_list.index (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text()))
                SurfaceSpecies_Properties_list [index][0] = str (self.SurfaceFrame.log_kLineEdit.text ())
                i = 0
                while i < 12:
                    SurfaceSpecies_Reactants_list [index][i][0] = str (self.SurfaceFrame.Table1.text (i, 0))
                    SurfaceSpecies_Reactants_list [index][i][1] = str (self.SurfaceFrame.Table1.text (i, 1))
                    i = i+1
                j = 0
                while j < 12:
                    self.SurfaceFrame.Table1.clearCell (j,0)
                    self.SurfaceFrame.Table1.clearCell (j,1)
                    j = j+1
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.clear ()
                self.SurfaceFrame.log_kLineEdit.clear ()
                self.SurfaceFrame.log_kLineEdit.setText (str (Default_log_k))
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setFocus ()
            else:    
                SurfaceSpecies_list.append (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text()))
                Temp_list = []
                Temp_list.append (str (self.SurfaceFrame.log_kLineEdit.text ()))
                SurfaceSpecies_Properties_list.append (Temp_list)
                Temp_Species_list = []
                i = 0
                while i < 12:
                    Aux_Species_list = []
                    Aux_Species_list.append (str (self.SurfaceFrame.Table1.text (i, 0)))
                    Aux_Species_list.append (str (self.SurfaceFrame.Table1.text (i, 1)))

                    Temp_Species_list.append (Aux_Species_list)
                    i = i+1

                SurfaceSpecies_Reactants_list.append (Temp_Species_list)
                length = len (SurfaceSpecies_list) - 1
                self.SurfaceFrame.SurfaceSpeciesComboBox.insertItem (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text(), length)
                self.SurfaceFrame.SurfaceSpeciesComboBox.setCurrentItem (length)
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.clear ()
                self.SurfaceFrame.log_kLineEdit.clear ()
                j = 0
                while j < 12:
                    self.SurfaceFrame.Table1.clearCell (j,0)
                    self.SurfaceFrame.Table1.clearCell (j,1)
                    j = j+1
                self.SurfaceFrame.log_kLineEdit.setText (str (Default_log_k))
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setFocus ()

    def SurfaceFrame_delete (self):

        global SurfaceSpecies_list
        global SurfaceSpecies_Properties_list
        global SurfaceSpecies_Reactants_list
       
        global Database_SurfaceSpecies_list

        if ((self.SurfaceFrame.SurfaceSpeciesComboBox.count ()) != 0) and str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()) != '':
            if (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ())) in Database_SurfaceSpecies_list:
                self.SurfaceSpecies_DatabaseMB2 = QMessageBox()
                self.SurfaceSpecies_DatabaseMB2.setCaption ('Warning')
                self.SurfaceSpecies_DatabaseMB2.setText ('\"'+str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.SurfaceSpecies_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.SurfaceSpecies_DatabaseMB2.show ()
            else:
                index = SurfaceSpecies_list.index (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()))
                self.SurfaceFrame.SurfaceSpeciesComboBox.removeItem (self.SurfaceFrame.SurfaceSpeciesComboBox.currentItem ())
                del SurfaceSpecies_list [index]
                del SurfaceSpecies_Properties_list [index]
                del SurfaceSpecies_Reactants_list [index]
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.clear ()
                j = 0
                while j < 12:
                    self.SurfaceFrame.Table1.clearCell (j,0)
                    self.SurfaceFrame.Table1.clearCell (j,1)
                    j = j+1
                self.SurfaceFrame.log_kLineEdit.setText (str (Default_log_k))
                self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setFocus ()
            
                if ((self.SurfaceFrame.SurfaceSpeciesComboBox.count ()) != 0):
                    self.SurfaceFrame.SurfaceSpeciesComboBox.setCurrentItem (0)
        else:
            if ((self.SurfaceFrame.SurfaceSpeciesComboBox.count ()) == 0):
                self.SurfaceMB = QMessageBox()
                self.SurfaceMB.setCaption ('Error')
                self.SurfaceMB.setText ('There is no Surface Species.')
                self.SurfaceMB.setIcon (QMessageBox.Critical)
                self.SurfaceMB.show ()
            elif str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()) == '':
                self.SurfaceMB2 = QMessageBox()
                self.SurfaceMB2.setCaption ('Error')
                self.SurfaceMB2.setText ('You have to select a Surface Species.')
                self.SurfaceMB2.setIcon (QMessageBox.Critical)
                self.SurfaceMB2.show ()

    def SurfaceFrame_cancel (self):

        self.SurfaceFrame.close ()

    def SurfaceFrame_help (self):

        self.Help ()

    def SurfaceFrame_SurfaceSpeciesComboBox_activate (self):

        global Database_SurfaceSpecies_list
        global Database_SurfaceSpecies_Log_k_list
        global Database_SurfaceSpecies_Reactants_list

        i = 0
        while i < 12:
            self.SurfaceFrame.Table1.clearCell (i, 0)
            self.SurfaceFrame.Table1.clearCell (i, 1)
            i = i+1

        if str (self.SurfaceFrame.SurfaceSpeciesComboBox.currentText ()) in Database_SurfaceSpecies_list:
            self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setText (self.SurfaceFrame.SurfaceSpeciesComboBox.currentText ())
            index = Database_SurfaceSpecies_list.index (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()))
            self.SurfaceFrame.log_kLineEdit.setText (str (Database_SurfaceSpecies_Log_k_list [index]))     
            i = 0
            while i < len (Database_SurfaceSpecies_Reactants_list [index]):
                self.SurfaceFrame.Table1.setText (i, 0, str (Database_SurfaceSpecies_Reactants_list [index][i][0]))
                if float (Database_SurfaceSpecies_Reactants_list [index][i][1]) == int (float (Database_SurfaceSpecies_Reactants_list [index][i][1])):
                    self.SurfaceFrame.Table1.setText (i, 1, str (int (float (Database_SurfaceSpecies_Reactants_list [index][i][1]))))
                else:
                    self.SurfaceFrame.Table1.setText (i, 1, str (Database_SurfaceSpecies_Reactants_list [index][i][1]))             
                i = i+1
        else:
            self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.setText (self.SurfaceFrame.SurfaceSpeciesComboBox.currentText ())
            if str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()) in SurfaceSpecies_list:
                index = SurfaceSpecies_list.index (str (self.SurfaceFrame.SurfaceSpeciesFormulaLineEdit.text ()))                
                self.SurfaceFrame.log_kLineEdit.setText (str (SurfaceSpecies_Properties_list [index][0]))     
                i = 0
                while i < 12:
                    self.SurfaceFrame.Table1.setText (i, 0, str (SurfaceSpecies_Reactants_list [index][i][0]))
                    self.SurfaceFrame.Table1.setText (i, 1, str (SurfaceSpecies_Reactants_list [index][i][1]))
                    i = i+1
            


###########################################################################################
##                                                                                       ##
##                 (DATA) SURFACE COMPLEXATION SPECIES FRAME (END)                       ##
##                                                                                       ##
###########################################################################################




  
#==============================================================================================
#
#                      END OF THE CHEMISTRY BASE ADDENDA FRAMES
#
#==============================================================================================


















#==============================================================================================
#
#                 BEGINNING OF THE CHEMISTRY STATE DEFINITION FRAMES
#
#==============================================================================================





        
###########################################################################################
##                                                                                       ##
##                        AQUEOUS SOLUTION FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################



        
    def aqueous_solution (self):

        Aqueoussolution_comment = ' this frame is used to define the temperature, the pH,the pe and chemical composition \n'+\
	                          ' of a chemical state. The chemical state is defined through a list of element names \n'+\
				  ' or element valence names and their associated concentration in the solution' 
	## Frame building
        self.AqueousSolutionFrame = QFrame ()
        ## Frame title
        self.AqueousSolutionFrame.setCaption ('Aqueous Solution')
        setPosition (self.AqueousSolutionFrame)

        self.AqueousSolutionFrame.mainLayout = QVBoxLayout (self.AqueousSolutionFrame, 10, -1, 'AqueousSolutionFrame_mainLayout')
        self.AqueousSolutionFrame.mainLayout.setMargin (Marge)
        self.AqueousSolutionFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Aqueoussolution_comment = Comments ['Aqueous_Solution']

        self.AqueousSolutionFrame.QHGroupBoxA = QHGroupBox (self.AqueousSolutionFrame)
	QToolTip.add (self.AqueousSolutionFrame.QHGroupBoxA,Aqueoussolution_comment)

        self.AqueousSolutionFrame.QHGroupBoxA.setMargin (5)
        self.AqueousSolutionFrame.QHGroupBoxA.setMidLineWidth (0)
        self.AqueousSolutionFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBoxA)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QHGroupBox0 = QHGroupBox (self.AqueousSolutionFrame)

        self.AqueousSolutionFrame.QHGroupBox0.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox0.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox0)

        self.AqueousSolutionFrame.QVBox01 = QVBox (self.AqueousSolutionFrame.QHGroupBox0)
        self.AqueousSolutionFrame.QVBox03 = QVBox (self.AqueousSolutionFrame.QHGroupBox0)
        self.AqueousSolutionFrame.QVBox02 = QVBox (self.AqueousSolutionFrame.QHGroupBox0)

        self.AqueousSolutionFrame.QVBox01.setSpacing (5)
        self.AqueousSolutionFrame.QVBox01.setMargin (0)
        self.AqueousSolutionFrame.QVBox02.setSpacing (5)
        self.AqueousSolutionFrame.QVBox02.setMargin (0)

        self.AqueousSolutionFrame.QVBox03.setMinimumSize (10, 10)
        self.AqueousSolutionFrame.QVBox03.setMaximumSize (10, 10)

        self.AqueousSolutionFrame.AqueousStateNameLabel = QLabel ('Aqueous State Name', self.AqueousSolutionFrame.QVBox01)
        self.AqueousSolutionFrame.AqueousStateNameLabel.resize (self.AqueousSolutionFrame.AqueousStateNameLabel.sizeHint ())

        self.AqueousSolutionFrame.AqueousStateNameLineEdit = QLineEdit (self.AqueousSolutionFrame.QVBox01)
        self.AqueousSolutionFrame.AqueousStateNameLineEdit.setMinimumSize (200, 25)
        self.AqueousSolutionFrame.AqueousStateNameLineEdit.setMaximumSize (200, 25)
        self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
     ##      QToolTip.add ()

        self.AqueousSolutionFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.AqueousSolutionFrame.QVBox02)
        self.AqueousSolutionFrame.AqueousStatesLabel.resize (self.AqueousSolutionFrame.AqueousStatesLabel.sizeHint ())

        self.AqueousSolutionFrame.AqueousStatesComboBox = QComboBox (self.AqueousSolutionFrame.QVBox02)
	QToolTip.add (self.AqueousSolutionFrame.AqueousStatesComboBox,' list of aqueous states already defined by the user' )
        self.AqueousSolutionFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.AqueousSolutionFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.AqueousSolutionFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.AqueousStatesComboBox_activate)
     ##      QToolTip.add ()

        i = 0
        while i < len (AqueousStates_list):
            self.AqueousSolutionFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QHGroupBox1 = QHGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QHGroupBox1.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox1.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox1)

        self.AqueousSolutionFrame.TemperatureLabel = QLabel ('Temperature:', self.AqueousSolutionFrame.QHGroupBox1)
        self.AqueousSolutionFrame.TemperatureLabel.resize (self.AqueousSolutionFrame.TemperatureLabel.sizeHint ())

        self.AqueousSolutionFrame.TemperatureLineEdit = QLineEdit (self.AqueousSolutionFrame.QHGroupBox1)
        self.AqueousSolutionFrame.TemperatureLineEdit.setMinimumSize (70, 25)
        self.AqueousSolutionFrame.TemperatureLineEdit.setMaximumSize (70, 25)
        self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
     ##      QToolTip.add ()

        self.AqueousSolutionFrame.TemperatureUnitLabel = QLabel (Temperature_Unit, self.AqueousSolutionFrame.QHGroupBox1)
        self.AqueousSolutionFrame.TemperatureUnitLabel.resize (self.AqueousSolutionFrame.TemperatureUnitLabel.sizeHint ())

        self.AqueousSolutionFrame.TemperatureUnit2Label = QLabel ('Degrees', self.AqueousSolutionFrame.QHGroupBox1)
        self.AqueousSolutionFrame.TemperatureUnit2Label.resize (self.AqueousSolutionFrame.TemperatureUnit2Label.sizeHint ())

        self.AqueousSolutionFrame.TemperatureUnit3Label = QLabel (self.AqueousSolutionFrame.QHGroupBox1)
        self.AqueousSolutionFrame.TemperatureUnit3Label.setMinimumSize (200,25)
        self.AqueousSolutionFrame.TemperatureUnit3Label.setMaximumSize (200,25)

#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------
             
##----------pe & Eh----

        self.AqueousSolutionFrame.QHGroupBox9 = QHGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QHGroupBox9.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox9.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox9)

        self.AqueousSolutionFrame.peRadiobutton = QRadioButton (self.AqueousSolutionFrame.QHGroupBox9)
        self.connect (self.AqueousSolutionFrame.peRadiobutton, SIGNAL ('clicked ()'), self.pe_activated)

        self.AqueousSolutionFrame.peLabel = QLabel ('pe', self.AqueousSolutionFrame.QHGroupBox9)
        #self.AqueousSolutionFrame.peLabel.resize (self.AqueousSolutionFrame.peLabel.sizeHint ())

        self.AqueousSolutionFrame.peSpacerLabel = QLabel ('       ', self.AqueousSolutionFrame.QHGroupBox9)
        self.AqueousSolutionFrame.peSpacerLabel.setMinimumSize (15,10)
        self.AqueousSolutionFrame.peSpacerLabel.setMaximumSize (15,10)

        self.AqueousSolutionFrame.EhRadiobutton = QRadioButton (self.AqueousSolutionFrame.QHGroupBox9)
        self.connect (self.AqueousSolutionFrame.EhRadiobutton, SIGNAL ('clicked ()'), self.Eh_activated)

        self.AqueousSolutionFrame.EhLabel = QLabel ('Eh', self.AqueousSolutionFrame.QHGroupBox9)
        #self.AqueousSolutionFrame.EhLabel.resize (self.AqueousSolutionFrame.EhLabel.sizeHint ())

        self.AqueousSolutionFrame.SpacerLabel2 = QLabel ('       ', self.AqueousSolutionFrame.QHGroupBox9)
        self.AqueousSolutionFrame.SpacerLabel2.setMinimumSize (15,10)
        self.AqueousSolutionFrame.SpacerLabel2.setMaximumSize (15,10)

        self.AqueousSolutionFrame.SpacerQVBox911 = QVBox (self.AqueousSolutionFrame.QHGroupBox9)
        self.AqueousSolutionFrame.SpacerQVBox911.setMinimumSize (100, 10)
        self.AqueousSolutionFrame.SpacerQVBox911.setMaximumSize (100, 10)

        self.AqueousSolutionFrame.peValueLineEdit =  QLineEdit (self.AqueousSolutionFrame.QHGroupBox9)
        self.AqueousSolutionFrame.peValueLineEdit.setMinimumSize (150,25)
        self.AqueousSolutionFrame.peValueLineEdit.setMaximumSize (150,25)
        self.AqueousSolutionFrame.peValueLineEdit.setEnabled (0)
        QToolTip.add (self.AqueousSolutionFrame.peValueLineEdit, 'at 25 Celcius degrees, pe = 16.9 Eh  (pe = F*Eh / (log10 RT)).')

##------------------            


# debug_pe

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------
 
        self.AqueousSolutionFrame.QHGroupBox2 = QHGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QHGroupBox2.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox2.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox2)

        self.AqueousSolutionFrame.QVBox21 = QVBox (self.AqueousSolutionFrame.QHGroupBox2)
        self.AqueousSolutionFrame.QVBox22 = QVBox (self.AqueousSolutionFrame.QHGroupBox2)
        self.AqueousSolutionFrame.QVBox23 = QVBox (self.AqueousSolutionFrame.QHGroupBox2)

        self.AqueousSolutionFrame.pHValueLabel = QLabel ('pH', self.AqueousSolutionFrame.QVBox21)
        self.AqueousSolutionFrame.pHValueLabel.resize (self.AqueousSolutionFrame.pHValueLabel.sizeHint ())

        self.AqueousSolutionFrame.pHValueLineEdit = QLineEdit (self.AqueousSolutionFrame.QVBox22)
        self.AqueousSolutionFrame.pHValueLineEdit.setMinimumSize (80, 25)
        self.AqueousSolutionFrame.pHValueLineEdit.setMaximumSize (80, 25)
        self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
             ##      QToolTip.add ()

   #----------------------------------------------------------------------------------------------
   #  Button Group (beginning)
   #----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QButtonGroup1 = QButtonGroup ('pH', self.AqueousSolutionFrame.QHGroupBox2, 'AqueousSolutionFrame_QButtonGroup1' )
        self.AqueousSolutionFrame.QVBoxLayout10 = QVBoxLayout (self.AqueousSolutionFrame.QButtonGroup1, 10)
        self.AqueousSolutionFrame.QVBoxLayout10.setMargin (15)
        self.AqueousSolutionFrame.QVBoxLayout10.setSpacing (15)

        self.AqueousSolutionFrame.Organizer = range (3)

        self.AqueousSolutionFrame.Organizer[0] = QRadioButton (self.AqueousSolutionFrame.QButtonGroup1)
        self.AqueousSolutionFrame.Organizer[0].setText( 'Fix' )
        self.AqueousSolutionFrame.QVBoxLayout10.addWidget (self.AqueousSolutionFrame.Organizer[0])
        QToolTip.add (self.AqueousSolutionFrame.Organizer[0], 'This is to use to obtain the pH value\n'+\
							       'by adding moles of an acid or a base')
        self.connect (self.AqueousSolutionFrame.Organizer [0], SIGNAL ('clicked ()'), self.activate_pH_settings)

        self.AqueousSolutionFrame.Organizer[1] = QRadioButton (self.AqueousSolutionFrame.QButtonGroup1)
        self.AqueousSolutionFrame.Organizer[1].setText( 'Initial guess' )
        self.AqueousSolutionFrame.QVBoxLayout10.addWidget (self.AqueousSolutionFrame.Organizer[1])
        self.connect (self.AqueousSolutionFrame.Organizer [1], SIGNAL ('clicked ()'), self.disable_pH_settings)
        self.AqueousSolutionFrame.Organizer[1].setChecked (1)

        self.AqueousSolutionFrame.Organizer[2] = QRadioButton (self.AqueousSolutionFrame.QButtonGroup1)
        self.AqueousSolutionFrame.Organizer[2].setText( 'Charge' )
        self.AqueousSolutionFrame.QVBoxLayout10.addWidget (self.AqueousSolutionFrame.Organizer[2])
        self.connect (self.AqueousSolutionFrame.Organizer [2], SIGNAL ('clicked ()'), self.AqueousSolutionFrame_charge)

        self.AqueousSolutionFrame.QVBoxLayout10.activate()
        self.AqueousSolutionFrame.QButtonGroup1.adjustSize ()

   #----------------------------------------------------------------------------------------------
   #  Button Group (end)
   #----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QHGroupBox21 = QHGroupBox (self.AqueousSolutionFrame.QHGroupBox2)
        self.AqueousSolutionFrame.QHGroupBox21.setMargin (10)
   ##      self.AqueousSolutionFrame.QHGroupBox21.setMidLineWidth (0)
        self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)
        self.AqueousSolutionFrame.QHGroupBox21.setMinimumSize (230, 50)
        self.AqueousSolutionFrame.QHGroupBox21.setMaximumSize (230, 50)

        self.AqueousSolutionFrame.NumberOfMolLineEdit =  QLineEdit (self.AqueousSolutionFrame.QHGroupBox21)
        self.AqueousSolutionFrame.NumberOfMolLineEdit.setMinimumSize (65,25)
        self.AqueousSolutionFrame.NumberOfMolLineEdit.setMaximumSize (65,25)

        self.AqueousSolutionFrame.NumberOfMolLabel = QLabel ('moles of', self.AqueousSolutionFrame.QHGroupBox21)
        self.AqueousSolutionFrame.NumberOfMolLabel.resize (self.AqueousSolutionFrame.NumberOfMolLabel.sizeHint ())

        self.AqueousSolutionFrame.AqueousSpeciesLineEdit = QLineEdit (self.AqueousSolutionFrame.QHGroupBox21)
        self.AqueousSolutionFrame.AqueousSpeciesLineEdit.setMinimumSize (65,25)
        self.AqueousSolutionFrame.AqueousSpeciesLineEdit.setMaximumSize (65,25)
        QToolTip.add (self.AqueousSolutionFrame.AqueousSpeciesLineEdit, 'Note that the program can fail, if instead of an acid\na base is needed\nand vice versa')

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------


##----------electrical balance----

        self.AqueousSolutionFrame.QHGroupBox8 = QHGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QHGroupBox8.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox8.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox8)

        self.AqueousSolutionFrame.BalanceRadiobutton = QRadioButton (self.AqueousSolutionFrame.QHGroupBox8)
        self.connect (self.AqueousSolutionFrame.BalanceRadiobutton, SIGNAL ('clicked ()'), self.electrical_balance_activated)

        self.AqueousSolutionFrame.BalanceLabel = QLabel ('Electrical Balance', self.AqueousSolutionFrame.QHGroupBox8)
        self.AqueousSolutionFrame.BalanceLabel.resize (self.AqueousSolutionFrame.BalanceLabel.sizeHint ())

        self.AqueousSolutionFrame.SpacerQVBox811 = QVBox (self.AqueousSolutionFrame.QHGroupBox8)
        self.AqueousSolutionFrame.SpacerQVBox811.setMinimumSize (130, 10)
        self.AqueousSolutionFrame.SpacerQVBox811.setMaximumSize (130, 10)

        self.AqueousSolutionFrame.QHGroupBox81 = QHGroupBox (self.AqueousSolutionFrame.QHGroupBox8)
        self.AqueousSolutionFrame.QHGroupBox81.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox81.setEnabled (0)
        self.AqueousSolutionFrame.QHGroupBox81.setMinimumSize (230, 50)
        self.AqueousSolutionFrame.QHGroupBox81.setMaximumSize (230, 50)

        self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit =  QLineEdit (self.AqueousSolutionFrame.QHGroupBox81)
        self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.setMinimumSize (65,25)
        self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.setMaximumSize (65,25)

        self.AqueousSolutionFrame.BalanceNumberOfMolLabel = QLabel ('moles of', self.AqueousSolutionFrame.QHGroupBox81)
        self.AqueousSolutionFrame.BalanceNumberOfMolLabel.resize (self.AqueousSolutionFrame.BalanceNumberOfMolLabel.sizeHint ())

        self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit = QLineEdit (self.AqueousSolutionFrame.QHGroupBox81)
        self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.setMinimumSize (65,25)
        self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.setMaximumSize (65,25)

##---------------            


#----------------------------------------------------------------------------------------------
#  First Vertical Box (beginning): container for the table and its label
#----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QVGroupBox4 = QVGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QVGroupBox4.setMargin (10)
        self.AqueousSolutionFrame.QVGroupBox4.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QVGroupBox4)

        self.AqueousSolutionFrame.SolutionConcentrationsLabel = QLabel ('Solution Concentrations ('+str (Concentration_Unit)+')', self.AqueousSolutionFrame.QVGroupBox4)
        self.AqueousSolutionFrame.SolutionConcentrationsLabel.resize (self.AqueousSolutionFrame.SolutionConcentrationsLabel.sizeHint ())

        self.AqueousSolutionFrame.Table1 = QTable(self.AqueousSolutionFrame.QVGroupBox4,'Table1')
        self.AqueousSolutionFrame.Table1.setNumCols(self.AqueousSolutionFrame.Table1.numCols() + 1)
        self.AqueousSolutionFrame.Table1.horizontalHeader().setLabel(self.AqueousSolutionFrame.Table1.numCols() - 1,  ('Aqueous Species'))
        self.AqueousSolutionFrame.Table1.setNumCols(self.AqueousSolutionFrame.Table1.numCols() + 1)
        self.AqueousSolutionFrame.Table1.setColumnStretchable ( 1, 1)
        self.AqueousSolutionFrame.Table1.setColumnStretchable ( 0, 1)
        self.AqueousSolutionFrame.Table1.horizontalHeader().setLabel(self.AqueousSolutionFrame.Table1.numCols() - 1,  ('Concentration'))
        self.AqueousSolutionFrame.Table1.setMinimumHeight (150)
        self.AqueousSolutionFrame.Table1.setMaximumHeight (150)

        i = 0
        while i < 15:
            self.AqueousSolutionFrame.Table1.setNumRows(self.AqueousSolutionFrame.Table1.numRows() + 1)
            self.AqueousSolutionFrame.Table1.verticalHeader().setLabel(self.AqueousSolutionFrame.Table1.numRows() - 1,  (''))
            i = i+1
          
        self.AqueousSolutionFrame.Table1.setGeometry(QRect(40,240,400,104))
        self.AqueousSolutionFrame.Table1.setFrameShape(QTable.WinPanel)
        self.AqueousSolutionFrame.Table1.setLineWidth(2)
        self.AqueousSolutionFrame.Table1.setMargin(6)
        self.AqueousSolutionFrame.Table1.setMidLineWidth(0)
        self.AqueousSolutionFrame.Table1.setNumRows(15)
        self.AqueousSolutionFrame.Table1.setNumCols(2)
        self.AqueousSolutionFrame.Table1.setShowGrid(1)
        self.AqueousSolutionFrame.Table1.setRowMovingEnabled(1)
        self.AqueousSolutionFrame.Table1.setColumnMovingEnabled(1)
        self.AqueousSolutionFrame.Table1.setSelectionMode(QTable.Multi)

#----------------------------------------------------------------------------------------------
#  First Vertical Box (end)
#----------------------------------------------------------------------------------------------

  
#----------------------------------------------------------------------------------------------
#  Fifth Horizontal Box (beginning): container for the buttons
#----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.QHGroupBox4 = QHGroupBox (self.AqueousSolutionFrame)
        self.AqueousSolutionFrame.QHGroupBox4.setMargin (10)
        self.AqueousSolutionFrame.QHGroupBox4.setMidLineWidth (0)
        self.AqueousSolutionFrame.mainLayout.addWidget (self.AqueousSolutionFrame.QHGroupBox4)

        self.AqueousSolutionFrame.OKPB = QPushButton ('OK', self.AqueousSolutionFrame.QHGroupBox4)
        self.AqueousSolutionFrame.ChangeCreatePB = QPushButton ('Change / Create', self.AqueousSolutionFrame.QHGroupBox4)
        self.AqueousSolutionFrame.EquilibratePB = QPushButton ('Equilibrate', self.AqueousSolutionFrame.QHGroupBox4)
        self.AqueousSolutionFrame.DeletePB = QPushButton ('Delete', self.AqueousSolutionFrame.QHGroupBox4)
        self.AqueousSolutionFrame.CancelPB = QPushButton ('Cancel', self.AqueousSolutionFrame.QHGroupBox4)
        self.AqueousSolutionFrame.HelpPB = QPushButton ('&Help', self.AqueousSolutionFrame.QHGroupBox4)            

        self.connect (self.AqueousSolutionFrame.OKPB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_ok)
        self.connect (self.AqueousSolutionFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_changecreate)
        self.connect (self.AqueousSolutionFrame.EquilibratePB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_equilibrate)
        self.connect (self.AqueousSolutionFrame.DeletePB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_delete)
        self.connect (self.AqueousSolutionFrame.CancelPB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_cancel)
        self.connect (self.AqueousSolutionFrame.HelpPB, SIGNAL ('clicked ()'), self.AqueousSolutionFrame_help)

#----------------------------------------------------------------------------------------------
#  Fifth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.AqueousSolutionFrame.show ()

#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  Methods of the Aqueous Solution Frame    
#----------------------------------------------------------------------------------------------

## to exit saving changes
    def AqueousSolutionFrame_ok (self):

        self.AqueousSolutionFrame.close ()

## to change or create an aqueous solution
    def AqueousSolutionFrame_changecreate (self):

        global AqueousStates_list
        global AqueousStates_Properties_list
        global AqueousStates_Species_list

        if (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()) in AqueousStates_list):

            index = AqueousStates_list.index (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))
            AqueousStates_Properties_list [index][0] = str (self.AqueousSolutionFrame.TemperatureLineEdit.text ())
            AqueousStates_Properties_list [index][1] = str (self.AqueousSolutionFrame.pHValueLineEdit.text ())
            AqueousStates_Properties_list [index][2] = str (self.AqueousSolutionFrame.peValueLineEdit.text ())
            if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                AqueousStates_Properties_list [index][9] = 'pe'
            elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                AqueousStates_Properties_list [index][9] = 'Eh'
            else:
                AqueousStates_Properties_list [index][9] = ''    
            i = 0
            while i < 15:
                AqueousStates_Species_list [index][i][0] = str (self.AqueousSolutionFrame.Table1.text (i, 0))
                AqueousStates_Species_list [index][i][1] = str (self.AqueousSolutionFrame.Table1.text (i, 1))
                i = i+1  
                          
            if self.AqueousSolutionFrame.Organizer[0].isChecked ():
                AqueousStates_Properties_list [index][3] = 'Fix'
                AqueousStates_Properties_list [index][4] = str (self.AqueousSolutionFrame.NumberOfMolLineEdit.text ())
                pH_test = float (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
                AqueousStates_Properties_list [index][5] = str (self.AqueousSolutionFrame.AqueousSpeciesLineEdit.text ())
            elif self.AqueousSolutionFrame.Organizer[1].isChecked ():
                AqueousStates_Properties_list [index][3] = 'Initial_Guess'
                AqueousStates_Properties_list [index][4] = ''
                AqueousStates_Properties_list [index][5] = ''
            else:
                AqueousStates_Properties_list [index][3] = 'Charge'
                AqueousStates_Properties_list [index][4] = ''
                AqueousStates_Properties_list [index][5] = ''
            if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                AqueousStates_Properties_list [index][6] = 'Balance'
                AqueousStates_Properties_list [index][7] = str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ())
                AqueousStates_Properties_list [index][8] = str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ())
            else:
                AqueousStates_Properties_list [index][6] = ''
                AqueousStates_Properties_list [index][7] = ''
                AqueousStates_Properties_list [index][8] = ''
            self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()      
            j = 0
            while j < 15:
                self.AqueousSolutionFrame.Table1.clearCell (j,0)
                self.AqueousSolutionFrame.Table1.clearCell (j,1)
                j = j+1
            self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
            self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
            self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
            self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
            self.electrical_balance_released ()
            self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
            self.AqueousSolutionFrame.peValueLineEdit.clear ()
            self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
            self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
            self.AqueousSolutionFrame.Organizer[1].setChecked (1)
            self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
            self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
	                    
        elif (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text()).replace(' ','') == ''):
            self.ExchangeSpecies_DatabaseMB = QMessageBox()
            self.ExchangeSpecies_DatabaseMB.setCaption ('Warning')
            self.ExchangeSpecies_DatabaseMB.setText ("Empty strings are not allowed \nPlease rename the aqueous solution you want to define.")
            self.ExchangeSpecies_DatabaseMB.setIcon (QMessageBox.Warning)
            self.ExchangeSpecies_DatabaseMB.show ()
	else:
            AqueousStates_list.append (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))

            Temp_list = []
            Temp_list.append (str (self.AqueousSolutionFrame.TemperatureLineEdit.text ()))   
            Temp_list.append (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
            Temp_list.append (str (self.AqueousSolutionFrame.peValueLineEdit.text ()))

            Temp_Species_list = []
            i = 0
            while i < 15:
                Aux_Species_list = []
                Aux_Species_list.append (str (self.AqueousSolutionFrame.Table1.text (i, 0)))
                Aux_Species_list.append (str (self.AqueousSolutionFrame.Table1.text (i, 1)))
                i = i+1
        	Temp_Species_list.append (Aux_Species_list)
            AqueousStates_Species_list.append (Temp_Species_list)

            self.AqueousSolutionFrame.AqueousStatesComboBox.insertItem (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text (), self.AqueousSolutionFrame.AqueousStatesComboBox.currentItem ())
            self.AqueousSolutionFrame.AqueousStatesComboBox.setCurrentItem (0)

            if self.AqueousSolutionFrame.Organizer[0].isChecked ():
                pH_test = float (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
                Temp_list.append ('Fix')
                Temp_list.append (str (self.AqueousSolutionFrame.NumberOfMolLineEdit.text ()))
                Temp_list.append (str (self.AqueousSolutionFrame.AqueousSpeciesLineEdit.text ()))
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                     Temp_list.append ('Balance')
                     Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                     Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                     Temp_list.append ('')
                     Temp_list.append ('')
                     Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 

                self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()      
                self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
                self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
                self.electrical_balance_released ()
                j = 0
                while j < 15:
                    self.AqueousSolutionFrame.Table1.clearCell (j,0)
                    self.AqueousSolutionFrame.Table1.clearCell (j,1)
                    j = j+1
                self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
                self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
                self.AqueousSolutionFrame.peValueLineEdit.clear ()
                self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
                self.AqueousSolutionFrame.Organizer[1].setChecked (1)
                self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
                self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
            elif self.AqueousSolutionFrame.Organizer[1].isChecked ():
                Temp_list.append ('Initial_Guess')
                Temp_list.append ('')
                Temp_list.append ('')
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                    Temp_list.append ('Balance')
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                    Temp_list.append ('')
                    Temp_list.append ('')
                    Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 

                self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()      
                j = 0
                while j < 15:
                    self.AqueousSolutionFrame.Table1.clearCell (j,0)
                    self.AqueousSolutionFrame.Table1.clearCell (j,1)
                    j = j+1
                self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
                self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
                self.electrical_balance_released ()
                self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
                self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
                self.AqueousSolutionFrame.peValueLineEdit.clear ()
                self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
                self.AqueousSolutionFrame.Organizer[1].setChecked (1)
                self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
                self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
            else:
                Temp_list.append ('Charge')
                Temp_list.append ('')
                Temp_list.append ('')
                #  test inutile car il y a exclusion mutuelle entre "charge" et "electrical balance"
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                    Temp_list.append ('Balance')
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                    Temp_list.append ('')
                    Temp_list.append ('')
                    Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 

                self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()      
                j = 0
                while j < 15:
                    self.AqueousSolutionFrame.Table1.clearCell (j,0)
                    self.AqueousSolutionFrame.Table1.clearCell (j,1)
                    j = j+1
                self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
                self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
                self.electrical_balance_released ()
                self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
                self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
                self.AqueousSolutionFrame.peValueLineEdit.clear ()
                self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
                self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
                self.AqueousSolutionFrame.Organizer[1].setChecked (1)
                self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
                self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
            AqueousStates_Properties_list.append (Temp_list)

        self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()      
        j = 0
        while j < 15:
            self.AqueousSolutionFrame.Table1.clearCell (j,0)
            self.AqueousSolutionFrame.Table1.clearCell (j,1)
            j = j+1
        self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
        self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
        self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
        self.electrical_balance_released ()
        self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
        self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
        self.AqueousSolutionFrame.peValueLineEdit.clear ()
        self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
        self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
        self.AqueousSolutionFrame.Organizer[1].setChecked (1)
        self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
        self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
        self.pe_released ()
        self.AqueousSolutionFrame.peRadiobutton.setOn (0)
        self.AqueousSolutionFrame.EhRadiobutton.setOn (0)
        
    def AqueousSolutionFrame_equilibrate (self):

        global AqueousState_to_equilibrate

        global AqueousStates_list
        global AqueousStates_Properties_list
        global AqueousStates_Species_list

        if (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()) in AqueousStates_list):

            index = AqueousStates_list.index (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))
            AqueousStates_Properties_list [index][0] = str (self.AqueousSolutionFrame.TemperatureLineEdit.text ())
            AqueousStates_Properties_list [index][1] = str (self.AqueousSolutionFrame.pHValueLineEdit.text ())
            AqueousStates_Properties_list [index][2] = str (self.AqueousSolutionFrame.peValueLineEdit.text ())
            try:
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    AqueousStates_Properties_list [index][9] = 'pe'
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    AqueousStates_Properties_list [index][9] = 'Eh'
                else:
                    AqueousStates_Properties_list [index][9] = ''   
            except:
                pass 
            i = 0
            while i < 15:
                AqueousStates_Species_list [index][i][0] = str (self.AqueousSolutionFrame.Table1.text (i, 0))
                AqueousStates_Species_list [index][i][1] = str (self.AqueousSolutionFrame.Table1.text (i, 1))
                i = i+1  
                          
            if self.AqueousSolutionFrame.Organizer[0].isChecked ():
                AqueousStates_Properties_list [index][3] = 'Fix'
                AqueousStates_Properties_list [index][4] = str (self.AqueousSolutionFrame.NumberOfMolLineEdit.text ())
                pH_test = float (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
                AqueousStates_Properties_list [index][5] = str (self.AqueousSolutionFrame.AqueousSpeciesLineEdit.text ())
            elif self.AqueousSolutionFrame.Organizer[1].isChecked ():
                AqueousStates_Properties_list [index][3] = 'Initial_Guess'
                AqueousStates_Properties_list [index][4] = ''
                AqueousStates_Properties_list [index][5] = ''
            else:
                AqueousStates_Properties_list [index][3] = 'Charge'
                AqueousStates_Properties_list [index][4] = ''
                AqueousStates_Properties_list [index][5] = ''
            if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                AqueousStates_Properties_list [index][6] = 'Balance'
                AqueousStates_Properties_list [index][7] = str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ())
                AqueousStates_Properties_list [index][8] = str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ())
            else:
                AqueousStates_Properties_list [index][6] = ''
                AqueousStates_Properties_list [index][7] = ''
                AqueousStates_Properties_list [index][8] = ''
	else:
            AqueousStates_list.append (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))

            Temp_list = []
            Temp_list.append (str (self.AqueousSolutionFrame.TemperatureLineEdit.text ()))   
            Temp_list.append (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
            Temp_list.append (str (self.AqueousSolutionFrame.peValueLineEdit.text ()))

            Temp_Species_list = []
            i = 0
            while i < 15:
                Aux_Species_list = []
                Aux_Species_list.append (str (self.AqueousSolutionFrame.Table1.text (i, 0)))
                Aux_Species_list.append (str (self.AqueousSolutionFrame.Table1.text (i, 1)))
                i = i+1
        	Temp_Species_list.append (Aux_Species_list)
            AqueousStates_Species_list.append (Temp_Species_list)

            self.AqueousSolutionFrame.AqueousStatesComboBox.insertItem (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ())
            self.AqueousSolutionFrame.AqueousStatesComboBox.setCurrentItem (len (AqueousStates_Species_list)-1)

            if self.AqueousSolutionFrame.Organizer[0].isChecked ():
                pH_test = float (str (self.AqueousSolutionFrame.pHValueLineEdit.text ()))
                Temp_list.append ('Fix')
                Temp_list.append (str (self.AqueousSolutionFrame.NumberOfMolLineEdit.text ()))
                Temp_list.append (str (self.AqueousSolutionFrame.AqueousSpeciesLineEdit.text ()))
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                     Temp_list.append ('Balance')
                     Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                     Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                     Temp_list.append ('')
                     Temp_list.append ('')
                     Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 
            elif self.AqueousSolutionFrame.Organizer[1].isChecked ():
                Temp_list.append ('Initial_Guess')
                Temp_list.append ('')
                Temp_list.append ('')
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                    Temp_list.append ('Balance')
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                    Temp_list.append ('')
                    Temp_list.append ('')
                    Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 
            else:
                Temp_list.append ('Charge')
                Temp_list.append ('')
                Temp_list.append ('')
                #  test inutile car il y a exclusion mutuelle entre "charge" et "electrical balance"
                if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
                    Temp_list.append ('Balance')
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.text ()))
                    Temp_list.append (str (self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.text ()))
                else:
                    Temp_list.append ('')
                    Temp_list.append ('')
                    Temp_list.append ('')
                if self.AqueousSolutionFrame.peRadiobutton.isOn ():
                    Temp_list.append ('pe')
                elif self.AqueousSolutionFrame.EhRadiobutton.isOn ():
                    Temp_list.append ('Eh')
                else:
                    Temp_list.append ('') 
            AqueousStates_Properties_list.append (Temp_list)

        AqueousState_to_equilibrate = str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ())
        self.exe_chemistry ()

## to delete the Aqueous Solution selected in the combo box and associated species and concentrations 
    def AqueousSolutionFrame_delete (self):

        global AqueousStates_list
        global AqueousStates_Properties_list
        global AqueousStates_Species_list
        
        if ((self.AqueousSolutionFrame.AqueousStatesComboBox.count ()) != 0) and (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ())) != '':
            index = AqueousStates_list.index (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))
            self.AqueousSolutionFrame.AqueousStatesComboBox.removeItem (self.AqueousSolutionFrame.AqueousStatesComboBox.currentItem ())
            del AqueousStates_list [index]
            del AqueousStates_Properties_list [index]
            del AqueousStates_Species_list [index]
            self.AqueousSolutionFrame.AqueousStateNameLineEdit.clear ()
            self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
            self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
            self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()
            self.electrical_balance_released ()
            j = 0
            while j < 15:
                self.AqueousSolutionFrame.Table1.clearCell (j,0)
                self.AqueousSolutionFrame.Table1.clearCell (j,1)
                j = j+1
            self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Default_Temperature))
            self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Default_pH))
            self.AqueousSolutionFrame.peValueLineEdit.setText (str (AqueousStates_Default_pe))
            self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
            self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear () 
            self.AqueousSolutionFrame.AqueousStateNameLineEdit.setFocus ()
            self.AqueousSolutionFrame.Organizer[1].setChecked (1)
            self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)            
            self.pe_released ()
            self.AqueousSolutionFrame.peRadiobutton.setOn (0)
            self.AqueousSolutionFrame.EhRadiobutton.setOn (0)
            
            if ((self.AqueousSolutionFrame.AqueousStatesComboBox.count ()) != 0):
                self.AqueousSolutionFrame.AqueousStatesComboBox.setCurrentItem (0)
        else:
	    if ((self.AqueousSolutionFrame.AqueousStatesComboBox.count ()) == 0):
                self.AqueousSolutionMB = QMessageBox()
                self.AqueousSolutionMB.setCaption ('Error')
                self.AqueousSolutionMB.setText ('There is no Aqueous State.')
                self.AqueousSolutionMB.setIcon (QMessageBox.Critical)
                self.AqueousSolutionMB.show ()
            elif (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ())) == '':
                self.AqueousSolutionMB2 = QMessageBox()
                self.AqueousSolutionMB2.setCaption ('Error')
                self.AqueousSolutionMB2.setText ('You have to select an Aqueous State.')
                self.AqueousSolutionMB2.setIcon (QMessageBox.Critical)
                self.AqueousSolutionMB2.show ()

## to close this window discarding changes
    def AqueousSolutionFrame_cancel (self):

        self.AqueousSolutionFrame.close ()

## to display specific help to users concerning this window
    def AqueousSolutionFrame_help (self):

        self.Help ()

    ## voir ci-dessous pour les conversions de types necessaires au traitement des donnees

    def AqueousStatesComboBox_activate (self):

        global AqueousStates_list
        global AqueousStates_Properties_list
        global AqueousStates_Species_list

        self.AqueousSolutionFrame.AqueousStateNameLineEdit.setText (self.AqueousSolutionFrame.AqueousStatesComboBox.currentText ())

        i = 0
        state = ''
        while i < len (AqueousStates_list):
            if str (AqueousStates_list [i]) == str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()):
	        s1 = str (AqueousStates_list [i])+':'
		j = 0
		while j < len (AqueousStates_Species_list [i]):
		    if str (AqueousStates_Species_list [i][j][0]) != '' or str (AqueousStates_Species_list [i][j][1]) != '':
		        s1 = s1 + '\n\t'+str (AqueousStates_Species_list [i][j][0])+'\t'+str (AqueousStates_Species_list [i][j][1])+' \t'
                    else:
		        pass
		    j = j+1
                state = state + s1
            else:
                pass
            i = i+1

        QToolTip.add (self.AqueousSolutionFrame.AqueousStateNameLineEdit, state+'\n')

        index = AqueousStates_list.index (str (self.AqueousSolutionFrame.AqueousStateNameLineEdit.text ()))

        self.AqueousSolutionFrame.TemperatureLineEdit.setText (str (AqueousStates_Properties_list [index][0]))
        self.AqueousSolutionFrame.pHValueLineEdit.setText (str (AqueousStates_Properties_list [index][1]))
        try:
            if str (AqueousStates_Properties_list [index][2]) != '' and str (AqueousStates_Properties_list [index][9]) == 'pe':
                self.AqueousSolutionFrame.peRadiobutton.setOn (1)
                self.pe_activated ()
                self.AqueousSolutionFrame.peValueLineEdit.setText (str (AqueousStates_Properties_list [index][2]))
            elif str (AqueousStates_Properties_list [index][2]) != '' and str (AqueousStates_Properties_list [index][9]) == 'Eh':
                self.AqueousSolutionFrame.EhRadiobutton.setOn (1)
                self.Eh_activated ()
                self.AqueousSolutionFrame.peValueLineEdit.setText (str (AqueousStates_Properties_list [index][2]))
            else:
                self.AqueousSolutionFrame.peValueLineEdit.clear ()
                self.AqueousSolutionFrame.EhRadiobutton.setOn (0)
                self.AqueousSolutionFrame.peRadiobutton.setOn (0)
                self.AqueousSolutionFrame.peValueLineEdit.setEnabled (0)                
        except:
            self.AqueousSolutionFrame.peValueLineEdit.clear ()
            self.AqueousSolutionFrame.EhRadiobutton.setOn (0)
            self.AqueousSolutionFrame.peRadiobutton.setOn (0)
            self.AqueousSolutionFrame.peValueLineEdit.setEnabled (0)
        if str (AqueousStates_Properties_list [index][3]) == 'Fix':
            self.AqueousSolutionFrame.Organizer[0].setChecked (1)
            self.AqueousSolutionFrame.QHGroupBox21.setEnabled (1)
            self.AqueousSolutionFrame.NumberOfMolLineEdit.setText (str (AqueousStates_Properties_list [index][4]))
            self.AqueousSolutionFrame.AqueousSpeciesLineEdit.setText (str (AqueousStates_Properties_list [index][5]))        
        elif str (AqueousStates_Properties_list [index][3]) == 'Initial_Guess':
            self.AqueousSolutionFrame.Organizer[1].setChecked (1)
            self.disable_pH_settings ()
        elif str (AqueousStates_Properties_list [index][3]) == 'Charge':
            self.AqueousSolutionFrame.Organizer[2].setChecked (1)
            self.disable_pH_settings ()
        if str (AqueousStates_Properties_list [index][6]) == 'Balance':
            self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (1)
            self.AqueousSolutionFrame.QHGroupBox81.setEnabled (1)
            self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.setText (str (AqueousStates_Properties_list [index][7]))
            self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.setText (str (AqueousStates_Properties_list [index][8]))
        else:
            self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
            self.electrical_balance_released ()

        i = 0
        while i < 15:
            self.AqueousSolutionFrame.Table1.setText (i, 0, str (AqueousStates_Species_list [index][i][0]))
            self.AqueousSolutionFrame.Table1.setText (i, 1, str (AqueousStates_Species_list [index][i][1]))
            i = i+1

    def activate_pH_settings (self):

        self.AqueousSolutionFrame.QHGroupBox21.setEnabled (1)
        self.AqueousSolutionFrame.NumberOfMolLineEdit.setFocus ()

    def disable_pH_settings (self):

        self.AqueousSolutionFrame.QHGroupBox21.setEnabled (0)
        self.AqueousSolutionFrame.NumberOfMolLineEdit.clear ()
        self.AqueousSolutionFrame.AqueousSpeciesLineEdit.clear ()
	
    def AqueousSolutionFrame_charge (self):

        if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
            self.AqueousSolution_charge_MB = QMessageBox()
            self.AqueousSolution_charge_MB.setCaption ('Error')
            self.AqueousSolution_charge_MB.setText ('\"Electrical Balance\" has already been checked.\nThis option could not be checked at the same time.')
            self.AqueousSolution_charge_MB.setIcon (QMessageBox.Critical)
            self.AqueousSolution_charge_MB.show ()
            self.AqueousSolutionFrame.Organizer [1].setChecked (1)
        else:     
            self.disable_pH_settings ()

    def electrical_balance_activated (self):

        if self.AqueousSolutionFrame.BalanceRadiobutton.isOn ():
            if self.AqueousSolutionFrame.Organizer [2].isChecked ():
                self.AqueousSolution_charge_MB = QMessageBox()
                self.AqueousSolution_charge_MB.setCaption ('Error')
                self.AqueousSolution_charge_MB.setText ('\"Charge\" has already been checked.\nThis option could not be checked at the same time.')
                self.AqueousSolution_charge_MB.setIcon (QMessageBox.Critical)
                self.AqueousSolution_charge_MB.show ()
                self.AqueousSolutionFrame.BalanceRadiobutton.setChecked (0)
            else:
                self.AqueousSolutionFrame.QHGroupBox81.setEnabled (1)
                self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.setFocus ()
        else:
            self.electrical_balance_released ()

    def electrical_balance_released (self):

        self.AqueousSolutionFrame.QHGroupBox81.setEnabled (0)
        self.AqueousSolutionFrame.BalanceNumberOfMolLineEdit.clear ()
        self.AqueousSolutionFrame.BalanceAqueousSpeciesLineEdit.clear ()

    def pe_activated (self):
     
        self.AqueousSolutionFrame.EhRadiobutton.setOn (0)
        if self.AqueousSolutionFrame.peRadiobutton.isOn ():
            self.AqueousSolutionFrame.peValueLineEdit.setEnabled (1)
            self.AqueousSolutionFrame.peValueLineEdit.setFocus ()
            self.AqueousSolutionFrame.peValueLineEdit.setText (str (AqueousStates_Default_pe))
        else:
            self.pe_released ()

    def pe_released (self):
       
        self.AqueousSolutionFrame.peValueLineEdit.setEnabled (0)
        self.AqueousSolutionFrame.peValueLineEdit.clear ()
        
    def Eh_activated (self):
    
        self.AqueousSolutionFrame.peRadiobutton.setOn (0)
        if self.AqueousSolutionFrame.EhRadiobutton.isOn ():
            self.AqueousSolutionFrame.peValueLineEdit.setEnabled (1)
            self.AqueousSolutionFrame.peValueLineEdit.setFocus ()
            self.AqueousSolutionFrame.peValueLineEdit.setText (str (AqueousStates_Default_Eh))
        else:
            self.pe_released ()

            

###########################################################################################
##                                                                                       ##
##                        AQUEOUS SOLUTION FRAME (END)                                   ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                    EQUILIBRIUM PHASES FRAME (BEGINNING)                               ##
##                                                                                       ##
###########################################################################################



    def equilibrium_phases (self):
       
        self.EquilibriumPhasesFrame = QFrame ()
        self.EquilibriumPhasesFrame.setCaption ('Equilibrium Phases')
        setPosition (self.EquilibriumPhasesFrame)

        self.EquilibriumPhasesFrame.mainLayout = QVBoxLayout (self.EquilibriumPhasesFrame, 10, -1, 'EquilibriumPhases_mainLayout')
        self.EquilibriumPhasesFrame.mainLayout.setMargin (Marge)
        self.EquilibriumPhasesFrame.mainLayout.setSpacing (Space)


#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        EquilibriumPhases_comment = Comments ['Equilibrium_Phases']

        self.EquilibriumPhasesFrame.QHGroupBoxA = QHGroupBox (self.EquilibriumPhasesFrame)
        QToolTip.add (self.EquilibriumPhasesFrame.QHGroupBoxA,EquilibriumPhases_comment)

        self.EquilibriumPhasesFrame.QHGroupBoxA.setMargin (5)
        self.EquilibriumPhasesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.EquilibriumPhasesFrame.QHGroupBox0 = QHGroupBox (self.EquilibriumPhasesFrame)
        self.EquilibriumPhasesFrame.QHGroupBox0.setMargin (10)
        self.EquilibriumPhasesFrame.QHGroupBox0.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBox0)
            
        self.EquilibriumPhasesFrame.QVBox01 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox0)
        self.EquilibriumPhasesFrame.QVBox03 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox0)
        self.EquilibriumPhasesFrame.QVBox02 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox0)
            
        self.EquilibriumPhasesFrame.QVBox01.setSpacing (5)
        self.EquilibriumPhasesFrame.QVBox01.setMargin (0)
        self.EquilibriumPhasesFrame.QVBox02.setSpacing (5)
        self.EquilibriumPhasesFrame.QVBox02.setMargin (0)

        self.EquilibriumPhasesFrame.QVBox03.setMinimumSize (10, 10)
        self.EquilibriumPhasesFrame.QVBox03.setMaximumSize (10, 10)

        self.EquilibriumPhasesFrame.AqueousStateLabel = QLabel ('Aqueous State', self.EquilibriumPhasesFrame.QVBox01)
        self.EquilibriumPhasesFrame.AqueousStateLabel.resize (self.EquilibriumPhasesFrame.AqueousStateLabel.sizeHint ())

        self.EquilibriumPhasesFrame.AqueousStateLineEdit = QLineEdit (self.EquilibriumPhasesFrame.QVBox01)
        self.EquilibriumPhasesFrame.AqueousStateLineEdit.setMinimumSize (200, 25)
        self.EquilibriumPhasesFrame.AqueousStateLineEdit.setMaximumSize (200, 25)
        self.EquilibriumPhasesFrame.AqueousStateLineEdit.setFocus ()
         ##      QToolTip.add ()

        self.EquilibriumPhasesFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.EquilibriumPhasesFrame.QVBox02)
        self.EquilibriumPhasesFrame.AqueousStatesLabel.resize (self.EquilibriumPhasesFrame.AqueousStatesLabel.sizeHint ())

        self.EquilibriumPhasesFrame.AqueousStatesComboBox = QComboBox (self.EquilibriumPhasesFrame.QVBox02)
        self.EquilibriumPhasesFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.EquilibriumPhasesFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.EquilibriumPhasesFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.EquilibriumPhases_AqueousStatesComboBox_activate)
        i = 0
        while i < len (AqueousStates_list):
            self.EquilibriumPhasesFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1
         ##      QToolTip.add ()
 
#debug
   #    QToolTip.add (self.EquilibriumPhasesFrame.AqueousStatesComboBox, 'Already associated: '+str (AqueousStates_MineralPhases_list))

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.EquilibriumPhasesFrame.QHGroupBox1 = QHGroupBox (self.EquilibriumPhasesFrame)
        self.EquilibriumPhasesFrame.QHGroupBox1.setMargin (10)
        self.EquilibriumPhasesFrame.QHGroupBox1.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBox1)

        self.EquilibriumPhasesFrame.QVBox11 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox1)
        self.EquilibriumPhasesFrame.QVBox13 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox1)
        self.EquilibriumPhasesFrame.QVBox12 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox1)
            
        self.EquilibriumPhasesFrame.QVBox11.setSpacing (5)
        self.EquilibriumPhasesFrame.QVBox11.setMargin (0)
        self.EquilibriumPhasesFrame.QVBox12.setSpacing (5)
        self.EquilibriumPhasesFrame.QVBox12.setMargin (0)

        self.EquilibriumPhasesFrame.QVBox13.setMinimumSize (10, 10)
        self.EquilibriumPhasesFrame.QVBox13.setMaximumSize (10, 10)
            
        self.EquilibriumPhasesFrame.MineralPhaseLabel = QLabel ('Mineral Phase', self.EquilibriumPhasesFrame.QVBox11)
        self.EquilibriumPhasesFrame.MineralPhaseLabel.resize (self.EquilibriumPhasesFrame.MineralPhaseLabel.sizeHint ())
            
        self.EquilibriumPhasesFrame.MineralPhaseLineEdit = QLineEdit (self.EquilibriumPhasesFrame.QVBox11)
        self.EquilibriumPhasesFrame.MineralPhaseLineEdit.setMinimumSize (200, 25)
        self.EquilibriumPhasesFrame.MineralPhaseLineEdit.setMaximumSize (200, 25)
         ##      QToolTip.add ()

        self.EquilibriumPhasesFrame.MineralPhaseListLabel = QLabel ('List of Mineral Phases', self.EquilibriumPhasesFrame.QVBox12)
        self.EquilibriumPhasesFrame.MineralPhaseListLabel.resize (self.EquilibriumPhasesFrame.MineralPhaseListLabel.sizeHint ())
            
        self.EquilibriumPhasesFrame.MineralPhaseListComboBox = QComboBox (self.EquilibriumPhasesFrame.QVBox12)
        self.EquilibriumPhasesFrame.MineralPhaseListComboBox.setMinimumSize (200, 25)
        self.EquilibriumPhasesFrame.MineralPhaseListComboBox.setMaximumSize (200, 25)
        self.connect (self.EquilibriumPhasesFrame.MineralPhaseListComboBox, SIGNAL ('activated (int)'), self.EquilibriumPhasesFrame_MineralPhaseListComboBox_activate) 
        j = 0
        while j < len (MineralPhases_list):
            self.EquilibriumPhasesFrame.MineralPhaseListComboBox.insertItem (MineralPhases_list [j])
            j = j+1
        i = 0
        while i < len (Database_Phases_Names_list):
            if Database_Phases_Names_list [i].find ('(g)') == -1:
                self.EquilibriumPhasesFrame.MineralPhaseListComboBox.insertItem (Database_Phases_Names_list [i])
            else:
                pass
            i = i+1

#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------
 
        self.EquilibriumPhasesFrame.QHGroupBox2 = QHGroupBox (self.EquilibriumPhasesFrame)
        self.EquilibriumPhasesFrame.QHGroupBox2.setMargin (10)
        self.EquilibriumPhasesFrame.QHGroupBox2.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBox2)
            
        self.EquilibriumPhasesFrame.QVBox21 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox2)
        self.EquilibriumPhasesFrame.QVBox23 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox2)
        self.EquilibriumPhasesFrame.QVBox22 = QVBox (self.EquilibriumPhasesFrame.QHGroupBox2)

        self.EquilibriumPhasesFrame.QVBox21.setMargin (0)
        self.EquilibriumPhasesFrame.QVBox21.setSpacing (5)
        self.EquilibriumPhasesFrame.QVBox22.setMargin (0)
        self.EquilibriumPhasesFrame.QVBox22.setSpacing (5)

        self.EquilibriumPhasesFrame.QVBox23.setMinimumSize (10, 10)
        self.EquilibriumPhasesFrame.QVBox23.setMinimumSize (10, 10)
             
        self.EquilibriumPhasesFrame.SaturationIndexLabel = QLabel ('Saturation Index', self.EquilibriumPhasesFrame.QVBox21)
        self.EquilibriumPhasesFrame.SaturationIndexLabel.resize (self.EquilibriumPhasesFrame.SaturationIndexLabel.sizeHint ())

        self.EquilibriumPhasesFrame.SaturationIndexLineEdit = QLineEdit (self.EquilibriumPhasesFrame.QVBox21)
        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setMinimumSize (200, 25)
        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setMaximumSize (200, 25)        
        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setText ('0.0')        
        
        QToolTip.add (self.EquilibriumPhasesFrame.SaturationIndexLineEdit,' Target saturation index for the pure phase in the aqueous phase' )

        self.EquilibriumPhasesFrame.AmountLabel = QLabel ('Amount (moles)', self.EquilibriumPhasesFrame.QVBox22)
        self.EquilibriumPhasesFrame.AmountLabel.resize (self.EquilibriumPhasesFrame.AmountLabel.sizeHint ())

        self.EquilibriumPhasesFrame.AmountLineEdit = QLineEdit (self.EquilibriumPhasesFrame.QVBox22)
        self.EquilibriumPhasesFrame.AmountLineEdit.setMinimumSize (200, 25) 
        self.EquilibriumPhasesFrame.AmountLineEdit.setMaximumSize (200, 25)

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.EquilibriumPhasesFrame.QHGroupBox4 = QHGroupBox (self.EquilibriumPhasesFrame)
        self.EquilibriumPhasesFrame.QHGroupBox4.setMargin (10)
        self.EquilibriumPhasesFrame.QHGroupBox4.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBox4)

        self.EquilibriumPhasesFrame.DissolveOnlyCheckBox = QCheckBox (' Dissolve only', self.EquilibriumPhasesFrame.QHGroupBox4)
        self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------
    
        self.EquilibriumPhasesFrame.QHGroupBox3 = QHGroupBox (self.EquilibriumPhasesFrame)
        self.EquilibriumPhasesFrame.QHGroupBox3.setMargin (10)
        self.EquilibriumPhasesFrame.QHGroupBox3.setMidLineWidth (0)
        self.EquilibriumPhasesFrame.mainLayout.addWidget (self.EquilibriumPhasesFrame.QHGroupBox3)

        self.EquilibriumPhasesFrame.OKPB = QPushButton ('OK', self.EquilibriumPhasesFrame.QHGroupBox3)
        self.EquilibriumPhasesFrame.ChangeCreatePB = QPushButton ('Change / Create', self.EquilibriumPhasesFrame.QHGroupBox3)
        self.EquilibriumPhasesFrame.DeletePB = QPushButton ('Delete', self.EquilibriumPhasesFrame.QHGroupBox3)
        self.EquilibriumPhasesFrame.CancelPB = QPushButton ('Cancel', self.EquilibriumPhasesFrame.QHGroupBox3)
        self.EquilibriumPhasesFrame.HelpPB = QPushButton ('&Help', self.EquilibriumPhasesFrame.QHGroupBox3)            

        self.connect (self.EquilibriumPhasesFrame.OKPB, SIGNAL ('clicked ()'), self.EquilibriumPhasesFrame_ok)
        self.connect (self.EquilibriumPhasesFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.EquilibriumPhasesFrame_changecreate)
        self.connect (self.EquilibriumPhasesFrame.DeletePB,  SIGNAL ('clicked ()'), self.EquilibriumPhasesFrame_delete)
        self.connect (self.EquilibriumPhasesFrame.CancelPB, SIGNAL ('clicked ()'), self.EquilibriumPhasesFrame_cancel)
        self.connect (self.EquilibriumPhasesFrame.HelpPB, SIGNAL ('clicked ()'), self.EquilibriumPhasesFrame_help)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.EquilibriumPhasesFrame.show ()
        
#----------------------------------------------------------------------------------------------
#  Methods
#----------------------------------------------------------------------------------------------

    def EquilibriumPhasesFrame_ok (self):

        self.EquilibriumPhasesFrame.close ()

    def EquilibriumPhasesFrame_changecreate (self):

        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list

        States = []
        i = 0
        while i < len (AqueousStates_list):
            AS_tmp = str (AqueousStates_list [i])
            if AS_tmp in States:
                pass
            else:
                States.append (AS_tmp)
            i = i+1
        Temp_list = []
        if str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()) == '' or str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()) not in States:
            self.EquilibriumPhases_ChangeCreate_NoAS_MB = QMessageBox()
            self.EquilibriumPhases_ChangeCreate_NoAS_MB.setCaption ('Error')
            self.EquilibriumPhases_ChangeCreate_NoAS_MB.setText ('You have to select an Aqueous State.')
            self.EquilibriumPhases_ChangeCreate_NoAS_MB.setIcon (QMessageBox.Critical)
            self.EquilibriumPhases_ChangeCreate_NoAS_MB.show ()

        else:
            if str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ()) == '':
                self.EquilibriumPhases_ChangeCreate_NoMP_MB = QMessageBox()
                self.EquilibriumPhases_ChangeCreate_NoMP_MB.setCaption ('Error')
                self.EquilibriumPhases_ChangeCreate_NoMP_MB.setText ('You have to select a Mineral Phase.')
                self.EquilibriumPhases_ChangeCreate_NoMP_MB.setIcon (QMessageBox.Critical)
                self.EquilibriumPhases_ChangeCreate_NoMP_MB.show ()            
            else:
                Temp_list.append (str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()))
                Temp_list.append (str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ()))

        if Temp_list in AqueousStates_MineralPhases_list:
	
            index = AqueousStates_MineralPhases_list.index (Temp_list)
	    
            if str (self.EquilibriumPhasesFrame.SaturationIndexLineEdit.text ()) == '':
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB = QMessageBox()
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setCaption ('Warning')
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setText ('The Saturation index has not been set.\nDefault will be 0.0')
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setIcon (QMessageBox.Warning)
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.show ()
                self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setText ('0.0')
                self.EquilibriumPhasesFrame.AmountLineEdit.setFocus ()
            if str (self.EquilibriumPhasesFrame.AmountLineEdit.text ()) == '':
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB = QMessageBox()
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setCaption ('Error')
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setText ('Amount has not been set.')
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setIcon (QMessageBox.Critical)
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.show ()
                self.EquilibriumPhasesFrame.AmountLineEdit.setFocus ()
            else:
                AqueousStates_MineralPhases_Properties_list [index][0] = str (self.EquilibriumPhasesFrame.SaturationIndexLineEdit.text ())
                AqueousStates_MineralPhases_Properties_list [index][1] = str (self.EquilibriumPhasesFrame.AmountLineEdit.text ())
                if self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.isChecked ():
                    try:
		        AqueousStates_MineralPhases_Properties_list [index][2] = "Dissolve Only"
                    except:
		        AqueousStates_MineralPhases_Properties_list [index].append ("Dissolve Only")
                else:
                    try:
                        AqueousStates_MineralPhases_Properties_list [index][2] = ""
                    except:
		        AqueousStates_MineralPhases_Properties_list [index].append ("")
                #self.EquilibriumPhasesFrame.AqueousStateLineEdit.clear ()
                self.EquilibriumPhasesFrame.MineralPhaseLineEdit.clear ()
                self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                self.EquilibriumPhasesFrame.AqueousStateLineEdit.setFocus ()
                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                
        elif Temp_list != []:
	
            Temp_Properties_list = []
            if str (self.EquilibriumPhasesFrame.SaturationIndexLineEdit.text ()) == '':
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB = QMessageBox()
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setCaption ('Warning')
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setText ('The Saturation index has not been set.\nDefault will be 0.0')
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.setIcon (QMessageBox.Warning)
                self.EquilibriumPhases_ChangeCreate_NoSaturationIndex_MB.show ()
                self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setText ('0.0')
                self.EquilibriumPhasesFrame.AmountLineEdit.setFocus ()
            if str (self.EquilibriumPhasesFrame.AmountLineEdit.text ()) == '':
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB = QMessageBox()
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setCaption ('Error')
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setText ('Amount has not been set.')
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.setIcon (QMessageBox.Critical)
                self.EquilibriumPhases_ChangeCreate_NoAmount_MB.show ()
                self.EquilibriumPhasesFrame.AmountLineEdit.setFocus ()
            else:
                Temp_Properties_list.append (str (self.EquilibriumPhasesFrame.SaturationIndexLineEdit.text ()))
                Temp_Properties_list.append (str (self.EquilibriumPhasesFrame.AmountLineEdit.text ()))
                if self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.isChecked ():
                    Temp_Properties_list.append ("Dissolve Only")
                else:
                    Temp_Properties_list.append ("")
                AqueousStates_MineralPhases_list.append (Temp_list)
                AqueousStates_MineralPhases_Properties_list.append (Temp_Properties_list)

                #self.EquilibriumPhasesFrame.AqueousStateLineEdit.clear ()
                self.EquilibriumPhasesFrame.MineralPhaseLineEdit.clear ()
                self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                self.EquilibriumPhasesFrame.AqueousStateLineEdit.setFocus ()
                self.EquilibriumPhases_AqueousStatesComboBox_activate ()
          #       #QToolTip.remove (self.EquilibriumPhasesFrame.AqueousStateLineEdit)

##
## hereafter is a line to get an ordered and easy readable list of mineral components
##        
	AqueousStates_MineralPhases_list.sort()
	print AqueousStates_MineralPhases_list
	QToolTip.remove (self.EquilibriumPhasesFrame.MineralPhaseLineEdit)
	
    def EquilibriumPhasesFrame_delete (self):

        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list

        if len (AqueousStates_MineralPhases_list) == 0:
            self.EquilibriumPhases_Empty_list_MB = QMessageBox()
            self.EquilibriumPhases_Empty_list_MB.setCaption ('Error')
            self.EquilibriumPhases_Empty_list_MB.setText ('There is no association between\nan aqueous state and a mineral.\nYou can\'t delete anything.')
            self.EquilibriumPhases_Empty_list_MB.setIcon (QMessageBox.Critical)
            self.EquilibriumPhases_Empty_list_MB.show ()                    
            
        else:
            test_list = []
            test_list.append (str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()))
            test_list.append (str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ()))

            if (((self.EquilibriumPhasesFrame.AqueousStatesComboBox.count ()) != 0) and ((self.EquilibriumPhasesFrame.MineralPhaseListComboBox.count ()) != 0)):
                if test_list [0] != '':

                    i = 0
                    again = 1
                    while i < len (AqueousStates_MineralPhases_list) and again:

                        if str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ()) == '':
                            self.EquilibriumPhases_NoMinMB = QMessageBox()
                            self.EquilibriumPhases_NoMinMB.setCaption ('Error')
                            self.EquilibriumPhases_NoMinMB.setText ('You have to select a Mineral Phase.')
                            self.EquilibriumPhases_NoMinMB.setIcon (QMessageBox.Critical)
                            self.EquilibriumPhases_NoMinMB.show ()                    

                        elif test_list in AqueousStates_MineralPhases_list:
                            index = AqueousStates_MineralPhases_list.index (test_list)
                            again = 0
                            del AqueousStates_MineralPhases_list [index]
                            del AqueousStates_MineralPhases_Properties_list [index]
                            self.EquilibriumPhasesFrame.AqueousStateLineEdit.clear ()
                            self.EquilibriumPhasesFrame.MineralPhaseLineEdit.clear ()
                            self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                            self.EquilibriumPhasesFrame.AmountLineEdit.clear ()

                        else:
                            self.EquilibriumPhases_NotFindMB = QMessageBox()
                            self.EquilibriumPhases_NotFindMB.setCaption ('Error')
                            self.EquilibriumPhases_NotFindMB.setText ('The Association you are trying\nto delete doesn\'t exist.')
                            self.EquilibriumPhases_NotFindMB.setIcon (QMessageBox.Critical)
                            self.EquilibriumPhases_NotFindMB.show ()                            
                        i = i+1
                else:
                    if str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()) == '':
                        self.EquilibriumPhases_SelectASMB = QMessageBox()
                        self.EquilibriumPhases_SelectASMB.setCaption ('Error')
                        self.EquilibriumPhases_SelectASMB.setText ('You have to select an Aqueous State.')
                        self.EquilibriumPhases_SelectASMB.setIcon (QMessageBox.Critical)
                        self.EquilibriumPhases_SelectASMB.show ()

            else:
                if (self.EquilibriumPhasesFrame.AqueousStatesComboBox.count ()) == 0: 
                    self.EquilibriumPhases_NoASMB = QMessageBox()
                    self.EquilibriumPhases_NoASMB.setCaption ('Error')
                    self.EquilibriumPhases_NoASMB.setText ('There is no Aqueous State.')
                    self.EquilibriumPhases_NoASMB.setIcon (QMessageBox.Critical)
                    self.EquilibriumPhases_NoASMB.show ()

                elif (self.EquilibriumPhasesFrame.MineralPhaseListComboBox.count ()) == 0:
                    self.EquilibriumPhases_MMB = QMessageBox()
                    self.EquilibriumPhases_MMB.setCaption ('Error')
                    self.EquilibriumPhases_MMB.setText ('There is no Mineral Phase.')
                    self.EquilibriumPhases_MMB.setIcon (QMessageBox.Critical)
                    self.EquilibriumPhases_MMB.show ()

        QToolTip.remove (self.EquilibriumPhasesFrame.AqueousStateLineEdit)
        QToolTip.remove (self.EquilibriumPhasesFrame.MineralPhaseLineEdit)

    def EquilibriumPhasesFrame_cancel (self):

        self.EquilibriumPhasesFrame.close ()

    def EquilibriumPhasesFrame_help (self):

        self.Help ()

    def EquilibriumPhases_AqueousStatesComboBox_activate (self):

        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list

        self.EquilibriumPhasesFrame.AqueousStateLineEdit.setText (self.EquilibriumPhasesFrame.AqueousStatesComboBox.currentText ())
        i = 0
        already_associated = ''
        while i < len (AqueousStates_MineralPhases_list):
            if str (AqueousStates_MineralPhases_list [i][0]) == str (self.EquilibriumPhasesFrame.AqueousStatesComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_MineralPhases_list [i][1])+' \t'+ str (AqueousStates_MineralPhases_Properties_list [i][0])+'\t'+ str (AqueousStates_MineralPhases_Properties_list [i][1])
            else:
                pass
            i = i+1

        QToolTip.add (self.EquilibriumPhasesFrame.AqueousStateLineEdit, 'Already associated with '+ str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ())+':'+already_associated)
        
        if str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_MineralPhases_list) and again:      
                
                if (str (AqueousStates_MineralPhases_list [i][0])) == (str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ())):
                    if (str (AqueousStates_MineralPhases_list [i][1])) == (str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ())):
                        again = 0
                        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setText (str (AqueousStates_MineralPhases_Properties_list [i][0]))
                        self.EquilibriumPhasesFrame.AmountLineEdit.setText (str (AqueousStates_MineralPhases_Properties_list [i][1]))
                        try:
			    if str (AqueousStates_MineralPhases_Properties_list [i][2]) == "Dissolve Only":
                                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (1)
                            else:
                                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
	                except:
			    self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                    else:
                        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                        self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                        self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                else:
                    self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                    self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                    self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                i = i+1

    def EquilibriumPhasesFrame_MineralPhaseListComboBox_activate (self):

        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list

        self.EquilibriumPhasesFrame.MineralPhaseLineEdit.setText (self.EquilibriumPhasesFrame.MineralPhaseListComboBox.currentText ())
        i = 0
        already_associated = ''
        while i < len (AqueousStates_MineralPhases_list):
            if str (AqueousStates_MineralPhases_list [i][1]) == str (self.EquilibriumPhasesFrame.MineralPhaseListComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_MineralPhases_list [i][0])+' \t'+ str (AqueousStates_MineralPhases_Properties_list [i][0])+'\t'+ str (AqueousStates_MineralPhases_Properties_list [i][1])
            else:
                pass
            i = i+1

        QToolTip.add (self.EquilibriumPhasesFrame.MineralPhaseLineEdit, 'Already associated with '+ str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ())+':'+already_associated)

        if str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_MineralPhases_list) and again:
                if (str (AqueousStates_MineralPhases_list [i][1])) == (str (self.EquilibriumPhasesFrame.MineralPhaseLineEdit.text ())):
                    if (str (AqueousStates_MineralPhases_list [i][0])) == (str (self.EquilibriumPhasesFrame.AqueousStateLineEdit.text ())):
                        again = 0
                        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.setText (str (AqueousStates_MineralPhases_Properties_list [i][0]))
                        self.EquilibriumPhasesFrame.AmountLineEdit.setText (str (AqueousStates_MineralPhases_Properties_list [i][1]))
                        try:
			    if str (AqueousStates_MineralPhases_Properties_list [i][2]) == "Dissolve Only":
                                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (1)
                            else:
                                self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
			except:
			    self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                    else:
                        self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                        self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                        self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                else:
                    self.EquilibriumPhasesFrame.SaturationIndexLineEdit.clear ()
                    self.EquilibriumPhasesFrame.AmountLineEdit.clear ()
                    self.EquilibriumPhasesFrame.DissolveOnlyCheckBox.setChecked (0)
                i = i+1
        

###########################################################################################
##                                                                                       ##
##                          EQUILIBRIUM PHASES FRAME (END)                               ##
##                                                                                       ##
###########################################################################################



###########################################################################################
##                                                                                       ##
##                          ION EXCHANGE FRAME (BEGINNING)                               ##
##                                                                                       ##
###########################################################################################



    def ion_exchange_state (self):
       
        self.IonExchangeStateFrame = QFrame ()
        self.IonExchangeStateFrame.setCaption ('Ion Exchange Composition')
        setPosition (self.IonExchangeStateFrame)

        self.IonExchangeStateFrame.mainLayout = QVBoxLayout (self.IonExchangeStateFrame, 10, -1, 'IonExchangeState_mainLayout')
        self.IonExchangeStateFrame.mainLayout.setMargin (Marge)
        self.IonExchangeStateFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        IonExchangeState_comment = Comments ['Exchange']

        self.IonExchangeStateFrame.QHGroupBoxA = QHGroupBox (self.IonExchangeStateFrame)
	QToolTip.add (self.IonExchangeStateFrame.QHGroupBoxA,IonExchangeState_comment)

        self.IonExchangeStateFrame.QHGroupBoxA.setMargin (5)
        self.IonExchangeStateFrame.QHGroupBoxA.setMidLineWidth (0)
        self.IonExchangeStateFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBoxA)
#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox0 = QHGroupBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox0.setMargin (10)
        self.IonExchangeStateFrame.QHGroupBox0.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox0)
            
        self.IonExchangeStateFrame.QVBox01 = QVBox (self.IonExchangeStateFrame.QHGroupBox0)
        self.IonExchangeStateFrame.QVBox03 = QVBox (self.IonExchangeStateFrame.QHGroupBox0)
        self.IonExchangeStateFrame.QVBox02 = QVBox (self.IonExchangeStateFrame.QHGroupBox0)
            
        self.IonExchangeStateFrame.QVBox01.setSpacing (5)
        self.IonExchangeStateFrame.QVBox01.setMargin (0)
        self.IonExchangeStateFrame.QVBox02.setSpacing (5)
        self.IonExchangeStateFrame.QVBox02.setMargin (0)

        self.IonExchangeStateFrame.QVBox03.setMinimumSize (10, 10)
        self.IonExchangeStateFrame.QVBox03.setMaximumSize (10, 10)

        self.IonExchangeStateFrame.AqueousStateLabel = QLabel ('Aqueous State', self.IonExchangeStateFrame.QVBox01)
        self.IonExchangeStateFrame.AqueousStateLabel.resize (self.IonExchangeStateFrame.AqueousStateLabel.sizeHint ())

        self.IonExchangeStateFrame.AqueousStateLineEdit = QLineEdit (self.IonExchangeStateFrame.QVBox01)
        self.IonExchangeStateFrame.AqueousStateLineEdit.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.AqueousStateLineEdit.setMaximumSize (200, 25)
        self.IonExchangeStateFrame.AqueousStateLineEdit.setFocus ()
         ##      QToolTip.add ()

        self.IonExchangeStateFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.IonExchangeStateFrame.QVBox02)
        self.IonExchangeStateFrame.AqueousStatesLabel.resize (self.IonExchangeStateFrame.AqueousStatesLabel.sizeHint ())

        self.IonExchangeStateFrame.AqueousStatesComboBox = QComboBox (self.IonExchangeStateFrame.QVBox02)
        self.IonExchangeStateFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.IonExchangeStateFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.IonExchangeState_AqueousStatesComboBox_activate)
        i = 0
        while i < len (AqueousStates_list):
            self.IonExchangeStateFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1
        
         ##      QToolTip.add ()

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox1 = QHGroupBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox1.setMargin (10)
        self.IonExchangeStateFrame.QHGroupBox1.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox1)

        self.IonExchangeStateFrame.QVBox11 = QVBox (self.IonExchangeStateFrame.QHGroupBox1)
        self.IonExchangeStateFrame.QVBox13 = QVBox (self.IonExchangeStateFrame.QHGroupBox1)
        self.IonExchangeStateFrame.QVBox12 = QVBox (self.IonExchangeStateFrame.QHGroupBox1)

        self.IonExchangeStateFrame.QVBox11.setSpacing (5)
        self.IonExchangeStateFrame.QVBox11.setMargin (0)
        self.IonExchangeStateFrame.QVBox12.setSpacing (5)
        self.IonExchangeStateFrame.QVBox12.setMargin (0)

        self.IonExchangeStateFrame.QVBox13.setMinimumSize (10, 10)
        self.IonExchangeStateFrame.QVBox13.setMaximumSize (10, 10)

        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLabel = QLabel ('Exchange Species to associate', self.IonExchangeStateFrame.QVBox11)
        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLabel.resize (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLabel.sizeHint ())

        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit = QLineEdit (self.IonExchangeStateFrame.QVBox11)
        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.setMaximumSize (200, 25)
         ##      QToolTip.add ()

        self.IonExchangeStateFrame.ExchangeSpeciesListLabel = QLabel ('List of Exchange Species', self.IonExchangeStateFrame.QVBox12)
        self.IonExchangeStateFrame.ExchangeSpeciesListLabel.resize (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLabel.sizeHint ())

        self.IonExchangeStateFrame.ExchangeSpeciesListComboBox = QComboBox (self.IonExchangeStateFrame.QVBox12)
        self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.setMaximumSize (200, 25)
        self.connect (self.IonExchangeStateFrame.ExchangeSpeciesListComboBox, SIGNAL ('activated (int)'), self.IonExchangeStateFrame_ExchangeSpeciesListComboBox_activate)

        i = 0
        while i < len (ExchangeMasterSpecies_list):
            self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.insertItem (ExchangeMasterSpecies_list [i])
            i = i+1
        i = 0
        while i < len (ExchangeSpecies_list):
            self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.insertItem (ExchangeSpecies_list [i])
            i = i+1
        i = 0	    
        while i < len (Database_ExchangeMasterSpecies_list):
            self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.insertItem (Database_ExchangeMasterSpecies_list [i])
            i = i+1

# debug_18_11_2005
        #i = 0
        #while i < len (Database_Exchange_Species_list):
        #    self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.insertItem (Database_Exchange_Species_list [i])
        #    i = i+1
	    
           
#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox2 = QHBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox2.setMargin (0)
        self.IonExchangeStateFrame.QHGroupBox2.setSpacing (10)
        self.IonExchangeStateFrame.QHGroupBox2.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox2)

        self.IonExchangeStateFrame.QButtonGroup1 = QButtonGroup ('', self.IonExchangeStateFrame.QHGroupBox2, 'IonExchangeFrame_QButtonGroup1' )
        self.IonExchangeStateFrame.QButtonGroup1.setMinimumSize (270, 80)
        self.IonExchangeStateFrame.QButtonGroup1.setMaximumSize (270, 80)
        
        self.IonExchangeStateFrame.QVBoxLayout10 = QVBoxLayout (self.IonExchangeStateFrame.QButtonGroup1, 10)
        self.IonExchangeStateFrame.QVBoxLayout10.setMargin (15)
        self.IonExchangeStateFrame.QVBoxLayout10.setSpacing (20)

        self.IonExchangeStateFrame.Organizer = range (2)

        self.IonExchangeStateFrame.Organizer[0] = QRadioButton (self.IonExchangeStateFrame.QButtonGroup1)
        self.IonExchangeStateFrame.Organizer[0].setChecked (1)
        self.IonExchangeStateFrame.Organizer[0].setText ('Total Concentration')
        self.connect (self.IonExchangeStateFrame.Organizer[0], SIGNAL ('clicked ()'), self.IonExchangeStateFrame_EquilibriumPhases_disable)
        self.IonExchangeStateFrame.QVBoxLayout10.addWidget (self.IonExchangeStateFrame.Organizer[0])
              
        self.IonExchangeStateFrame.Organizer[1] = QRadioButton (self.IonExchangeStateFrame.QButtonGroup1)
        self.IonExchangeStateFrame.Organizer[1].setText('Total Conc. Relative to a Mineral')
        self.connect (self.IonExchangeStateFrame.Organizer[1], SIGNAL ('clicked ()'), self.IonExchangeStateFrame_EquilibriumPhases_enable)
        self.IonExchangeStateFrame.QVBoxLayout10.addWidget (self.IonExchangeStateFrame.Organizer[1])

        self.IonExchangeStateFrame.QButtonGroup1.adjustSize ()
        self.IonExchangeStateFrame.QVBoxLayout10.activate()

        self.IonExchangeStateFrame.QVGroupBox21 = QVGroupBox (self.IonExchangeStateFrame.QHGroupBox2)
        self.IonExchangeStateFrame.QVGroupBox21.setMargin (0)
        
        self.IonExchangeStateFrame.AmountLabel = QLabel ('Amount (Moles)', self.IonExchangeStateFrame.QVGroupBox21)
        self.IonExchangeStateFrame.AmountLabel.setMinimumSize (100, 25)
        self.IonExchangeStateFrame.AmountLabel.setMaximumSize (100, 25)

        self.IonExchangeStateFrame.AmountLineEdit = QLineEdit (self.IonExchangeStateFrame.QVGroupBox21)
        self.IonExchangeStateFrame.AmountLineEdit.setMinimumSize (80, 25) 
        self.IonExchangeStateFrame.AmountLineEdit.setMaximumSize (80, 25)

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------
 

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox3 = QHGroupBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox3.setMargin (0)
        self.IonExchangeStateFrame.QHGroupBox3.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox3)
            
        self.IonExchangeStateFrame.QVBox31 = QVBox (self.IonExchangeStateFrame.QHGroupBox3)
        self.IonExchangeStateFrame.QVBox33 = QVBox (self.IonExchangeStateFrame.QHGroupBox3)
        self.IonExchangeStateFrame.QVBox32 = QVBox (self.IonExchangeStateFrame.QHGroupBox3)

        self.IonExchangeStateFrame.QVBox31.setMargin (0)
        self.IonExchangeStateFrame.QVBox31.setSpacing (5)
        self.IonExchangeStateFrame.QVBox32.setMargin (0)
        self.IonExchangeStateFrame.QVBox32.setSpacing (5)

        self.IonExchangeStateFrame.QVBox33.setMinimumSize (10, 10)
        self.IonExchangeStateFrame.QVBox33.setMaximumSize (10, 10)
        
        self.IonExchangeStateFrame.PurePhaseNameLabel = QLabel ('Pure Phase Name', self.IonExchangeStateFrame.QVBox31)
        self.IonExchangeStateFrame.PurePhaseNameLabel.resize (self.IonExchangeStateFrame.PurePhaseNameLabel.sizeHint ())

        self.IonExchangeStateFrame.PurePhaseNameLineEdit = QLineEdit (self.IonExchangeStateFrame.QVBox31)
        self.IonExchangeStateFrame.PurePhaseNameLineEdit.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.PurePhaseNameLineEdit.setMaximumSize (200, 25)
      
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLabel = QLabel ('Ratio of Exchange Species', self.IonExchangeStateFrame.QVBox32)
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLabel.resize (self.IonExchangeStateFrame.RatioOfExchangeSpeciesLabel.sizeHint ())

        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit = QLineEdit (self.IonExchangeStateFrame.QVBox32)
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.setMinimumSize (200, 25)
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.setMaximumSize (200, 25)

        self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox4 = QHGroupBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox4.setMargin (0)
        self.IonExchangeStateFrame.QHGroupBox4.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox4)

        self.IonExchangeStateFrame.EquilibrateCheckBox = QCheckBox ('Equilibrate', self.IonExchangeStateFrame.QHGroupBox4)
      
#----------------------------------------------------------------------------------------------
#  fifth Horizontal Box (beginning): container for the buttons
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.QHGroupBox5 = QHGroupBox (self.IonExchangeStateFrame)
        self.IonExchangeStateFrame.QHGroupBox5.setMargin (10)
        self.IonExchangeStateFrame.QHGroupBox5.setMidLineWidth (0)
        self.IonExchangeStateFrame.mainLayout.addWidget (self.IonExchangeStateFrame.QHGroupBox5)

        self.IonExchangeStateFrame.OKPB = QPushButton ('OK', self.IonExchangeStateFrame.QHGroupBox5)
        self.IonExchangeStateFrame.ChangeCreatePB = QPushButton ('Change / Create', self.IonExchangeStateFrame.QHGroupBox5)
        self.IonExchangeStateFrame.DeletePB = QPushButton ('Delete', self.IonExchangeStateFrame.QHGroupBox5)
        self.IonExchangeStateFrame.CancelPB = QPushButton ('Cancel', self.IonExchangeStateFrame.QHGroupBox5)
        self.IonExchangeStateFrame.HelpPB = QPushButton ('&Help', self.IonExchangeStateFrame.QHGroupBox5)            

        self.connect (self.IonExchangeStateFrame.OKPB, SIGNAL ('clicked ()'), self.IonExchangeStateFrame_ok)
        self.connect (self.IonExchangeStateFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.IonExchangeStateFrame_changecreate)
        self.connect (self.IonExchangeStateFrame.DeletePB,  SIGNAL ('clicked ()'), self.IonExchangeStateFrame_delete)
        self.connect (self.IonExchangeStateFrame.CancelPB, SIGNAL ('clicked ()'), self.IonExchangeStateFrame_cancel)
        self.connect (self.IonExchangeStateFrame.HelpPB, SIGNAL ('clicked ()'), self.IonExchangeStateFrame_help)

#----------------------------------------------------------------------------------------------
#  fifth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.IonExchangeStateFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the Ion Exchange State Frame    
#----------------------------------------------------------------------------------------------

    def IonExchangeStateFrame_ok (self):

        self.IonExchangeStateFrame.close ()

    def IonExchangeStateFrame_changecreate (self):

        global AqueousStates_ExchangeSpecies_list
        global AqueousStates_ExchangeSpecies_Properties_list

        States = []
        i = 0
        while i < len (AqueousStates_list):
            AS_tmp = str (AqueousStates_list [i])
            if AS_tmp in States:
                pass
            else:
                States.append (AS_tmp)
            i = i+1
        Temp_list = []
        if str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()) == '' or str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()) not in States:
            self.IonExchangeState_ChangeCreate_NoAS_MB = QMessageBox()
            self.IonExchangeState_ChangeCreate_NoAS_MB.setCaption ('Error')
            self.IonExchangeState_ChangeCreate_NoAS_MB.setText ('You have to select an Aqueous State.')
            self.IonExchangeState_ChangeCreate_NoAS_MB.setIcon (QMessageBox.Critical)
            self.IonExchangeState_ChangeCreate_NoAS_MB.show ()

        else:
            if str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) == '':
                self.IonExchangeState_ChangeCreate_NoMP_MB = QMessageBox()
                self.IonExchangeState_ChangeCreate_NoMP_MB.setCaption ('Error')
                self.IonExchangeState_ChangeCreate_NoMP_MB.setText ('You have to select an Exchange Species.')
                self.IonExchangeState_ChangeCreate_NoMP_MB.setIcon (QMessageBox.Critical)
                self.IonExchangeState_ChangeCreate_NoMP_MB.show ()            
            else:
                Temp_list.append (str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()))
                Temp_list.append (str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ()))

	if Temp_list in AqueousStates_ExchangeSpecies_list:
	
	    index = AqueousStates_ExchangeSpecies_list.index (Temp_list)
	    
            if self.IonExchangeStateFrame.Organizer[0].isChecked ():
                if str (self.IonExchangeStateFrame.AmountLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoAmount_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setText ('Amount has not been set.')
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.show ()
                else:
                    AqueousStates_ExchangeSpecies_Properties_list [index][0] = 'Amount'
                    AqueousStates_ExchangeSpecies_Properties_list [index][1] = '' 
                    AqueousStates_ExchangeSpecies_Properties_list [index][2] = str (self.IonExchangeStateFrame.AmountLineEdit.text ())
                    
	    elif self.IonExchangeStateFrame.Organizer[1].isChecked ():
                if str (self.IonExchangeStateFrame.PurePhaseNameLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setText ('Pure Phase Name\nhas not been set.')
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.show ()
                elif str (self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoRatio_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setText ('Ratio has not been set.')
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.show ()
                else:
                    AqueousStates_ExchangeSpecies_Properties_list [index][0] = 'Equilibrium'
                    AqueousStates_ExchangeSpecies_Properties_list [index][1] = str (self.IonExchangeStateFrame.PurePhaseNameLineEdit.text ())
                    AqueousStates_ExchangeSpecies_Properties_list [index][2] = str (self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.text ())
                        	
	    if self.IonExchangeStateFrame.EquilibrateCheckBox.isChecked ():	    	
		AqueousStates_ExchangeSpecies_Properties_list [index][3] = 'Equilibrate'
	    else:		
	    	AqueousStates_ExchangeSpecies_Properties_list [index][3] = 'Non_Equilibrate'

            self.IonExchangeStateFrame.AqueousStateLineEdit.clear ()
            self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
            self.IonExchangeStateFrame.Organizer[0].setChecked (1)
            self.IonExchangeStateFrame.AmountLineEdit.clear ()
            self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
            self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
            self.IonExchangeStateFrame.AqueousStateLineEdit.setFocus ()
            self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
            
	elif Temp_list != []:
	
            Temp_Properties_list = []
            if self.IonExchangeStateFrame.Organizer[0].isChecked ():
                if str (self.IonExchangeStateFrame.AmountLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoAmount_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setText ('Amount has not been set.')
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoAmount_MB.show ()
                else:
                    Temp_Properties_list.append ('Amount')
                    Temp_Properties_list.append ('')
                    Temp_Properties_list.append (str (self.IonExchangeStateFrame.AmountLineEdit.text ()))
                    
                    if self.IonExchangeStateFrame.EquilibrateCheckBox.isChecked ():	    	
                        Temp_Properties_list.append ('Equilibrate')
                    else:		
                        Temp_Properties_list.append ('Non_Equilibrate')

                    AqueousStates_ExchangeSpecies_list.append (Temp_list)
                    AqueousStates_ExchangeSpecies_Properties_list.append (Temp_Properties_list)
                        
                    self.IonExchangeStateFrame.AqueousStateLineEdit.clear ()
                    self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
                    self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                    self.IonExchangeStateFrame.AmountLineEdit.clear ()
                    self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                    self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.IonExchangeStateFrame.AqueousStateLineEdit.setFocus ()
                    self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)

	    elif self.IonExchangeStateFrame.Organizer[1].isChecked ():
                if str (self.IonExchangeStateFrame.PurePhaseNameLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setText ('Pure Phase Name\nhas not been set.')
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoPurePhase_MB.show ()
                elif str (self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.text ()) == '':
                    self.IonExchangeState_ChangeCreate_NoRatio_MB = QMessageBox()
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setCaption ('Error')
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setText ('Ratio has not been set.')
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_ChangeCreate_NoRatio_MB.show ()
                else:
                    Temp_Properties_list.append ('Equilibrium')
                    Temp_Properties_list.append (str (self.IonExchangeStateFrame.PurePhaseNameLineEdit.text ()))
                    Temp_Properties_list.append (str (self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.text ()))
                        	
                    if self.IonExchangeStateFrame.EquilibrateCheckBox.isChecked ():	    	
                        Temp_Properties_list.append ('Equilibrate')
                    else:		
                        Temp_Properties_list.append ('Non_Equilibrate')

                    AqueousStates_ExchangeSpecies_list.append (Temp_list)
                    AqueousStates_ExchangeSpecies_Properties_list.append (Temp_Properties_list)
                        
                    self.IonExchangeStateFrame.AqueousStateLineEdit.clear ()
                    self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
                    self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                    self.IonExchangeStateFrame.AmountLineEdit.clear ()
                    self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                    self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.IonExchangeStateFrame.AqueousStateLineEdit.setFocus ()
                    self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
      
    def IonExchangeStateFrame_delete (self):

        global AqueousStates_ExchangeSpecies_list
        global AqueousStates_ExchangeSpecies_Properties_list

        if len (AqueousStates_ExchangeSpecies_list) == 0:
            self.IonExchange_Empty_list_MB = QMessageBox()
            self.IonExchange_Empty_list_MB.setCaption ('Error')
            self.IonExchange_Empty_list_MB.setText ('There is no association between\nan aqueous state and a species.\nYou can\'t delete anything.')
            self.IonExchange_Empty_list_MB.setIcon (QMessageBox.Critical)
            self.IonExchange_Empty_list_MB.show ()                    

        else:
            test_list = []
            test_list.append (str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()))
            test_list.append (str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ()))

        if (((self.IonExchangeStateFrame.AqueousStatesComboBox.count ()) != 0) and ((self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.count ()) != 0)):

            if test_list [0] != '':
            
                i = 0
                again = 1
                while i < len (AqueousStates_ExchangeSpecies_list) and again:

                    if str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) == '':
                        self.IonExchangeState_NoSpeciesMB = QMessageBox()
                        self.IonExchangeState_NoSpeciesMB.setCaption ('Error')
                        self.IonExchangeState_NoSpeciesMB.setText ('You have to select an Exchange Species.')
                        self.IonExchangeState_NoSpeciesMB.setIcon (QMessageBox.Critical)
                        self.IonExchangeState_NoSpeciesMB.show ()
                        
                    elif test_list in AqueousStates_ExchangeSpecies_list:
                        index = AqueousStates_ExchangeSpecies_list.index (test_list)
                        again = 0
                        del AqueousStates_ExchangeSpecies_list [index]
                        del AqueousStates_ExchangeSpecies_Properties_list [index]
                        self.IonExchangeStateFrame.AqueousStateLineEdit.clear ()
                        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
                        self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                        self.IonExchangeStateFrame.AmountLineEdit.clear ()
                        self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.IonExchangeStateFrame.AqueousStateLineEdit.setFocus ()

                    else:
                        self.IonExchangeState_NotFindMB = QMessageBox()
                        self.IonExchangeState_NotFindMB.setCaption ('Error')
                        self.IonExchangeState_NotFindMB.setText ('The Association you are trying\nto delete doesn\'t exist.')
                        self.IonExchangeState_NotFindMB.setIcon (QMessageBox.Critical)
                        self.IonExchangeState_NotFindMB.show ()                            

                    i = i+1

            else:
                if str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()) == '':
                    self.IonExchangeState_SelectASMB = QMessageBox()
                    self.IonExchangeState_SelectASMB.setCaption ('Error')
                    self.IonExchangeState_SelectASMB.setText ('You have to select an Aqueous State.')
                    self.IonExchangeState_SelectASMB.setIcon (QMessageBox.Critical)
                    self.IonExchangeState_SelectASMB.show ()

        else:
            if (self.IonExchangeStateFrame.AqueousStatesComboBox.count ()) == 0: 
                self.IonExchangeState_NoASMB = QMessageBox()
                self.IonExchangeState_NoASMB.setCaption ('Error')
                self.IonExchangeState_NoASMB.setText ('There is no Aqueous State.')
                self.IonExchangeState_NoASMB.setIcon (QMessageBox.Critical)
                self.IonExchangeState_NoASMB.show ()

            elif (self.IonExchangeStateFrame.MineralPhaseListComboBox.count ()) == 0:
                self.IonExchangeState_ESMB = QMessageBox()
                self.IonExchangeState_ESMB.setCaption ('Error')
                self.IonExchangeState_ESMB.setText ('There is no Exchange Species.')
                self.IonExchangeState_ESMB.setIcon (QMessageBox.Critical)
                self.IonExchangeState_ESMB.show ()

    def IonExchangeStateFrame_cancel (self):

        self.IonExchangeStateFrame.close ()

    def IonExchangeStateFrame_help (self):

        self.Help ()

    def IonExchangeState_AqueousStatesComboBox_activate (self):

        global AqueousStates_ExchangeSpecies_list
        global AqueousStates_ExchangeSpecies_Properties_list

        self.IonExchangeStateFrame.AqueousStateLineEdit.setText (self.IonExchangeStateFrame.AqueousStatesComboBox.currentText ())

        i = 0
        already_associated = ''
        while i < len (AqueousStates_ExchangeSpecies_list):
            if str (AqueousStates_ExchangeSpecies_list [i][0]) == str (self.IonExchangeStateFrame.AqueousStatesComboBox.currentText ()):
	        s1 = ''
	        if str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Amount':
		    s1 = '\n\tTotal concentration:\t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
		elif str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Equilibrium':
		    s1 = '\n\tTotal concentration relative to a mineral:\t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][1])+' \t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
                already_associated = already_associated +'\n - '+ str (AqueousStates_ExchangeSpecies_list [i][1])+'\t'+ s1
            else:
                pass
            i = i+1

        QToolTip.add (self.IonExchangeStateFrame.AqueousStateLineEdit, 'Already associated with '+ str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ())+':'+already_associated)

        if str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_ExchangeSpecies_list) and again:
                if (str (AqueousStates_ExchangeSpecies_list [i][0])) == (str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ())):
                    if (str (AqueousStates_ExchangeSpecies_list [i][1])) == (str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ())):
                        again = 0
                        if str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Amount':
                            self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                            self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                            self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                            self.IonExchangeStateFrame.AmountLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][2]))
                        else:
                            self.IonExchangeStateFrame.QVGroupBox21.setEnabled (0)
                            self.IonExchangeStateFrame.QHGroupBox3.setEnabled (1)
                            self.IonExchangeStateFrame.Organizer[1].setChecked (1)
                            self.IonExchangeStateFrame.AmountLineEdit.clear ()
                            self.IonExchangeStateFrame.PurePhaseNameLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][1]))
                            self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][2]))
                        if AqueousStates_ExchangeSpecies_Properties_list [i][3] == 'Equilibrate':
                            self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (1)
                        else:
                            self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0)    
                    else:
                        self.IonExchangeStateFrame.AmountLineEdit.clear ()
                        self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                        self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.IonExchangeStateFrame.QVGroupBox21.setEnabled (TRUE)
                        self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
                        self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0)
                else:
                    self.IonExchangeStateFrame.AmountLineEdit.clear ()
                    self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                    self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                    self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.IonExchangeStateFrame.QVGroupBox21.setEnabled (TRUE)
                    self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
                    self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0)
                i = i+1
 
    def IonExchangeStateFrame_ExchangeSpeciesListComboBox_activate (self):

        global AqueousStates_ExchangeSpecies_list
        global AqueousStates_ExchangeSpecies_Properties_list

        self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.setText (self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.currentText ())

        i = 0
        already_associated = ''
        while i < len (AqueousStates_ExchangeSpecies_list):
            if str (AqueousStates_ExchangeSpecies_list [i][1]) == str (self.IonExchangeStateFrame.ExchangeSpeciesListComboBox.currentText ()):
	        s1 = ''
	        if str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Amount':
		    s1 = '\n\tTotal concentration:\t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
		elif str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Equilibrium':
		    s1 = '\n\tTotal concentration relative to a mineral:\t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][1])+' \t'+str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
                already_associated = already_associated +'\n - '+ str (AqueousStates_ExchangeSpecies_list [i][0])+'\t'+ s1
            else:
                pass
            i = i+1

        QToolTip.add (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit, 'Already associated with '+ str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ())+':'+already_associated)

        if str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_ExchangeSpecies_list) and again:
                if (str (AqueousStates_ExchangeSpecies_list [i][1])) == (str (self.IonExchangeStateFrame.ExchangeSpeciesFormulaLineEdit.text ())):
                    if (str (AqueousStates_ExchangeSpecies_list [i][0])) == (str (self.IonExchangeStateFrame.AqueousStateLineEdit.text ())):

                        again = 0
                        if str (AqueousStates_ExchangeSpecies_Properties_list [i][0]) == 'Amount':
                            self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                            self.IonExchangeStateFrame.QHGroupBox3.setEnabled (0)
                            self.IonExchangeStateFrame.QVGroupBox21.setEnabled (1)
                            self.IonExchangeStateFrame.AmountLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][2]))
                            self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                            self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        else:
                            self.IonExchangeStateFrame.QVGroupBox21.setEnabled (0)
                            self.IonExchangeStateFrame.QHGroupBox3.setEnabled (1)
                            self.IonExchangeStateFrame.Organizer[1].setChecked (1)
                            self.IonExchangeStateFrame.AmountLineEdit.clear ()
                            self.IonExchangeStateFrame.PurePhaseNameLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][1]))
                            self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.setText (str (AqueousStates_ExchangeSpecies_Properties_list [i][2]))
                        if AqueousStates_ExchangeSpecies_Properties_list [i][3] == 'Equilibrate':
                            self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (1)
                        else:
                            self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0)

                    else:
                        self.IonExchangeStateFrame.AmountLineEdit.clear ()
                        self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                        self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.IonExchangeStateFrame.QVGroupBox21.setEnabled (TRUE)
                        self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
                        self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0) 
                else:
                    self.IonExchangeStateFrame.AmountLineEdit.clear ()
                    self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
                    self.IonExchangeStateFrame.Organizer[0].setChecked (1)
                    self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.IonExchangeStateFrame.QVGroupBox21.setEnabled (TRUE)
                    self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
                    self.IonExchangeStateFrame.EquilibrateCheckBox.setChecked (0) 
                i = i+1

    def IonExchangeStateFrame_EquilibriumPhases_enable (self):

        self.IonExchangeStateFrame.AmountLineEdit.clear ()
        self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
        self.IonExchangeStateFrame.QVGroupBox21.setEnabled (FALSE)
        self.IonExchangeStateFrame.QHGroupBox3.setEnabled (TRUE)
        self.IonExchangeStateFrame.PurePhaseNameLineEdit.setFocus ()        
       
    def IonExchangeStateFrame_EquilibriumPhases_disable (self):

        self.IonExchangeStateFrame.AmountLineEdit.clear ()
        self.IonExchangeStateFrame.PurePhaseNameLineEdit.clear ()
        self.IonExchangeStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
        self.IonExchangeStateFrame.QHGroupBox3.setEnabled (FALSE)
        self.IonExchangeStateFrame.QVGroupBox21.setEnabled (TRUE)




###########################################################################################
##                                                                                       ##
##                          ION EXCHANGE FRAME (END)                                     ##
##                                                                                       ##
###########################################################################################



###########################################################################################
##                                                                                       ##
##                   (STATE) SURFACE COMPLEXATION FRAME (BEGINNING)                      ##
##                                                                                       ##
###########################################################################################



    def surface_complexation_state (self):
       
        self.SurfaceComplexationStateFrame = QFrame ()
        self.SurfaceComplexationStateFrame.setCaption ('Surface Complexation Composition')
        setPosition (self.SurfaceComplexationStateFrame)

        self.SurfaceComplexationStateFrame.mainLayout = QVBoxLayout (self.SurfaceComplexationStateFrame, 10, -1, 'SurfaceComplexationState_mainLayout')
        self.SurfaceComplexationStateFrame.mainLayout.setMargin (Marge)
        self.SurfaceComplexationStateFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        SurfaceComplexationState_comment = Comments ['Surface']

        self.SurfaceComplexationStateFrame.QHGroupBoxA = QHGroupBox (self.SurfaceComplexationStateFrame)
	QToolTip.add (self.SurfaceComplexationStateFrame.QHGroupBoxA,SurfaceComplexationState_comment)

        self.SurfaceComplexationStateFrame.QHGroupBoxA.setMargin (5)
        self.SurfaceComplexationStateFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBoxA)
#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox0 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox0.setMargin (10)
        self.SurfaceComplexationStateFrame.QHGroupBox0.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox0)
            
        self.SurfaceComplexationStateFrame.QVBox01 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox0)
        self.SurfaceComplexationStateFrame.QVBox03 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox0)
        self.SurfaceComplexationStateFrame.QVBox02 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox0)
            
        self.SurfaceComplexationStateFrame.QVBox01.setSpacing (5)
        self.SurfaceComplexationStateFrame.QVBox01.setMargin (0)
        self.SurfaceComplexationStateFrame.QVBox02.setSpacing (5)
        self.SurfaceComplexationStateFrame.QVBox02.setMargin (0)

        self.SurfaceComplexationStateFrame.QVBox03.setMinimumSize (10, 10)
        self.SurfaceComplexationStateFrame.QVBox03.setMaximumSize (10, 10)

        self.SurfaceComplexationStateFrame.AqueousStateLabel = QLabel ('Aqueous State', self.SurfaceComplexationStateFrame.QVBox01)
        self.SurfaceComplexationStateFrame.AqueousStateLabel.resize (self.SurfaceComplexationStateFrame.AqueousStateLabel.sizeHint ())

        self.SurfaceComplexationStateFrame.AqueousStateLineEdit = QLineEdit (self.SurfaceComplexationStateFrame.QVBox01)
        #self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setMaximumSize (200, 25)
        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()
         ##      QToolTip.add ()

        self.SurfaceComplexationStateFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.SurfaceComplexationStateFrame.QVBox02)
        self.SurfaceComplexationStateFrame.AqueousStatesLabel.resize (self.SurfaceComplexationStateFrame.AqueousStatesLabel.sizeHint ())

        self.SurfaceComplexationStateFrame.AqueousStatesComboBox = QComboBox (self.SurfaceComplexationStateFrame.QVBox02)
        #self.SurfaceComplexationStateFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.SurfaceComplexationStateFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.SurfaceComplexationState_AqueousStatesComboBox_activate)
        i = 0
        while i < len (AqueousStates_list):
            self.SurfaceComplexationStateFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1
        
         ##      QToolTip.add ()

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox1 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox1.setMargin (10)
        self.SurfaceComplexationStateFrame.QHGroupBox1.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox1)

        self.SurfaceComplexationStateFrame.QVBox11 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox1)
        self.SurfaceComplexationStateFrame.QVBox13 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox1)
        self.SurfaceComplexationStateFrame.QVBox12 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox1)
            
        self.SurfaceComplexationStateFrame.QVBox11.setSpacing (5)
        self.SurfaceComplexationStateFrame.QVBox11.setMargin (0)
        self.SurfaceComplexationStateFrame.QVBox12.setSpacing (5)
        self.SurfaceComplexationStateFrame.QVBox12.setMargin (0)

        self.SurfaceComplexationStateFrame.QVBox13.setMinimumSize (10, 10)
        self.SurfaceComplexationStateFrame.QVBox13.setMaximumSize (10, 10)
            
        self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLabel = QLabel ('Surface Species', self.SurfaceComplexationStateFrame.QVBox11)
        self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLabel.resize (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLabel.sizeHint ())
            
        self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit = QLineEdit (self.SurfaceComplexationStateFrame.QVBox11)
        #self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.setMaximumSize (200, 25)
         ##      QToolTip.add ()

        self.SurfaceComplexationStateFrame.ExchangeSpeciesListLabel = QLabel ('List of Surface Species', self.SurfaceComplexationStateFrame.QVBox12)
        self.SurfaceComplexationStateFrame.ExchangeSpeciesListLabel.resize (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLabel.sizeHint ())
            
        self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox = QComboBox (self.SurfaceComplexationStateFrame.QVBox12)
        #self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.setMaximumSize (200, 25)
        self.connect (self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox, SIGNAL ('activated (int)'), self.SurfaceComplexationStateFrame_ExchangeSpeciesListComboBox_activate) 

        i = 0
        while i < len (SurfaceMasterSpecies_list):
            self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.insertItem (SurfaceMasterSpecies_list [i])
            i = i+1
        i = 0
        while i < len (SurfaceSpecies_list):
            self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.insertItem (SurfaceSpecies_list [i])
            i = i+1
        i = 0
        while i < len (Database_SurfaceMasterSpecies_list):
            self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.insertItem (Database_SurfaceMasterSpecies_list [i])
            i = i+1
        i = 0
        while i < len (Database_SurfaceSpecies_list):
            self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.insertItem (Database_SurfaceSpecies_list [i])
            i = i+1

#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox2 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox2.setMargin (0)
        self.SurfaceComplexationStateFrame.QHGroupBox2.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox2)

        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLabel = QLabel ('Total Number of Sites (moles)', self.SurfaceComplexationStateFrame.QHGroupBox2)
        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLabel.resize (self.SurfaceComplexationStateFrame.TotalNumberOfSitesLabel.sizeHint ())

        self.SurfaceComplexationStateFrame.spacerLabel = QLabel (' ', self.SurfaceComplexationStateFrame.QHGroupBox2)
        self.SurfaceComplexationStateFrame.spacerLabel.setMinimumSize (180, 10)
        
        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit = QLineEdit (self.SurfaceComplexationStateFrame.QHGroupBox2)
        #self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setMinimumSize (100, 25) 
        #self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setMaximumSize (100, 25)
       
#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------
 

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox9 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox9.setMargin (10)
        self.SurfaceComplexationStateFrame.QHGroupBox9.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox9)

        self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton = QRadioButton ('Specific Area', self.SurfaceComplexationStateFrame.QHGroupBox9)
        self.connect (self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton, SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_SpecificArea_activated)
        
        self.SurfaceComplexationStateFrame.QVBox91 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox9)
        self.SurfaceComplexationStateFrame.QVBox91.setMinimumSize (100, 10)
        self.SurfaceComplexationStateFrame.QVBox91.setMaximumSize (100, 10)

#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox3 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox3.setMargin (10)
        self.SurfaceComplexationStateFrame.QHGroupBox3.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox3)
            
        self.SurfaceComplexationStateFrame.QVBox31 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox3)
        self.SurfaceComplexationStateFrame.QVBox33 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox3)
        self.SurfaceComplexationStateFrame.QVBox32 = QVBox (self.SurfaceComplexationStateFrame.QHGroupBox3)

        self.SurfaceComplexationStateFrame.QVBox31.setMargin (0)
        self.SurfaceComplexationStateFrame.QVBox31.setSpacing (5)
        self.SurfaceComplexationStateFrame.QVBox32.setMargin (0)
        self.SurfaceComplexationStateFrame.QVBox32.setSpacing (5)

        self.SurfaceComplexationStateFrame.QVBox33.setMinimumSize (10, 10)
        self.SurfaceComplexationStateFrame.QVBox33.setMaximumSize (10, 10)
        
        self.SurfaceComplexationStateFrame.PurePhaseNameLabel = QLabel ('Specific Area per g (m2/g)', self.SurfaceComplexationStateFrame.QVBox31)
        self.SurfaceComplexationStateFrame.PurePhaseNameLabel.resize (self.SurfaceComplexationStateFrame.PurePhaseNameLabel.sizeHint ())

        self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit = QLineEdit (self.SurfaceComplexationStateFrame.QVBox31)
        #self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setMaximumSize (200, 25)
      
        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLabel = QLabel ('Mass (g)', self.SurfaceComplexationStateFrame.QVBox32)
        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLabel.resize (self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLabel.sizeHint ())

        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit = QLineEdit (self.SurfaceComplexationStateFrame.QVBox32)
        #self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setMinimumSize (200, 25)
        #self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setMaximumSize (200, 25)

        self.SurfaceComplexationStateFrame.QHGroupBox3.setEnabled (FALSE)


#----------------------------------------------------------------------------------------------
#  Fifth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

      
#----------------------------------------------------------------------------------------------
#  sixth Horizontal Box (beginning): container for the buttons
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.QHGroupBox4 = QHGroupBox (self.SurfaceComplexationStateFrame)
        self.SurfaceComplexationStateFrame.QHGroupBox4.setMargin (10)
        self.SurfaceComplexationStateFrame.QHGroupBox4.setMidLineWidth (0)
        self.SurfaceComplexationStateFrame.mainLayout.addWidget (self.SurfaceComplexationStateFrame.QHGroupBox4)

        self.SurfaceComplexationStateFrame.OKPB = QPushButton ('OK', self.SurfaceComplexationStateFrame.QHGroupBox4)
        self.SurfaceComplexationStateFrame.ChangeCreatePB = QPushButton ('Change / Create', self.SurfaceComplexationStateFrame.QHGroupBox4)
        self.SurfaceComplexationStateFrame.DeletePB = QPushButton ('Delete', self.SurfaceComplexationStateFrame.QHGroupBox4)
        self.SurfaceComplexationStateFrame.CancelPB = QPushButton ('Cancel', self.SurfaceComplexationStateFrame.QHGroupBox4)
        self.SurfaceComplexationStateFrame.HelpPB = QPushButton ('&Help', self.SurfaceComplexationStateFrame.QHGroupBox4)            

        self.connect (self.SurfaceComplexationStateFrame.OKPB, SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_ok)
        self.connect (self.SurfaceComplexationStateFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_changecreate)
        self.connect (self.SurfaceComplexationStateFrame.DeletePB,  SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_delete)
        self.connect (self.SurfaceComplexationStateFrame.CancelPB, SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_cancel)
        self.connect (self.SurfaceComplexationStateFrame.HelpPB, SIGNAL ('clicked ()'), self.SurfaceComplexationStateFrame_help)

#----------------------------------------------------------------------------------------------
#  sixth Horizontal Box (end)
#----------------------------------------------------------------------------------------------

        self.SurfaceComplexationStateFrame.show ()

#----------------------------------------------------------------------------------------------
#  Methods of the Ion Exchange State Frame    
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
#  to exit saving changes

    def SurfaceComplexationStateFrame_ok (self):

        self.SurfaceComplexationStateFrame.close ()
#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#

    def SurfaceComplexationStateFrame_changecreate (self):

        global AqueousStates_SurfaceSpecies_list
        global AqueousStates_SurfaceSpecies_Properties_list

        States = []
        i = 0
        while i < len (AqueousStates_list):
            AS_tmp = str (AqueousStates_list [i])
            if AS_tmp in States:
                pass
            else:
                States.append (AS_tmp)
            i = i+1

        Temp_list = []

        if str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()) == '' or str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()) not in States:
            self.Surface_ChangeCreate_NoAS_MB = QMessageBox()
            self.Surface_ChangeCreate_NoAS_MB.setCaption ('Error')
            self.Surface_ChangeCreate_NoAS_MB.setText ('You have to select an Aqueous State.')
            self.Surface_ChangeCreate_NoAS_MB.setIcon (QMessageBox.Critical)
            self.Surface_ChangeCreate_NoAS_MB.show ()
        else:
            if str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) == '':
                self.Surface_ChangeCreate_NoSSpec_MB = QMessageBox()
                self.Surface_ChangeCreate_NoSSpec_MB.setCaption ('Error')
                self.Surface_ChangeCreate_NoSSpec_MB.setText ('You have to select a Surface Species.')
                self.Surface_ChangeCreate_NoSSpec_MB.setIcon (QMessageBox.Critical)
                self.Surface_ChangeCreate_NoSSpec_MB.show ()            
            else:
                Temp_list.append (str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()))
                Temp_list.append (str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ()))

	if Temp_list in AqueousStates_SurfaceSpecies_list:
	
	    index = AqueousStates_SurfaceSpecies_list.index (Temp_list)
            if str (self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.text ()) == '':
                self.Surface_ChangeCreate_NoSite_MB = QMessageBox()
                self.Surface_ChangeCreate_NoSite_MB.setCaption ('Error')
                self.Surface_ChangeCreate_NoSite_MB.setText ('The number of Sites\nhas not been set.')
                self.Surface_ChangeCreate_NoSite_MB.setIcon (QMessageBox.Critical)
                self.Surface_ChangeCreate_NoSite_MB.show ()
                self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setFocus ()
            else :
                AqueousStates_SurfaceSpecies_Properties_list [index][0] = str (self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.text ())
            if self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.isChecked ():
                if str (self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.text ()) == '':
                    self.Surface_ChangeCreate_NoSpecificArea_MB = QMessageBox()
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setCaption ('Error')
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setText ('Specific Area\nhas not been set.')
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setIcon (QMessageBox.Critical)
                    self.Surface_ChangeCreate_NoSpecificArea_MB.show ()
                    self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setFocus ()
                elif str (self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.text ()) == '':
                    self.Surface_ChangeCreate_NoMass_MB = QMessageBox()
                    self.Surface_ChangeCreate_NoMass_MB.setCaption ('Error')
                    self.Surface_ChangeCreate_NoMass_MB.setText ('Mass has not been set.')
                    self.Surface_ChangeCreate_NoMass_MB.setIcon (QMessageBox.Critical)
                    self.Surface_ChangeCreate_NoMass_MB.show ()
                    self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setFocus ()
                else:
                    AqueousStates_SurfaceSpecies_Properties_list [index][1] = 'On'
                    AqueousStates_SurfaceSpecies_Properties_list [index][2] = str (self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.text ())
                    AqueousStates_SurfaceSpecies_Properties_list [index][3] = str (self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.text ())
                    
            else:
                AqueousStates_SurfaceSpecies_Properties_list [index][1] = 'Off'
                AqueousStates_SurfaceSpecies_Properties_list [index][2] = ''
                AqueousStates_SurfaceSpecies_Properties_list [index][3] = ''
    
            self.SurfaceComplexationStateFrame.AqueousStateLineEdit.clear ()
            self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
            self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
            self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()
            
	elif Temp_list != []:
	
            Temp_Properties_list = []
            if str (self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.text ()) == '':
                self.Surface_ChangeCreate_NoSite_MB = QMessageBox()
                self.Surface_ChangeCreate_NoSite_MB.setCaption ('Error')
                self.Surface_ChangeCreate_NoSite_MB.setText ('The number of Sites\nhas not been set.')
                self.Surface_ChangeCreate_NoSite_MB.setIcon (QMessageBox.Critical)
                self.Surface_ChangeCreate_NoSite_MB.show ()
                self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setFocus ()
            else :
                Temp_Properties_list.append (str (self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.text ()))
            if self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.isChecked ():
                if str (self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.text ()) == '':
                    self.Surface_ChangeCreate_NoSpecificArea_MB = QMessageBox()
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setCaption ('Error')
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setText ('Specific Area\nhas not been set.')
                    self.Surface_ChangeCreate_NoSpecificArea_MB.setIcon (QMessageBox.Critical)
                    self.Surface_ChangeCreate_NoSpecificArea_MB.show ()
                    self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setFocus ()
                elif str (self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.text ()) == '':
                    self.Surface_ChangeCreate_NoMass_MB = QMessageBox()
                    self.Surface_ChangeCreate_NoMass_MB.setCaption ('Error')
                    self.Surface_ChangeCreate_NoMass_MB.setText ('Mass has not been set.')
                    self.Surface_ChangeCreate_NoMass_MB.setIcon (QMessageBox.Critical)
                    self.Surface_ChangeCreate_NoMass_MB.show ()
                    self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setFocus ()
                else:
                    Temp_Properties_list.append ('On')
                    Temp_Properties_list.append (str (self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.text ()))
                    Temp_Properties_list.append (str (self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.text ()))
                    
            else:
                Temp_Properties_list.append ('Off')
                Temp_Properties_list.append ('')
                Temp_Properties_list.append ('')
    
            AqueousStates_SurfaceSpecies_list.append (Temp_list)
            AqueousStates_SurfaceSpecies_Properties_list.append (Temp_Properties_list)

            self.SurfaceComplexationStateFrame.AqueousStateLineEdit.clear ()
            self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
            self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
            self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()

#----------------------------------------------------------------------------------------------
#        

    def SurfaceComplexationStateFrame_delete (self):

        global AqueousStates_SurfaceSpecies_list
        global AqueousStates_SurfaceSpecies_Properties_list

        if len (AqueousStates_SurfaceSpecies_list) == 0:
            self.Surface_Empty_list_MB = QMessageBox()
            self.Surface_Empty_list_MB.setCaption ('Error')
            self.Surface_Empty_list_MB.setText ('There is no association between\nan aqueous state and a surface species.\nYou can\'t delete anything.')
            self.Surface_Empty_list_MB.setIcon (QMessageBox.Critical)
            self.Surface_Empty_list_MB.show ()                    

        else:
            test_list = []
            test_list.append (str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()))
            test_list.append (str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ()))

        if (((self.SurfaceComplexationStateFrame.AqueousStatesComboBox.count ()) != 0) and ((self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.count ()) != 0)):

            if test_list [0] != '':
            
                i = 0
                again = 1
                while i < len (AqueousStates_SurfaceSpecies_list) and again:

                    if str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) == '':
                        self.Surface_NoSpeciesMB = QMessageBox()
                        self.Surface_NoSpeciesMB.setCaption ('Error')
                        self.Surface_NoSpeciesMB.setText ('You have to select a Surface Species.')
                        self.Surface_NoSpeciesMB.setIcon (QMessageBox.Critical)
                        self.Surface_NoSpeciesMB.show ()
                        
                    elif test_list in AqueousStates_SurfaceSpecies_list:
                        index = AqueousStates_SurfaceSpecies_list.index (test_list)
                        again = 0
                        del AqueousStates_SurfaceSpecies_list [index]
                        del AqueousStates_SurfaceSpecies_Properties_list [index]
                        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                        self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                        self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()

                    else:
                        self.Surface_NotFindMB = QMessageBox()
                        self.Surface_NotFindMB.setCaption ('Error')
                        self.Surface_NotFindMB.setText ('The Association you are trying\nto delete doesn\'t exist.')
                        self.Surface_NotFindMB.setIcon (QMessageBox.Critical)
                        self.Surface_NotFindMB.show ()                            

                    i = i+1

            else:
                if str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()) == '':
                    self.Surface_SelectASMB = QMessageBox()
                    self.Surface_SelectASMB.setCaption ('Error')
                    self.Surface_SelectASMB.setText ('You have to select an Aqueous State.')
                    self.Surface_SelectASMB.setIcon (QMessageBox.Critical)
                    self.Surface_SelectASMB.show ()

        else:
            if (self.SurfaceComplexationStateFrame.AqueousStatesComboBox.count ()) == 0: 
                self.Surface_NoASMB = QMessageBox()
                self.Surface_NoASMB.setCaption ('Error')
                self.Surface_NoASMB.setText ('There is no Aqueous State.')
                self.Surface_NoASMB.setIcon (QMessageBox.Critical)
                self.Surface_NoASMB.show ()

            elif (self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.count ()) == 0:
                self.Surface_SSpMB = QMessageBox()
                self.Surface_SSpMB.setCaption ('Error')
                self.Surface_SSpMB.setText ('There is no Surface Species.')
                self.Surface_SSpMB.setIcon (QMessageBox.Critical)
                self.Surface_SSpMB.show ()

#----------------------------------------------------------------------------------------------




#----------------------------------------------------------------------------------------------
#  to exit discarding changes

    def SurfaceComplexationStateFrame_cancel (self):

        self.SurfaceComplexationStateFrame.close ()
#----------------------------------------------------------------------------------------------
#  to display help about this window

    def SurfaceComplexationStateFrame_help (self):

        self.Help ()
#----------------------------------------------------------------------------------------------


    def SurfaceComplexationState_AqueousStatesComboBox_activate (self):

        global AqueousStates_SurfaceSpecies_list
        global AqueousStates_SurfaceSpecies_Properties_list


        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setText (self.SurfaceComplexationStateFrame.AqueousStatesComboBox.currentText ())

        i = 0
        already_associated = ''
        while i < len (AqueousStates_SurfaceSpecies_list):
            if str (AqueousStates_SurfaceSpecies_list [i][0]) == str (self.SurfaceComplexationStateFrame.AqueousStatesComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_SurfaceSpecies_list [i][1])+'\n\tTotal Number of sites: '+ str (AqueousStates_SurfaceSpecies_Properties_list [i][0])+'\t'
		if str (AqueousStates_SurfaceSpecies_Properties_list [i][1]) == 'On':
		    already_associated = already_associated + '\n\tSpecific Area per g: '+str (AqueousStates_SurfaceSpecies_Properties_list [i][2])+'\t'+'\n\tMass: '+ str (AqueousStates_SurfaceSpecies_Properties_list [i][3])+'\t'
		else:
		    pass
            else:
                pass
            i = i+1

        QToolTip.add (self.SurfaceComplexationStateFrame.AqueousStateLineEdit, 'Already associated with '+ str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ())+':'+already_associated)

        if str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_SurfaceSpecies_list) and again:
                
                if (str (AqueousStates_SurfaceSpecies_list [i][0])) == (str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ())):
                    if (str (AqueousStates_SurfaceSpecies_list [i][1])) == (str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ())):
                        again = 0
                        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][0]))
                        if str (AqueousStates_SurfaceSpecies_Properties_list [i][1]) == 'On':
                            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (1)
                            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][2]))
                            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][3]))
                        else:
                            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    else:
                        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                        self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                        self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()
            
                else:
                    self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                    self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                    self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()               
                i = i+1

    def SurfaceComplexationStateFrame_ExchangeSpeciesListComboBox_activate (self):

        global AqueousStates_SurfaceSpecies_list
        global AqueousStates_SurfaceSpecies_Properties_list

        self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.setText (self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.currentText ())

        i = 0
        already_associated = ''
        while i < len (AqueousStates_SurfaceSpecies_list):
            if str (AqueousStates_SurfaceSpecies_list [i][1]) == str (self.SurfaceComplexationStateFrame.ExchangeSpeciesListComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_SurfaceSpecies_list [i][0])+'\n\tTotal Number of sites: '+ str (AqueousStates_SurfaceSpecies_Properties_list [i][0])+'\t'
		if str (AqueousStates_SurfaceSpecies_Properties_list [i][1]) == 'On':
		    already_associated = already_associated + '\n\tSpecific Area per g: '+str (AqueousStates_SurfaceSpecies_Properties_list [i][2])+'\t'+'\n\tMass: '+ str (AqueousStates_SurfaceSpecies_Properties_list [i][3])+'\t'
		else:
		    pass
            else:
                pass
            i = i+1

        QToolTip.add (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit, 'Already associated with '+ str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ())+':'+already_associated)

        if str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_SurfaceSpecies_list) and again:
                
                if (str (AqueousStates_SurfaceSpecies_list [i][1])) == (str (self.SurfaceComplexationStateFrame.ExchangeSpeciesFormulaLineEdit.text ())):
                    if (str (AqueousStates_SurfaceSpecies_list [i][0])) == (str (self.SurfaceComplexationStateFrame.AqueousStateLineEdit.text ())):
                        again = 0
                        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][0]))
                        if str (AqueousStates_SurfaceSpecies_Properties_list [i][1]) == 'On':
                            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (1)
                            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][2]))
                            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.setText (str (AqueousStates_SurfaceSpecies_Properties_list [i][3]))
                        else:
                            self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                            self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    else:
                        self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                        self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                        self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                        self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()
            
                else:
                    self.SurfaceComplexationStateFrame.TotalNumberOfSitesLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.setChecked (0)
                    self.SurfaceComplexationStateFrame_SpecificArea_activated ()
                    self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
                    self.SurfaceComplexationStateFrame.AqueousStateLineEdit.setFocus ()               
                i = i+1

    def SurfaceComplexationStateFrame_SpecificArea_activated (self):

        if self.SurfaceComplexationStateFrame.SpecificAreaRadiobutton.isOn ():
            self.SurfaceComplexationStateFrame.QHGroupBox3.setEnabled (1)
        else:
            self.SurfaceComplexationStateFrame.PurePhaseNameLineEdit.clear ()
            self.SurfaceComplexationStateFrame.RatioOfExchangeSpeciesLineEdit.clear ()
            self.SurfaceComplexationStateFrame.QHGroupBox3.setEnabled (0)


        

###########################################################################################
##                                                                                       ##
##                      (STATE) SURFACE COMPLEXATION FRAME (END)                         ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                        KINETIC RATES FOR MINERALS FRAME (BEGINNING)                   ##
##                                                                                       ##
###########################################################################################



        
    def Kinetics (self):

        self.KineticsFrame = QFrame ()
        self.KineticsFrame.setCaption ('Kinetic Rates')
        setPosition (self.KineticsFrame)

        self.KineticsFrame.mainLayout = QVBoxLayout (self.KineticsFrame, 10, -1, 'KineticsFrame_mainLayout')
        self.KineticsFrame.mainLayout.setMargin (Marge)
        self.KineticsFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Kinetics_comment = Comments ['Kinetics']

        self.KineticsFrame.QHGroupBoxA = QHGroupBox (self.KineticsFrame)
        QToolTip.add (self.KineticsFrame.QHGroupBoxA, Kinetics_comment)

        self.KineticsFrame.QHGroupBoxA.setMargin (5)
        self.KineticsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.KineticsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.KineticsFrame.QHGroupBox0 = QHGroupBox (self.KineticsFrame)
        self.KineticsFrame.QHGroupBox0.setMargin (10)
        self.KineticsFrame.QHGroupBox0.setMidLineWidth (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBox0)
            
        self.KineticsFrame.QVBox01 = QVBox (self.KineticsFrame.QHGroupBox0)
        self.KineticsFrame.QVBox03 = QVBox (self.KineticsFrame.QHGroupBox0)
        self.KineticsFrame.QVBox02 = QVBox (self.KineticsFrame.QHGroupBox0)
            
        self.KineticsFrame.QVBox01.setSpacing (5)
        self.KineticsFrame.QVBox01.setMargin (0)
        self.KineticsFrame.QVBox02.setSpacing (5)
        self.KineticsFrame.QVBox02.setMargin (0)

        self.KineticsFrame.QVBox03.setMinimumSize (10, 10)
        self.KineticsFrame.QVBox03.setMaximumSize (10, 10)

        self.KineticsFrame.AqueousStateLabel = QLabel ('Aqueous State', self.KineticsFrame.QVBox01)
        self.KineticsFrame.AqueousStateLabel.resize (self.KineticsFrame.AqueousStateLabel.sizeHint ())

        self.KineticsFrame.AqueousStateLineEdit = QLineEdit (self.KineticsFrame.QVBox01)
        self.KineticsFrame.AqueousStateLineEdit.setMinimumSize (200, 25)
        self.KineticsFrame.AqueousStateLineEdit.setMaximumSize (200, 25)
        self.KineticsFrame.AqueousStateLineEdit.setFocus ()
         ##      QToolTip.add ()

        self.KineticsFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.KineticsFrame.QVBox02)
        self.KineticsFrame.AqueousStatesLabel.resize (self.KineticsFrame.AqueousStatesLabel.sizeHint ())

        self.KineticsFrame.AqueousStatesComboBox = QComboBox (self.KineticsFrame.QVBox02)
        self.KineticsFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.KineticsFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        i = 0
        while i < len (AqueousStates_list):
            self.KineticsFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1
        self.connect (self.KineticsFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.Kinetics_AqueousStatesComboBox_activate)
         ##      QToolTip.add ()


#----------------------------------------------------------------------------------------------

        self.KineticsFrame.QHGroupBox10 = QHGroupBox (self.KineticsFrame)
        self.KineticsFrame.QHGroupBox10.setMargin (10)
        self.KineticsFrame.QHGroupBox10.setMidLineWidth (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBox10)

        self.KineticsFrame.QVBox01 = QVBox (self.KineticsFrame.QHGroupBox10)
        self.KineticsFrame.QVBox03 = QVBox (self.KineticsFrame.QHGroupBox10)
        self.KineticsFrame.QVBox02 = QVBox (self.KineticsFrame.QHGroupBox10)

        self.KineticsFrame.QVBox01.setSpacing (5)
        self.KineticsFrame.QVBox01.setMargin (0)
        self.KineticsFrame.QVBox02.setSpacing (5)
        self.KineticsFrame.QVBox02.setMargin (0)

        self.KineticsFrame.QVBox03.setMinimumSize (10, 10)
        self.KineticsFrame.QVBox03.setMaximumSize (10, 10)

        self.KineticsFrame.KineticRateLabel = QLabel ('Kinetic Rate', self.KineticsFrame.QVBox01)
        self.KineticsFrame.KineticRateLabel.resize (self.KineticsFrame.KineticRateLabel.sizeHint ())
        
        self.KineticsFrame.KineticRateLineEdit = QLineEdit (self.KineticsFrame.QVBox01)
        self.KineticsFrame.KineticRateLineEdit.setMinimumSize (200, 25)
        self.KineticsFrame.KineticRateLineEdit.setMaximumSize (200, 25)
	QToolTip.add (self.KineticsFrame.KineticRateLineEdit, 'Name of the kinetic rate to be defined')

        self.KineticsFrame.ListOfKineticRatesLabel = QLabel ('List of Kinetic Rates', self.KineticsFrame.QVBox02)
        self.KineticsFrame.ListOfKineticRatesLabel.resize (self.KineticsFrame.ListOfKineticRatesLabel.sizeHint ())
        
        self.KineticsFrame.KineticRatesComboBox = QComboBox (self.KineticsFrame.QVBox02)
        self.KineticsFrame.KineticRatesComboBox.setMinimumSize (200, 25)
        self.KineticsFrame.KineticRatesComboBox.setMaximumSize (200, 25)
        self.connect (self.KineticsFrame.KineticRatesComboBox, SIGNAL ('activated (int)'), self.KineticsFrame_KineticRatesComboBox_activate)

        i = 0
        Rates_list = []
        while i < len (AqueousStates_KineticRates_list):
            rate = str (AqueousStates_KineticRates_list [i][1])
            if rate in Rates_list:
                pass
            else:
                Rates_list.append (rate)
            i = i+1
        j = 0
        while j < len (Rates_list):
            self.KineticsFrame.KineticRatesComboBox.insertItem (Rates_list [j], 0)
            j = j+1

#----------------------------------------------------------------------------------------------       

        self.KineticsFrame.QHBox1 = QHBox (self.KineticsFrame)
        self.KineticsFrame.QHBox1.setMargin (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHBox1)
       
        self.KineticsFrame.QButtonGroup1 = QButtonGroup ('', self.KineticsFrame.QHBox1, 'KineticsFrame_QButtonGroup1' )
        self.KineticsFrame.QButtonGroup1.setMidLineWidth (0)
        
        self.KineticsFrame.QVBoxLayout10 = QVBoxLayout (self.KineticsFrame.QButtonGroup1, 20, 20)

        self.KineticsFrame.Organizer = range (2)

        self.KineticsFrame.Organizer[0] = QRadioButton (self.KineticsFrame.QButtonGroup1)
        self.KineticsFrame.Organizer[0].setText('Standard Rate')
        self.KineticsFrame.QVBoxLayout10.addWidget (self.KineticsFrame.Organizer[0])
        self.connect (self.KineticsFrame.Organizer[0], SIGNAL ('clicked ()'), self.StandardRateParameters_activate)
              
        self.KineticsFrame.Organizer[1] = QRadioButton (self.KineticsFrame.QButtonGroup1)
        self.KineticsFrame.Organizer[1].setText('Specific Rate')
        self.KineticsFrame.QVBoxLayout10.addWidget (self.KineticsFrame.Organizer[1])
        self.connect (self.KineticsFrame.Organizer[1], SIGNAL ('clicked ()'), self.SpecificRateParameters_activate)

        self.KineticsFrame.QVBoxLayout10.activate()
        self.KineticsFrame.QButtonGroup1.adjustSize ()

        if Rate == 'Standard':
            self.KineticsFrame.Organizer[0].setChecked (1)
        elif Rate == 'Specific':
            self.KineticsFrame.Organizer[1].setChecked (1)
        
#----------------------------------------------------------------------------------------------       

        self.KineticsFrame.QHGroupBox2 = QHGroupBox ('Standard Rate Parameters', self.KineticsFrame)
        self.KineticsFrame.QHGroupBox2.setMargin (0)
        self.KineticsFrame.QHGroupBox2.setMidLineWidth (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBox2)

        self.KineticsFrame.QVBox21 = QVBox (self.KineticsFrame.QHGroupBox2)
        self.KineticsFrame.QVBox22 = QVBox (self.KineticsFrame.QHGroupBox2)
        self.KineticsFrame.QVBox23 = QVBox (self.KineticsFrame.QHGroupBox2)
        self.KineticsFrame.QVGroupBox24 = QVGroupBox (self.KineticsFrame.QHGroupBox2)

        self.KineticsFrame.QVBox21.setMargin (0)
        self.KineticsFrame.QVBox21.setSpacing (5)
##         self.KineticsFrame.QVBox22.setMargin (0)
##         self.KineticsFrame.QVBox22.setSpacing (5)
        self.KineticsFrame.QVBox23.setMargin (0)
        self.KineticsFrame.QVBox23.setSpacing (5)
        self.KineticsFrame.QVGroupBox24.setMargin (0)

        self.KineticsFrame.TemkinNumberLabel = QLabel ('Temkin Number', self.KineticsFrame.QVBox21)
        self.KineticsFrame.TemkinNumberLabel.resize (self.KineticsFrame.TemkinNumberLabel.sizeHint ())

        self.KineticsFrame.KineticConstantLabel = QLabel ('Kinetic Constant', self.KineticsFrame.QVBox21)
        self.KineticsFrame.KineticConstantLabel.resize (self.KineticsFrame.KineticConstantLabel.sizeHint ())

        self.KineticsFrame.InitialExchangeSurfaceLabel = QLabel ('Initial Exchange Surface', self.KineticsFrame.QVBox21)
        self.KineticsFrame.InitialExchangeSurfaceLabel.resize (self.KineticsFrame.InitialExchangeSurfaceLabel.sizeHint ())

        self.KineticsFrame.TemkinNumberLineEdit = QLineEdit (self.KineticsFrame.QVBox23)
        self.KineticsFrame.TemkinNumberLineEdit.setMinimumSize (100, 25)
        self.KineticsFrame.TemkinNumberLineEdit.setMaximumSize (100, 25)
        self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))

        self.KineticsFrame.KineticConstantLineEdit = QLineEdit (self.KineticsFrame.QVBox23)
        self.KineticsFrame.KineticConstantLineEdit.setMinimumSize (100, 25)
        self.KineticsFrame.KineticConstantLineEdit.setMaximumSize (100, 25)
        self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))

        self.KineticsFrame.InitialExchangeSurfaceLineEdit = QLineEdit (self.KineticsFrame.QVBox23)
        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setMinimumSize (100, 25)
        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setMaximumSize (100, 25)
        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))

        self.KineticsFrame.QHBox241 = QHBox (self.KineticsFrame.QVGroupBox24)

        self.KineticsFrame.SphereModelExponentRadioButton = QRadioButton ('Sphere Model Exponent', self.KineticsFrame.QHBox241)
        self.connect (self.KineticsFrame.SphereModelExponentRadioButton, SIGNAL ('clicked ()'), self.KineticsFrame_sphereModelExponent_enabled)
        
        self.KineticsFrame.QHBox243 = QHBox (self.KineticsFrame.QVGroupBox24)
        self.KineticsFrame.QHBox243.setMargin (0)
        self.KineticsFrame.QHBox243.setSpacing (5)
        self.KineticsFrame.QHBox243.setMinimumSize (20, 10)
        self.KineticsFrame.QHBox243.setMaximumSize (20, 10)

        self.KineticsFrame.QHBox242 = QHBox (self.KineticsFrame.QVGroupBox24)
        self.KineticsFrame.QHBox242.setMargin (0)
        self.KineticsFrame.QHBox242.setSpacing (5)

        self.KineticsFrame.SphereModelExponentLineEdit = QLineEdit (self.KineticsFrame.QHBox242)
        self.KineticsFrame.SphereModelExponentLineEdit.setMinimumSize (100, 25)
        self.KineticsFrame.SphereModelExponentLineEdit.setMaximumSize (100, 25)

        if SphereModelExponent_On == 0:
            self.KineticsFrame.SphereModelExponentLineEdit.clear ()
            self.KineticsFrame.SphereModelExponentLineEdit.setEnabled (0)
        elif SphereModelExponent_On == 1:
            self.KineticsFrame.SphereModelExponentLineEdit.setEnabled (1)
            self.KineticsFrame.SphereModelExponentLineEdit.setText (str (SphereModelExponent))

        self.KineticsFrame.SphereModelExponentLineEdit.setEnabled (0)

#----------------------------------------------------------------------------------------------       

        self.KineticsFrame.QHGroupBox3 = QHGroupBox ('Specific Rate Parameters', self.KineticsFrame)
        self.KineticsFrame.QHGroupBox3.setMargin (10)
        self.KineticsFrame.QHGroupBox3.setMidLineWidth (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBox3)

        self.KineticsFrame.SpecificRateTextEdit = QTextEdit (self.KineticsFrame.QHGroupBox3)
        self.KineticsFrame.SpecificRateTextEdit.setMinimumHeight (100)
        self.KineticsFrame.SpecificRateTextEdit.setMaximumHeight (100)
        
#----------------------------------------------------------------------------------------------       
       
        self.StandardRateParameters_activate ()
        
#----------------------------------------------------------------------------------------------       
        
        self.KineticsFrame.QHGroupBox4 = QHGroupBox (self.KineticsFrame)
        self.KineticsFrame.QHGroupBox4.setMargin (10)
        self.KineticsFrame.QHGroupBox4.setMidLineWidth (0)
        self.KineticsFrame.mainLayout.addWidget (self.KineticsFrame.QHGroupBox4)

        self.KineticsFrame.OKPB = QPushButton ('OK', self.KineticsFrame.QHGroupBox4)
        self.KineticsFrame.ChangeCreatePB = QPushButton ('Change / Create', self.KineticsFrame.QHGroupBox4)
        self.KineticsFrame.DeletePB = QPushButton ('Delete', self.KineticsFrame.QHGroupBox4)
        self.KineticsFrame.CancelPB = QPushButton ('Cancel', self.KineticsFrame.QHGroupBox4)
        self.KineticsFrame.HelpPB = QPushButton ('&Help', self.KineticsFrame.QHGroupBox4)            

        self.connect (self.KineticsFrame.OKPB, SIGNAL ('clicked ()'), self.KineticsFrame_ok)
        self.connect (self.KineticsFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.KineticsFrame_changecreate)
        self.connect (self.KineticsFrame.DeletePB, SIGNAL ('clicked ()'), self.KineticsFrame_delete)
        self.connect (self.KineticsFrame.CancelPB, SIGNAL ('clicked ()'), self.KineticsFrame_cancel)
        self.connect (self.KineticsFrame.HelpPB, SIGNAL ('clicked ()'), self.KineticsFrame_help)      

#----------------------------------------------------------------------------------------------       

        self.KineticsFrame.show()

#----------------------------------------------------------------------------------------------       

    def KineticsFrame_ok (self):

        self.KineticsFrame.close ()

    def KineticsFrame_changecreate (self):

        global KineticRates_list
        global AqueousStates_KineticRates_list
        global AqueousStates_KineticRates_Properties_list
        
        States = []
        i = 0
        while i < len (AqueousStates_list):
            AS_tmp = str (AqueousStates_list [i])
            if AS_tmp in States:
                pass
            else:
                States.append (AS_tmp)
            i = i+1
        KineticRates_list = []
        i = 0
        while i < len (AqueousStates_KineticRates_list):
            KineticRate_tmp = str (AqueousStates_KineticRates_list [i][1])
            if KineticRate_tmp in KineticRates_list:
                pass
            else:
                KineticRates_list.append (KineticRate_tmp)
            i = i+1

        Temp_list = []
        
        if str (self.KineticsFrame.AqueousStateLineEdit.text ()) == '' or str (self.KineticsFrame.AqueousStateLineEdit.text ()) not in States:
            self.KineticsFrame_ChangeCreate_NoAS_MB = QMessageBox()
            self.KineticsFrame_ChangeCreate_NoAS_MB.setCaption ('Error')
            self.KineticsFrame_ChangeCreate_NoAS_MB.setText ('You have to select an Aqueous State.')
            self.KineticsFrame_ChangeCreate_NoAS_MB.setIcon (QMessageBox.Critical)
            self.KineticsFrame_ChangeCreate_NoAS_MB.show ()
        else:
            if str (self.KineticsFrame.KineticRateLineEdit.text ()) == '':
                self.KineticsFrame_ChangeCreate_NoGP_MB = QMessageBox()
                self.KineticsFrame_ChangeCreate_NoGP_MB.setCaption ('Error')
                self.KineticsFrame_ChangeCreate_NoGP_MB.setText ('You have to select a Kinetic Rate.')
                self.KineticsFrame_ChangeCreate_NoGP_MB.setIcon (QMessageBox.Critical)
                self.KineticsFrame_ChangeCreate_NoGP_MB.show ()            
            else:
                Temp_list.append (str (self.KineticsFrame.AqueousStateLineEdit.text ()))
                Temp_list.append (str (self.KineticsFrame.KineticRateLineEdit.text ()))
	
	if Temp_list in AqueousStates_KineticRates_list:
	
	    index = AqueousStates_KineticRates_list.index (Temp_list)
            if self.KineticsFrame.Organizer[0].isChecked ():
                AqueousStates_KineticRates_Properties_list [index][0] = 'Standard'
                AqueousStates_KineticRates_Properties_list [index][1] = str (self.KineticsFrame.TemkinNumberLineEdit.text ())
                AqueousStates_KineticRates_Properties_list [index][2] = str (self.KineticsFrame.KineticConstantLineEdit.text ())
                AqueousStates_KineticRates_Properties_list [index][3] = str (self.KineticsFrame.InitialExchangeSurfaceLineEdit.text ())
                if self.KineticsFrame.SphereModelExponentRadioButton.isChecked ():
                    AqueousStates_KineticRates_Properties_list [index][4] = 'On'
                    AqueousStates_KineticRates_Properties_list [index][5] = str (self.KineticsFrame.SphereModelExponentLineEdit.text ())
                else:
                    AqueousStates_KineticRates_Properties_list [index][4] = 'Off'
                    AqueousStates_KineticRates_Properties_list [index][5] = ''
            elif self.KineticsFrame.Organizer[1].isChecked ():
                AqueousStates_KineticRates_Properties_list [index][0] = 'Specific'
                AqueousStates_KineticRates_Properties_list [index][1] = str (self.KineticsFrame.SpecificRateTextEdit.text ())
                #specific_rate_file = open ('./specific_rate.txt', 'w')
                #specific_rate_file.write (str (self.KineticsFrame.SpecificRateTextEdit.text ()))
                #specific_rate_file.close ()
                AqueousStates_KineticRates_Properties_list [index][2] = ''
                AqueousStates_KineticRates_Properties_list [index][3] = ''
                AqueousStates_KineticRates_Properties_list [index][4] = ''
                AqueousStates_KineticRates_Properties_list [index][5] = ''
                
        elif Temp_list != []:
	
            Temp_Properties_list = []
            
            if self.KineticsFrame.Organizer[0].isChecked ():
            
                Temp_Properties_list.append ('Standard')
                Temp_Properties_list.append (str (self.KineticsFrame.TemkinNumberLineEdit.text ()))
                Temp_Properties_list.append (str (self.KineticsFrame.KineticConstantLineEdit.text ()))
                Temp_Properties_list.append (str (self.KineticsFrame.InitialExchangeSurfaceLineEdit.text ()))
                if self.KineticsFrame.SphereModelExponentRadioButton.isChecked ():
                    Temp_Properties_list.append ('On')
                    Temp_Properties_list.append (str (self.KineticsFrame.SphereModelExponentLineEdit.text ()))
                else:
                    Temp_Properties_list.append ('Off')
                    Temp_Properties_list.append ('')
#debug_kinetics                
            elif self.KineticsFrame.Organizer[1].isChecked ():
                Temp_Properties_list.append ('Specific')
                Temp_Properties_list.append (str (self.KineticsFrame.SpecificRateTextEdit.text ()))
                #specific_rate_file = open ('./specific_rate.txt', 'w')
                #specific_rate_file.write (str (self.KineticsFrame.SpecificRateTextEdit.text ()))
                #specific_rate_file.close ()
                Temp_Properties_list.append ('')
                Temp_Properties_list.append ('')
                Temp_Properties_list.append ('')
                Temp_Properties_list.append ('')

            AqueousStates_KineticRates_list.append (Temp_list)
            AqueousStates_KineticRates_Properties_list.append (Temp_Properties_list)

            if str (self.KineticsFrame.KineticRateLineEdit.text ()) in KineticRates_list:
                pass
            else:
                self.KineticsFrame.KineticRatesComboBox.insertItem (self.KineticsFrame.KineticRateLineEdit.text (), self.KineticsFrame.KineticRatesComboBox.currentItem ())

        self.KineticsFrame.KineticRatesComboBox.setCurrentItem (0)
        self.KineticsFrame.AqueousStateLineEdit.clear ()
        self.KineticsFrame.KineticRateLineEdit.clear ()
        self.KineticsFrame.Organizer[0].setChecked (1)
        self.StandardRateParameters_activate ()
        self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
        self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
        self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
        self.KineticsFrame_sphereModelExponent_enabled ()

        KineticRates_list = []
        i = 0
        while i < len (AqueousStates_KineticRates_list):
            KineticRate_tmp = str (AqueousStates_KineticRates_list [i][1])
            if KineticRate_tmp in KineticRates_list:
                pass
            else:
                KineticRates_list.append (KineticRate_tmp)
            i = i+1
                    
    def KineticsFrame_delete (self):

        global KineticRates_list
        global AqueousStates_KineticRates_list
        global AqueousStates_KineticRates_Properties_list

        if len (AqueousStates_KineticRates_list) == 0:
            self.KineticsFrame_Empty_list_MB = QMessageBox()
            self.KineticsFrame_Empty_list_MB.setCaption ('Error')
            self.KineticsFrame_Empty_list_MB.setText ('There is no association between\nan aqueous state and a Kinetic Rate.\nYou can\'t delete anything.')
            self.KineticsFrame_Empty_list_MB.setIcon (QMessageBox.Critical)
            self.KineticsFrame_Empty_list_MB.show ()
            
        else:
            test_list = []
            test_list.append (str (self.KineticsFrame.AqueousStateLineEdit.text ()))
            test_list.append (str (self.KineticsFrame.KineticRateLineEdit.text ()))

            if (((self.KineticsFrame.AqueousStatesComboBox.count ()) != 0) and ((self.KineticsFrame.KineticRatesComboBox.count ()) != 0)):
                if test_list [0] != '':

                    i = 0
                    again = 1
                    while i < len (AqueousStates_KineticRates_list) and again:

                        if str (self.KineticsFrame.KineticRateLineEdit.text ()) == '':
                            self.KineticsFrame_NoKineticRateMB = QMessageBox()
                            self.KineticsFrame_NoKineticRateMB.setCaption ('Error')
                            self.KineticsFrame_NoKineticRateMB.setText ('You have to select a Kinetic Rate.')
                            self.KineticsFrame_NoKineticRateMB.setIcon (QMessageBox.Critical)
                            self.KineticsFrame_NoKineticRateMB.show ()

                        elif test_list in AqueousStates_KineticRates_list:
                            index = AqueousStates_KineticRates_list.index (test_list)
                            again = 0
                            self.KineticsFrame.KineticRatesComboBox.removeItem (self.KineticsFrame.KineticRatesComboBox.currentItem ())
                            del AqueousStates_KineticRates_list [index]
                            del AqueousStates_KineticRates_Properties_list [index]
                            self.KineticsFrame.AqueousStateLineEdit.clear ()
                            self.KineticsFrame.KineticRateLineEdit.clear ()
                            self.KineticsFrame.Organizer[0].setChecked (1)
                            self.StandardRateParameters_activate ()
                            self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
                            self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
                            self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
                            self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                            self.KineticsFrame_sphereModelExponent_enabled ()
                        else:
                            self.KineticsFrame_NotFindMB = QMessageBox()
                            self.KineticsFrame_NotFindMB.setCaption ('Error')
                            self.KineticsFrame_NotFindMB.setText ('The Association you are trying\nto delete doesn\'t exist.')
                            self.KineticsFrame_NotFindMB.setIcon (QMessageBox.Critical)
                            self.KineticsFrame_NotFindMB.show ()                            
                        i = i+1

                else:
                    if str (self.KineticsFrame.AqueousStateLineEdit.text ()) == '':
                        self.KineticsFrame_SelectASMB = QMessageBox()
                        self.KineticsFrame_SelectASMB.setCaption ('Error')
                        self.KineticsFrame_SelectASMB.setText ('You have to select an Aqueous State.')
                        self.KineticsFrame_SelectASMB.setIcon (QMessageBox.Critical)
                        self.KineticsFrame_SelectASMB.show ()

            else:
                if (self.KineticsFrame.AqueousStatesComboBox.count ()) == 0: 
                    self.KineticsFrame_NoASMB = QMessageBox()
                    self.KineticsFrame_NoASMB.setCaption ('Error')
                    self.KineticsFrame_NoASMB.setText ('There is no Aqueous State.')
                    self.KineticsFrame_NoASMB.setIcon (QMessageBox.Critical)
                    self.KineticsFrame_NoASMB.show ()

                elif (self.KineticsFrame.KineticRatesComboBox.count ()) == 0:
                    self.KineticsFrame_NoKRMB = QMessageBox()
                    self.KineticsFrame_NoKRMB.setCaption ('Error')
                    self.KineticsFrame_NoKRMB.setText ('There is no Kinetic Rate.')
                    self.KineticsFrame_NoKRMB.setIcon (QMessageBox.Critical)
                    self.KineticsFrame_NoKRMB.show ()

    def KineticsFrame_cancel (self):

        self.KineticsFrame.close ()

    def KineticsFrame_help (self):

        self.Help ()

    def Kinetics_AqueousStatesComboBox_activate (self):

        global KineticRates_list
        global AqueousStates_KineticRates_list
        global AqueousStates_KineticRates_Properties_list

        self.KineticsFrame.AqueousStateLineEdit.setText (self.KineticsFrame.AqueousStatesComboBox.currentText ())
#debug_tooltip        



        i = 0
        already_associated = ''
        while i < len (AqueousStates_KineticRates_list):
            if str (AqueousStates_KineticRates_list [i][0]) == str (self.KineticsFrame.AqueousStatesComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_KineticRates_list [i][1])
		if str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Specific':
		    already_associated = already_associated +' (specific rate)'
		else:
		    already_associated = already_associated +' (standard rate)\n\tTemkin number: '+ str (AqueousStates_KineticRates_Properties_list [i][1]) + '\n\tKinetic constant: '+ str (AqueousStates_KineticRates_Properties_list [i][2]) + '\n\tInitial exchange surface: '+ str (AqueousStates_KineticRates_Properties_list [i][3])
		    if str (AqueousStates_KineticRates_Properties_list [i][4]) == 'On':
		        already_associated = already_associated +'\n\tSphere model exponent: '+str (AqueousStates_KineticRates_Properties_list [i][5])
	            else:
		        pass
            else:
                pass
            i = i+1

        QToolTip.add (self.KineticsFrame.AqueousStateLineEdit, 'Already associated with '+ str (self.KineticsFrame.AqueousStateLineEdit.text ())+':'+already_associated)




        if str (self.KineticsFrame.KineticRateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_KineticRates_list) and again:      
                
                if (str (AqueousStates_KineticRates_list [i][0])) == (str (self.KineticsFrame.AqueousStateLineEdit.text ())):
                    if (str (AqueousStates_KineticRates_list [i][1])) == (str (self.KineticsFrame.KineticRateLineEdit.text ())):
                        again = 0
                        if str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Standard':
                            self.KineticsFrame.Organizer[0].setChecked (1)
                            self.StandardRateParameters_activate ()
                            self.KineticsFrame.TemkinNumberLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][1]))
                            self.KineticsFrame.KineticConstantLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][2]))
                            self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][3]))
                            if str (AqueousStates_KineticRates_Properties_list [i][4]) == 'On':
                                self.KineticsFrame.SphereModelExponentRadioButton.setChecked (1)
                                self.KineticsFrame_sphereModelExponent_enabled ()
                                self.KineticsFrame.SphereModelExponentLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][5]))
                            else:
                                self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                                self.KineticsFrame_sphereModelExponent_enabled ()
                        elif str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Specific':
                            self.KineticsFrame.Organizer[1].setChecked (1)
                            self.SpecificRateParameters_activate ()
                            self.KineticsFrame.TemkinNumberLineEdit.clear ()
                            self.KineticsFrame.KineticConstantLineEdit.clear ()
                            self.KineticsFrame.InitialExchangeSurfaceLineEdit.clear ()
                            self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                            self.KineticsFrame_sphereModelExponent_enabled ()
                            self.KineticsFrame.SphereModelExponentLineEdit.clear ()
                            self.KineticsFrame.SpecificRateTextEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][1]))
                    else:
                        self.KineticsFrame.Organizer[0].setChecked (1)
                        self.StandardRateParameters_activate ()
                        self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
                        self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
                        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
                        self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                        self.KineticsFrame_sphereModelExponent_enabled ()
                else:
                    self.KineticsFrame.Organizer[0].setChecked (1)
                    self.StandardRateParameters_activate ()
                    self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
                    self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
                    self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
                    self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                    self.KineticsFrame_sphereModelExponent_enabled ()
                i = i+1

    def KineticsFrame_KineticRatesComboBox_activate (self):

        global KineticRates_list
        global AqueousStates_KineticRates_list
        global AqueousStates_KineticRates_Properties_list

        self.KineticsFrame.KineticRateLineEdit.setText (self.KineticsFrame.KineticRatesComboBox.currentText ())

        i = 0
        while i < len (AqueousStates_KineticRates_list):
            KineticRate_tmp = str (AqueousStates_KineticRates_list [i][1])
            if KineticRate_tmp in KineticRates_list:
                pass
            else:
                KineticRates_list.append (KineticRate_tmp)
            i = i+1

        i = 0
        already_associated = ''
        while i < len (AqueousStates_KineticRates_list):
            if str (AqueousStates_KineticRates_list [i][1]) == str (self.KineticsFrame.KineticRatesComboBox.currentText ()):
                already_associated = already_associated +'\n - '+ str (AqueousStates_KineticRates_list [i][0])
		if str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Specific':
		    already_associated = already_associated +' (specific rate)'
		else:
		    already_associated = already_associated +' (standard rate)\n\tTemkin number: '+ str (AqueousStates_KineticRates_Properties_list [i][1]) + '\n\tKinetic constant: '+ str (AqueousStates_KineticRates_Properties_list [i][2]) + '\n\tInitial exchange surface: '+ str (AqueousStates_KineticRates_Properties_list [i][3])
		    if str (AqueousStates_KineticRates_Properties_list [i][4]) == 'On':
		        already_associated = already_associated +'\n\tSphere model exponent: '+str (AqueousStates_KineticRates_Properties_list [i][5])
	            else:
		        pass
            else:
                pass
            i = i+1

        QToolTip.add (self.KineticsFrame.AqueousStateLineEdit, 'Already associated with '+ str (self.KineticsFrame.KineticRateLineEdit.text ())+':'+already_associated)
        #try:
	if str (self.KineticsFrame.KineticRateLineEdit.text()) in KineticRates_list:
	    i = 0
	    while i < len (AqueousStates_KineticRates_list):
		if str (AqueousStates_KineticRates_list[i][1]) == str (self.KineticsFrame.KineticRateLineEdit.text()):
		    QToolTip.add (self.KineticsFrame.SpecificRateTextEdit, str (AqueousStates_KineticRates_Properties_list[i][1]))
                else:
		    pass
	        i = i+1
	#except:
	#    pass








        if str (self.KineticsFrame.AqueousStateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_KineticRates_list) and again:      

                if (str (AqueousStates_KineticRates_list [i][1])) == (str (self.KineticsFrame.KineticRateLineEdit.text ())):
                    if (str (AqueousStates_KineticRates_list [i][0])) == (str (self.KineticsFrame.AqueousStateLineEdit.text ())):
                        again = 0
                        if str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Standard':
                            self.KineticsFrame.Organizer[0].setChecked (1)
                            self.StandardRateParameters_activate ()
                            self.KineticsFrame.TemkinNumberLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][1]))
                            self.KineticsFrame.KineticConstantLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][2]))
                            self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][3]))
                            if str (AqueousStates_KineticRates_Properties_list [i][4]) == 'On':
                                self.KineticsFrame.SphereModelExponentRadioButton.setChecked (1)
                                self.KineticsFrame_sphereModelExponent_enabled ()
                                self.KineticsFrame.SphereModelExponentLineEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][5]))
                            else:
                                self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                                self.KineticsFrame_sphereModelExponent_enabled ()
                        elif str (AqueousStates_KineticRates_Properties_list [i][0]) == 'Specific':
                            self.KineticsFrame.Organizer[1].setChecked (1)
                            self.SpecificRateParameters_activate ()
                            self.KineticsFrame.TemkinNumberLineEdit.clear ()
                            self.KineticsFrame.KineticConstantLineEdit.clear ()
                            self.KineticsFrame.InitialExchangeSurfaceLineEdit.clear ()
                            self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                            self.KineticsFrame_sphereModelExponent_enabled ()
                            self.KineticsFrame.SphereModelExponentLineEdit.clear ()
                            self.KineticsFrame.SpecificRateTextEdit.setText (str (AqueousStates_KineticRates_Properties_list [i][1]))
                    else:
                        self.KineticsFrame.Organizer[0].setChecked (1)
                        self.StandardRateParameters_activate ()
                        self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
                        self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
                        self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
                        self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                        self.KineticsFrame_sphereModelExponent_enabled ()
                else:
                    self.KineticsFrame.Organizer[0].setChecked (1)
                    self.StandardRateParameters_activate ()
                    self.KineticsFrame.TemkinNumberLineEdit.setText (str (TemkinNumber))
                    self.KineticsFrame.KineticConstantLineEdit.setText (str (KineticConstant))
                    self.KineticsFrame.InitialExchangeSurfaceLineEdit.setText (str (InitialExchangeSurface))
                    self.KineticsFrame.SphereModelExponentRadioButton.setChecked (0)
                    self.KineticsFrame_sphereModelExponent_enabled ()
                i = i+1

    def StandardRateParameters_activate (self):

        self.KineticsFrame.QHGroupBox2.setEnabled (1)
        self.KineticsFrame.SpecificRateTextEdit.clear ()
        self.KineticsFrame.QHGroupBox3.setEnabled (0)

    def SpecificRateParameters_activate (self):

        self.KineticsFrame.QHGroupBox2.setEnabled (0)
        self.KineticsFrame.QHGroupBox3.setEnabled (1)
        self.KineticsFrame.SpecificRateTextEdit.setFocus ()
 
    def KineticsFrame_sphereModelExponent_enabled (self):

        if self.KineticsFrame.SphereModelExponentRadioButton.isOn ():
            self.KineticsFrame.SphereModelExponentLineEdit.setEnabled (1)
            self.KineticsFrame.SphereModelExponentLineEdit.setText (str (SphereModelExponent))
        else:
            self.KineticsFrame.SphereModelExponentLineEdit.clear ()
            self.KineticsFrame.SphereModelExponentLineEdit.setEnabled (0)

            

###########################################################################################
##                                                                                       ##
##                        KINETIC RATES FOR MINERALS FRAME (END)                         ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                        KINETIC RATES FOR COMPONENTS FRAME (BEGINNING)                 ##
##                                                                                       ##
###########################################################################################



    def Kinetics_for_components (self):

        self.KineticsForComponentsFrame = QFrame ()
        self.KineticsForComponentsFrame.setCaption ('Kinetic Rates for Components')
        setPosition (self.KineticsForComponentsFrame)

        self.KineticsForComponentsFrame.mainLayout = QVBoxLayout (self.KineticsForComponentsFrame, 10, -1, 'KineticsForComponentsFrame_mainLayout')
        self.KineticsForComponentsFrame.mainLayout.setMargin (Marge)
        self.KineticsForComponentsFrame.mainLayout.setSpacing (Space)

        self.KineticsForComponentsFrame.show ()


# debug_kinetics


###########################################################################################
##                                                                                       ##
##                        KINETIC RATES FOR COMPONENTS FRAME (END)                       ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                        (STATE) GAS PHASE FRAME (BEGINNING)                            ##
##                                                                                       ##
###########################################################################################



    def gas_phase (self):

        self.GasPhaseStateFrame = QFrame ()
        self.GasPhaseStateFrame.setCaption ('Gas Phase Composition')
        setPosition (self.GasPhaseStateFrame)

        self.GasPhaseStateFrame.mainLayout = QVBoxLayout (self.GasPhaseStateFrame, 10, -1, 'GasPhaseState_mainLayout')
        self.GasPhaseStateFrame.mainLayout.setMargin (Marge)
        self.GasPhaseStateFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        GasPhaseState_comment = Comments ['Gas_Phase']

        self.GasPhaseStateFrame.QHGroupBoxA = QHGroupBox (self.GasPhaseStateFrame)
	QToolTip.add (self.GasPhaseStateFrame.QHGroupBoxA,GasPhaseState_comment)

        self.GasPhaseStateFrame.QHGroupBoxA.setMargin (5)
        self.GasPhaseStateFrame.QHGroupBoxA.setMidLineWidth (0)
        self.GasPhaseStateFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.GasPhaseStateFrame.mainLayout.addWidget (self.GasPhaseStateFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  First Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.GasPhaseStateFrame.QHGroupBox0 = QHGroupBox (self.GasPhaseStateFrame)
        self.GasPhaseStateFrame.QHGroupBox0.setMargin (10)
        self.GasPhaseStateFrame.QHGroupBox0.setMidLineWidth (0)
        self.GasPhaseStateFrame.mainLayout.addWidget (self.GasPhaseStateFrame.QHGroupBox0)
            
        self.GasPhaseStateFrame.QVBox01 = QVBox (self.GasPhaseStateFrame.QHGroupBox0)
        self.GasPhaseStateFrame.QVBox03 = QVBox (self.GasPhaseStateFrame.QHGroupBox0)
        self.GasPhaseStateFrame.QVBox02 = QVBox (self.GasPhaseStateFrame.QHGroupBox0)
            
        self.GasPhaseStateFrame.QVBox01.setSpacing (5)
        self.GasPhaseStateFrame.QVBox01.setMargin (0)
        self.GasPhaseStateFrame.QVBox02.setSpacing (5)
        self.GasPhaseStateFrame.QVBox02.setMargin (0)

        self.GasPhaseStateFrame.QVBox03.setMinimumSize (10, 10)
        self.GasPhaseStateFrame.QVBox03.setMaximumSize (10, 10)

        self.GasPhaseStateFrame.AqueousStateLabel = QLabel ('Aqueous State', self.GasPhaseStateFrame.QVBox01)
        self.GasPhaseStateFrame.AqueousStateLabel.resize (self.GasPhaseStateFrame.AqueousStateLabel.sizeHint ())

        self.GasPhaseStateFrame.AqueousStateLineEdit = QLineEdit (self.GasPhaseStateFrame.QVBox01)
        self.GasPhaseStateFrame.AqueousStateLineEdit.setMinimumSize (200, 25)
        self.GasPhaseStateFrame.AqueousStateLineEdit.setMaximumSize (200, 25)
        self.GasPhaseStateFrame.AqueousStateLineEdit.setFocus ()
         ##      QToolTip.add ()

        self.GasPhaseStateFrame.AqueousStatesLabel = QLabel ('List of Aqueous States', self.GasPhaseStateFrame.QVBox02)
        self.GasPhaseStateFrame.AqueousStatesLabel.resize (self.GasPhaseStateFrame.AqueousStatesLabel.sizeHint ())

        self.GasPhaseStateFrame.AqueousStatesComboBox = QComboBox (self.GasPhaseStateFrame.QVBox02)
        self.GasPhaseStateFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.GasPhaseStateFrame.AqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.GasPhaseStateFrame.AqueousStatesComboBox, SIGNAL ('activated (int)'), self.GasPhaseState_AqueousStatesComboBox_activate)
        i = 0
        while i < len (AqueousStates_list):
            self.GasPhaseStateFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1
       
         ##      QToolTip.add ()

#----------------------------------------------------------------------------------------------
#  First Horizontal Box (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------

        self.GasPhaseStateFrame.QHGroupBox1 = QHGroupBox (self.GasPhaseStateFrame)
        self.GasPhaseStateFrame.QHGroupBox1.setMargin (10)
        self.GasPhaseStateFrame.QHGroupBox1.setMidLineWidth (0)
        self.GasPhaseStateFrame.mainLayout.addWidget (self.GasPhaseStateFrame.QHGroupBox1)

        self.GasPhaseStateFrame.QVBox11 = QVBox (self.GasPhaseStateFrame.QHGroupBox1)
        self.GasPhaseStateFrame.QVBox13 = QVBox (self.GasPhaseStateFrame.QHGroupBox1)
        self.GasPhaseStateFrame.QVBox12 = QVBox (self.GasPhaseStateFrame.QHGroupBox1)
            
        self.GasPhaseStateFrame.QVBox11.setSpacing (5)
        self.GasPhaseStateFrame.QVBox11.setMargin (0)
        self.GasPhaseStateFrame.QVBox12.setSpacing (5)
        self.GasPhaseStateFrame.QVBox12.setMargin (0)

        self.GasPhaseStateFrame.QVBox13.setMinimumSize (10, 10)
        self.GasPhaseStateFrame.QVBox13.setMaximumSize (10, 10)
            
        self.GasPhaseStateFrame.GasPhaseLabel = QLabel ('Gas Phase', self.GasPhaseStateFrame.QVBox11)
        self.GasPhaseStateFrame.GasPhaseLabel.resize (self.GasPhaseStateFrame.GasPhaseLabel.sizeHint ())
            
        self.GasPhaseStateFrame.GasPhaseLineEdit = QLineEdit (self.GasPhaseStateFrame.QVBox11)
        self.GasPhaseStateFrame.GasPhaseLineEdit.setMinimumSize (200, 25)
        self.GasPhaseStateFrame.GasPhaseLineEdit.setMaximumSize (200, 25)
         ##      QToolTip.add ()

        self.GasPhaseStateFrame.GasPhaseListLabel = QLabel ('List of Gases', self.GasPhaseStateFrame.QVBox12)
        self.GasPhaseStateFrame.GasPhaseListLabel.resize (self.GasPhaseStateFrame.GasPhaseListLabel.sizeHint ())
            
        self.GasPhaseStateFrame.GasPhaseListComboBox = QComboBox (self.GasPhaseStateFrame.QVBox12)
        self.GasPhaseStateFrame.GasPhaseListComboBox.setMinimumSize (200, 25)
        self.GasPhaseStateFrame.GasPhaseListComboBox.setMaximumSize (200, 25)
        self.connect (self.GasPhaseStateFrame.GasPhaseListComboBox, SIGNAL ('activated (int)'), self.GasPhaseStateFrame_GasPhaseListComboBox_activate)

        i = 0
        Gas_list = []
        while i < len (AqueousStates_Gas_list):
            gas = str (AqueousStates_Gas_list [i][1])
            if gas in Gas_list:
                pass
            elif gas in Database_gases_Names_list:
                pass
            else:
                Gas_list.append (gas)
            i = i+1
        j = 0
        while j < len (Gas_list):
            self.GasPhaseStateFrame.GasPhaseListComboBox.insertItem (Gas_list [j])
            j = j+1
        j = 0
        while j < len (Database_gases_Names_list):
            self.GasPhaseStateFrame.GasPhaseListComboBox.insertItem (Database_gases_Names_list [j])
            j = j+1           
            
#----------------------------------------------------------------------------------------------
#  Second Horizontal Box (end)
#----------------------------------------------------------------------------------------------
 
      
#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------
 
        self.GasPhaseStateFrame.QHGroupBox2 = QHGroupBox (self.GasPhaseStateFrame)
        self.GasPhaseStateFrame.QHGroupBox2.setMargin (10)
        self.GasPhaseStateFrame.QHGroupBox2.setMidLineWidth (0)
        self.GasPhaseStateFrame.mainLayout.addWidget (self.GasPhaseStateFrame.QHGroupBox2)
            
        self.GasPhaseStateFrame.QVBox21 = QVBox (self.GasPhaseStateFrame.QHGroupBox2)
        self.GasPhaseStateFrame.QVBox23 = QVBox (self.GasPhaseStateFrame.QHGroupBox2)
        self.GasPhaseStateFrame.QVBox22 = QVBox (self.GasPhaseStateFrame.QHGroupBox2)

        self.GasPhaseStateFrame.QVBox21.setMargin (0)
        self.GasPhaseStateFrame.QVBox21.setSpacing (5)
        self.GasPhaseStateFrame.QVBox22.setMargin (0)
        self.GasPhaseStateFrame.QVBox22.setSpacing (5)

        self.GasPhaseStateFrame.QVBox23.setMinimumSize (10, 10)
        self.GasPhaseStateFrame.QVBox23.setMaximumSize (10, 10)
             
        self.GasPhaseStateFrame.SaturationIndexLabel = QLabel ('Log of the partial pressure', self.GasPhaseStateFrame.QVBox21)
        self.GasPhaseStateFrame.SaturationIndexLabel.resize (self.GasPhaseStateFrame.SaturationIndexLabel.sizeHint ())

        self.GasPhaseStateFrame.SaturationIndexLineEdit = QLineEdit (self.GasPhaseStateFrame.QVBox21)
        self.GasPhaseStateFrame.SaturationIndexLineEdit.setMinimumSize (200, 25)
        self.GasPhaseStateFrame.SaturationIndexLineEdit.setMaximumSize (200, 25)

##  The default value of amount is 10

#----------------------------------------------------------------------------------------------
#  Third Horizontal Box (end)
#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (beginning)
#----------------------------------------------------------------------------------------------
    
        self.GasPhaseStateFrame.QHGroupBox3 = QHGroupBox (self.GasPhaseStateFrame)
        self.GasPhaseStateFrame.QHGroupBox3.setMargin (10)
        self.GasPhaseStateFrame.QHGroupBox3.setMidLineWidth (0)
        self.GasPhaseStateFrame.mainLayout.addWidget (self.GasPhaseStateFrame.QHGroupBox3)

        self.GasPhaseStateFrame.OKPB = QPushButton ('OK', self.GasPhaseStateFrame.QHGroupBox3)
        self.GasPhaseStateFrame.ChangeCreatePB = QPushButton ('Change / Create', self.GasPhaseStateFrame.QHGroupBox3)
        self.GasPhaseStateFrame.DeleteGasPB = QPushButton ('Delete Gas', self.GasPhaseStateFrame.QHGroupBox3)
        self.GasPhaseStateFrame.DeleteAssociationPB = QPushButton ('Delete Association', self.GasPhaseStateFrame.QHGroupBox3)
        self.GasPhaseStateFrame.CancelPB = QPushButton ('Cancel', self.GasPhaseStateFrame.QHGroupBox3)
        self.GasPhaseStateFrame.HelpPB = QPushButton ('&Help', self.GasPhaseStateFrame.QHGroupBox3)            

        self.connect (self.GasPhaseStateFrame.OKPB, SIGNAL ('clicked ()'), self.GasPhaseStateFrame_ok)
        self.connect (self.GasPhaseStateFrame.ChangeCreatePB, SIGNAL ('clicked ()'), self.GasPhaseStateFrame_changecreate)
        self.connect (self.GasPhaseStateFrame.DeleteGasPB,  SIGNAL ('clicked ()'), self.GasPhaseStateFrame_delete_gas)
        self.connect (self.GasPhaseStateFrame.DeleteAssociationPB,  SIGNAL ('clicked ()'), self.GasPhaseStateFrame_delete_association)
        self.connect (self.GasPhaseStateFrame.CancelPB, SIGNAL ('clicked ()'), self.GasPhaseStateFrame_cancel)
        self.connect (self.GasPhaseStateFrame.HelpPB, SIGNAL ('clicked ()'), self.GasPhaseStateFrame_help)

#----------------------------------------------------------------------------------------------
#  Fourth Horizontal Box (end)
#----------------------------------------------------------------------------------------------
        
        self.GasPhaseStateFrame.show ()
        
#----------------------------------------------------------------------------------------------
#  Methods
#----------------------------------------------------------------------------------------------

    def GasPhaseStateFrame_ok (self):

        self.GasPhaseStateFrame.close ()

    def GasPhaseStateFrame_changecreate (self):

        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list

        i = 0
        Gas_list = []
        while i < len (AqueousStates_Gas_list):
            gas = str (AqueousStates_Gas_list [i][1])
            if gas in Gas_list:
                pass
            elif gas in Database_gases_Names_list:
                pass
            else:
                Gas_list.append (gas)
            i = i+1
        States = []
        i = 0
        while i < len (AqueousStates_list):
            AS_tmp = str (AqueousStates_list [i])
            if AS_tmp in States:
                pass
            else:
                States.append (AS_tmp)
            i = i+1
        Temp_list = []
        if str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()) == '' or str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()) not in States:
            self.GasPhase_ChangeCreate_NoAS_MB = QMessageBox()
            self.GasPhase_ChangeCreate_NoAS_MB.setCaption ('Error')
            self.GasPhase_ChangeCreate_NoAS_MB.setText ('You have to select an Aqueous State.')
            self.GasPhase_ChangeCreate_NoAS_MB.setIcon (QMessageBox.Critical)
            self.GasPhase_ChangeCreate_NoAS_MB.show ()
        else:
            if str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) == '':
                self.GasPhase_ChangeCreate_NoGP_MB = QMessageBox()
                self.GasPhase_ChangeCreate_NoGP_MB.setCaption ('Error')
                self.GasPhase_ChangeCreate_NoGP_MB.setText ('You have to select a Gas Phase.')
                self.GasPhase_ChangeCreate_NoGP_MB.setIcon (QMessageBox.Critical)
                self.GasPhase_ChangeCreate_NoGP_MB.show ()            
            else:
                Temp_list.append (str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()))
                Temp_list.append (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()))
	
	if Temp_list in AqueousStates_Gas_list:
	
	    index = AqueousStates_Gas_list.index (Temp_list)
            if str (self.GasPhaseStateFrame.SaturationIndexLineEdit.text ()) == '':
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB = QMessageBox()
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setCaption ('Warning')
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setText ('The Log of the partial pressure has not been set.\nDefault will be 0.0')
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setIcon (QMessageBox.Warning)
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.show ()
                self.GasPhaseStateFrame.SaturationIndexLineEdit.setText ('0.0')

            else:
                AqueousStates_Gas_Properties_list [index][0] = str (self.GasPhaseStateFrame.SaturationIndexLineEdit.text ())
                self.GasPhaseStateFrame.AqueousStateLineEdit.clear ()
                self.GasPhaseStateFrame.GasPhaseLineEdit.clear ()
                self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                self.GasPhaseStateFrame.AqueousStateLineEdit.setFocus ()

        elif Temp_list != []:
	
            Temp_Properties_list = []
            if str (self.GasPhaseStateFrame.SaturationIndexLineEdit.text ()) == '':
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB = QMessageBox()
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setCaption ('Warning')
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setText ('The Log of the partial pressure has not been set.\nDefault will be 0.0')
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.setIcon (QMessageBox.Warning)
                self.GasPhase_ChangeCreate_NoSaturationIndex_MB.show ()
                self.GasPhaseStateFrame.SaturationIndexLineEdit.setText ('0.0')
                
            else:
                Temp_Properties_list.append (str (self.GasPhaseStateFrame.SaturationIndexLineEdit.text ()))
                AqueousStates_Gas_list.append (Temp_list)
                AqueousStates_Gas_Properties_list.append (Temp_Properties_list)
                if (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) in Gas_list) or (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) in Database_gases_Names_list):
                #if (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) in Gas_list):
                    pass
                else:
                    self.GasPhaseStateFrame.GasPhaseListComboBox.insertItem (self.GasPhaseStateFrame.GasPhaseLineEdit.text (), self.GasPhaseStateFrame.GasPhaseListComboBox.currentItem ())
                    
                self.GasPhaseStateFrame.AqueousStateLineEdit.clear ()
                self.GasPhaseStateFrame.GasPhaseLineEdit.clear ()
                self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                self.GasPhaseStateFrame.AqueousStateLineEdit.setFocus ()
        i = 0
        Gas_list = []
        while i < len (AqueousStates_Gas_list):
            gas = str (AqueousStates_Gas_list [i][1])
            if gas in Gas_list:
                pass
            elif gas in Database_gases_Names_list:
                pass
            else:
                Gas_list.append (gas)
            i = i+1
               
    def GasPhaseStateFrame_delete_association (self):

        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list

        if len (AqueousStates_Gas_list) == 0:
            self.GasPhase_Empty_list_MB = QMessageBox()
            self.GasPhase_Empty_list_MB.setCaption ('Error')
            self.GasPhase_Empty_list_MB.setText ('There is no association between\nan aqueous state and a Gas Phase.\nYou can\'t delete anything.')
            self.GasPhase_Empty_list_MB.setIcon (QMessageBox.Critical)
            self.GasPhase_Empty_list_MB.show ()
            
        else:
            test_list = []
            test_list.append (str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()))
            test_list.append (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()))

            if (((self.GasPhaseStateFrame.AqueousStatesComboBox.count ()) != 0) and ((self.GasPhaseStateFrame.GasPhaseListComboBox.count ()) != 0)):
                if test_list [0] != '':

                    i = 0
                    again = 1
                    while i < len (AqueousStates_Gas_list) and again:

                        if str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) == '':
                            self.GasPhase_NoGasMB = QMessageBox()
                            self.GasPhase_NoGasMB.setCaption ('Error')
                            self.GasPhase_NoGasMB.setText ('You have to select a Gas Phase.')
                            self.GasPhase_NoGasMB.setIcon (QMessageBox.Critical)
                            self.GasPhase_NoGasMB.show ()                    

                        elif test_list in AqueousStates_Gas_list:
                            index = AqueousStates_Gas_list.index (test_list)
                            again = 0
                            del AqueousStates_Gas_list [index]
                            del AqueousStates_Gas_Properties_list [index]
                            self.GasPhaseStateFrame.AqueousStateLineEdit.clear ()
                            self.GasPhaseStateFrame.GasPhaseLineEdit.clear ()
                            self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                            self.GasPhaseStateFrame.AqueousStateLineEdit.setFocus ()

                        else:
                            self.GasPhase_NotFindMB = QMessageBox()
                            self.GasPhase_NotFindMB.setCaption ('Error')
                            self.GasPhase_NotFindMB.setText ('The Association you are trying\nto delete doesn\'t exist.')
                            self.GasPhase_NotFindMB.setIcon (QMessageBox.Critical)
                            self.GasPhase_NotFindMB.show ()                            
                        i = i+1

                else:
                    if str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()) == '':
                        self.GasPhase_SelectASMB = QMessageBox()
                        self.GasPhase_SelectASMB.setCaption ('Error')
                        self.GasPhase_SelectASMB.setText ('You have to select an Aqueous State.')
                        self.GasPhase_SelectASMB.setIcon (QMessageBox.Critical)
                        self.GasPhase_SelectASMB.show ()

            else:
                if (self.GasPhaseStateFrame.AqueousStatesComboBox.count ()) == 0: 
                    self.GasPhase_NoASMB = QMessageBox()
                    self.GasPhase_NoASMB.setCaption ('Error')
                    self.GasPhase_NoASMB.setText ('There is no Aqueous State.')
                    self.GasPhase_NoASMB.setIcon (QMessageBox.Critical)
                    self.GasPhase_NoASMB.show ()

                elif (self.GasPhaseStateFrame.GasPhaseListComboBox.count ()) == 0:
                    self.GasPhase_GMB = QMessageBox()
                    self.GasPhase_GMB.setCaption ('Error')
                    self.GasPhase_GMB.setText ('There is no Gas Phase.')
                    self.GasPhase_GMB.setIcon (QMessageBox.Critical)
                    self.GasPhase_GMB.show ()

    def GasPhaseStateFrame_delete_gas (self):

        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list
        global Gas_list
        global Database_gases_Names_list

        i = 0
        Gas_list = []
        while i < len (AqueousStates_Gas_list):
            gas = str (AqueousStates_Gas_list [i][1])
            if gas in Gas_list:
                pass
            elif gas in Database_gases_Names_list:
                pass
            else:
                Gas_list.append (gas)
            i = i+1

        if ((self.GasPhaseStateFrame.GasPhaseListComboBox.count ()) != 0) and str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) != '':
                
            if (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ())) in Database_gases_Names_list:
                self.GasPhase_DatabaseMB2 = QMessageBox()
                self.GasPhase_DatabaseMB2.setCaption ('Warning')
                self.GasPhase_DatabaseMB2.setText ('\"'+str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ())+'\" is an element of the database.\nYou are not allowed to delete it.')
                self.GasPhase_DatabaseMB2.setIcon (QMessageBox.Warning)
                self.GasPhase_DatabaseMB2.show ()
            elif str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) in Gas_list:
                self.deleteGasMB = QMessageBox.warning (self.GasPhaseStateFrame, 'Warning', 'This gas has already been associated with an aqueous solution.\nDo you really want to delete it, and therefore delete the association too ?', QMessageBox.Yes | QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
                if self.deleteGasMB == 3:         #  This number corresponds to the "YES" button   
                    index = Gas_list.index (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()))
                    self.GasPhaseStateFrame.GasPhaseListComboBox.removeItem (self.GasPhaseStateFrame.GasPhaseListComboBox.currentItem ())
                    del Gas_list [index]
                    
                    i = (len (AqueousStates_Gas_list) - 1)
                    while i > -1:
                        if str (AqueousStates_Gas_list [i][1]) == str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()):
                            del AqueousStates_Gas_list [i]
                            del AqueousStates_Gas_Properties_list [i]
                            
                        else:
                            pass
                        i = i-1
                    self.GasPhaseStateFrame.AqueousStateLineEdit.clear ()
                    self.GasPhaseStateFrame.GasPhaseLineEdit.clear ()
                    self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                    
                    if ((self.GasPhaseStateFrame.GasPhaseListComboBox.count ()) != 0):
                        self.GasPhaseStateFrame.GasPhaseListComboBox.setCurrentItem (0)
                else:
                    pass
        else:
            if ((self.GasPhaseStateFrame.GasPhaseListComboBox.count ()) == 0):
                self.GasPhaseMB = QMessageBox()
                self.GasPhaseMB.setCaption ('Error')
                self.GasPhaseMB.setText ('There is no Gas Phase.')
                self.GasPhaseMB.setIcon (QMessageBox.Critical)
                self.GasPhaseMB.show ()
            elif str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) == '':
                self.GasPhaseMB2 = QMessageBox()
                self.GasPhaseMB2.setCaption ('Error')
                self.GasPhaseMB2.setText ('You have to select a Gas Phase.')
                self.GasPhaseMB2.setIcon (QMessageBox.Critical)
                self.GasPhaseMB2.show ()














# debug_gas


    def GasPhaseStateFrame_cancel (self):

        self.GasPhaseStateFrame.close ()

    def GasPhaseStateFrame_help (self):

        self.Help ()

    def GasPhaseState_AqueousStatesComboBox_activate (self):

        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list

        self.GasPhaseStateFrame.AqueousStateLineEdit.setText (self.GasPhaseStateFrame.AqueousStatesComboBox.currentText ())
        
        if str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_Gas_list) and again:      
                
                if (str (AqueousStates_Gas_list [i][0])) == (str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ())):
                    if (str (AqueousStates_Gas_list [i][1])) == (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ())):
                        again = 0
                        self.GasPhaseStateFrame.SaturationIndexLineEdit.setText (str (AqueousStates_Gas_Properties_list [i][0]))
                    else:
                        self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                else:
                    self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                i = i+1

    def GasPhaseStateFrame_GasPhaseListComboBox_activate (self):

        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list

        self.GasPhaseStateFrame.GasPhaseLineEdit.setText (self.GasPhaseStateFrame.GasPhaseListComboBox.currentText ())
        
        if str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ()) != '':
            i = 0
            again = 1
            while i < len (AqueousStates_Gas_list) and again:      
                
                if (str (AqueousStates_Gas_list [i][1])) == (str (self.GasPhaseStateFrame.GasPhaseLineEdit.text ())):
                    if (str (AqueousStates_Gas_list [i][0])) == (str (self.GasPhaseStateFrame.AqueousStateLineEdit.text ())):
                        again = 0
                        self.GasPhaseStateFrame.SaturationIndexLineEdit.setText (str (AqueousStates_Gas_Properties_list [i][0]))
                    else:
                        self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                else:
                    self.GasPhaseStateFrame.SaturationIndexLineEdit.clear ()
                i = i+1




###########################################################################################
##                                                                                       ##
##                        (STATE) GAS PHASE FRAME (END)                                  ##
##                                                                                       ##
###########################################################################################



    
          
###########################################################################################
##                                                                                       ##
##                           MATERIALS FRAME (BEGINNING)                                 ##
##                                                                                       ##
###########################################################################################



    def materials (self):

        self.MaterialsFrame = QFrame ()
        self.MaterialsFrame.setCaption ('Materials')
        setPosition (self.MaterialsFrame)

        self.MaterialsFrame.mainLayout = QVBoxLayout (self.MaterialsFrame, 10, -1, 'MaterialsFrame_mainLayout')
        self.MaterialsFrame.mainLayout.setMargin (Marge)
        self.MaterialsFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------
        
        self.MaterialsFrame.QHGroupBoxA = QHGroupBox (self.MaterialsFrame)
	QToolTip.add (self.MaterialsFrame.QHGroupBoxA,Comments ['Materials'])

        self.MaterialsFrame.QHGroupBoxA.setMargin (5)
        self.MaterialsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MaterialsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MaterialsFrame.mainLayout.addWidget (self.MaterialsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MaterialsFrame.QHGroupBox0 = QHGroupBox (self.MaterialsFrame)
        self.MaterialsFrame.QHGroupBox0.setMargin (0)
        self.MaterialsFrame.QHGroupBox0.setMidLineWidth (0)
        self.MaterialsFrame.mainLayout.addWidget (self.MaterialsFrame.QHGroupBox0)

        self.MaterialsFrame.QVBox01 = QVBox (self.MaterialsFrame.QHGroupBox0)
        self.MaterialsFrame.QVBox03 = QVBox (self.MaterialsFrame.QHGroupBox0)
        self.MaterialsFrame.QVBox02 = QVBox (self.MaterialsFrame.QHGroupBox0)
        self.MaterialsFrame.QVBox04 = QVBox (self.MaterialsFrame.QHGroupBox0)

        self.MaterialsFrame.QVBox01.setMargin (0)
        self.MaterialsFrame.QVBox01.setSpacing (5)
        self.MaterialsFrame.QVBox03.setMargin (0)
        self.MaterialsFrame.QVBox03.setSpacing (5)
        self.MaterialsFrame.QVBox02.setMargin (0)
        self.MaterialsFrame.QVBox02.setSpacing (5)
        self.MaterialsFrame.QVBox04.setMargin (0)
        self.MaterialsFrame.QVBox04.setSpacing (5)

        self.MaterialsFrame.QVBox03.setMinimumSize (10, 10)
        self.MaterialsFrame.QVBox03.setMaximumSize (10, 10)

        self.MaterialsFrame.MaterialNameLabel = QLabel ('Material Name', self.MaterialsFrame.QVBox01)
        self.MaterialsFrame.MaterialNameLabel.resize (self.MaterialsFrame.MaterialNameLabel.sizeHint ())

        self.MaterialsFrame.MaterialNameLineEdit = QLineEdit (self.MaterialsFrame.QVBox01)
        self.MaterialsFrame.MaterialNameLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.MaterialNameLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.MaterialNameLineEdit.setFocus ()
        QToolTip.add (self.MaterialsFrame.MaterialNameLineEdit, 'Material Name')

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MaterialsFrame.MaterialTypeLabel = QLabel ('Material Type', self.MaterialsFrame.QVBox02)
        self.MaterialsFrame.MaterialTypeLabel.setMinimumSize (120, 22)
        self.MaterialsFrame.MaterialTypeLabel.setMaximumSize (120, 22)

        self.MaterialsFrame.MaterialTypeLabel2 = QLabel ('   Solid', self.MaterialsFrame.QVBox02)
        self.MaterialsFrame.MaterialTypeLabel2.setMinimumSize (120, 22)
        self.MaterialsFrame.MaterialTypeLabel2.setMaximumSize (120, 22)

        self.MaterialsFrame.MediaMaterialsLabel = QLabel ('Medium Materials', self.MaterialsFrame.QVBox04)
        self.MaterialsFrame.MediaMaterialsLabel.resize (self.MaterialsFrame.MediaMaterialsLabel.sizeHint ())

        self.MaterialsFrame.MediaMaterialsComboBox = QComboBox (self.MaterialsFrame.QVBox04)
        self.MaterialsFrame.MediaMaterialsComboBox.resize (self.MaterialsFrame.MediaMaterialsComboBox.sizeHint())
        self.MaterialsFrame.MediaMaterialsComboBox.setMinimumSize (150, 25)
        self.MaterialsFrame.MediaMaterialsComboBox.setMaximumSize (150, 25)

        self.connect (self.MaterialsFrame.MediaMaterialsComboBox, SIGNAL ('activated (int)'), self.MaterialsFrame_MediaMaterialsComboBox_activate)
        i = 0
        while i < len (Materials_list):
            self.MaterialsFrame.MediaMaterialsComboBox.insertItem (Materials_list [i])
            i = i+1

#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.QVGroupBox1 = QVGroupBox ('Material Properties', self.MaterialsFrame)
        self.MaterialsFrame.QVGroupBox1.setMargin (0)
        self.MaterialsFrame.QVGroupBox1.setMidLineWidth (0)
        self.MaterialsFrame.mainLayout.addWidget (self.MaterialsFrame.QVGroupBox1)
        
        self.MaterialsFrame.QHBox1111 = QHBox (self.MaterialsFrame.QVGroupBox1)
        
        self.MaterialsFrame.QVBox11 = QVBox (self.MaterialsFrame.QHBox1111)
        self.MaterialsFrame.QVBox13 = QVBox (self.MaterialsFrame.QHBox1111)

        self.MaterialsFrame.QVBox11.setMargin (5)
        self.MaterialsFrame.QVBox11.setSpacing (5)
        self.MaterialsFrame.QVBox13.setMargin (5)
        self.MaterialsFrame.QVBox13.setSpacing (5)

#---------------------------------------------------------------------------------------------        
                
        self.MaterialsFrame.KxPermeabilityLabel = QLabel ('Kx Permeability ('+str (Permeability_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.KxPermeabilityLabel.resize (self.MaterialsFrame.KxPermeabilityLabel.sizeHint())
        
        self.MaterialsFrame.KxPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        #self.MaterialsFrame.KxPermeabilityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.KxPermeabilityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.KxPermeabilityLineEdit.setText (str (KxPermeability))

        self.MaterialsFrame.KyPermeabilityLabel = QLabel ('Ky Permeability ('+str (Permeability_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.KyPermeabilityLabel.resize (self.MaterialsFrame.KyPermeabilityLabel.sizeHint())

        self.MaterialsFrame.KyPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        #self.MaterialsFrame.KyPermeabilityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.KyPermeabilityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.KyPermeabilityLineEdit.setText (str (KyPermeability))

        self.MaterialsFrame.KzPermeabilityLabel = QLabel ('Kz Permeability ('+str (Permeability_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.KzPermeabilityLabel.resize (self.MaterialsFrame.KzPermeabilityLabel.sizeHint())

        self.MaterialsFrame.KzPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        #self.MaterialsFrame.KzPermeabilityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.KzPermeabilityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.KzPermeabilityLineEdit.setText (str (KzPermeability))
        self.MaterialsFrame.KzPermeabilityLineEdit.setEnabled (0)

# debug_mat

        self.MaterialsFrame.EffectivePorosityLabel = QLabel ('Effective Porosity ('+PorosityState+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.EffectivePorosityLabel.resize (self.MaterialsFrame.EffectivePorosityLabel.sizeHint())

        self.MaterialsFrame.EffectivePorosityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        self.MaterialsFrame.EffectivePorosityLineEdit.resize (self.MaterialsFrame.EffectivePorosityLineEdit.sizeHint())
        #self.MaterialsFrame.EffectivePorosityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.EffectivePorosityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.EffectivePorosityLineEdit.setText (str (DefaultEffectivePorosity))

        self.MaterialsFrame.EffectiveDiffusionLabel = QLabel ('Effective Diffusion ('+str (EffectiveDiffusion_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.EffectiveDiffusionLabel.resize (self.MaterialsFrame.EffectiveDiffusionLabel.sizeHint())

        self.MaterialsFrame.QHBox132 = QHBox (self.MaterialsFrame.QVBox13)
        self.MaterialsFrame.QHBox132.setMargin (0)
        self.MaterialsFrame.QHBox132.setSpacing (5)

        self.MaterialsFrame.DiffusionComboBox = QComboBox (self.MaterialsFrame.QHBox132)
        #self.MaterialsFrame.DiffusionComboBox.setMinimumSize (200, 25)
        #self.MaterialsFrame.DiffusionComboBox.setMaximumSize (200, 25)
        self.MaterialsFrame.DiffusionComboBox.insertItem ('Constant')
        self.MaterialsFrame.DiffusionComboBox.insertItem ('Variable - Winsauer Law')
        self.MaterialsFrame.DiffusionComboBox.insertItem ('Variable - Exponential Law')
        self.MaterialsFrame.DiffusionComboBox.insertItem ('Variable - Linear Law')
        self.MaterialsFrame.DiffusionComboBox.insertItem ('Variable - Proportional Law')
        self.connect (self.MaterialsFrame.DiffusionComboBox, SIGNAL ('activated (int)'), self.MaterialsFrame_DiffusionComboBox_activate)

# debug_diffusion
        
        #QToolTip.add (self.MaterialsFrame.DiffusionComboBox, '')

        self.MaterialsFrame.DiffusionEditPB = QPushButton ('Edit...', self.MaterialsFrame.QHBox132)
        self.MaterialsFrame.DiffusionEditPB.setMinimumSize (self.MaterialsFrame.DiffusionEditPB.sizeHint ())
        self.MaterialsFrame.DiffusionEditPB.setMaximumSize (self.MaterialsFrame.DiffusionEditPB.sizeHint ())
        self.MaterialsFrame.DiffusionEditPB.setEnabled (0)
        self.connect (self.MaterialsFrame.DiffusionEditPB, SIGNAL ('clicked  ()'), self.MaterialsFrame_DiffusionEditPB_activate)

        self.MaterialsFrame.EffectiveDiffusionLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        self.MaterialsFrame.EffectiveDiffusionLineEdit.resize (self.MaterialsFrame.EffectiveDiffusionLineEdit.sizeHint())
        #self.MaterialsFrame.EffectiveDiffusionLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.EffectiveDiffusionLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.EffectiveDiffusionLineEdit.setText(str (DefaultEffectiveDiffusion))

        self.MaterialsFrame.totoLabel = QLabel ('', self.MaterialsFrame.QVBox11)

        self.MaterialsFrame.LongitudinalDispersivityLabel = QLabel ('Longitudinal Dispersivity ('+str (Dispersivity_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.LongitudinalDispersivityLabel.resize (self.MaterialsFrame.LongitudinalDispersivityLabel.sizeHint())

        self.MaterialsFrame.LongitudinalDispersivityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.resize (self.MaterialsFrame.LongitudinalDispersivityLineEdit.sizeHint())
        #self.MaterialsFrame.LongitudinalDispersivityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.LongitudinalDispersivityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.setText (str (DefaultLongitudinalDispersivity))

        self.MaterialsFrame.TransverseDispersivityLabel = QLabel ('Transverse Dispersivity ('+str (Dispersivity_Unit)+')', self.MaterialsFrame.QVBox11)
        self.MaterialsFrame.TransverseDispersivityLabel.resize (self.MaterialsFrame.TransverseDispersivityLabel.sizeHint())

        self.MaterialsFrame.TransverseDispersivityLineEdit = QLineEdit (self.MaterialsFrame.QVBox13)
        self.MaterialsFrame.TransverseDispersivityLineEdit.resize (self.MaterialsFrame.TransverseDispersivityLineEdit.sizeHint())
        #self.MaterialsFrame.TransverseDispersivityLineEdit.setMinimumSize (250, 25)
        #self.MaterialsFrame.TransverseDispersivityLineEdit.setMaximumSize (250, 25)
        self.MaterialsFrame.TransverseDispersivityLineEdit.setText (str (DefaultTransverseDispersivity))

#---------------------------------------------------------------------------------------------       
# debug_materials
        #if len (sys.argv) != 1: 
        #    if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
        #        mode = 'unstructured'
        #    else:
        #        mode = 'structured'
        #else:
        #    mode = 'structured'
        if mode == 'unstructured':

            self.MaterialsFrame.QHGroupBox5 = QHGroupBox ('Thermal Properties', self.MaterialsFrame.QVGroupBox1)
            self.MaterialsFrame.QHGroupBox5.setMargin (0)
            self.MaterialsFrame.QHGroupBox5.setMidLineWidth (0)

            self.MaterialsFrame.QVBox51 = QHBox (self.MaterialsFrame.QHGroupBox5)
            
            self.MaterialsFrame.QVBox511 = QVBox (self.MaterialsFrame.QVBox51)
            self.MaterialsFrame.QVBox512 = QVBox (self.MaterialsFrame.QVBox51)

            self.MaterialsFrame.QVBox511.setMargin (5)
            self.MaterialsFrame.QVBox511.setSpacing (5)
            self.MaterialsFrame.QVBox512.setMargin (5)
            self.MaterialsFrame.QVBox512.setSpacing (5)

            self.MaterialsFrame.MaterialConductivityLabel = QLabel ('Material Thermal Conductivity', self.MaterialsFrame.QVBox511)
            self.MaterialsFrame.MaterialConductivityLabel.resize (self.MaterialsFrame.MaterialConductivityLabel.sizeHint())
            
            self.MaterialsFrame.spacerLabel = QLabel (' ', self.MaterialsFrame.QVBox511)

            self.MaterialsFrame.QHBox5121 = QHBox (self.MaterialsFrame.QVBox512)
            self.MaterialsFrame.QHBox5121.setMargin (0)
            self.MaterialsFrame.QHBox5121.setSpacing (5)

            self.MaterialsFrame.MaterialConductivityComboBox = QComboBox (self.MaterialsFrame.QHBox5121)
	    #self.MaterialsFrame.MaterialConductivityComboBox.setMinimumSize (200, 25)
	    #self.MaterialsFrame.MaterialConductivityComboBox.setMaximumSize (200, 25)
	    self.MaterialsFrame.MaterialConductivityComboBox.insertItem ('Constant')
	    self.MaterialsFrame.MaterialConductivityComboBox.insertItem ('Function of T')
	    self.MaterialsFrame.MaterialConductivityComboBox.insertItem ('Function of Minerals')

            self.MaterialsFrame.MaterialConductivityEditPB = QPushButton ('Edit...', self.MaterialsFrame.QHBox5121)
            self.MaterialsFrame.MaterialConductivityEditPB.setMinimumSize (self.MaterialsFrame.MaterialConductivityEditPB.sizeHint ())
            self.MaterialsFrame.MaterialConductivityEditPB.setMaximumSize (self.MaterialsFrame.MaterialConductivityEditPB.sizeHint ())
            self.MaterialsFrame.MaterialConductivityEditPB.setEnabled (0)
            #self.connect (self.MaterialsFrame.MaterialConductivityEditPB, SIGNAL ('clicked  ()'), self.MaterialsFrame_MaterialConductivityEditPB_activate)

            self.MaterialsFrame.MaterialConductivityLineEdit = QLineEdit (self.MaterialsFrame.QVBox512)
            self.MaterialsFrame.MaterialConductivityLineEdit.resize (self.MaterialsFrame.MaterialConductivityLineEdit.sizeHint())
            #self.MaterialsFrame.MaterialConductivityLineEdit.setMinimumSize (250, 25)
            #self.MaterialsFrame.MaterialConductivityLineEdit.setMaximumSize (250, 25)
            #self.MaterialsFrame.MaterialConductivityLineEdit.setText(str (DefaultMaterialConductivity))
            self.MaterialsFrame.MaterialConductivityLineEdit.setText ('0.0')
            
            self.MaterialsFrame.ConductivityLawLabel = QLabel ('Thermal Conductivity Law', self.MaterialsFrame.QVBox511)
            self.MaterialsFrame.ConductivityLawLabel.resize (self.MaterialsFrame.ConductivityLawLabel.sizeHint())

            self.MaterialsFrame.ConductivityLawComboBox = QComboBox (self.MaterialsFrame.QVBox512)
            self.MaterialsFrame.ConductivityLawComboBox.insertItem ('Arithmetic')
            self.MaterialsFrame.ConductivityLawComboBox.insertItem ('Geometric')
            self.MaterialsFrame.ConductivityLawComboBox.insertItem ('Harmonic')

            self.MaterialsFrame.SpecificHeatCapacityLabel = QLabel ('Specific Heat Capacity', self.MaterialsFrame.QVBox511)
            self.MaterialsFrame.SpecificHeatCapacityLabel.resize (self.MaterialsFrame.SpecificHeatCapacityLabel.sizeHint())

            self.MaterialsFrame.SpecificHeatCapacityLineEdit = QLineEdit (self.MaterialsFrame.QVBox512)
            self.MaterialsFrame.SpecificHeatCapacityLineEdit.resize (self.MaterialsFrame.SpecificHeatCapacityLineEdit.sizeHint())
            #self.MaterialsFrame.SpecificHeatCapacityLineEdit.setMinimumSize (250, 25)
            #self.MaterialsFrame.SpecificHeatCapacityLineEdit.setMaximumSize (250, 25)
            self.MaterialsFrame.SpecificHeatCapacityLineEdit.setText ('0.0')
            
            if Thermal == 'On':
                self.MaterialsFrame.QHGroupBox5.setEnabled (1)
            else:
                self.MaterialsFrame.QHGroupBox5.setEnabled (0)

#---------------------------------------------------------------------------------------------       

        self.MaterialsFrame.QHGroupBox2 = QHGroupBox (self.MaterialsFrame)
        self.MaterialsFrame.QHGroupBox2.setMidLineWidth (0)
        self.MaterialsFrame.mainLayout.addWidget (self.MaterialsFrame.QHGroupBox2)

        self.MaterialsFrame.OKPB = QPushButton ('OK', self.MaterialsFrame.QHGroupBox2)
        self.MaterialsFrame.OKPB.resize (self.MaterialsFrame.OKPB.sizeHint ())
        self.MaterialsFrame.ChangeCreatePB = QPushButton ('&Change/&Create', self.MaterialsFrame.QHGroupBox2)
        self.MaterialsFrame.ChangeCreatePB.resize (self.MaterialsFrame.ChangeCreatePB.sizeHint())
        self.MaterialsFrame.DeletePB = QPushButton ('&Delete', self.MaterialsFrame.QHGroupBox2)
        self.MaterialsFrame.DeletePB.resize (self.MaterialsFrame.DeletePB.sizeHint())
        self.MaterialsFrame.CancelPB = QPushButton ('Cancel', self.MaterialsFrame.QHGroupBox2)
        self.MaterialsFrame.CancelPB.resize (self.MaterialsFrame.CancelPB.sizeHint())
        self.MaterialsFrame.HelpPB = QPushButton ('Help', self.MaterialsFrame.QHGroupBox2)
        self.MaterialsFrame.HelpPB.resize (self.MaterialsFrame.HelpPB.sizeHint())

        QToolTip.add (self.MaterialsFrame.OKPB, 'Exit Saving Materials')
        QToolTip.add (self.MaterialsFrame.ChangeCreatePB, 'Press CTRL+C to Change or Create')
        QToolTip.add (self.MaterialsFrame.DeletePB, 'Press CTRL+D to Delete a Material')
        QToolTip.add (self.MaterialsFrame.CancelPB, 'Press CTRL+Q to close this Window')
        QToolTip.add (self.MaterialsFrame.HelpPB, 'Press CTRL+H for Help')

        self.MaterialsFrame.ChangeCreatePB.setAccel (Qt.CTRL + Qt.Key_C)
        self.MaterialsFrame.DeletePB.setAccel (Qt.CTRL + Qt.Key_D)
        self.MaterialsFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        self.MaterialsFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.MaterialsFrame.OKPB, SIGNAL('clicked()'), self.MaterialsFrame_ok)
        self.connect (self.MaterialsFrame.ChangeCreatePB, SIGNAL('clicked()'), self.MaterialsFrame_change_create)
        self.connect (self.MaterialsFrame.DeletePB, SIGNAL('clicked()'), self.MaterialsFrame_delete)
        self.connect (self.MaterialsFrame.CancelPB, SIGNAL('clicked()'), self.MaterialsFrame_cancel)
        self.connect (self.MaterialsFrame.HelpPB, SIGNAL ('clicked()'), self.MaterialsFrame_help)

#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.show ()

#----------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------
#  Methods
#---------------------------------------------------------------------------------------------

    def MaterialsFrame_ok (self):

        self.MaterialsFrame.close ()

    def MaterialsFrame_change_create (self):

        global Materials_list
        global Materials_Properties_list
        global DiffusionLaws_dict
        global var_diff_list
        global DiffusionState
	
	if str (self.MaterialsFrame.MaterialNameLineEdit.text()) in Materials_list:	
	    index = Materials_list.index (str (self.MaterialsFrame.MaterialNameLineEdit.text()))
	
	    Materials_Properties_list [index][0] = str (self.MaterialsFrame.KxPermeabilityLineEdit.text ())
	    Materials_Properties_list [index][1] = str (self.MaterialsFrame.KyPermeabilityLineEdit.text ())
	    Materials_Properties_list [index][2] = str (self.MaterialsFrame.EffectivePorosityLineEdit.text ())
	    Materials_Properties_list [index][3] = str (self.MaterialsFrame.EffectiveDiffusionLineEdit.text ())
	    Materials_Properties_list [index][4] = str (self.MaterialsFrame.LongitudinalDispersivityLineEdit.text ())
	    Materials_Properties_list [index][5] = str (self.MaterialsFrame.TransverseDispersivityLineEdit.text ())
            try:
                if str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Constant':
                    DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())] = ['Constant']
                else:
                    DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())] = var_diff_list
                    if str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Winsauer":
                        DiffusionState = "Winsauer"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Exponential":
                        DiffusionState = "Exponential"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Linear":
                        DiffusionState = "Linear"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Proportional":
                        DiffusionState = "Proportional"
                    else:
                        DiffusionState = "Constant"
            except:
                pass
        elif str (self.MaterialsFrame.MaterialNameLineEdit.text()) == '':
            self.MaterialsFrame.MaterialNameMB = QMessageBox()
            self.MaterialsFrame.MaterialNameMB.setCaption ("Error")
            self.MaterialsFrame.MaterialNameMB.setText ("Please enter a name for the Material.")
            self.MaterialsFrame.MaterialNameMB.setIcon (QMessageBox.Critical)
            self.MaterialsFrame.MaterialNameMB.show ()
            self.MaterialsFrame.MaterialNameLineEdit.setFocus ()
	else:
            Materials_list.append (str (self.MaterialsFrame.MaterialNameLineEdit.text()))

            self.MaterialsFrame.MediaMaterialsComboBox.insertItem (self.MaterialsFrame.MaterialNameLineEdit.text(), self.MaterialsFrame.MediaMaterialsComboBox.currentItem ())
            self.MaterialsFrame.MediaMaterialsComboBox.setCurrentItem (0)

            Temp_list = []
            Temp_list.append (str (self.MaterialsFrame.KxPermeabilityLineEdit.text ()))
            Temp_list.append (str (self.MaterialsFrame.KyPermeabilityLineEdit.text ()))
            Temp_list.append (str (self.MaterialsFrame.EffectivePorosityLineEdit.text ()))
            Temp_list.append (str (self.MaterialsFrame.EffectiveDiffusionLineEdit.text ()))
            Temp_list.append (str (self.MaterialsFrame.LongitudinalDispersivityLineEdit.text ()))
            Temp_list.append (str (self.MaterialsFrame.TransverseDispersivityLineEdit.text ()))            
            Materials_Properties_list.append (Temp_list)
            try:
                if str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Constant':
                    DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())] = ['Constant']
                else:
                    DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())] = var_diff_list
                    if str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Winsauer":
                        DiffusionState = "Winsauer"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Exponential":
                        DiffusionState = "Exponential"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Linear":
                        DiffusionState = "Linear"
                    elif str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0]) == "Proportional":
                        DiffusionState = "Proportional"
                    else:
                        DiffusionState = "Constant"
            except:
                pass
# debug_diffusion
        self.MaterialsFrame.MaterialNameLineEdit.clear ()
        self.MaterialsFrame_KxPermeability_default ()
        self.MaterialsFrame_KyPermeability_default ()       
        self.MaterialsFrame_EffectivePorosity_default ()
        self.MaterialsFrame_EffectiveDiffusion_default ()
        self.MaterialsFrame_LongitudinalDispersivity_default ()
        self.MaterialsFrame_TransverseDispersivity_default ()
        self.MaterialsFrame.DiffusionComboBox.setCurrentItem (0)
        self.MaterialsFrame_DiffusionComboBox_activate ()
        self.MaterialsFrame.MaterialNameLineEdit.setFocus ()
                    
    def MaterialsFrame_delete (self):

        global Materials_list
        global Materials_Properties_list

        if ((self.MaterialsFrame.MediaMaterialsComboBox.count ()) != 0) and (str (self.MaterialsFrame.MaterialNameLineEdit.text ())) != '':
            index = Materials_list.index (str (self.MaterialsFrame.MaterialNameLineEdit.text ()))
            del Materials_list [index]
            del Materials_Properties_list [index]
            self.MaterialsFrame.MediaMaterialsComboBox.removeItem (self.MaterialsFrame.MediaMaterialsComboBox.currentItem ())
            self.MaterialsFrame.MaterialNameLineEdit.clear ()
            self.MaterialsFrame.MaterialNameLineEdit.clear ()
            self.MaterialsFrame_KxPermeability_default ()
            self.MaterialsFrame_KyPermeability_default ()
            self.MaterialsFrame_EffectivePorosity_default ()
            self.MaterialsFrame_EffectiveDiffusion_default ()
            self.MaterialsFrame_LongitudinalDispersivity_default ()
            self.MaterialsFrame_TransverseDispersivity_default ()
            self.MaterialsFrame.DiffusionComboBox.setCurrentItem (0)
            self.MaterialsFrame.ChangeCreatePB.setFocus ()
            if ((self.MaterialsFrame.MediaMaterialsComboBox.count ()) != 0):
                self.MaterialsFrame.MediaMaterialsComboBox.setCurrentItem (0)
        else:
	    if ((self.MaterialsFrame.MediaMaterialsComboBox.count ()) == 0):
                self.NoMaterialMB = QMessageBox()
                self.NoMaterialMB.setCaption ('Error')
                self.NoMaterialMB.setText ('There is no Material.')
                self.NoMaterialMB.setIcon (QMessageBox.Critical)
                self.NoMaterialMB.show ()
            elif (str (self.MaterialsFrame.MaterialNameLineEdit.text ())) == '':
                self.NoMaterialMB2 = QMessageBox()
                self.NoMaterialMB2.setCaption ('Error')
                self.NoMaterialMB2.setText ('You have to select a Material.')
                self.NoMaterialMB2.setIcon (QMessageBox.Critical)
                self.NoMaterialMB2.show ()


#debug_materials
        
#-----------------------------------------------------------------------------------------
#  to exit discarding changes
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_cancel (self):

        self.MaterialsFrame.close ()

#-----------------------------------------------------------------------------------------
#  to display help about this window
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_help (self):

        self.Help ()

#-----------------------------------------------------------------------------------------

    def MaterialsFrame_MediaMaterialsComboBox_activate (self):

        global Materials_list
        global Materials_Properties_list

        self.MaterialsFrame.MaterialNameLineEdit.setText (self.MaterialsFrame.MediaMaterialsComboBox.currentText ())

        index = Materials_list.index (str (self.MaterialsFrame.MediaMaterialsComboBox.text (self.MaterialsFrame.MediaMaterialsComboBox.currentItem ())))

        self.MaterialsFrame.KxPermeabilityLineEdit.setText (str (Materials_Properties_list [index][0]))
        self.MaterialsFrame.KyPermeabilityLineEdit.setText (str (Materials_Properties_list [index][1]))
        self.MaterialsFrame.EffectivePorosityLineEdit.setText (str (Materials_Properties_list [index][2]))
        self.MaterialsFrame.EffectiveDiffusionLineEdit.setText (str (Materials_Properties_list [index][3]))
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.setText (str (Materials_Properties_list [index][4]))
        self.MaterialsFrame.TransverseDispersivityLineEdit.setText (str (Materials_Properties_list [index][5]))

    def MaterialsFrame_PorosityComboBox_activate (self):

        if str (self.MaterialsFrame.PorosityComboBox.currentText ()) == 'Constant':
            self.MaterialsFrame.PorosityEditPB.setEnabled (0)
            self.MaterialsFrame.EffectivePorosityLineEdit.setEnabled (1)
        else:
            #self.MaterialsFrame.PorosityEditPB.setEnabled (1)
            #self.MaterialsFrame.EffectivePorosityLineEdit.setEnabled (0)        
            self.MaterialsFrame.PorosityEditPB.setEnabled (0)
            self.porosity_MB = QMessageBox()
            self.porosity_MB.setCaption ('Message')
            self.porosity_MB.setText ('This option is under development.')
            self.porosity_MB.setIcon (QMessageBox.Information)
            self.porosity_MB.show ()
            self.MaterialsFrame.PorosityComboBox.setCurrentItem (0)
            self.MaterialsFrame.EffectivePorosityLineEdit.setEnabled (1)

    def MaterialsFrame_DiffusionComboBox_activate (self):

        if str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Constant':
            self.MaterialsFrame.DiffusionEditPB.setEnabled (0)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (1)
            
        elif str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Variable - Winsauer Law':
            self.MaterialsFrame.DiffusionEditPB.setEnabled (1)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (0)
            
        elif str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Variable - Exponential Law':
            self.MaterialsFrame.DiffusionEditPB.setEnabled (1)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (0)
            
        elif str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Variable - Linear Law':
            self.MaterialsFrame.DiffusionEditPB.setEnabled (1)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (0)
            
        elif str (self.MaterialsFrame.DiffusionComboBox.currentText ()) == 'Variable - Proportional Law':
            self.MaterialsFrame.DiffusionEditPB.setEnabled (1)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (0)
            
# debug_diffusion            
            
        else:
            self.MaterialsFrame.DiffusionEditPB.setEnabled (0)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (0)
            self.diffusion_MB = QMessageBox()
            self.diffusion_MB.setCaption ('Message')
            self.diffusion_MB.setText ('This option is under development.')
            self.diffusion_MB.setIcon (QMessageBox.Information)
            self.diffusion_MB.show ()
            self.MaterialsFrame.DiffusionComboBox.setCurrentItem (0)
            self.MaterialsFrame.EffectiveDiffusionLineEdit.setEnabled (1)


#-----------------------
# Variable Diffusion 
#-----------------------

    def MaterialsFrame_DiffusionEditPB_activate (self):

# debug_diffusion
      
        self.VariableDiffusionFrame = QFrame ()
        setPosition (self.VariableDiffusionFrame)
        self.VariableDiffusionFrame.mainLayout = QVBoxLayout (self.VariableDiffusionFrame, 10,-1, 'VariableDiffusionFrame_mainLayout')
        self.VariableDiffusionFrame.mainLayout.setMargin (Marge)
        self.VariableDiffusionFrame.mainLayout.setSpacing (Space)

        # VariableDiffusionFrame_comment = Comments ['VariableDiffusion']
        # faire plusieurs commentaires suivant la loi de diffusion
        # dans la lineedit sensÃ©e recevoir la valeur dans le cas diffusion cte
        # je propose de faire apparaitre la diffusion initiale D0 grisee.
        self.VariableDiffusionFrame.QHGroupBoxA = QHGroupBox (self.VariableDiffusionFrame)
        self.VariableDiffusionFrame.QHGroupBoxA.setMargin (5)
        self.VariableDiffusionFrame.QHGroupBoxA.setMidLineWidth (0)
        self.VariableDiffusionFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.VariableDiffusionFrame.mainLayout.addWidget (self.VariableDiffusionFrame.QHGroupBoxA)
        
        self.VariableDiffusionFrame.QHGroupBox0 = QHGroupBox (self.VariableDiffusionFrame)
        self.VariableDiffusionFrame.QHGroupBox0.setMargin (10)
        self.VariableDiffusionFrame.QHGroupBox0.setMidLineWidth (0)
        self.VariableDiffusionFrame.mainLayout.addWidget (self.VariableDiffusionFrame.QHGroupBox0)

        self.VariableDiffusionFrame.QVBox00 = QVBox (self.VariableDiffusionFrame.QHGroupBox0)
        self.VariableDiffusionFrame.QVBox01 = QVBox (self.VariableDiffusionFrame.QHGroupBox0)
        self.VariableDiffusionFrame.QVBox02 = QVBox (self.VariableDiffusionFrame.QHGroupBox0)

        self.VariableDiffusionFrame.QVBox00.setMargin (0)
        self.VariableDiffusionFrame.QVBox00.setSpacing (5)
        self.VariableDiffusionFrame.QVBox01.setMinimumSize (30, 30)
        self.VariableDiffusionFrame.QVBox01.setMaximumSize (30, 30)
        self.VariableDiffusionFrame.QVBox02.setMargin (0)
        self.VariableDiffusionFrame.QVBox02.setSpacing (5)

        self.VariableDiffusionFrame.InitialEffectiveDiffusionLabel = QLabel ('Initial Effective Diffusion', self.VariableDiffusionFrame.QVBox00)        
        self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit = QLineEdit (self.VariableDiffusionFrame.QVBox02)

        self.DiffusionLaw = str (self.MaterialsFrame.DiffusionComboBox.currentText ())
        if self.DiffusionLaw == 'Variable - Winsauer Law':
            self.VariableDiffusionFrame.setCaption ('Variable Diffusion: Winsauer Law')

            self.VariableDiffusionFrame.CementationCoefficientLabel = QLabel ('Cementation Coefficient', self.VariableDiffusionFrame.QVBox00)        
            self.VariableDiffusionFrame.CementationCoefficientLineEdit = QLineEdit (self.VariableDiffusionFrame.QVBox02)

            self.VariableDiffusionFrame.PercolationThresholdPorosityLabel = QLabel ('Percolation Threshold Porosity', self.VariableDiffusionFrame.QVBox00)        
            self.VariableDiffusionFrame.PercolationThresholdPorosityLineEdit = QLineEdit (self.VariableDiffusionFrame.QVBox02)        
        
        elif self.DiffusionLaw == 'Variable - Exponential Law':
            self.VariableDiffusionFrame.setCaption ('Variable Diffusion: Exponential Law')
            
            self.VariableDiffusionFrame.ExponentialCoefficientLabel = QLabel ('Exponential Coefficient', self.VariableDiffusionFrame.QVBox00)        
            self.VariableDiffusionFrame.ExponentialCoefficientLineEdit = QLineEdit (self.VariableDiffusionFrame.QVBox02)

        elif self.DiffusionLaw == 'Variable - Linear Law':
            self.VariableDiffusionFrame.setCaption ('Variable Diffusion: Linear Law')

            self.VariableDiffusionFrame.LinearCoefficientLabel = QLabel ('Linear Coefficient', self.VariableDiffusionFrame.QVBox00)        
            self.VariableDiffusionFrame.LinearCoefficientLineEdit = QLineEdit (self.VariableDiffusionFrame.QVBox02)
        
        elif self.DiffusionLaw == 'Variable - Proportional Law':
            self.VariableDiffusionFrame.setCaption ('Variable Diffusion: Proportional Law')
        
        self.VariableDiffusionFrame.QHGroupBox2 = QHGroupBox (self.VariableDiffusionFrame)
        self.VariableDiffusionFrame.QHGroupBox2.setMargin (10)
        self.VariableDiffusionFrame.QHGroupBox2.setMidLineWidth (0)
        self.VariableDiffusionFrame.mainLayout.addWidget (self.VariableDiffusionFrame.QHGroupBox2)

        self.VariableDiffusionFrame.OKPB = QPushButton ('OK', self.VariableDiffusionFrame.QHGroupBox2)
        self.VariableDiffusionFrame.OKPB.setFocus ()
        self.VariableDiffusionFrame.CancelPB = QPushButton ('Cancel', self.VariableDiffusionFrame.QHGroupBox2)
        self.VariableDiffusionFrame.HelpPB = QPushButton ('&Help', self.VariableDiffusionFrame.QHGroupBox2)

        self.connect (self.VariableDiffusionFrame.OKPB, SIGNAL ('clicked ()'), self.VariableDiffusionFrame_ok)
        self.connect (self.VariableDiffusionFrame.CancelPB, SIGNAL ('clicked ()'), self.VariableDiffusionFrame_cancel)
        self.connect (self.VariableDiffusionFrame.HelpPB, SIGNAL ('clicked ()'), self.VariableDiffusionFrame_help)

        self.VariableDiffusionFrame_init ()
        self.VariableDiffusionFrame.show ()

    def VariableDiffusionFrame_ok (self):
    
        global var_diff_list
        var_diff_list = []
        self.DiffusionLaw = str (self.MaterialsFrame.DiffusionComboBox.currentText ())
        if self.DiffusionLaw == 'Variable - Winsauer Law':     
            var_diff_list.append ('Winsauer')
            var_diff_list.append (str (self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.text ()))
            var_diff_list.append (str (self.VariableDiffusionFrame.CementationCoefficientLineEdit.text ()))
            var_diff_list.append (str (self.VariableDiffusionFrame.PercolationThresholdPorosityLineEdit.text ()))
        elif self.DiffusionLaw == 'Variable - Exponential Law':
            var_diff_list.append ('Exponential')
            var_diff_list.append (str (self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.text ()))
            var_diff_list.append (str (self.VariableDiffusionFrame.ExponentialCoefficientLineEdit.text ()))
        elif self.DiffusionLaw == 'Variable - Linear Law':
            var_diff_list.append ('Linear')
            var_diff_list.append (str (self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.text ()))
            var_diff_list.append (str (self.VariableDiffusionFrame.LinearCoefficientLineEdit.text ()))
        elif self.DiffusionLaw == 'Variable - Proportional Law':
            var_diff_list.append ('Proportional')
            var_diff_list.append (str (self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.text ()))
                
        self.MaterialsFrame.EffectiveDiffusionLineEdit.setText (str (self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.text ()))           
        self.VariableDiffusionFrame.close ()

    def VariableDiffusionFrame_cancel (self):
    
        self.VariableDiffusionFrame.close ()

    def VariableDiffusionFrame_help (self): 

        self.Help ()
        
    def VariableDiffusionFrame_init (self):
    
        try:
            self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.setText (str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][1]))
            if DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0] == 'Winsauer':
                self.VariableDiffusionFrame.CementationCoefficientLineEdit.setText (str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][2]))
                self.VariableDiffusionFrame.PercolationThresholdPorosityLineEdit.setText (str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][3]))
            elif DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0] == 'Exponential':
                self.VariableDiffusionFrame.ExponentialCoefficientLineEdit.setText (str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][2]))
            elif DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0] == 'Linear':
                self.VariableDiffusionFrame.LinearCoefficientLineEdit.setText (str (DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][2]))
            elif DiffusionLaws_dict [str (self.MaterialsFrame.MaterialNameLineEdit.text())][0] == 'Proportional':
                pass
        except:
            self.VariableDiffusionFrame.InitialEffectiveDiffusionLineEdit.setText ('0.0')
            if self.DiffusionLaw == 'Variable - Winsauer Law':
                self.VariableDiffusionFrame.CementationCoefficientLineEdit.setText ('0.0')
                self.VariableDiffusionFrame.PercolationThresholdPorosityLineEdit.setText ('0.0')
            elif self.DiffusionLaw == 'Variable - Exponential Law':
                self.VariableDiffusionFrame.ExponentialCoefficientLineEdit.setText ('0.0')
            elif self.DiffusionLaw == 'Variable - Linear Law':
                self.VariableDiffusionFrame.LinearCoefficientLineEdit.setText ('0.0')
            elif self.DiffusionLaw == 'Variable - Proportional Law':
                pass
        self.VariableDiffusionFrame.OKPB.setFocus ()
                                       
        
        
        
        

#debug_diffusion

#-----------------------------------------------------------------------------------------

    def MaterialsFrame_KxPermeability_default (self):

        self.MaterialsFrame.KxPermeabilityLineEdit.setText (str (DefaultKxPermeability))

    def MaterialsFrame_KyPermeability_default (self):

        self.MaterialsFrame.KyPermeabilityLineEdit.setText (str (DefaultKyPermeability))
            
    def MaterialsFrame_KzPermeability_default (self):

        self.MaterialsFrame.KzPermeabilityLineEdit.setText (str (DefaultKzPermeability))
            
    def MaterialsFrame_EffectivePorosity_default (self):

        self.MaterialsFrame.EffectivePorosityLineEdit.setText (str (DefaultEffectivePorosity))
            
    def MaterialsFrame_EffectiveDiffusion_default (self):

        self.MaterialsFrame.EffectiveDiffusionLineEdit.setText (str (DefaultEffectiveDiffusion))
            
    def MaterialsFrame_LongitudinalDispersivity_default (self):

        self.MaterialsFrame.LongitudinalDispersivityLineEdit.setText (str (DefaultLongitudinalDispersivity))
            
    def MaterialsFrame_TransverseDispersivity_default (self):
        
        self.MaterialsFrame.TransverseDispersivityLineEdit.setText (str (DefaultTransverseDispersivity))
            
#-----------------------------------------------------------------------------------------
#  to clear each edit line
#-----------------------------------------------------------------------------------------
        
    def MaterialsFrame_KxPermeability_clear (self):

        self.MaterialsFrame.KxPermeabilityLineEdit.clear ()
        self.MaterialsFrame.KxPermeabilityLineEdit.setFocus ()

    def MaterialsFrame_KyPermeability_clear (self):

        self.MaterialsFrame.KyPermeabilityLineEdit.clear ()
        self.MaterialsFrame.KyPermeabilityLineEdit.setFocus ()

    def MaterialsFrame_EffectivePorosity_clear (self):

        self.MaterialsFrame.EffectivePorosityLineEdit.clear ()
        self.MaterialsFrame.EffectivePorosityLineEdit.setFocus ()
        
    def MaterialsFrame_EffectiveDiffusion_clear (self):

        self.MaterialsFrame.EffectiveDiffusionLineEdit.clear ()
        self.MaterialsFrame.EffectiveDiffusionLineEdit.setFocus ()

    def MaterialsFrame_LongitudinalDispersivity_clear (self):

        self.MaterialsFrame.LongitudinalDispersivityLineEdit.clear ()
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.setFocus ()

    def MaterialsFrame_TransverseDispersivity_clear (self):

        self.MaterialsFrame.TransverseDispersivityLineEdit.clear ()
        self.MaterialsFrame.TransverseDispersivityLineEdit.setFocus ()

#-----------------------------------------------------------------------------------------
#  to clear all edit lines
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_clear_all_properties (self):

        self.MaterialsFrame.KxPermeabilityLineEdit.clear ()
        self.MaterialsFrame.KyPermeabilityLineEdit.clear ()
        self.MaterialsFrame.EffectivePorosityLineEdit.clear ()
        self.MaterialsFrame.EffectiveDiffusionLineEdit.clear ()
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.clear ()
        self.MaterialsFrame.TransverseDispersivityLineEdit.clear ()
        self.MaterialsFrame.KxPermeabilityLineEdit.setFocus ()

#-----------------------------------------------------------------------------------------
#  to use all default properties
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_all_default_properties (self):

        self.MaterialsFrame_KxPermeability_default ()
        self.MaterialsFrame_KyPermeability_default ()
        self.MaterialsFrame_EffectivePorosity_default ()
        self.MaterialsFrame_EffectiveDiffusion_default ()
        self.MaterialsFrame_LongitudinalDispersivity_default ()
        self.MaterialsFrame_TransverseDispersivity_default ()
        self.MaterialsFrame.ChangeCreatePB.setFocus ()
            
#-----------------------------------------------------------------------------------------
#  the same as MaterialsFrame_clear_all_properties ()... for the moment.
    def MaterialsFrame_clear (self):

        self.MaterialsFrame.KxPermeabilityLineEdit.clear()
        self.MaterialsFrame.KyPermeabilityLineEdit.clear()
        self.MaterialsFrame.EffectivePorosityLineEdit.clear()
        self.MaterialsFrame.EffectiveDiffusionLineEdit.clear()
        self.MaterialsFrame.LongitudinalDispersivityLineEdit.clear()
        self.MaterialsFrame.TransverseDispersivityLineEdit.clear()
        self.MaterialsFrame.KxPermeabilityLineEdit.setFocus ()
        
#-----------------------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_init (self):

        self.MaterialsFrame_default

#-----------------------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------------------
# definir les methodes...
    def MaterialsFrame_default (self):

        self.MaterialsFrame.MaterialNameLineEdit.clear ()
        self.MaterialsFrame_KxPermeability_default ()
        self.MaterialsFrame_KyPermeability_default ()
        self.MaterialsFrame_EffectivePorosity_default ()
        self.MaterialsFrame_EffectiveDiffusion_default ()
        self.MaterialsFrame_LongitudinalDispersivity_default ()
        self.MaterialsFrame_TransverseDispersivity_default ()
        self.MaterialsFrame.ChangeCreatePB.setFocus ()

#-----------------------------------------------------------------------------------------
#  to set all default values
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_set_default_values (self):

        self.MaterialsFrame.SetDefaultValuesFrame = QFrame ()
        self.MaterialsFrame.SetDefaultValuesFrame.setCaption ('Set Default Values')
        setPosition (self.MaterialsFrame.SetDefaultValuesFrame)

        self.MaterialsFrame.SetDefaultValuesFrame.mainLayout = QVBoxLayout (self.MaterialsFrame.SetDefaultValuesFrame, 10,-1, 'MaterialsFrame.SetDefaultValuesFrame_mainLayout')
        self.MaterialsFrame.SetDefaultValuesFrame.mainLayout.setSpacing (5)
##         self.MaterialsFrame.SetDefaultValuesFrame.mainLayout.setMargin (15)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Materials_SetDefaultValues_comment = 'This box is used to set default values.\n '\
                                             "Is this box useful."

        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA = QHGroupBox (self.MaterialsFrame.SetDefaultValuesFrame)
	QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA,Materials_SetDefaultValues_comment)

        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA.setMargin (5)
        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MaterialsFrame.SetDefaultValuesFrame.mainLayout.addWidget (self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1 = QHGroupBox (self.MaterialsFrame.SetDefaultValuesFrame)
        self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1.setMargin (5)
        self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1.setMidLineWidth (0)
        self.MaterialsFrame.SetDefaultValuesFrame.mainLayout.addWidget (self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1)

        self.MaterialsFrame.SetDefaultValuesFrame.QVBox12 = QVBox (self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox13 = QVBox (self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox14 = QVBox (self.MaterialsFrame.SetDefaultValuesFrame.HGroupBox1)

        self.MaterialsFrame.SetDefaultValuesFrame.QVBox12.setMargin (0)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox12.setSpacing (5)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox13.setMargin (0)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox13.setSpacing (5)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox14.setMargin (0)
        self.MaterialsFrame.SetDefaultValuesFrame.QVBox14.setSpacing (5)

#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLabel = QLabel ('Kx Permeability', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setText (str (DefaultKxPermeability))
       
#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLabel = QLabel ('Ky Permeability', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.setText (str (DefaultKyPermeability))
       
#---------------------------------------------------------------------------------------------        
 
        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLabel = QLabel ('Kz Permeability', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLineEdit.setText (str (DefaultKzPermeability))
       
#---------------------------------------------------------------------------------------------        
 
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLabel = QLabel ('Effective Porosity', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.setText (str (DefaultEffectivePorosity))
           
#---------------------------------------------------------------------------------------------
            
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLabel = QLabel ('Effective Diffusion', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.setText (str (DefaultEffectiveDiffusion))
         
#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLabel = QLabel ('Longitudinal Dispersivity', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.setText (str (DefaultLongitudinalDispersivity))
            
#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLabel = QLabel ('Transverse Dispersivity', self.MaterialsFrame.SetDefaultValuesFrame.QVBox12)
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLabel.resize (self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLabel.sizeHint())

        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit = QLineEdit (self.MaterialsFrame.SetDefaultValuesFrame.QVBox13)
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.setMinimumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.setMaximumSize (150, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.setText (str (DefaultTransverseDispersivity))
           
#---------------------------------------------------------------------------------------------
      
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_Kxpermeability_clear)

        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_Kypermeability_clear)

        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_porosity_clear)

        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_diffusion_clear)

        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_longitudinaldispersivity_clear)

        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityClearPB = QPushButton ('clear', self.MaterialsFrame.SetDefaultValuesFrame.QVBox14, 'self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityClearPB')
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityClearPB.setMinimumSize (60, 25)
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityClearPB.setMaximumSize (60, 25)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityClearPB, SIGNAL('clicked()'), self.MaterialsFrame_default_transversedispersivity_clear)

#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2 = QHGroupBox (self.MaterialsFrame.SetDefaultValuesFrame)
        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2.setMargin (5)
        self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2.setMidLineWidth (0)
        self.MaterialsFrame.SetDefaultValuesFrame.mainLayout.addWidget (self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2)

        self.MaterialsFrame.SetDefaultValuesFrame.OKPB = QPushButton ('&OK', self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2, 'ok')
        self.MaterialsFrame.SetDefaultValuesFrame.OKPB.resize (self.MaterialsFrame.SetDefaultValuesFrame.OKPB.sizeHint())
        self.MaterialsFrame.SetDefaultValuesFrame.OKPB.setFocus ()
        self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB = QPushButton ('&Clear All', self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2, 'clear_all')
        self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB.resize (self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB.sizeHint())
        self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB = QPushButton ('&First Values', self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2, 'first_values')
        self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB.resize (self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB.sizeHint())
        self.MaterialsFrame.SetDefaultValuesFrame.CancelPB = QPushButton ('Cancel', self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2, 'cancel')
        self.MaterialsFrame.SetDefaultValuesFrame.CancelPB.resize (self.MaterialsFrame.SetDefaultValuesFrame.CancelPB.sizeHint())
        self.MaterialsFrame.SetDefaultValuesFrame.HelpPB = QPushButton ('&Help', self.MaterialsFrame.SetDefaultValuesFrame.QHGroupBox2, 'help')
        self.MaterialsFrame.SetDefaultValuesFrame.HelpPB.resize (self.MaterialsFrame.SetDefaultValuesFrame.HelpPB.sizeHint())

        QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.OKPB, 'Press CTRL+O to Exit Saving Defaults')
        QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB, 'Press CTRL+C to Clear all Defaults')
        QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB, 'Press CTRL+F to provide the First Default values')
        QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.CancelPB, 'Press CTRL+Q to Exit discarding changes')
        QToolTip.add (self.MaterialsFrame.SetDefaultValuesFrame.HelpPB, 'Press CTRL+H for Help')

        self.MaterialsFrame.SetDefaultValuesFrame.OKPB.setAccel (Qt.CTRL + Qt.Key_O)
        self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB.setAccel (Qt.CTRL + Qt.Key_C)
        self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB.setAccel (Qt.CTRL + Qt.Key_F)    
        self.MaterialsFrame.SetDefaultValuesFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        self.MaterialsFrame.SetDefaultValuesFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.OKPB, SIGNAL('clicked()'), self.MaterialsFrame_default_ok)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.ClearAllPB, SIGNAL('clicked()'), self.MaterialsFrame_default_clear_all)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.FirstValuesPB, SIGNAL('clicked()'), self.MaterialsFrame_default_first_values)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.CancelPB, SIGNAL('clicked()'), self.MaterialsFrame_default_cancel)
        self.connect (self.MaterialsFrame.SetDefaultValuesFrame.HelpPB, SIGNAL ('clicked()'), self.MaterialsFrame_default_help)
            
#---------------------------------------------------------------------------------------------

        self.MaterialsFrame.SetDefaultValuesFrame.show ()
        
#-----------------------------------------------------------------------------------------
#  to exit saving changes
#-----------------------------------------------------------------------------------------
 
    def MaterialsFrame_default_ok (self):

        global DefaultKxPermeability
        global DefaultKyPermeability
        global DefaultKzPermeability
        global DefaultEffectivePorosity
        global DefaultEffectiveDiffusion
        global DefaultLongitudinalDispersivity
        global DefaultTransverseDispersivity

        DefaultKxPermeability = str (self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.text ())
        DefaultKyPermeability = str (self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.text ())
        DefaultKzPermeability = str (self.MaterialsFrame.SetDefaultValuesFrame.KzPermeabilityLineEdit.text ())
        DefaultEffectivePorosity = str (self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.text ())
        DefaultEffectiveDiffusion = str (self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.text ())
        DefaultLongitudinalDispersivity = str (self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.text ())
        DefaultTransverseDispersivity = str (self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.text ())

        self.MaterialsFrame.SetDefaultValuesFrame.close ()

#-----------------------------------------------------------------------------------------
#  to clear all edit lines
#-----------------------------------------------------------------------------------------
        
    def MaterialsFrame_default_clear_all (self):

        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setFocus ()

#-----------------------------------------------------------------------------------------
#  if you want the first defined values
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_default_first_values (self):
        
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setText ("1.0")
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.setText ("1.0")  
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.setText ("1.0")
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.setText ("1.0")
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.setText ("1.0")
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.setText ("1.0")
        self.MaterialsFrame.SetDefaultValuesFrame.OKPB.setFocus ()

#-----------------------------------------------------------------------------------------
#  to exit discarding changes
#-----------------------------------------------------------------------------------------
        
    def MaterialsFrame_default_cancel (self):

        self.MaterialsFrame.SetDefaultValuesFrame.close ()

#-----------------------------------------------------------------------------------------
#  to display help about this window
#-----------------------------------------------------------------------------------------

    def MaterialsFrame_default_help (self):

        print 'Help'

#---------------------------------------------------------------------------------------------
#  to clear each edit line
#---------------------------------------------------------------------------------------------

    def MaterialsFrame_default_Kxpermeability_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.KxPermeabilityLineEdit.setFocus ()

    def MaterialsFrame_default_Kypermeability_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.KyPermeabilityLineEdit.setFocus ()

    def MaterialsFrame_default_porosity_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.EffectivePorosityLineEdit.setFocus ()

    def MaterialsFrame_default_diffusion_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.EffectiveDiffusionLineEdit.setFocus ()

    def MaterialsFrame_default_longitudinaldispersivity_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.LongitudinalDispersivityLineEdit.setFocus ()

    def MaterialsFrame_default_transversedispersivity_clear (self):

        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.clear ()
        self.MaterialsFrame.SetDefaultValuesFrame.TransverseDispersivityLineEdit.setFocus ()

#-----------------------------------------------------------------------------------------

          
###########################################################################################
##                                                                                       ##
##                               MATERIALS FRAME (END)                                   ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                      MESH BUILDING UP DIRECTION FRAME (BEGINNING)                     ##
##                                                                                       ##
###########################################################################################



    def mesh_direction (self):
    
        self.MeshBuildingUpDirectionFrame = QFrame ()
        self.MeshBuildingUpDirectionFrame.setCaption ('Mesh (Direction)')
        self.MeshBuildingUpDirectionFrame.setMinimumSize (200, 120)
        self.MeshBuildingUpDirectionFrame.setMaximumSize (200, 120)
        setPosition (self.MeshBuildingUpDirectionFrame)

        self.MeshBuildingUpDirectionFrame.mainLayout = QVBoxLayout (self.MeshBuildingUpDirectionFrame, 10,-1, 'MeshBuildingUpDirectionFrame_mainLayout')
        self.MeshBuildingUpDirectionFrame.mainLayout.setMargin (Marge)
        self.MeshBuildingUpDirectionFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MeshBuildingUpDirection_comment = Comments ['Mesh_Direction']

        self.MeshBuildingUpDirectionFrame.QHGroupBoxA = QHGroupBox (self.MeshBuildingUpDirectionFrame)
        QToolTip.add (self.MeshBuildingUpDirectionFrame.QHGroupBoxA, MeshBuildingUpDirection_comment)

        self.MeshBuildingUpDirectionFrame.QHGroupBoxA.setMargin (5)
        self.MeshBuildingUpDirectionFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MeshBuildingUpDirectionFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MeshBuildingUpDirectionFrame.mainLayout.addWidget (self.MeshBuildingUpDirectionFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MeshBuildingUpDirectionFrame.QHBox1 = QHBox (self.MeshBuildingUpDirectionFrame)
        self.MeshBuildingUpDirectionFrame.QHBox1.setMargin (0)
        self.MeshBuildingUpDirectionFrame.mainLayout.addWidget (self.MeshBuildingUpDirectionFrame.QHBox1)
       
        self.MeshBuildingUpDirectionFrame.QButtonGroup1 = QButtonGroup ('Mesh Building Up Direction', self.MeshBuildingUpDirectionFrame.QHBox1, 'MeshBuildingUpDirectionFrame_QButtonGroup1' )
        self.MeshBuildingUpDirectionFrame.QButtonGroup1.setMidLineWidth (0)
        
        self.MeshBuildingUpDirectionFrame.QVBoxLayout10 = QVBoxLayout (self.MeshBuildingUpDirectionFrame.QButtonGroup1, 20, 20)

        self.MeshBuildingUpDirectionFrame.Organizer = range (2)

        self.MeshBuildingUpDirectionFrame.Organizer[0] = QRadioButton (self.MeshBuildingUpDirectionFrame.QButtonGroup1)
        self.MeshBuildingUpDirectionFrame.Organizer[0].setText('I     (X axis)')
        self.MeshBuildingUpDirectionFrame.Organizer[0].setChecked (1)
        self.MeshBuildingUpDirectionFrame.QVBoxLayout10.addWidget (self.MeshBuildingUpDirectionFrame.Organizer[0])
              
        self.MeshBuildingUpDirectionFrame.Organizer[1] = QRadioButton (self.MeshBuildingUpDirectionFrame.QButtonGroup1)
        self.MeshBuildingUpDirectionFrame.Organizer[1].setText('J     (Y axis)')
        self.MeshBuildingUpDirectionFrame.QVBoxLayout10.addWidget (self.MeshBuildingUpDirectionFrame.Organizer[1])

        self.MeshBuildingUpDirectionFrame.QVBoxLayout10.activate()
        self.MeshBuildingUpDirectionFrame.QButtonGroup1.adjustSize ()

#----------------------------------------------------------------------------------------------

        self.MeshBuildingUpDirectionFrame.QHGroupBox0 = QHGroupBox (self.MeshBuildingUpDirectionFrame)
        self.MeshBuildingUpDirectionFrame.QHGroupBox0.setMargin (10)
        self.MeshBuildingUpDirectionFrame.QHGroupBox0.setMidLineWidth (0)
        self.MeshBuildingUpDirectionFrame.mainLayout.addWidget (self.MeshBuildingUpDirectionFrame.QHGroupBox0)

        self.MeshBuildingUpDirectionFrame.OKPB = QPushButton ('OK', self.MeshBuildingUpDirectionFrame.QHGroupBox0)
        self.MeshBuildingUpDirectionFrame.OKPB.setFocus ()
        self.MeshBuildingUpDirectionFrame.CancelPB = QPushButton ('Cancel', self.MeshBuildingUpDirectionFrame.QHGroupBox0)
        self.MeshBuildingUpDirectionFrame.HelpPB = QPushButton ('Help', self.MeshBuildingUpDirectionFrame.QHGroupBox0)
       
        self.connect (self.MeshBuildingUpDirectionFrame.OKPB, SIGNAL ('clicked ()'), self.MeshBuildingUpDirectionFrame_ok)
        self.connect (self.MeshBuildingUpDirectionFrame.CancelPB, SIGNAL ('clicked ()'), self.MeshBuildingUpDirectionFrame_cancel)
        self.connect (self.MeshBuildingUpDirectionFrame.HelpPB, SIGNAL ('clicked ()'), self.MeshBuildingUpDirectionFrame_help)

#----------------------------------------------------------------------------------------------

        self.MeshBuildingUpDirectionFrame.show ()

#----------------------------------------------------------------------------------------------

    def MeshBuildingUpDirectionFrame_ok (self):

        global MeshLine_Direction

        if self.MeshBuildingUpDirectionFrame.Organizer[0].isChecked ():
            MeshLine_Direction = 'I'
            self.mesh_line_in_I ()
        else:
            MeshLine_Direction = 'J'
            self.mesh_line_in_J ()

    def MeshBuildingUpDirectionFrame_cancel (self):

        self.MeshBuildingUpDirectionFrame.close ()

    def MeshBuildingUpDirectionFrame_help (self):

        self.Help ()


        
###########################################################################################
##                                                                                       ##
##                       MESH BUILDING UP DIRECTION FRAME (END)                          ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                          MESH LINE IN I FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################




    def mesh_line_in_I (self):

        self.MeshLineInIFrame = QFrame ()
        self.MeshLineInIFrame.setCaption ('Mesh Line In I')

        self.MeshLineInIFrame.mainLayout = QVBoxLayout (self.MeshLineInIFrame, 10,-1, 'MeshLineInIFrame_mainLayout')
        self.MeshLineInIFrame.mainLayout.setMargin (Marge)
        self.MeshLineInIFrame.mainLayout.setSpacing (Space)
            
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MeshLineInI_comment = Comments ['Mesh_Line_In_I']

        self.MeshLineInIFrame.QHGroupBoxA = QHGroupBox (self.MeshLineInIFrame)
	QToolTip.add (self.MeshLineInIFrame.QHGroupBoxA, MeshLineInI_comment)

        self.MeshLineInIFrame.QHGroupBoxA.setMargin (5)
        self.MeshLineInIFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MeshLineInIFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MeshLineInIFrame.mainLayout.addWidget (self.MeshLineInIFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MeshLineInIFrame.QHBox0 = QHBox (self.MeshLineInIFrame)
        self.MeshLineInIFrame.QHBox0.setMargin (0)
        self.MeshLineInIFrame.QHBox0.setSpacing (5)
        self.MeshLineInIFrame.QHBox0.setMidLineWidth (0)
        self.MeshLineInIFrame.mainLayout.addWidget (self.MeshLineInIFrame.QHBox0)

        self.MeshLineInIFrame.QButtonGroup1 = QButtonGroup ('', self.MeshLineInIFrame.QHBox0, 'MeshLineInIFrame_QButtonGroup1' )
        self.MeshLineInIFrame.QVBoxLayout10 = QVBoxLayout (self.MeshLineInIFrame.QButtonGroup1, 10)
        self.MeshLineInIFrame.QVBoxLayout10.setMargin (10)
        self.MeshLineInIFrame.QVBoxLayout10.setSpacing (15)

        self.MeshLineInIFrame.Organizer = range (2)

        self.MeshLineInIFrame.Organizer[0] = QRadioButton (self.MeshLineInIFrame.QButtonGroup1)
        self.MeshLineInIFrame.Organizer[0].setText('New Grid Line')
        self.MeshLineInIFrame.Organizer[0].setChecked (1)
        self.connect (self.MeshLineInIFrame.Organizer[0], SIGNAL ('clicked ()'), self.MeshLineInIFrame_NewGridLine_enable)
        self.MeshLineInIFrame.QVBoxLayout10.addWidget (self.MeshLineInIFrame.Organizer[0])

        self.MeshLineInIFrame.Organizer[1] = QRadioButton (self.MeshLineInIFrame.QButtonGroup1)
        self.MeshLineInIFrame.Organizer[1].setText('Old Grid Line')
        self.connect (self.MeshLineInIFrame.Organizer[1], SIGNAL ('clicked ()'), self.MeshLineInIFrame_OldGridLine_enable)
        self.MeshLineInIFrame.QVBoxLayout10.addWidget (self.MeshLineInIFrame.Organizer[1])

        self.MeshLineInIFrame.QButtonGroup1.setMinimumWidth (200)
        self.MeshLineInIFrame.QVBoxLayout10.activate()

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInIFrame.QVGroupBox01 = QVGroupBox (self.MeshLineInIFrame.QHBox0)
        self.MeshLineInIFrame.QVGroupBox01.setMargin (0)
        self.MeshLineInIFrame.QVGroupBox01.setMidLineWidth (0)

        self.MeshLineInIFrame.SpacerLabel = QLabel ('', self.MeshLineInIFrame.QVGroupBox01)
        self.MeshLineInIFrame.SpacerLabel.setMinimumSize (50, 20)
        self.MeshLineInIFrame.SpacerLabel.setMaximumSize (50, 20)
        
        self.MeshLineInIFrame.LineNumberComboBox = QComboBox (self.MeshLineInIFrame.QVGroupBox01)
        self.MeshLineInIFrame.LineNumberComboBox.setMinimumSize (70, 25)
        self.MeshLineInIFrame.LineNumberComboBox.setMaximumSize (70, 25)
        i = 1
        while i < (len (Mesh_list_InI) + 1):
            self.MeshLineInIFrame.LineNumberComboBox.insertItem (str (i), 0)
            i = i+1
                
        self.MeshLineInIFrame.QVGroupBox01.setEnabled (0)
        
#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInIFrame.QHGroupBox0 = QHGroupBox (self.MeshLineInIFrame)
        self.MeshLineInIFrame.QHGroupBox0.setMidLineWidth (0)
        self.MeshLineInIFrame.mainLayout.addWidget (self.MeshLineInIFrame.QHGroupBox0)

        self.MeshLineInIFrame.OKPB = QPushButton ('OK', self.MeshLineInIFrame.QHGroupBox0)
        self.MeshLineInIFrame.OKPB.setFocus ()
        self.MeshLineInIFrame.DeletePB = QPushButton ('Delete', self.MeshLineInIFrame.QHGroupBox0)
        self.MeshLineInIFrame.VisualizePB = QPushButton ('Visualize', self.MeshLineInIFrame.QHGroupBox0)        
        self.MeshLineInIFrame.CancelPB = QPushButton ('Cancel', self.MeshLineInIFrame.QHGroupBox0)
        self.MeshLineInIFrame.HelpPB = QPushButton ('&Help', self.MeshLineInIFrame.QHGroupBox0)

        self.connect (self.MeshLineInIFrame.OKPB, SIGNAL('clicked()'), self.MeshLineInIFrame_ok)
        self.connect (self.MeshLineInIFrame.DeletePB, SIGNAL('clicked()'), self.MeshLineInIFrame_delete)
        self.connect (self.MeshLineInIFrame.VisualizePB, SIGNAL('clicked()'), self.MeshLineInIFrame_visualize)
        self.connect (self.MeshLineInIFrame.CancelPB, SIGNAL('clicked()'), self.MeshLineInIFrame_cancel)
        self.connect (self.MeshLineInIFrame.HelpPB, SIGNAL('clicked()'), self.MeshLineInIFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInIFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def MeshLineInIFrame_ok (self):

        global GridLineInI
        global LineNumberInI
        global NumberOfLinesInI

        if self.MeshLineInIFrame.Organizer[0].isChecked ():
            GridLineInI = 'New'
        else:
            GridLineInI = 'Old'

        try:
            LineNumberInI = int (str (self.MeshLineInIFrame.LineNumberComboBox.currentText ()))
        except:
            LineNumberInI = 0

        self.mesh_line_in_I_parameters ()
        self.MeshLineInIFrame.close ()

    def MeshLineInIFrame_delete (self):

# debug_Mesh

        global Mesh_list_InI
        global LineNumberInI
        global NumberOfLinesInI

        if self.MeshLineInIFrame.LineNumberComboBox.count () != 0:
            index = LineNumberInI - 1
            self.MeshLineInIFrame.LineNumberComboBox.removeItem (self.MeshLineInIFrame.LineNumberComboBox.currentItem ())
            del Mesh_list_InI [index]
            NumberOfLinesInI = NumberOfLinesInI - 1
            LineNumberInI = LineNumberInI - 1
        else:
            self.MeshLineInIMB = QMessageBox()
            self.MeshLineInIMB.setCaption ('Error')
            self.MeshLineInIMB.setText ('There is no line anymore.')
            self.MeshLineInIMB.setIcon (QMessageBox.Critical)
            self.MeshLineInIMB.show ()
        
    def MeshLineInIFrame_visualize (self):

    #
    # anderung 14/06 /21/06
	#
	#  Mesh_list_inI
	#  Mesh_list_inJ
	
        self.grid2 ()

    def MeshLineInIFrame_cancel (self):

        self.MeshLineInIFrame.close ()

    def MeshLineInIFrame_help (self):

        self.Help ()

    def MeshLineInIFrame_OldGridLine_enable (self):

        self.MeshLineInIFrame.QVGroupBox01.setEnabled (1)

    def MeshLineInIFrame_NewGridLine_enable (self):

        self.MeshLineInIFrame.QVGroupBox01.setEnabled (0)




###########################################################################################
##                                                                                       ##
##                             MESH LINE IN I FRAME (END)                                ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                      MESH LINE IN I PARAMETERS FRAME (BEGINNING)                      ##
##                                                                                       ##
###########################################################################################





    def mesh_line_in_I_parameters (self):

        self.MeshLineInIParametersFrame = QFrame ()
        self.MeshLineInIParametersFrame.setCaption ('Mesh Line In I Parameters')
        self.MeshLineInIParametersFrame.setMinimumWidth (245)

        self.MeshLineInIParametersFrame.mainLayout = QVBoxLayout (self.MeshLineInIParametersFrame, 10,-1, 'MeshLineInIParametersFrame_mainLayout')
        self.MeshLineInIParametersFrame.mainLayout.setMargin (Marge)
        self.MeshLineInIParametersFrame.mainLayout.setSpacing (Space)
            
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MeshLineInIParameters_comment = Comments ['Mesh_Line_In_I_Parameters']

        self.MeshLineInIParametersFrame.QHGroupBoxA = QHGroupBox (self.MeshLineInIParametersFrame)
	QToolTip.add (self.MeshLineInIParametersFrame.QHGroupBoxA, MeshLineInIParameters_comment)

        self.MeshLineInIParametersFrame.QHGroupBoxA.setMargin (5)
        self.MeshLineInIParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MeshLineInIParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MeshLineInIParametersFrame.mainLayout.addWidget (self.MeshLineInIParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MeshLineInIParametersFrame.QHGroupBox0 = QHGroupBox ('Grid Line ', self.MeshLineInIParametersFrame)
        self.MeshLineInIParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.MeshLineInIParametersFrame.QHGroupBox0.setMargin (10)
        self.MeshLineInIParametersFrame.mainLayout.addWidget (self.MeshLineInIParametersFrame.QHGroupBox0)

        self.MeshLineInIParametersFrame.QVBox00 = QVBox (self.MeshLineInIParametersFrame.QHGroupBox0)
        self.MeshLineInIParametersFrame.SpacerQVBox = QVBox (self.MeshLineInIParametersFrame.QHGroupBox0)
        self.MeshLineInIParametersFrame.QVBox01 = QVBox (self.MeshLineInIParametersFrame.QHGroupBox0)

        self.MeshLineInIParametersFrame.QVBox00.setMargin (0)
        self.MeshLineInIParametersFrame.QVBox00.setSpacing (5)
        self.MeshLineInIParametersFrame.QVBox01.setMargin (0)
        self.MeshLineInIParametersFrame.QVBox01.setSpacing (5)
        self.MeshLineInIParametersFrame.SpacerQVBox.setMinimumSize (40, 10)
        self.MeshLineInIParametersFrame.SpacerQVBox.setMaximumSize (40, 10)

        self.MeshLineInIParametersFrame.NumberOfCellsLabel = QLabel ('Number of Cells', self.MeshLineInIParametersFrame.QVBox00)

        self.MeshLineInIParametersFrame.NumberOfCellsLineEdit = QLineEdit (self.MeshLineInIParametersFrame.QVBox01)
        self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setMinimumSize (80, 25)
        self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setMaximumSize (80, 25)
        self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setFocus ()
        #  On ne peut entrer qu un entier
        v = QIntValidator (self.MeshLineInIParametersFrame.NumberOfCellsLineEdit)
        self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setValidator (v)

        self.MeshLineInIParametersFrame.LengthLabel = QLabel ('Total Length ('+str (Length_Unit)+')', self.MeshLineInIParametersFrame.QVBox00)

        self.MeshLineInIParametersFrame.LengthLineEdit = QLineEdit (self.MeshLineInIParametersFrame.QVBox01)
        self.MeshLineInIParametersFrame.LengthLineEdit.setMinimumSize (80, 25)
        self.MeshLineInIParametersFrame.LengthLineEdit.setMaximumSize (80, 25)

        self.MeshLineInIParametersFrame.GeometricRatioLabel  = QLabel ('Geometric Ratio', self.MeshLineInIParametersFrame.QVBox00)

        self.MeshLineInIParametersFrame.GeometricRatioLineEdit = QLineEdit (self.MeshLineInIParametersFrame.QVBox01)
        self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setMinimumSize (80, 25)
        self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setMaximumSize (80, 25)
#        self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setEnabled (1)
        self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setEnabled (0)

# debug_geometricratio


#------------------------------------------------------------------------------------------------------------------------------------------
#  On initialise la fenetre MeshLineInIParameters:
#    - Si l utilisateur n a pas defini de ligne ou veut en definir une nouvelle, on
#      initialise avec les parametres par defaut.
#    - Sinon, on retourne les valeurs des parametres correspondant a la ligne (deja definie) choisie.

        if GridLineInI == 'New':
            self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setText (str (MeshLineInINumberOfCells))
            self.MeshLineInIParametersFrame.LengthLineEdit.setText (str (MeshLineInILength))
            self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setText (str (MeshLineInIGeometricRatio))
        else:
            self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.setText (str (Mesh_list_InI [LineNumberInI-1][0]))
            self.MeshLineInIParametersFrame.LengthLineEdit.setText (str (Mesh_list_InI [LineNumberInI-1][1]))
            self.MeshLineInIParametersFrame.GeometricRatioLineEdit.setText (str (Mesh_list_InI [LineNumberInI-1][2]))

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInIParametersFrame.QHGroupBox2 = QHGroupBox (self.MeshLineInIParametersFrame)
        self.MeshLineInIParametersFrame.QHGroupBox2.setMidLineWidth (0)
        self.MeshLineInIParametersFrame.mainLayout.addWidget (self.MeshLineInIParametersFrame.QHGroupBox2)

        self.MeshLineInIParametersFrame.OKPB = QPushButton ('OK', self.MeshLineInIParametersFrame.QHGroupBox2)
        self.MeshLineInIParametersFrame.CancelPB = QPushButton ('Cancel', self.MeshLineInIParametersFrame.QHGroupBox2)
        self.MeshLineInIParametersFrame.HelpPB = QPushButton ('&Help', self.MeshLineInIParametersFrame.QHGroupBox2)

        self.MeshLineInIParametersFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.MeshLineInIParametersFrame.OKPB, SIGNAL('clicked()'), self.MeshLineInIParametersFrame_ok)
        self.connect (self.MeshLineInIParametersFrame.CancelPB, SIGNAL('clicked()'), self.MeshLineInIParametersFrame_cancel)
        self.connect (self.MeshLineInIParametersFrame.HelpPB, SIGNAL('clicked()'), self.MeshLineInIParametersFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInIParametersFrame.show ()
     
#------------------------------------------------------------------------------------------------------------------------------------------
#  to exit saving parameters and/or changes
#------------------------------------------------------------------------------------------------------------------------------------------

    def MeshLineInIParametersFrame_ok (self):

        global Mesh_list_InI
        global NumberOfLinesInI
        
        NumberOfCells = int (str (self.MeshLineInIParametersFrame.NumberOfCellsLineEdit.text ()))
        Length = float (str (self.MeshLineInIParametersFrame.LengthLineEdit.text ()))
        GeometricRatio = float (str (self.MeshLineInIParametersFrame.GeometricRatioLineEdit.text ()))

        Temp_list = []
        Temp_list.append (NumberOfCells)
        Temp_list.append (Length)
        Temp_list.append (GeometricRatio)
        
        if GridLineInI == 'New':
            Mesh_list_InI.append (Temp_list)        
            NumberOfLinesInI = NumberOfLinesInI + 1
        else:
            Mesh_list_InI [LineNumberInI - 1] = Temp_list

        self.MeshLineInIParametersFrame.close ()

#-----------------------------------------------------------------------------------------
#  to exit discarding changes
#-----------------------------------------------------------------------------------------

    def MeshLineInIParametersFrame_cancel (self):

        self.MeshLineInIParametersFrame.close ()

#-----------------------------------------------------------------------------------------
#  to display help about this window
#-----------------------------------------------------------------------------------------

    def MeshLineInIParametersFrame_help (self):

        self.Help ()

#-----------------------------------------------------------------------------------------


        
###########################################################################################
##                                                                                       ##
##                         MESH LINE IN I PARAMETERS FRAME (END)                         ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                          MESH LINE IN J FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################




    def mesh_line_in_J (self):

        self.MeshLineInJFrame = QFrame ()
        self.MeshLineInJFrame.setCaption ('Mesh Line In J')

        self.MeshLineInJFrame.mainLayout = QVBoxLayout (self.MeshLineInJFrame, 10,-1, 'MeshLineInJFrame_mainLayout')
        self.MeshLineInJFrame.mainLayout.setMargin (Marge)
        self.MeshLineInJFrame.mainLayout.setSpacing (Space)
            
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MeshLineInJ_comment = Comments ['Mesh_Line_In_J']

        self.MeshLineInJFrame.QHGroupBoxA = QHGroupBox (self.MeshLineInJFrame)
	QToolTip.add (self.MeshLineInJFrame.QHGroupBoxA, MeshLineInJ_comment)

        self.MeshLineInJFrame.QHGroupBoxA.setMargin (5)
        self.MeshLineInJFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MeshLineInJFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MeshLineInJFrame.mainLayout.addWidget (self.MeshLineInJFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MeshLineInJFrame.QHBox0 = QHBox (self.MeshLineInJFrame)
        self.MeshLineInJFrame.QHBox0.setMargin (0)
        self.MeshLineInJFrame.QHBox0.setSpacing (5)
        self.MeshLineInJFrame.QHBox0.setMidLineWidth (0)
        self.MeshLineInJFrame.mainLayout.addWidget (self.MeshLineInJFrame.QHBox0)

        self.MeshLineInJFrame.QButtonGroup1 = QButtonGroup ('', self.MeshLineInJFrame.QHBox0, 'MeshLineInJFrame_QButtonGroup1' )
        self.MeshLineInJFrame.QVBoxLayout10 = QVBoxLayout (self.MeshLineInJFrame.QButtonGroup1, 10)
        self.MeshLineInJFrame.QVBoxLayout10.setMargin (10)
        self.MeshLineInJFrame.QVBoxLayout10.setSpacing (15)

        self.MeshLineInJFrame.Organizer = range (2)

        self.MeshLineInJFrame.Organizer[0] = QRadioButton (self.MeshLineInJFrame.QButtonGroup1)
        self.MeshLineInJFrame.Organizer[0].setText('New Grid Line')
        self.MeshLineInJFrame.Organizer[0].setChecked (1)
        self.connect (self.MeshLineInJFrame.Organizer[0], SIGNAL ('clicked ()'), self.MeshLineInJFrame_NewGridLine_enable)
        self.MeshLineInJFrame.QVBoxLayout10.addWidget (self.MeshLineInJFrame.Organizer[0])

        self.MeshLineInJFrame.Organizer[1] = QRadioButton (self.MeshLineInJFrame.QButtonGroup1)
        self.MeshLineInJFrame.Organizer[1].setText('Old Grid Line')
        self.connect (self.MeshLineInJFrame.Organizer[1], SIGNAL ('clicked ()'), self.MeshLineInJFrame_OldGridLine_enable)
        self.MeshLineInJFrame.QVBoxLayout10.addWidget (self.MeshLineInJFrame.Organizer[1])

        self.MeshLineInJFrame.QButtonGroup1.setMinimumWidth (200)
        self.MeshLineInJFrame.QVBoxLayout10.activate()

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInJFrame.QVGroupBox01 = QVGroupBox (self.MeshLineInJFrame.QHBox0)
        self.MeshLineInJFrame.QVGroupBox01.setMargin (0)
        self.MeshLineInJFrame.QVGroupBox01.setMidLineWidth (0)

        self.MeshLineInJFrame.SpacerLabel = QLabel ('', self.MeshLineInJFrame.QVGroupBox01)
        self.MeshLineInJFrame.SpacerLabel.setMinimumSize (50, 20)
        self.MeshLineInJFrame.SpacerLabel.setMaximumSize (50, 20)
        
        self.MeshLineInJFrame.LineNumberComboBox = QComboBox (self.MeshLineInJFrame.QVGroupBox01)
        self.MeshLineInJFrame.LineNumberComboBox.setMinimumSize (70, 25)
        self.MeshLineInJFrame.LineNumberComboBox.setMaximumSize (70, 25)
        i = 1
        while i < (len (Mesh_list_InJ) + 1):
            self.MeshLineInJFrame.LineNumberComboBox.insertItem (str (i), 0)
            i = i+1
                
        self.MeshLineInJFrame.QVGroupBox01.setEnabled (0)
        
#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInJFrame.QHGroupBox0 = QHGroupBox (self.MeshLineInJFrame)
        self.MeshLineInJFrame.QHGroupBox0.setMidLineWidth (0)
        self.MeshLineInJFrame.mainLayout.addWidget (self.MeshLineInJFrame.QHGroupBox0)

        self.MeshLineInJFrame.OKPB = QPushButton ('OK', self.MeshLineInJFrame.QHGroupBox0)
        self.MeshLineInJFrame.OKPB.setFocus ()
        self.MeshLineInJFrame.DeletePB = QPushButton ('Delete', self.MeshLineInJFrame.QHGroupBox0)
        self.MeshLineInJFrame.VisualizePB = QPushButton ('Visualize', self.MeshLineInJFrame.QHGroupBox0)        
        self.MeshLineInJFrame.CancelPB = QPushButton ('Cancel', self.MeshLineInJFrame.QHGroupBox0)
        self.MeshLineInJFrame.HelpPB = QPushButton ('&Help', self.MeshLineInJFrame.QHGroupBox0)

        self.connect (self.MeshLineInJFrame.OKPB, SIGNAL('clicked()'), self.MeshLineInJFrame_ok)
        self.connect (self.MeshLineInJFrame.DeletePB, SIGNAL('clicked()'), self.MeshLineInJFrame_delete)
        self.connect (self.MeshLineInJFrame.VisualizePB, SIGNAL('clicked()'), self.MeshLineInJFrame_visualize)
        self.connect (self.MeshLineInJFrame.CancelPB, SIGNAL('clicked()'), self.MeshLineInJFrame_cancel)
        self.connect (self.MeshLineInJFrame.HelpPB, SIGNAL('clicked()'), self.MeshLineInJFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInJFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def MeshLineInJFrame_ok (self):

        global GridLineInJ
        global LineNumberInJ
        global NumberOfLinesInJ

        if self.MeshLineInJFrame.Organizer[0].isChecked ():
            GridLineInJ = 'New'
        else:
            GridLineInJ = 'Old'

        try:
            LineNumberInJ = int (str (self.MeshLineInJFrame.LineNumberComboBox.currentText ()))
        except:
            LineNumberInJ = 0

        self.mesh_line_in_J_parameters ()
        self.MeshLineInJFrame.close ()

    def MeshLineInJFrame_delete (self):

        global Mesh_list_InJ
        global LineNumberInJ
        global NumberOfLinesInJ

        if self.MeshLineInJFrame.LineNumberComboBox.count () != 0:
            index = LineNumberInJ - 1
            self.MeshLineInJFrame.LineNumberComboBox.removeItem (self.MeshLineInJFrame.LineNumberComboBox.currentItem ())
            del Mesh_list_InJ [index]
            NumberOfLinesInJ = NumberOfLinesInJ - 1
            LineNumberInJ = LineNumberInJ - 1
        else:
            self.MeshLineInJMB = QMessageBox()
            self.MeshLineInJMB.setCaption ('Error')
            self.MeshLineInJMB.setText ('There is no line anymore.')
            self.MeshLineInJMB.setIcon (QMessageBox.Critical)
            self.MeshLineInJMB.show ()
            
        print Mesh_list_InJ
        print LineNumberInJ

    def MeshLineInJFrame_visualize (self):

        self.grid2 ()

    def MeshLineInJFrame_cancel (self):

        self.MeshLineInJFrame.close ()

    def MeshLineInJFrame_help (self):

        self.Help ()

    def MeshLineInJFrame_OldGridLine_enable (self):

        self.MeshLineInJFrame.QVGroupBox01.setEnabled (1)

    def MeshLineInJFrame_NewGridLine_enable (self):

        self.MeshLineInJFrame.QVGroupBox01.setEnabled (0)




###########################################################################################
##                                                                                       ##
##                             MESH LINE IN J FRAME (END)                                ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                      MESH LINE IN J PARAMETERS FRAME (BEGINNING)                      ##
##                                                                                       ##
###########################################################################################





    def mesh_line_in_J_parameters (self):

        self.MeshLineInJParametersFrame = QFrame ()
        self.MeshLineInJParametersFrame.setCaption ('Mesh Line In J Parameters')
        self.MeshLineInJParametersFrame.setMinimumWidth (245)

        self.MeshLineInJParametersFrame.mainLayout = QVBoxLayout (self.MeshLineInJParametersFrame, 10,-1, 'MeshLineInJParametersFrame_mainLayout')
        self.MeshLineInJParametersFrame.mainLayout.setMargin (Marge)
        self.MeshLineInJParametersFrame.mainLayout.setSpacing (Space)
            
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        MeshLineInJParameters_comment = Comments ['Mesh_Line_In_J_Parameters']

        self.MeshLineInJParametersFrame.QHGroupBoxA = QHGroupBox (self.MeshLineInJParametersFrame)
        QToolTip.add (self.MeshLineInJParametersFrame.QHGroupBoxA, MeshLineInJParameters_comment)

        self.MeshLineInJParametersFrame.QHGroupBoxA.setMargin (5)
        self.MeshLineInJParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.MeshLineInJParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.MeshLineInJParametersFrame.mainLayout.addWidget (self.MeshLineInJParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.MeshLineInJParametersFrame.QHGroupBox0 = QHGroupBox ('Grid Line ', self.MeshLineInJParametersFrame)
        self.MeshLineInJParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.MeshLineInJParametersFrame.QHGroupBox0.setMargin (5)
        self.MeshLineInJParametersFrame.mainLayout.addWidget (self.MeshLineInJParametersFrame.QHGroupBox0)

        self.MeshLineInJParametersFrame.QVBox00 = QVBox (self.MeshLineInJParametersFrame.QHGroupBox0)
        self.MeshLineInJParametersFrame.SpacerQVBox = QVBox (self.MeshLineInJParametersFrame.QHGroupBox0)
        self.MeshLineInJParametersFrame.QVBox01 = QVBox (self.MeshLineInJParametersFrame.QHGroupBox0)

        self.MeshLineInJParametersFrame.QVBox00.setMargin (0)
        self.MeshLineInJParametersFrame.QVBox00.setSpacing (5)
        self.MeshLineInJParametersFrame.QVBox01.setMargin (0)
        self.MeshLineInJParametersFrame.QVBox01.setSpacing (5)
        self.MeshLineInJParametersFrame.SpacerQVBox.setMinimumSize (40, 20)
        self.MeshLineInJParametersFrame.SpacerQVBox.setMaximumSize (40, 20)
        
        self.MeshLineInJParametersFrame.NumberOfCellsLabel = QLabel ('Number of Cells', self.MeshLineInJParametersFrame.QVBox00)

        self.MeshLineInJParametersFrame.NumberOfCellsLineEdit = QLineEdit (self.MeshLineInJParametersFrame.QVBox01)
        self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setMinimumSize (80, 25)
        self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setMaximumSize (80, 25)
        self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setFocus ()
        #  On ne peut entrer qu un entier
        v = QIntValidator (self.MeshLineInJParametersFrame.NumberOfCellsLineEdit)
        self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setValidator (v)

        self.MeshLineInJParametersFrame.LengthLabel = QLabel ('Total Length ('+str (Length_Unit)+')', self.MeshLineInJParametersFrame.QVBox00)

        self.MeshLineInJParametersFrame.LengthLineEdit = QLineEdit (self.MeshLineInJParametersFrame.QVBox01)
        self.MeshLineInJParametersFrame.LengthLineEdit.setMinimumSize (80, 25)
        self.MeshLineInJParametersFrame.LengthLineEdit.setMaximumSize (80, 25)

        self.MeshLineInJParametersFrame.GeometricRatioLabel  = QLabel ('Geometric Ratio', self.MeshLineInJParametersFrame.QVBox00)

        self.MeshLineInJParametersFrame.GeometricRatioLineEdit = QLineEdit (self.MeshLineInJParametersFrame.QVBox01)
        self.MeshLineInJParametersFrame.GeometricRatioLineEdit.setMinimumSize (80, 25)
        self.MeshLineInJParametersFrame.GeometricRatioLineEdit.setMaximumSize (80, 25)
        self.MeshLineInJParametersFrame.GeometricRatioLineEdit.setEnabled (0)

#------------------------------------------------------------------------------------------------------------------------------------------
#  On initialise la fenetre MeshLineInJParameters:
#    - Si l utilisateur n a pas defini de ligne ou veut en definir une nouvelle, on
#      initialise avec les parametres par defaut.
#    - Sinon, on retourne les valeurs des parametres correspondant a la ligne (deja definie) choisie.

        if GridLineInJ == 'New':
            self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setText (str (MeshLineInJNumberOfCells))
            self.MeshLineInJParametersFrame.LengthLineEdit.setText (str (MeshLineInJLength))
            self.MeshLineInJParametersFrame.GeometricRatioLineEdit.setText (str (MeshLineInJGeometricRatio))
        else:
            self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.setText (str (Mesh_list_InJ [LineNumberInJ-1][0]))
            self.MeshLineInJParametersFrame.LengthLineEdit.setText (str (Mesh_list_InJ [LineNumberInJ-1][1]))
            self.MeshLineInJParametersFrame.GeometricRatioLineEdit.setText (str (Mesh_list_InJ [LineNumberInJ-1][2]))

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInJParametersFrame.QHGroupBox2 = QHGroupBox (self.MeshLineInJParametersFrame)
        self.MeshLineInJParametersFrame.QHGroupBox2.setMidLineWidth (0)
        self.MeshLineInJParametersFrame.mainLayout.addWidget (self.MeshLineInJParametersFrame.QHGroupBox2)

        self.MeshLineInJParametersFrame.OKPB = QPushButton ('OK', self.MeshLineInJParametersFrame.QHGroupBox2)
        self.MeshLineInJParametersFrame.CancelPB = QPushButton ('Cancel', self.MeshLineInJParametersFrame.QHGroupBox2)
        self.MeshLineInJParametersFrame.HelpPB = QPushButton ('&Help', self.MeshLineInJParametersFrame.QHGroupBox2)

        self.MeshLineInJParametersFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.MeshLineInJParametersFrame.OKPB, SIGNAL('clicked()'), self.MeshLineInJParametersFrame_ok)
        self.connect (self.MeshLineInJParametersFrame.CancelPB, SIGNAL('clicked()'), self.MeshLineInJParametersFrame_cancel)
        self.connect (self.MeshLineInJParametersFrame.HelpPB, SIGNAL('clicked()'), self.MeshLineInJParametersFrame_help)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.MeshLineInJParametersFrame.show ()
     
#------------------------------------------------------------------------------------------------------------------------------------------
#  to exit saving parameters and/or changes
#------------------------------------------------------------------------------------------------------------------------------------------

    def MeshLineInJParametersFrame_ok (self):

        global Mesh_list_InJ
        global NumberOfLinesInJ
        
        NumberOfCells = int (str (self.MeshLineInJParametersFrame.NumberOfCellsLineEdit.text ()))
        Length = float (str (self.MeshLineInJParametersFrame.LengthLineEdit.text ()))
        GeometricRatio = float (str (self.MeshLineInJParametersFrame.GeometricRatioLineEdit.text ()))

        Temp_list = []
        Temp_list.append (NumberOfCells)
        Temp_list.append (Length)
        Temp_list.append (GeometricRatio)
        
        if GridLineInJ == 'New':
            Mesh_list_InJ.append (Temp_list)        
            NumberOfLinesInJ = NumberOfLinesInJ + 1
        else:
            Mesh_list_InJ [LineNumberInJ - 1] = Temp_list

        self.MeshLineInJParametersFrame.close ()

#-----------------------------------------------------------------------------------------
#  to exit discarding changes
#-----------------------------------------------------------------------------------------

    def MeshLineInJParametersFrame_cancel (self):

        self.MeshLineInJParametersFrame.close ()

#-----------------------------------------------------------------------------------------
#  to display help about this window
#-----------------------------------------------------------------------------------------

    def MeshLineInJParametersFrame_help (self):

        self.Help ()

#-----------------------------------------------------------------------------------------


        
###########################################################################################
##                                                                                       ##
##                         MESH LINE IN J PARAMETERS FRAME (END)                         ##
##                                                                                       ##
###########################################################################################





###########################################################################################
##                                                                                       ##
##                            SET ZONES FRAME (BEGINNING)                                ##
##                                                                                       ##
###########################################################################################


        
    def set_zones (self):

        self.SetZonesFrame = QFrame ()
        self.SetZonesFrame.setCaption ('Set Zones')
        setPosition (self.SetZonesFrame)

        self.SetZonesFrame.mainLayout = QVBoxLayout (self.SetZonesFrame, 10,-1, 'SetZonesFrame_mainLayout')
        self.SetZonesFrame.mainLayout.setMargin (Marge)
        self.SetZonesFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        SetZones_comment = Comments ['Set_Zones']

        self.SetZonesFrame.QHGroupBoxA = QHGroupBox (self.SetZonesFrame)
        QToolTip.add (self.SetZonesFrame.QHGroupBoxA, SetZones_comment)

        self.SetZonesFrame.QHGroupBoxA.setMargin (5)
        self.SetZonesFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SetZonesFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHBox0 = QHBox (self.SetZonesFrame)
        self.SetZonesFrame.QHBox0.setMargin (0)
        self.SetZonesFrame.QHBox0.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHBox0)

        self.SetZonesFrame.QButtonGroup1 = QButtonGroup ('', self.SetZonesFrame.QHBox0, 'SetZonesFrame_QButtonGroup1' )
        self.SetZonesFrame.QVBoxLayout10 = QVBoxLayout (self.SetZonesFrame.QButtonGroup1, 10)
        self.SetZonesFrame.QVBoxLayout10.setMargin (15)
        self.SetZonesFrame.QVBoxLayout10.setSpacing (20)

        self.SetZonesFrame.Organizer = range (2)

        self.SetZonesFrame.Organizer[0] = QRadioButton (self.SetZonesFrame.QButtonGroup1)
        self.SetZonesFrame.Organizer[0].setText('Define a New Zone')
        self.SetZonesFrame.Organizer[0].setChecked (1)
        self.connect (self.SetZonesFrame.Organizer[0], SIGNAL ('clicked ()'), self.SetZonesFrame_DefineANewZone_enable)
        self.SetZonesFrame.QVBoxLayout10.addWidget (self.SetZonesFrame.Organizer[0])

        self.SetZonesFrame.Organizer[1] = QRadioButton (self.SetZonesFrame.QButtonGroup1)
        self.SetZonesFrame.Organizer[1].setText('Modify or Delete an Existing Zone')
        self.connect (self.SetZonesFrame.Organizer[1], SIGNAL ('clicked ()'), self.SetZonesFrame_AlreadyCreatedZones_enable)
        self.SetZonesFrame.QVBoxLayout10.addWidget (self.SetZonesFrame.Organizer[1])

        self.SetZonesFrame.QVBoxLayout10.activate()

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox1 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox1.setMargin (10)
        self.SetZonesFrame.QHGroupBox1.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox1)

        self.SetZonesFrame.QVBox10 = QVBox (self.SetZonesFrame.QHGroupBox1)
        self.SetZonesFrame.QVBox12 = QVBox (self.SetZonesFrame.QHGroupBox1)
        self.SetZonesFrame.QVBox11 = QVBox (self.SetZonesFrame.QHGroupBox1)

        self.SetZonesFrame.QVBox10.setMargin (0)
        self.SetZonesFrame.QVBox10.setSpacing (5)
        self.SetZonesFrame.QVBox11.setMargin (0)
        self.SetZonesFrame.QVBox11.setSpacing (5)

        self.SetZonesFrame.QVBox12.setMinimumSize (25, 25)
        self.SetZonesFrame.QVBox12.setMaximumSize (25, 25)

        self.SetZonesFrame.NewZoneNameLabel =  QLabel ('New Zone Name', self.SetZonesFrame.QVBox10)
        self.SetZonesFrame.NewZoneNameLabel.setMinimumHeight (15)
        self.SetZonesFrame.NewZoneNameLabel.setMaximumHeight (15)

        self.SetZonesFrame.NewZoneNameLineEdit = QLineEdit (self.SetZonesFrame.QVBox10)
        self.SetZonesFrame.NewZoneNameLineEdit.setMinimumSize (200, 25)
        self.SetZonesFrame.NewZoneNameLineEdit.setMaximumSize (200, 25)
        self.SetZonesFrame.NewZoneNameLineEdit.setFocus ()

        self.spacerLabel = QLabel ('              ', self.SetZonesFrame.QVBox11)

        self.SetZonesFrame.DefineAsBoundaryCheckBox = QCheckBox (' Define as a Boundary Zone', self.SetZonesFrame.QVBox11)
        self.SetZonesFrame.DefineAsBoundaryCheckBox.setMinimumSize (175, 25)
        self.connect (self.SetZonesFrame.DefineAsBoundaryCheckBox, SIGNAL ('clicked()'), self.SetZonesFrame_activateTimeVariation)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox2 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox2.setMargin (10)
        self.SetZonesFrame.QHGroupBox2.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox2)

        self.SetZonesFrame.QVBox20 = QVBox (self.SetZonesFrame.QHGroupBox2)
        self.SetZonesFrame.QVBox22 = QVBox (self.SetZonesFrame.QHGroupBox2)
        self.SetZonesFrame.QVBox21 = QVBox (self.SetZonesFrame.QHGroupBox2)

        self.SetZonesFrame.QVBox20.setMargin (0)
        self.SetZonesFrame.QVBox20.setSpacing (5)
        self.SetZonesFrame.QVBox21.setMargin (0)
        self.SetZonesFrame.QVBox21.setSpacing (5)        

        self.SetZonesFrame.QVBox22.setMinimumSize (25, 25)
        self.SetZonesFrame.QVBox22.setMaximumSize (25, 25)

        self.SetZonesFrame.ZonesLabel =  QLabel ('Already Created Zones', self.SetZonesFrame.QVBox20)

        self.SetZonesFrame.ZonesComboBox = QComboBox (self.SetZonesFrame.QVBox20)
        self.SetZonesFrame.ZonesComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.ZonesComboBox.setMaximumSize (200, 25)
        self.connect (self.SetZonesFrame.ZonesComboBox, SIGNAL ('activated (int)'), self.SetZonesFrame_ZonesComboBox_activate)
        i = 0
        while i < len (Zones_list):
            self.SetZonesFrame.ZonesComboBox.insertItem (Zones_list [i])
            i = i+1

        self.SetZonesFrame.QHGroupBox2.setEnabled (0)

        self.spacerLabel = QLabel ('              ', self.SetZonesFrame.QVBox21)

        self.SetZonesFrame.BoundaryCheckBox = QCheckBox (' Boundary', self.SetZonesFrame.QVBox21)
        self.SetZonesFrame.BoundaryCheckBox.setMinimumSize (175, 25)
        self.connect (self.SetZonesFrame.BoundaryCheckBox, SIGNAL ('clicked()'), self.SetZonesFrame_activateTimeVariation_2)

        try:
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentItem ()))
            if str (Zone_Material_AqueousState_list  [index][6]) == 'Boundary':
                self.SetZonesFrame.BoundaryCheckBox.setChecked (1)
            else:
                self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
                pass
        except:
            pass

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox11 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox11.setMargin (0)
        self.SetZonesFrame.QHGroupBox11.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox11)
        self.SetZonesFrame.QHGroupBox11.setEnabled (0)

        self.SetZonesFrame.TimeVariationCheckBox = QCheckBox ('Boundary Condition Time Variation', self.SetZonesFrame.QHGroupBox11)
        self.connect (self.SetZonesFrame.TimeVariationCheckBox, SIGNAL ('clicked()'), self.SetZonesFrame_timeVariation)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox3 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox3.setMargin (10)
        self.SetZonesFrame.QHGroupBox3.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox3)

        self.SetZonesFrame.QVBox30 = QVBox (self.SetZonesFrame.QHGroupBox3)
        self.SetZonesFrame.QVBox31 = QVBox (self.SetZonesFrame.QHGroupBox3)

        self.SetZonesFrame.QVBox30.setMargin (0)
        self.SetZonesFrame.QVBox30.setSpacing (5)
        self.SetZonesFrame.QVBox31.setMargin (0)
        self.SetZonesFrame.QVBox31.setSpacing (5)

        self.SetZonesFrame.MaterialsLabel =  QLabel ('Zone Material', self.SetZonesFrame.QVBox30)

        self.SetZonesFrame.MaterialsComboBox = QComboBox (self.SetZonesFrame.QVBox30)
        self.SetZonesFrame.MaterialsComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.MaterialsComboBox.setMaximumSize (200, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Materiaux definis dans la fenetre 'Materials' 

        i = 0
        if (len (Materials_list) != 0):
            while i < len (Materials_list):        
                self.SetZonesFrame.MaterialsComboBox.insertItem (Materials_list [i])
                i = i+1
        else:
            self.SetZonesFrame.MB = QMessageBox()
            setPosition (self.SetZonesFrame.MB)
            self.SetZonesFrame.MB.setCaption ('Error')
            self.SetZonesFrame.MB.setText ('No Material has been defined.')
            self.SetZonesFrame.MB.setIcon (QMessageBox.Critical)
            self.SetZonesFrame.MB.show ()
            pass
                                    
        self.SetZonesFrame.AqueousStateLabel =  QLabel ('Zone Aqueous State', self.SetZonesFrame.QVBox31)

        self.SetZonesFrame.AqueousStateComboBox = QComboBox (self.SetZonesFrame.QVBox31)
        self.SetZonesFrame.AqueousStateComboBox.setMinimumSize (200, 25)
        self.SetZonesFrame.AqueousStateComboBox.setMaximumSize (200, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
#      Recopie de la liste des Solutions aqueuses definies dans la fenetre 'AqueousSolution' 

        i = 0
        if (len (AqueousStates_list) != 0):
            while i < len (AqueousStates_list):
                self.SetZonesFrame.AqueousStateComboBox.insertItem (AqueousStates_list [i])
                i = i+1
        else:
            self.SetZonesFrame.NoASMB = QMessageBox()
            setPosition (self.SetZonesFrame.NoASMB)
            self.SetZonesFrame.NoASMB.setCaption ('Error')
            self.SetZonesFrame.NoASMB.setText ('No Aqueous State has been defined.')
            self.SetZonesFrame.NoASMB.setIcon (QMessageBox.Critical)
            self.SetZonesFrame.NoASMB.show ()
            pass
            

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.QHGroupBox4 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox4.setMargin (10)
        self.SetZonesFrame.QHGroupBox4.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox4)

        self.SetZonesFrame.QHBox40 = QHBox (self.SetZonesFrame.QHGroupBox4)
        self.SetZonesFrame.QHBox41 = QHBox (self.SetZonesFrame.QHGroupBox4)

        self.SetZonesFrame.QHBox40.setMargin (0)
        self.SetZonesFrame.QHBox40.setSpacing (5)
        self.SetZonesFrame.QHBox41.setMargin (0)
        self.SetZonesFrame.QHBox41.setSpacing (5)

        self.SetZonesFrame.IStartIndexLabel = QLabel ('I Start Index', self.SetZonesFrame.QHBox40)

        self.SetZonesFrame.IStartIndexLineEdit = QLineEdit (self.SetZonesFrame.QHBox40)
        self.SetZonesFrame.IStartIndexLineEdit.setMinimumSize (50, 25)
        self.SetZonesFrame.IStartIndexLineEdit.setMaximumSize (50, 25)

        self.SetZonesFrame.IEndIndexLabel = QLabel ('I End Index ', self.SetZonesFrame.QHBox41)

        self.SetZonesFrame.IEndIndexLineEdit = QLineEdit (self.SetZonesFrame.QHBox41)
        self.SetZonesFrame.IEndIndexLineEdit.setMinimumSize (50, 25)
        self.SetZonesFrame.IEndIndexLineEdit.setMaximumSize (50, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
           
        self.SetZonesFrame.QHGroupBox5 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox5.setMargin (10)
        self.SetZonesFrame.QHGroupBox5.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox5)

        self.SetZonesFrame.QHBox50 = QHBox (self.SetZonesFrame.QHGroupBox5)
        self.SetZonesFrame.QHBox51 = QHBox (self.SetZonesFrame.QHGroupBox5)

        self.SetZonesFrame.QHBox50.setMargin (0)
        self.SetZonesFrame.QHBox50.setSpacing (5)
        self.SetZonesFrame.QHBox51.setMargin (0)
        self.SetZonesFrame.QHBox51.setSpacing (5)

        self.SetZonesFrame.JStartIndexLabel = QLabel ('J Start Index', self.SetZonesFrame.QHBox50)

        self.SetZonesFrame.JStartIndexLineEdit = QLineEdit (self.SetZonesFrame.QHBox50)
        self.SetZonesFrame.JStartIndexLineEdit.setMinimumSize (50, 25)
        self.SetZonesFrame.JStartIndexLineEdit.setMaximumSize (50, 25)

        self.SetZonesFrame.JEndIndexLabel = QLabel ('J End Index ', self.SetZonesFrame.QHBox51)

        self.SetZonesFrame.JEndIndexLineEdit = QLineEdit (self.SetZonesFrame.QHBox51)
        self.SetZonesFrame.JEndIndexLineEdit.setMinimumSize (50, 25)
        self.SetZonesFrame.JEndIndexLineEdit.setMaximumSize (50, 25)

#------------------------------------------------------------------------------------------------------------------------------------------
      
        self.SetZonesFrame.QHGroupBox6 = QHGroupBox (self.SetZonesFrame)
        self.SetZonesFrame.QHGroupBox6.setMidLineWidth (0)
        self.SetZonesFrame.mainLayout.addWidget (self.SetZonesFrame.QHGroupBox6)

        self.SetZonesFrame.OKPB = QPushButton ('OK', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.CreateChangePB = QPushButton ('&Change/&Create', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.DeleteZonePB = QPushButton ('De&lete Zone', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.CancelPB = QPushButton ('Cancel', self.SetZonesFrame.QHGroupBox6)
        self.SetZonesFrame.HelpPB = QPushButton ('&Help', self.SetZonesFrame.QHGroupBox6)

        QToolTip.add (self.SetZonesFrame.DeleteZonePB, 'Press CTRL+L to delete a Zone from the Zones Combo Box')
        QToolTip.add (self.SetZonesFrame.CancelPB, 'Press CTRL+Q to close this window')
        QToolTip.add (self.SetZonesFrame.HelpPB, 'Press CTRL+H for Help')

        self.SetZonesFrame.DeleteZonePB.setAccel (Qt.CTRL + Qt.Key_L)
        self.SetZonesFrame.CancelPB.setAccel (Qt.CTRL + Qt.Key_Q)
        self.SetZonesFrame.HelpPB.setAccel (Qt.CTRL + Qt.Key_H)

        self.connect (self.SetZonesFrame.OKPB, SIGNAL('clicked()'), self.SetZonesFrame_ok)
        self.connect (self.SetZonesFrame.CreateChangePB, SIGNAL('clicked()'), self.SetZonesFrame_createchange)
        self.connect (self.SetZonesFrame.DeleteZonePB, SIGNAL('clicked()'), self.SetZonesFrame_delete_zone)
        self.connect (self.SetZonesFrame.CancelPB, SIGNAL('clicked()'), self.SetZonesFrame_cancel)
        self.connect (self.SetZonesFrame.HelpPB, SIGNAL('clicked()'), self.SetZonesFrame_help)
            
#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetZonesFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def SetZonesFrame_ok (self):

        global Mesh_list_InI
        global Mesh_list_InJ
        global Zone_Material_AqueousState_list

        nx = 0
        ny = 0
        for i in range (0, len (Mesh_list_InI)):
            nx += int (Mesh_list_InI [i][0])
        for j in range (0, len (Mesh_list_InJ)):
            ny += int (Mesh_list_InJ [j][0])
        
	if ny == 0:
	    ny = 1   
        ncells = nx * ny
        
        #print 'nx = ',nx
        #print 'ny = ',ny
        #print 'ncells = nx * ny = ',ncells
        
        zones_cells = 0
        for i in range (0, len (Zone_Material_AqueousState_list)):
            zone_xcells = 0
            zone_ycells = 0
            zone_xcells = (int (Zone_Material_AqueousState_list [i][4]) - int (Zone_Material_AqueousState_list [i][2]) + 1)
            zone_ycells = (int (Zone_Material_AqueousState_list [i][5]) - int (Zone_Material_AqueousState_list [i][3]) + 1)
            zones_cells += (zone_xcells * zone_ycells)
        
        if ncells != zones_cells:
            self.SetZonesFrame.cells_error_MB = QMessageBox()
            self.SetZonesFrame.cells_error_MB.setCaption ('Error')
            self.SetZonesFrame.cells_error_MB.setText ('Zones and meshing don\'t have\nthe same number of cells:\n   - Meshing: '+str (ncells)+'\n   - Zones: '+str (zones_cells))
            self.SetZonesFrame.cells_error_MB.setIcon (QMessageBox.Critical)
            self.SetZonesFrame.cells_error_MB.show ()
        else:
            pass
                    
        #print 'zones_cells = ',zones_cells

        self.SetZonesFrame.close ()
        
    def SetZonesFrame_createchange (self):

        global Zones_list
        global Zone_Material_AqueousState_list
        
        

       
##         if (int (str (self.SetZonesFrame.IStartIndexLineEdit.text ())) > IMax):
##             self.SetZonesFrame.IMaxMB = QMessageBox()
##             self.SetZonesFrame.IMaxMB.setCaption ('Error')
##             self.SetZonesFrame.IMaxMB.setText ('Your I Start Index is greater than your IMax Index: \nYou have to change it.')
##             self.SetZonesFrame.IMaxMB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.IStartIndexLineEdit.setFocus ()
##             self.SetZonesFrame.IMaxMB.show ()
            
##         elif (int (str (self.SetZonesFrame.JStartIndexLineEdit.text ())) > JMax):
##             self.SetZonesFrame.JMaxMB = QMessageBox()
##             self.SetZonesFrame.JMaxMB.setCaption ('Error')
##             self.SetZonesFrame.JMaxMB.setText ('Your J Start Index is greater than your JMax Index: \nYou have to change it.')
##             self.SetZonesFrame.JMaxMB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.JStartIndexLineEdit.setFocus ()
##             self.SetZonesFrame.JMaxMB.show ()

##         elif (int (str (self.SetZonesFrame.IEndIndexLineEdit.text ())) > IMax):
##             self.SetZonesFrame.IMaxMB = QMessageBox()
##             self.SetZonesFrame.IMaxMB.setCaption ('Error')
##             self.SetZonesFrame.IMaxMB.setText ('Your I End Index is greater than your IMax Index: \nYou have to change it.')
##             self.SetZonesFrame.IMaxMB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.IEndIndexLineEdit.setFocus ()
##             self.SetZonesFrame.IMaxMB.show ()

##         elif (int (str (self.SetZonesFrame.JEndIndexLineEdit.text ())) > JMax):
##             self.SetZonesFrame.JMaxMB = QMessageBox()
##             self.SetZonesFrame.JMaxMB.setCaption ('Error')
##             self.SetZonesFrame.JMaxMB.setText ('Your J End Index is greater than your JMax Index: \nYou have to change it.')
##             self.SetZonesFrame.JMaxMB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.JEndIndexLineEdit.setFocus ()
##             self.SetZonesFrame.JMaxMB.show ()


##         elif ((int (str (self.SetZonesFrame.IStartIndexLineEdit.text ())) < 1) or (int (str (self.SetZonesFrame.JStartIndexLineEdit.text ())) < 1)):
##             self.SetZonesFrame.MB = QMessageBox()
##             self.SetZonesFrame.MB.setCaption ('Error')
##             self.SetZonesFrame.MB.setText ('One Index is lower than 0:\nYou have to change it.')
##             self.SetZonesFrame.MB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.IStartIndexLineEdit.setFocus ()
##             self.SetZonesFrame.MB.show ()

##         elif (int (str (self.SetZonesFrame.IStartIndexLineEdit.text ())) > int (str (self.SetZonesFrame.IEndIndexLineEdit.text ()))):
##             self.SetZonesFrame.MB = QMessageBox()
##             self.SetZonesFrame.MB.setCaption ('Error')
##             self.SetZonesFrame.MB.setText ('Your I Start Index is lower than Your I End Index.')
##             self.SetZonesFrame.MB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.IStartIndexLineEdit.setFocus ()
##             self.SetZonesFrame.MB.show ()

##         elif (int (str (self.SetZonesFrame.JStartIndexLineEdit.text ())) > int (str (self.SetZonesFrame.JEndIndexLineEdit.text ()))):
##             self.SetZonesFrame.MB = QMessageBox()
##             self.SetZonesFrame.MB.setCaption ('Error')
##             self.SetZonesFrame.MB.setText ('Your J Start Index is lower than Your J End Index.')
##             self.SetZonesFrame.MB.setIcon (QMessageBox.Critical)
##             self.SetZonesFrame.JStartIndexLineEdit.setFocus ()
##             self.SetZonesFrame.MB.show ()



        if self.SetZonesFrame.Organizer[0].isChecked ():
            
            ZoneName = str (self.SetZonesFrame.NewZoneNameLineEdit.text())
            Zones_list.append (ZoneName)
            ZoneMaterial = str (self.SetZonesFrame.MaterialsComboBox.currentText ())
            ZoneAqueousState = str (self.SetZonesFrame.AqueousStateComboBox.currentText ())
            IStartIndex = str (self.SetZonesFrame.IStartIndexLineEdit.text ())
            IEndIndex = str (self.SetZonesFrame.IEndIndexLineEdit.text ())
            JStartIndex = str (self.SetZonesFrame.JStartIndexLineEdit.text ())
            JEndIndex = str (self.SetZonesFrame.JEndIndexLineEdit.text ())

            Temp_list = []
            Temp_list.append (ZoneMaterial)
            Temp_list.append (ZoneAqueousState)
            Temp_list.append (IStartIndex)
            Temp_list.append (JStartIndex)
            Temp_list.append (IEndIndex)
            Temp_list.append (JEndIndex)
            if self.SetZonesFrame.DefineAsBoundaryCheckBox.isChecked ():
                Temp_list.append ('Boundary')
            else:
                Temp_list.append ('Zone')

            Zone_Material_AqueousState_list.append (Temp_list)          

            self.SetZonesFrame.ZonesComboBox.insertItem (ZoneName, self.SetZonesFrame.ZonesComboBox.currentItem ())
            self.SetZonesFrame.ZonesComboBox.setCurrentItem (0)

        elif self.SetZonesFrame.Organizer[1].isChecked ():
            
            ZoneName = str (self.SetZonesFrame.ZonesComboBox.currentText ())
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
	    
            ZoneMaterial = str (self.SetZonesFrame.MaterialsComboBox.currentText ())
            ZoneAqueousState = str (self.SetZonesFrame.AqueousStateComboBox.currentText ())
            IStartIndex = str (self.SetZonesFrame.IStartIndexLineEdit.text ())
            IEndIndex = str (self.SetZonesFrame.IEndIndexLineEdit.text ())
            JStartIndex = str (self.SetZonesFrame.JStartIndexLineEdit.text ())
            JEndIndex = str (self.SetZonesFrame.JEndIndexLineEdit.text ())

            Zone_Material_AqueousState_list  [index][0] = ZoneMaterial           
            Zone_Material_AqueousState_list  [index][1] = ZoneAqueousState  
            Zone_Material_AqueousState_list  [index][2] = IStartIndex         
            Zone_Material_AqueousState_list  [index][3] = JStartIndex  
            Zone_Material_AqueousState_list  [index][4] = IEndIndex 
            Zone_Material_AqueousState_list  [index][5] = JEndIndex
            if self.SetZonesFrame.BoundaryCheckBox.isChecked ():
                Zone_Material_AqueousState_list  [index][6] = 'Boundary' 
            else:
                Zone_Material_AqueousState_list  [index][6] = 'Zone'

        self.SetZonesFrame.NewZoneNameLineEdit.clear ()
        self.SetZonesFrame.IStartIndexLineEdit.clear ()
        self.SetZonesFrame.IEndIndexLineEdit.clear ()
        self.SetZonesFrame.JStartIndexLineEdit.clear ()
        self.SetZonesFrame.JEndIndexLineEdit.clear ()
        self.SetZonesFrame.Organizer[0].setChecked (1)
        self.SetZonesFrame.NewZoneNameLineEdit.setFocus ()
        self.SetZonesFrame_DefineANewZone_enable ()
        self.SetZonesFrame.DefineAsBoundaryCheckBox.setChecked (0)

#-----------------------------------------------------------------------------------------

    def SetZonesFrame_delete_zone (self):

        if ((self.SetZonesFrame.ZonesComboBox.count ()) != 0):
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
            self.SetZonesFrame.ZonesComboBox.removeItem (self.SetZonesFrame.ZonesComboBox.currentItem ())
            self.SetZonesFrame.NewZoneNameLineEdit.clear ()
            self.SetZonesFrame.IStartIndexLineEdit.clear ()
            self.SetZonesFrame.IEndIndexLineEdit.clear ()
            self.SetZonesFrame.JStartIndexLineEdit.clear ()
            self.SetZonesFrame.JEndIndexLineEdit.clear ()
            del Zones_list [index]
            del Zone_Material_AqueousState_list [index]
            if ((self.SetZonesFrame.ZonesComboBox.count ()) != 0):
                self.SetZonesFrame.ZonesComboBox.setCurrentItem (0)
        else:
            self.SetZonesFrameMB = QMessageBox()
            self.SetZonesFrameMB.setCaption ('Error')
            self.SetZonesFrameMB.setText ('There is no more Zone.')
            self.SetZonesFrameMB.setIcon (QMessageBox.Critical)
            self.SetZonesFrameMB.show ()
           
#-----------------------------------------------------------------------------------------

    def SetZonesFrame_cancel (self):

        self.SetZonesFrame.close ()

#-----------------------------------------------------------------------------------------

    def SetZonesFrame_help (self):

        self.Help ()

#-----------------------------------------------------------------------------------------
        
   ##  def SetZonesFrame_set_material_name (self):

##         self.SetZonesFrame.ZoneMaterialLineEdit.setText (self.SetZonesFrame.MaterialsComboBox.currentText ())

#-----------------------------------------------------------------------------------------
        
   ##  def SetZonesFrame_set_zone_name (self):

##         self.SetZonesFrame.newZoneNameLineEdit.setText (self.SetZonesFrame.ZonesComboBox.currentText ())

    def SetZonesFrame_DefineANewZone_enable (self):

        self.SetZonesFrame.QHGroupBox1.setEnabled (1)
        self.SetZonesFrame.QHGroupBox2.setEnabled (0)
        self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
        self.SetZonesFrame_activateTimeVariation_2 ()
            
    def SetZonesFrame_AlreadyCreatedZones_enable (self):

        self.SetZonesFrame.QHGroupBox1.setEnabled (0)
        self.SetZonesFrame.QHGroupBox2.setEnabled (1)
        self.SetZonesFrame.DefineAsBoundaryCheckBox.setChecked (0)
        self.SetZonesFrame_activateTimeVariation ()
        try:
            index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
            if str (Zone_Material_AqueousState_list  [index][6]) == 'Boundary':
                self.SetZonesFrame.BoundaryCheckBox.setChecked (1)
            else:
                self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
                pass
        except:
            pass


# rappeler ici tous les parametres de la zone precedemment definie
    def SetZonesFrame_ZonesComboBox_activate (self):

        index = Zones_list.index (str (self.SetZonesFrame.ZonesComboBox.currentText ()))
        Mat = str (Zone_Material_AqueousState_list [index][0])
        AS = str (Zone_Material_AqueousState_list [index][1])
        index_mat = Materials_list.index (Mat)
        index_AS = AqueousStates_list.index (AS)
        self.SetZonesFrame.MaterialsComboBox.setCurrentItem (index_mat)
        self.SetZonesFrame.AqueousStateComboBox.setCurrentItem (index_AS)

        self.SetZonesFrame.IStartIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][2]))
        self.SetZonesFrame.JStartIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][3]))
        self.SetZonesFrame.IEndIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][4]))
        self.SetZonesFrame.JEndIndexLineEdit.setText (str (Zone_Material_AqueousState_list [index][5]))
        
        try:
            if str (Zone_Material_AqueousState_list  [index][6]) == 'Boundary':
                self.SetZonesFrame.BoundaryCheckBox.setChecked (1)
            else:
                self.SetZonesFrame.BoundaryCheckBox.setChecked (0)
                pass
        except:
            pass
        
    def SetZonesFrame_activateTimeVariation (self):

        if self.SetZonesFrame.DefineAsBoundaryCheckBox.isOn ():
            self.SetZonesFrame.QHGroupBox11.setEnabled (1)
        else:
            self.SetZonesFrame.QHGroupBox11.setEnabled (0)
            self.SetZonesFrame.TimeVariationCheckBox.setChecked (0)

    def SetZonesFrame_activateTimeVariation_2 (self):

        if self.SetZonesFrame.BoundaryCheckBox.isOn ():
            self.SetZonesFrame.QHGroupBox11.setEnabled (1)
        else:
            self.SetZonesFrame.QHGroupBox11.setEnabled (0)
            self.SetZonesFrame.TimeVariationCheckBox.setChecked (0)

    def SetZonesFrame_timeVariation (self):

        global BoundaryConditionTimeVariation_dict

        if self.SetZonesFrame.TimeVariationCheckBox.isOn ():
            self.SetZonesFrame_timeVariation_on ()
            boundary = ''
            if mw.SetZonesFrame.Organizer[0].isChecked ():
                boundary = str (mw.SetZonesFrame.NewZoneNameLineEdit.text ())
            else:
                boundary = str (mw.SetZonesFrame.ZonesComboBox.currentText ())
            if BoundaryConditionTimeVariation_dict.has_key (boundary):
                pass
            else:
                BoundaryConditionTimeVariation_dict [boundary] = []
        else:
            pass

    def SetZonesFrame_timeVariation_on (self):

        global BoundaryConditionTimeVariation_dict

        self.BoundaryConditionTimeVariationFrame = QFrame ()
        self.BoundaryConditionTimeVariationFrame.setCaption ('Boundary Condition Time Variation')
        setPosition (self.BoundaryConditionTimeVariationFrame)

        self.BoundaryConditionTimeVariationFrame.mainLayout = QVBoxLayout (self.BoundaryConditionTimeVariationFrame, 10, -1, 'BoundaryConditionTimeVariation_mainLayout')
        self.BoundaryConditionTimeVariationFrame.mainLayout.setMargin (Marge)
        self.BoundaryConditionTimeVariationFrame.mainLayout.setSpacing (Space)

        #BoundaryConditionTimeVariationFrame_comment = Comments ['BoundaryConditionTimeVariation']

        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        #QToolTip.add (self.BoundaryConditionTimeVariation.QHGroupBoxA, BoundaryConditionTimeVariation_comment)

        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBoxA)

        self.BoundaryConditionTimeVariationFrame.QHGroupBox5 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox5.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox5.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox5)

        self.boundary = ''
        if mw.SetZonesFrame.Organizer[0].isChecked ():
            self.boundary = str (mw.SetZonesFrame.NewZoneNameLineEdit.text ())
        else:
            self.boundary = str (mw.SetZonesFrame.ZonesComboBox.currentText ())
        self.BoundaryConditionTimeVariationFrame.BoundaryLabel = QLabel ('Considered Boundary: '+self.boundary, self.BoundaryConditionTimeVariationFrame.QHGroupBox5)

        self.BoundaryConditionTimeVariationFrame.QHGroupBox0 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox0.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox0.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)

        self.BoundaryConditionTimeVariationFrame.QVBox00 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)
        self.BoundaryConditionTimeVariationFrame.QVBox01 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox0)

        self.BoundaryConditionTimeVariationFrame.QVBox00.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox00.setSpacing (5)
        self.BoundaryConditionTimeVariationFrame.QVBox01.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox01.setSpacing (5)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox.setMinimumSize (20, 20)
        self.BoundaryConditionTimeVariationFrame.SpacerQVBox.setMaximumSize (20, 20)

        self.BoundaryConditionTimeVariationFrame.TimeLabel = QLabel ('Time ('+str (Time_Unit)+')', self.BoundaryConditionTimeVariationFrame.QVBox01)

        self.BoundaryConditionTimeVariationFrame.TimeLineEdit = QLineEdit (self.BoundaryConditionTimeVariationFrame.QVBox01)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setMinimumSize (120, 25)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setMaximumSize (120, 25)
        self.BoundaryConditionTimeVariationFrame.TimeLineEdit.setFocus ()

        self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel = QLabel ('Aqueous States', self.BoundaryConditionTimeVariationFrame.QVBox00)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel.resize (self.BoundaryConditionTimeVariationFrame.AqueousStatesLabel.sizeHint ())

        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox = QComboBox (self.BoundaryConditionTimeVariationFrame.QVBox00)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
        self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.setMinimumSize (200, 25)
#  connect
        i = 0
        while i < len (AqueousStates_list):
            self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.insertItem (AqueousStates_list [i])
            i = i+1

        self.BoundaryConditionTimeVariationFrame.QHGroupBox1 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox1.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox1.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox1)

        self.BoundaryConditionTimeVariationFrame.QVBox10 = QVBox (self.BoundaryConditionTimeVariationFrame.QHGroupBox1)
        self.BoundaryConditionTimeVariationFrame.QVBox10.setMargin (0)
        self.BoundaryConditionTimeVariationFrame.QVBox10.setSpacing (0)

        self.BoundaryConditionTimeVariationFrame.AssociationsLabel = QLabel ('Already Associated', self.BoundaryConditionTimeVariationFrame.QVBox10)

        self.BoundaryConditionTimeVariationFrame.AssociationsListBox = QListBox (self.BoundaryConditionTimeVariationFrame.QVBox10)
        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.setMinimumHeight (100)
        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.setMaximumHeight (100)

        if BoundaryConditionTimeVariation_dict.has_key (self.boundary):
            for a in BoundaryConditionTimeVariation_dict [self.boundary]:
                self.BoundaryConditionTimeVariationFrame.AssociationsListBox.insertItem (a [0]+' - '+a [1])
        else:
            pass

        self.BoundaryConditionTimeVariationFrame.QHGroupBox2 = QHGroupBox (self.BoundaryConditionTimeVariationFrame)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox2.setMidLineWidth (0)
        self.BoundaryConditionTimeVariationFrame.QHGroupBox2.setMargin (5)
        self.BoundaryConditionTimeVariationFrame.mainLayout.addWidget (self.BoundaryConditionTimeVariationFrame.QHGroupBox2)

        self.BoundaryConditionTimeVariationFrame.DonePB = QPushButton ('Done', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.ApplyPB = QPushButton ('Apply', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.DeletePB = QPushButton ('Delete', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)
        self.BoundaryConditionTimeVariationFrame.HelpPB = QPushButton ('Help', self.BoundaryConditionTimeVariationFrame.QHGroupBox2)

        self.connect (self.BoundaryConditionTimeVariationFrame.DonePB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_done)
        self.connect (self.BoundaryConditionTimeVariationFrame.ApplyPB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_apply)
        self.connect (self.BoundaryConditionTimeVariationFrame.DeletePB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_delete)
        self.connect (self.BoundaryConditionTimeVariationFrame.HelpPB, SIGNAL('clicked()'), self.BoundaryConditionTimeVariationFrame_help)

        self.BoundaryConditionTimeVariationFrame.show ()


# debug_time


    def BoundaryConditionTimeVariationFrame_done (self):

        self.BoundaryConditionTimeVariationFrame.close ()

    def BoundaryConditionTimeVariationFrame_apply (self):

        global BoundaryConditionTimeVariation_dict

        self.BoundaryConditionTimeVariationFrame.AssociationsListBox.insertItem (str (self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.currentText ())+' - '+str (self.BoundaryConditionTimeVariationFrame.TimeLineEdit.text ()))
        tmp_list = []
        tmp_list.append (str (self.BoundaryConditionTimeVariationFrame.AqueousStatesComboBox.currentText ()))
        tmp_list.append (str (self.BoundaryConditionTimeVariationFrame.TimeLineEdit.text ()))
        BoundaryConditionTimeVariation_dict [mw.boundary].append (tmp_list)
        print BoundaryConditionTimeVariation_dict

    def BoundaryConditionTimeVariationFrame_delete (self):

        global BoundaryConditionTimeVariation_dict

        if str (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.count ()) != '0':
            if str (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ()) != '-1':
                self.BoundaryConditionTimeVariationFrame.AssociationsListBox.removeItem (self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ())
                del BoundaryConditionTimeVariation_dict [mw.boundary][self.BoundaryConditionTimeVariationFrame.AssociationsListBox.currentItem ()]
            else:
                self.BoundaryConditionTimeVariationFrameMB = QMessageBox()
                self.BoundaryConditionTimeVariationFrameMB.setCaption ('Error')
                self.BoundaryConditionTimeVariationFrameMB.setText ('You have to select an association to delete it.')
                self.BoundaryConditionTimeVariationFrameMB.setIcon (QMessageBox.Critical)
                self.BoundaryConditionTimeVariationFrameMB.show ()
        else:
            self.BoundaryConditionTimeVariationFrameMB = QMessageBox()
            self.BoundaryConditionTimeVariationFrameMB.setCaption ('Error')
            self.BoundaryConditionTimeVariationFrameMB.setText ('There is no Association.')
            self.BoundaryConditionTimeVariationFrameMB.setIcon (QMessageBox.Critical)
            self.BoundaryConditionTimeVariationFrameMB.show ()
        print BoundaryConditionTimeVariation_dict

    def BoundaryConditionTimeVariationFrame_help (self):

        pass


###########################################################################################
##                                                                                       ##
##                               SET ZONES FRAME (END)                                   ##
##                                                                                       ##
###########################################################################################

        



###########################################################################################
##                                                                                       ##
##                    HYDRAULIC BOUNDARY CONDITIONS FRAME (BEGINNING)                    ##
##                                                                                       ##
###########################################################################################

# debug_HBC

    def boundary_conditions (self):
    
        global Zone_BCKind_list

        self.BoundaryConditionsFrame = QFrame ()
        self.BoundaryConditionsFrame.setCaption ('Hydraulic Boundary Conditions')
        setPosition (self.BoundaryConditionsFrame)

        self.BoundaryConditionsFrame.mainLayout = QVBoxLayout (self.BoundaryConditionsFrame, 10,-1, "BoundaryConditionsFrame_mainLayout")
        self.BoundaryConditionsFrame.mainLayout.setMargin (Marge)
        self.BoundaryConditionsFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        BoundaryConditions_comment = Comments ['Hydraulic_BC']

        self.BoundaryConditionsFrame.QHGroupBoxA = QHGroupBox (self.BoundaryConditionsFrame)
        QToolTip.add (self.BoundaryConditionsFrame.QHGroupBoxA, BoundaryConditions_comment)

        self.BoundaryConditionsFrame.QHGroupBoxA.setMargin (5)
        self.BoundaryConditionsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.BoundaryConditionsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.QHGroupBox0 = QHGroupBox (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBox0)
        self.BoundaryConditionsFrame.QHGroupBox0.setMidLineWidth (0)

        self.BoundaryConditionsFrame.QVBox01 = QVBox (self.BoundaryConditionsFrame.QHGroupBox0)
        self.BoundaryConditionsFrame.QVBox02 = QVBox (self.BoundaryConditionsFrame.QHGroupBox0)

        self.BoundaryConditionsFrame.QVBox01.setMargin (0)
        self.BoundaryConditionsFrame.QVBox02.setMargin (0)
        self.BoundaryConditionsFrame.QVBox01.setSpacing (5)
        self.BoundaryConditionsFrame.QVBox02.setSpacing (5)

        self.BoundaryConditionsFrame.BoundaryLabel = QLabel ("Boundary", self.BoundaryConditionsFrame.QVBox01)
        self.BoundaryConditionsFrame.BoundaryLabel.resize (self.BoundaryConditionsFrame.BoundaryLabel.sizeHint ())

        self.BoundaryConditionsFrame.BoundaryComboBox = QComboBox (self.BoundaryConditionsFrame.QVBox01)
        self.BoundaryConditionsFrame.BoundaryComboBox.setMinimumSize (200, 25)
        self.BoundaryConditionsFrame.BoundaryComboBox.setMaximumSize (200, 25)
        self.connect (self.BoundaryConditionsFrame.BoundaryComboBox, SIGNAL ('activated (int)'), self.BoundaryConditionsFrame_BoundaryComboBox_select)

        Zones = []
        Boundaries = []
        i = 0
        while i < len (Zones_list):
            kind = str (Zone_Material_AqueousState_list [i][6])
            if (kind == 'Zone'): 
                Zones.append (Zones_list [i])
            else:    #  This is a boundary
                Boundaries.append (Zones_list [i])
            i = i+1
        Boundaries.sort()
        i = 0
        while i < len (Boundaries):        
            self.BoundaryConditionsFrame.BoundaryComboBox.insertItem (Boundaries [i])
            i = i+1

#----------------------------------------------------------------------------------------------

        self.BoundaryConditionsFrame.QHBoxLayout1 = QHBoxLayout ()
        self.BoundaryConditionsFrame.mainLayout.addLayout (self.BoundaryConditionsFrame.QHBoxLayout1)

        self.BoundaryConditionsFrame.QButtonGroup1 = QButtonGroup (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.QButtonGroup1.setMidLineWidth (0)
        self.BoundaryConditionsFrame.QHBoxLayout10 = QHBoxLayout (self.BoundaryConditionsFrame.QButtonGroup1, 10)
        self.BoundaryConditionsFrame.QHBoxLayout10.setMargin (10)
        self.BoundaryConditionsFrame.QHBoxLayout10.setSpacing (10)
        self.BoundaryConditionsFrame.QHBoxLayout1.addWidget (self.BoundaryConditionsFrame.QButtonGroup1)
        
        self.BoundaryConditionsFrame.Organizer = range (2)
        
        self.BoundaryConditionsFrame.QVBoxLayout101 = QVBoxLayout (self.BoundaryConditionsFrame.QHBoxLayout10)
        self.BoundaryConditionsFrame.QVBoxLayout102 = QVBoxLayout (self.BoundaryConditionsFrame.QHBoxLayout10)
        
        self.BoundaryConditionsFrame.Organizer[0] = QRadioButton (self.BoundaryConditionsFrame.QButtonGroup1)
        self.BoundaryConditionsFrame.Organizer[0].setText ('Head ('+ str (Head_Unit)+') ')
        self.BoundaryConditionsFrame.QVBoxLayout101.addWidget (self.BoundaryConditionsFrame.Organizer[0])
        self.connect (self.BoundaryConditionsFrame.Organizer[0], SIGNAL ('clicked ()'), self.BoundaryConditionsFrame_head_activated)

        self.BoundaryConditionsFrame.Organizer[1] = QRadioButton (self.BoundaryConditionsFrame.QButtonGroup1)
        self.BoundaryConditionsFrame.Organizer[1].setText ('Flux')
        self.BoundaryConditionsFrame.QVBoxLayout101.addWidget (self.BoundaryConditionsFrame.Organizer[1])
        self.connect (self.BoundaryConditionsFrame.Organizer[1], SIGNAL ('clicked ()'), self.BoundaryConditionsFrame_flux_activated)
        
        self.BoundaryConditionsFrame.QHBoxLayout10.activate()
        self.BoundaryConditionsFrame.QButtonGroup1.adjustSize ()
        
        self.BoundaryConditionsFrame.HeadLineEdit = QLineEdit (self.BoundaryConditionsFrame.QButtonGroup1)
        self.BoundaryConditionsFrame.QVBoxLayout102.addWidget (self.BoundaryConditionsFrame.HeadLineEdit)
        
        self.BoundaryConditionsFrame.FluxLineEdit = QLineEdit (self.BoundaryConditionsFrame.QButtonGroup1)
        self.BoundaryConditionsFrame.QVBoxLayout102.addWidget (self.BoundaryConditionsFrame.FluxLineEdit)
        
        self.BoundaryConditionsFrame_init()

        self.BoundaryConditionsFrame.QHGroupBox1 = QHGroupBox (self.BoundaryConditionsFrame)
        self.BoundaryConditionsFrame.mainLayout.addWidget (self.BoundaryConditionsFrame.QHGroupBox1)

        self.BoundaryConditionsFrame.QHGroupBox1.setMidLineWidth (0)

        self.BoundaryConditionsFrame.OKPB = QPushButton ('OK', self.BoundaryConditionsFrame.QHGroupBox1)
        self.BoundaryConditionsFrame.ChangeCreatePB = QPushButton ('Change / Create', self.BoundaryConditionsFrame.QHGroupBox1)
        self.BoundaryConditionsFrame.ChangeCreatePB.setFocus ()
        self.BoundaryConditionsFrame.CheckPB = QPushButton ('Check', self.BoundaryConditionsFrame.QHGroupBox1)
        self.BoundaryConditionsFrame.CancelPB = QPushButton ('Cancel', self.BoundaryConditionsFrame.QHGroupBox1)
        self.BoundaryConditionsFrame.HelpPB = QPushButton ('&Help', self.BoundaryConditionsFrame.QHGroupBox1)

        self.connect (self.BoundaryConditionsFrame.OKPB, SIGNAL('clicked()'), self.BoundaryConditionsFrame_ok)
        self.connect (self.BoundaryConditionsFrame.ChangeCreatePB, SIGNAL('clicked()'), self.BoundaryConditionsFrame_changecreate)
        self.connect (self.BoundaryConditionsFrame.CheckPB, SIGNAL('clicked()'), self.BoundaryConditionsFrame_check)
        self.connect (self.BoundaryConditionsFrame.CancelPB, SIGNAL('clicked()'), self.BoundaryConditionsFrame_cancel)
        self.connect (self.BoundaryConditionsFrame.HelpPB, SIGNAL('clicked()'), self.BoundaryConditionsFrame_help)     

        self.BoundaryConditionsFrame.show ()

    def BoundaryConditionsFrame_ok (self):

        global Zone_BCKind_list
        global BCValues_list
        
        self.BoundaryConditionsFrame_changecreate ()       
        self.exe_hydraulics()
        
        self.BoundaryConditionsFrame.close ()
        
    def BoundaryConditionsFrame_changecreate (self):
    
        global Zone_BCKind_list
        global BCValues_list
        
        boundary = str (self.BoundaryConditionsFrame.BoundaryComboBox.currentText ())
        boundaries = []
        i = 0
        while i < len (Zone_BCKind_list):
            boundaries.append (str (Zone_BCKind_list [i][0]))
            i = i+1
        
        print 'boundaries', boundaries
        
        if boundary in boundaries:
            index = boundaries.index (boundary)
            if self.BoundaryConditionsFrame.Organizer[0].isChecked ():
                Zone_BCKind_list[index][1] = 'Head'
                BCValues_list [index] = (str (float (str (self.BoundaryConditionsFrame.HeadLineEdit.text ()))))
            elif self.BoundaryConditionsFrame.Organizer[1].isChecked ():
                Zone_BCKind_list[index][1] = 'Flux'
                BCValues_list [index] = (str (float (str (self.BoundaryConditionsFrame.FluxLineEdit.text ()))))
        else:
            Temp_list = []
            Temp_list.append (boundary)
            if self.BoundaryConditionsFrame.Organizer[0].isChecked ():
                Temp_list.append ('Head')
                BCValues_list.append (str (float (str (self.BoundaryConditionsFrame.HeadLineEdit.text ()))))
            elif self.BoundaryConditionsFrame.Organizer[1].isChecked ():
                Temp_list.append ('Flux')
                BCValues_list.append (str (float (str (self.BoundaryConditionsFrame.FluxLineEdit.text ()))))
            Zone_BCKind_list.append (Temp_list)
        
        print 'Zone_BCKind_list',  Zone_BCKind_list
        print 'BCvalues_list',  BCValues_list
        
    def BoundaryConditionsFrame_check (self):

        pass

    def BoundaryConditionsFrame_cancel (self):

        self.BoundaryConditionsFrame.close ()

    def BoundaryConditionsFrame_help (self):

        self.Help ()

    def BoundaryConditionsFrame_init (self):

        if len (Zone_BCKind_list) == 0:
            self.BoundaryConditionsFrame.Organizer[0].setChecked (1)
            self.BoundaryConditionsFrame.HeadLineEdit.setText ('0.0')
            self.BoundaryConditionsFrame.FluxLineEdit.clear ()
            self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (0)
        else:            
            i = 0
            while i < len (Zone_BCKind_list):
                if str (self.BoundaryConditionsFrame.BoundaryComboBox.currentText ()) == str (Zone_BCKind_list[i][0]):
                    if str (Zone_BCKind_list[i][1]) in ['Dirichlet', 'Head']:
                        self.BoundaryConditionsFrame.Organizer[0].setChecked (1)
                        self.BoundaryConditionsFrame.HeadLineEdit.setText (str (BCValues_list [i]))
                        self.BoundaryConditionsFrame.FluxLineEdit.clear ()
                        self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (0)
                    elif str (Zone_BCKind_list[i][1]) in ['Neumann', 'Flux']:
                        self.BoundaryConditionsFrame.Organizer[1].setChecked (1)
                        self.BoundaryConditionsFrame.FluxLineEdit.setText (str (BCValues_list [i]))
                        self.BoundaryConditionsFrame.HeadLineEdit.clear ()
                        self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (0)
                    else:
                        pass
                i = i+1
                
    def BoundaryConditionsFrame_head_activated (self):
    
        self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (1)
        self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (0)
        self.BoundaryConditionsFrame.FluxLineEdit.clear ()
        boundary = str (self.BoundaryConditionsFrame.BoundaryComboBox.currentText ())
        boundaries = []
        i = 0
        while i < len (Zone_BCKind_list):
            boundaries.append (str (Zone_BCKind_list [i][0]))
            i = i+1
        if boundary in boundaries:
            index = boundaries.index (boundary)
            if str (Zone_BCKind_list[index][1]) in ['Head', 'Dirichlet']:
                self.BoundaryConditionsFrame.HeadLineEdit.setText (str (BCValues_list [index]))
            else:
                self.BoundaryConditionsFrame.HeadLineEdit.setText ('0.0')
        else:
            self.BoundaryConditionsFrame.HeadLineEdit.setText ('0.0')            
    
    def BoundaryConditionsFrame_flux_activated (self):
            
        self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (1)
        self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (0)
        self.BoundaryConditionsFrame.HeadLineEdit.clear ()
        boundary = str (self.BoundaryConditionsFrame.BoundaryComboBox.currentText ())
        boundaries = []
        i = 0
        while i < len (Zone_BCKind_list):
            boundaries.append (str (Zone_BCKind_list [i][0]))
            i = i+1
        if boundary in boundaries:
            index = boundaries.index (boundary)
            if str (Zone_BCKind_list[index][1]) in ['Neumann', 'Flux']:
                self.BoundaryConditionsFrame.FluxLineEdit.setText (str (BCValues_list [index]))
            else:
                self.BoundaryConditionsFrame.FluxLineEdit.setText ('0.0')
        else:
            self.BoundaryConditionsFrame.FluxLineEdit.setText ('0.0')            

    def BoundaryConditionsFrame_BoundaryComboBox_select (self):
    
        boundary = str (self.BoundaryConditionsFrame.BoundaryComboBox.currentText ())
        boundaries = []
        i = 0
        while i < len (Zone_BCKind_list):
            boundaries.append (str (Zone_BCKind_list [i][0]))
            i = i+1
        if boundary in boundaries:
            index = boundaries.index (boundary)
            if str (Zone_BCKind_list[index][1]) in ['Head', 'Dirichlet']:
                self.BoundaryConditionsFrame.Organizer[0].setChecked (1)
                self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (1)
                self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (0)
                self.BoundaryConditionsFrame.FluxLineEdit.clear ()
                self.BoundaryConditionsFrame.HeadLineEdit.setText (str (BCValues_list [index]))                
            elif str (Zone_BCKind_list[index][1]) in ['Flux', 'Neumann']:
                self.BoundaryConditionsFrame.Organizer[1].setChecked (1)
                self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (0)
                self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (1)
                self.BoundaryConditionsFrame.HeadLineEdit.clear ()
                self.BoundaryConditionsFrame.FluxLineEdit.setText (str (BCValues_list [index]))
        else:
            self.BoundaryConditionsFrame.Organizer[0].setChecked (1)
            self.BoundaryConditionsFrame.HeadLineEdit.setEnabled (1)
            self.BoundaryConditionsFrame.FluxLineEdit.setEnabled (0)
            self.BoundaryConditionsFrame.FluxLineEdit.clear ()
            self.BoundaryConditionsFrame.HeadLineEdit.setText ('0.0')


###########################################################################################
##                                                                                       ##
##                    HYDRAULIC BOUNDARY CONDITIONS FRAME (END)                          ##
##                                                                                       ##
###########################################################################################



#==========================================================================================
#
#   Unstructured Hydraulic Boundary Conditions (beginning)
# 
#==========================================================================================


    def unstructured_hydraulic_BC (self):
            
        self.UnstructuredHydraulicBCFrame = QFrame ()
        #self.UnstructuredHydraulicBCFrame.setMinimumSize (290, 210)
        #self.UnstructuredHydraulicBCFrame.setMaximumSize (290, 210)
        self.UnstructuredHydraulicBCFrame.setCaption ('Hydraulic Boundary Conditions')
        setPosition (self.UnstructuredHydraulicBCFrame)

        self.UnstructuredHydraulicBCFrame.mainLayout = QVBoxLayout (self.UnstructuredHydraulicBCFrame, 10,-1, "UnstructuredHydraulicBCFrame_mainLayout")
        self.UnstructuredHydraulicBCFrame.mainLayout.setMargin (Marge)
        self.UnstructuredHydraulicBCFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #UnstructuredHydraulicBC_comment = Comments ['Unstructured_Hydraulic_BC']

        self.UnstructuredHydraulicBCFrame.QHGroupBoxA = QHGroupBox (self.UnstructuredHydraulicBCFrame)
        #QToolTip.add (self.BoundaryConditionsFrame.QHGroupBoxA, UnstructuredHydraulicBC_comment)

        self.UnstructuredHydraulicBCFrame.QHGroupBoxA.setMargin (5)
        self.UnstructuredHydraulicBCFrame.QHGroupBoxA.setMidLineWidth (0)
        self.UnstructuredHydraulicBCFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.UnstructuredHydraulicBCFrame.mainLayout.addWidget (self.UnstructuredHydraulicBCFrame.QHGroupBoxA)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.UnstructuredHydraulicBCFrame.QHGroupBox0 = QHGroupBox (self.UnstructuredHydraulicBCFrame)
        self.UnstructuredHydraulicBCFrame.mainLayout.addWidget (self.UnstructuredHydraulicBCFrame.QHGroupBox0)
        self.UnstructuredHydraulicBCFrame.QHGroupBox0.setMidLineWidth (0)

        self.UnstructuredHydraulicBCFrame.QVBox01 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox0)
        self.UnstructuredHydraulicBCFrame.QVBox03 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox0)
        self.UnstructuredHydraulicBCFrame.QVBox02 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox0)

        self.UnstructuredHydraulicBCFrame.QVBox01.setMargin (0)
        self.UnstructuredHydraulicBCFrame.QVBox02.setMargin (0)
        self.UnstructuredHydraulicBCFrame.QVBox01.setSpacing (5)
        self.UnstructuredHydraulicBCFrame.QVBox02.setSpacing (5)

        self.UnstructuredHydraulicBCFrame.BoundaryLabel = QLabel (self.UnstructuredHydraulicBCFrame.QVBox01)
        self.UnstructuredHydraulicBCFrame.BoundaryLabel.setText ("Boundary")

        self.UnstructuredHydraulicBCFrame.BoundaryComboBox = QComboBox (self.UnstructuredHydraulicBCFrame.QVBox01)
        self.UnstructuredHydraulicBCFrame.BoundaryComboBox.setMinimumSize (120, 25)
        self.UnstructuredHydraulicBCFrame.BoundaryComboBox.setMaximumSize (120, 25)
        i = 0
        while i < len (mw.mesh_boundaries_names):
            self.UnstructuredHydraulicBCFrame.BoundaryComboBox.insertItem (str (mw.mesh_boundaries_names [i]))
            i = i+1
        self.connect (self.UnstructuredHydraulicBCFrame.BoundaryComboBox, SIGNAL ('activated (int)'), self.UnstructuredHydraulicBCFrame_BoundaryComboBox_activate)
        
        self.UnstructuredHydraulicBCFrame.ConditionTypeLabel = QLabel (self.UnstructuredHydraulicBCFrame.QVBox02)
        self.UnstructuredHydraulicBCFrame.ConditionTypeLabel.setText ("Condition Type")

        self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox = QComboBox (self.UnstructuredHydraulicBCFrame.QVBox02)
        self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.setMinimumSize (120, 25)
        self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.setMaximumSize (120, 25)
        self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.insertItem ('Dirichlet')
        
        self.UnstructuredHydraulicBCFrame.QHGroupBox1 = QHGroupBox (self.UnstructuredHydraulicBCFrame)
        self.UnstructuredHydraulicBCFrame.mainLayout.addWidget (self.UnstructuredHydraulicBCFrame.QHGroupBox1)
        self.UnstructuredHydraulicBCFrame.QHGroupBox1.setMidLineWidth (0)

        self.UnstructuredHydraulicBCFrame.QVBox11 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox1)
        self.UnstructuredHydraulicBCFrame.QVBox13 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox1)
        self.UnstructuredHydraulicBCFrame.QVBox12 = QVBox (self.UnstructuredHydraulicBCFrame.QHGroupBox1)

        self.UnstructuredHydraulicBCFrame.QVBox11.setMargin (0)
        self.UnstructuredHydraulicBCFrame.QVBox12.setMargin (0)
        self.UnstructuredHydraulicBCFrame.QVBox11.setSpacing (5)
        self.UnstructuredHydraulicBCFrame.QVBox12.setSpacing (5)
		
        self.UnstructuredHydraulicBCFrame.QuantityComboBox = QComboBox (self.UnstructuredHydraulicBCFrame.QVBox11)
        self.UnstructuredHydraulicBCFrame.QuantityComboBox.setMinimumSize (120, 25)
        self.UnstructuredHydraulicBCFrame.QuantityComboBox.setMaximumSize (120, 25)	
	
        if str (self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.currentText ()) == 'Dirichlet':
            self.UnstructuredHydraulicBCFrame.QuantityComboBox.insertItem ('Head ('+str (Head_Unit)+')')
            self.UnstructuredHydraulicBCFrame.QuantityComboBox.insertItem ('Pressure')
        else:
            pass
            
        self.UnstructuredHydraulicBCFrame.QuantityLineEdit = QLineEdit (self.UnstructuredHydraulicBCFrame.QVBox12)
        #self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setMinimumSize (120, 25)
        #self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setMaximumSize (120, 25)
        self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setText ('0.0')

        self.UnstructuredHydraulicBCFrame.LinearFunction2DCheckBox = QCheckBox ('2D Linear Function', self.UnstructuredHydraulicBCFrame.QVBox11)
        #self.SetZonesFrame.DefineAsBoundarCheckBox.setMinimumSize (175, 25)
        #self.connect (self.SetZonesFrame.DefineAsBoundarCheckBox, SIGNAL ('clicked()'), self.SetZonesFrame_activateTimeVariation)
	self.connect (self.UnstructuredHydraulicBCFrame.LinearFunction2DCheckBox, SIGNAL('clicked()'),self.UnstructuredHydraulicBCFrame_LinearFunction2DCheckBox_activate)

        self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB = QPushButton ('Set...', self.UnstructuredHydraulicBCFrame.QVBox12)
        self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setMinimumSize (self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.sizeHint ())
        self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setMaximumSize (self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.sizeHint ())
        self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setMinimumHeight (25)
        self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setEnabled (0)
	self.connect (self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB, SIGNAL('clicked()'),self.UnstructuredHydraulicBCFrame_setLinearFunction2D)
	      
        self.UnstructuredHydraulicBCFrame.QHGroupBox2 = QHGroupBox (self.UnstructuredHydraulicBCFrame)
        self.UnstructuredHydraulicBCFrame.mainLayout.addWidget (self.UnstructuredHydraulicBCFrame.QHGroupBox2)
        self.UnstructuredHydraulicBCFrame.QHGroupBox2.setMidLineWidth (0)

        self.UnstructuredHydraulicBCFrame.OKPB = QPushButton ('OK', self.UnstructuredHydraulicBCFrame.QHGroupBox2)
        self.UnstructuredHydraulicBCFrame.ChangeCreatePB = QPushButton ('Change / Create', self.UnstructuredHydraulicBCFrame.QHGroupBox2)
        self.UnstructuredHydraulicBCFrame.ChangeCreatePB.setFocus ()
        self.UnstructuredHydraulicBCFrame.DeletePB = QPushButton ('Delete', self.UnstructuredHydraulicBCFrame.QHGroupBox2)
        self.UnstructuredHydraulicBCFrame.CancelPB = QPushButton ('Cancel', self.UnstructuredHydraulicBCFrame.QHGroupBox2)
        self.UnstructuredHydraulicBCFrame.HelpPB = QPushButton ('&Help', self.UnstructuredHydraulicBCFrame.QHGroupBox2)

        self.connect (self.UnstructuredHydraulicBCFrame.OKPB, SIGNAL('clicked()'), self.UnstructuredHydraulicBCFrame_ok)
        self.connect (self.UnstructuredHydraulicBCFrame.ChangeCreatePB, SIGNAL('clicked()'), self.UnstructuredHydraulicBCFrame_changecreate)
        self.connect (self.UnstructuredHydraulicBCFrame.DeletePB, SIGNAL('clicked()'), self.UnstructuredHydraulicBCFrame_delete)
        self.connect (self.UnstructuredHydraulicBCFrame.CancelPB, SIGNAL('clicked()'), self.UnstructuredHydraulicBCFrame_cancel)
        self.connect (self.UnstructuredHydraulicBCFrame.HelpPB, SIGNAL('clicked()'), self.UnstructuredHydraulicBCFrame_help)     

        self.UnstructuredHydraulicBCFrame.show ()

# debug_hydraulic


    def UnstructuredHydraulicBCFrame_ok (self):
    
        global UnstructuredHydraulicBC_list

        self.UnstructuredHydraulicBCFrame_changecreate ()
	self.UnstructuredHydraulicBCFrame.close ()

    def UnstructuredHydraulicBCFrame_changecreate (self):
    
        global UnstructuredHydraulicBC_list

	test_list = []
	for l in UnstructuredHydraulicBC_list:
	    test_list.append (str (l [0]))	
        if str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()) in test_list:
            index = test_list.index (str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()))
	    UnstructuredHydraulicBC_list [index][1] = str (self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.currentText ())
	    UnstructuredHydraulicBC_list [index][2] = str (self.UnstructuredHydraulicBCFrame.QuantityLineEdit.text ())
	    UnstructuredHydraulicBC_list [index][3] =str (self.UnstructuredHydraulicBCFrame.QuantityComboBox.currentText ())
	else:
            tmp_list = []
            tmp_list.append (str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()))
            tmp_list.append (str (self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.currentText ()))
            tmp_list.append (str (self.UnstructuredHydraulicBCFrame.QuantityLineEdit.text ()))
            tmp_list.append (str (self.UnstructuredHydraulicBCFrame.QuantityComboBox.currentText ()))
            UnstructuredHydraulicBC_list.append (tmp_list)
	self.UnstructuredHydraulicBCFrame_init ()

    def UnstructuredHydraulicBCFrame_delete (self):
    
        global UnstructuredHydraulicBC_list

	test_list = []
	for l in UnstructuredHydraulicBC_list:
	    test_list.append (str (l [0]))	
        if str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()) in test_list:
            index = test_list.index (str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()))
            del UnstructuredHydraulicBC_list [index]
        else:
            self.UnstructuredHydraulicBCFrameMB = QMessageBox()
            self.UnstructuredHydraulicBCFrameMB.setCaption ('Error')
            self.UnstructuredHydraulicBCFrameMB.setText ('There is no condition for this boundary.')
            self.UnstructuredHydraulicBCFrameMB.setIcon (QMessageBox.Critical)
            self.UnstructuredHydraulicBCFrameMB.show ()
	self.UnstructuredHydraulicBCFrame_init ()

    def UnstructuredHydraulicBCFrame_cancel (self):
    
        self.UnstructuredHydraulicBCFrame.close ()

    def UnstructuredHydraulicBCFrame_help (self):
    
        self.Help ()

    def UnstructuredHydraulicBCFrame_init (self):

        self.UnstructuredHydraulicBCFrame.BoundaryComboBox.setCurrentItem (0)
        self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.setCurrentItem (0)
        self.UnstructuredHydraulicBCFrame.QuantityComboBox.setCurrentItem (0)
        self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setText ('0.0')

    def UnstructuredHydraulicBCFrame_BoundaryComboBox_activate (self):
    
        global UnstructuredHydraulicBC_list

	test_list = []
	for l in UnstructuredHydraulicBC_list:
	    test_list.append (str (l [0]))	
        if str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()) in test_list:
            index = test_list.index (str (self.UnstructuredHydraulicBCFrame.BoundaryComboBox.currentText ()))
	    self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.setCurrentItem (0)
	    if str (UnstructuredHydraulicBC_list [index][3]) == 'Head ('+str (Head_Unit)+')':
	        self.UnstructuredHydraulicBCFrame.QuantityComboBox.setCurrentItem (0)
            elif str (UnstructuredHydraulicBC_list [index][3]) == 'Pressure':
	        self.UnstructuredHydraulicBCFrame.QuantityComboBox.setCurrentItem (1)
            self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setText (str (UnstructuredHydraulicBC_list [index][2]))
	else:
            self.UnstructuredHydraulicBCFrame.ConditionTypeComboBox.setCurrentItem (0)
            self.UnstructuredHydraulicBCFrame.QuantityComboBox.setCurrentItem (0)
            self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setText ('0.0')
	    
    def UnstructuredHydraulicBCFrame_LinearFunction2DCheckBox_activate (self):
    
        if self.UnstructuredHydraulicBCFrame.LinearFunction2DCheckBox.isOn ():
            self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setEnabled (1)
	    self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setEnabled (0)
	else:
            self.UnstructuredHydraulicBCFrame.LinearFunction2DSetPB.setEnabled (0)
	    self.UnstructuredHydraulicBCFrame.QuantityLineEdit.setEnabled (1)

    def UnstructuredHydraulicBCFrame_setLinearFunction2D (self):
    
        self.SetLinearFunction2DFrame = QFrame ()
        self.SetLinearFunction2DFrame.setCaption ('Boundary Condition')
        setPosition (self.SetLinearFunction2DFrame)

        self.SetLinearFunction2DFrame.mainLayout = QVBoxLayout (self.SetLinearFunction2DFrame, 10,-1, 'SetLinearFunction2DFrame_mainLayout')
        self.SetLinearFunction2DFrame.mainLayout.setMargin (Marge)
        self.SetLinearFunction2DFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #SetLinearFunction2DFrame_comment = Comments ['SetLinearFunction2D']

        self.SetLinearFunction2DFrame.QHGroupBoxA = QHGroupBox (self.SetLinearFunction2DFrame)

        self.SetLinearFunction2DFrame.QHGroupBoxA.setMargin (5)
        self.SetLinearFunction2DFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SetLinearFunction2DFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SetLinearFunction2DFrame.mainLayout.addWidget (self.SetLinearFunction2DFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.SetLinearFunction2DFrame.QVGroupBox0 = QVGroupBox ('Linear Function 2D: ax+by+c', self.SetLinearFunction2DFrame)
        self.SetLinearFunction2DFrame.QVGroupBox0.setMargin (10)
        self.SetLinearFunction2DFrame.QVGroupBox0.setMidLineWidth (0)
        self.SetLinearFunction2DFrame.mainLayout.addWidget (self.SetLinearFunction2DFrame.QVGroupBox0)

        self.SetLinearFunction2DFrame.QHBox00 = QVBox (self.SetLinearFunction2DFrame.QVGroupBox0)
        self.SetLinearFunction2DFrame.QHBox01 = QVBox (self.SetLinearFunction2DFrame.QVGroupBox0)
        self.SetLinearFunction2DFrame.QHBox02 = QVBox (self.SetLinearFunction2DFrame.QVGroupBox0)

        self.SetLinearFunction2DFrame.QHBox00.setMargin (0)
        self.SetLinearFunction2DFrame.QHBox00.setSpacing (5)
        self.SetLinearFunction2DFrame.QHBox01.setMargin (0)
        self.SetLinearFunction2DFrame.QHBox01.setSpacing (5)
        self.SetLinearFunction2DFrame.QHBox02.setMargin (0)
        self.SetLinearFunction2DFrame.QHBox02.setSpacing (5)
	
	self.SetLinearFunction2DFrame.aLabel = QLabel ('a', self.SetLinearFunction2DFrame.QHBox00)
        self.SetLinearFunction2DFrame.aLineEdit = QLineEdit (self.SetLinearFunction2DFrame.QHBox00)
	
	self.SetLinearFunction2DFrame.bLabel = QLabel ('b', self.SetLinearFunction2DFrame.QHBox01)
        self.SetLinearFunction2DFrame.bLineEdit = QLineEdit (self.SetLinearFunction2DFrame.QHBox01)

	self.SetLinearFunction2DFrame.cLabel = QLabel ('c', self.SetLinearFunction2DFrame.QHBox02)
        self.SetLinearFunction2DFrame.cLineEdit = QLineEdit (self.SetLinearFunction2DFrame.QHBox02)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.SetLinearFunction2DFrame.QHGroupBox2 = QHGroupBox (self.SetLinearFunction2DFrame)
        self.SetLinearFunction2DFrame.QHGroupBox2.setMargin (10)
        self.SetLinearFunction2DFrame.QHGroupBox2.setMidLineWidth (0)
        self.SetLinearFunction2DFrame.mainLayout.addWidget (self.SetLinearFunction2DFrame.QHGroupBox2)

        self.SetLinearFunction2DFrame.OKPB = QPushButton ('OK', self.SetLinearFunction2DFrame.QHGroupBox2)
        self.SetLinearFunction2DFrame.OKPB.setFocus ()
        self.SetLinearFunction2DFrame.CancelPB = QPushButton ('Cancel', self.SetLinearFunction2DFrame.QHGroupBox2)
        self.SetLinearFunction2DFrame.HelpPB = QPushButton ('&Help', self.SetLinearFunction2DFrame.QHGroupBox2)

        #self.connect (self.SetLinearFunction2DFrame.OKPB, SIGNAL ('clicked ()'), self.SetLinearFunction2DFrame_ok)
        #self.connect (self.SetLinearFunction2DFrame.CancelPB, SIGNAL ('clicked ()'), self.SetLinearFunction2DFrame_cancel)
        #self.connect (self.SetLinearFunction2DFrame.HelpPB, SIGNAL ('clicked ()'), self.SetLinearFunction2DFrame_help)

        self.SetLinearFunction2DFrame.show ()
    

        
#==========================================================================================
#
#   Unstructured Hydraulic Boundary Conditions (end)
# 
#==========================================================================================












# SET DARCY VELOCITY


    def setDarcyVelocity (self):
    
        self.setDarcyVelocityFrame = QFrame ()
        self.setDarcyVelocityFrame.setCaption ('Set Darcy Velocity')
        #self.setDarcyVelocityFrame.setMinimumSize (180, 100)
        #self.setDarcyVelocityFrame.setMaximumSize (180, 100)
        setPosition (self.setDarcyVelocityFrame)

        self.setDarcyVelocityFrame.mainLayout = QVBoxLayout (self.setDarcyVelocityFrame, 10, -1, 'setDarcyVelocity_mainLayout')
        self.setDarcyVelocityFrame.mainLayout.setMargin (Marge)
        self.setDarcyVelocityFrame.mainLayout.setSpacing (Space)
      
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        setDarcyVelocityFrame_comment = Comments ['setDarcyVelocity']

        self.setDarcyVelocityFrame.QHGroupBoxA = QHGroupBox (self.setDarcyVelocityFrame)
        QToolTip.add (self.setDarcyVelocityFrame.QHGroupBoxA, setDarcyVelocityFrame_comment)

        self.setDarcyVelocityFrame.QHGroupBoxA.setMargin (5)
        self.setDarcyVelocityFrame.QHGroupBoxA.setMidLineWidth (0)
        self.setDarcyVelocityFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.setDarcyVelocityFrame.mainLayout.addWidget (self.setDarcyVelocityFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.setDarcyVelocityFrame.QHBoxLayout1 = QHBoxLayout ()
        self.setDarcyVelocityFrame.mainLayout.addLayout (self.setDarcyVelocityFrame.QHBoxLayout1)

        self.setDarcyVelocityFrame.QButtonGroup1 = QButtonGroup (self.setDarcyVelocityFrame, "setDarcyVelocityFrame_QButtonGroup1" )
        self.setDarcyVelocityFrame.QButtonGroup1.setMidLineWidth (0)
        self.setDarcyVelocityFrame.QVBoxLayout10 = QVBoxLayout (self.setDarcyVelocityFrame.QButtonGroup1, 10)
        self.setDarcyVelocityFrame.QVBoxLayout10.setMargin (15)
        self.setDarcyVelocityFrame.QVBoxLayout10.setSpacing (15)
        self.setDarcyVelocityFrame.QHBoxLayout1.addWidget (self.setDarcyVelocityFrame.QButtonGroup1)

        self.setDarcyVelocityFrame.Organizer = range (2)

        self.setDarcyVelocityFrame.Organizer[0] = QRadioButton (self.setDarcyVelocityFrame.QButtonGroup1)
        self.setDarcyVelocityFrame.Organizer[0].setText( 'By Component' )
        self.setDarcyVelocityFrame.QVBoxLayout10.addWidget (self.setDarcyVelocityFrame.Organizer[0])
        self.setDarcyVelocityFrame.Organizer[0].setChecked (1)
        #self.connect (self.setDarcyVelocityFrame.Organizer[0], SIGNAL ('clicked ()'), self.byComponent)

        self.setDarcyVelocityFrame.Organizer[1] = QRadioButton (self.setDarcyVelocityFrame.QButtonGroup1)
        self.setDarcyVelocityFrame.Organizer[1].setText( 'By Field' )
        self.setDarcyVelocityFrame.QVBoxLayout10.addWidget (self.setDarcyVelocityFrame.Organizer[1])
        self.connect (self.setDarcyVelocityFrame.Organizer[1], SIGNAL ('clicked ()'), self.byField)
       
        self.setDarcyVelocityFrame.QVBoxLayout10.activate()
        self.setDarcyVelocityFrame.QButtonGroup1.adjustSize ()
		
	if DarcyVelocity_kind is 'By Component':
	    self.setDarcyVelocityFrame.Organizer[0].setChecked (1)
	elif DarcyVelocity_kind is 'By Field':
	    self.setDarcyVelocityFrame.Organizer[1].setChecked (1)
        else:
	    pass

        self.setDarcyVelocityFrame.QHGroupBox0 = QHGroupBox (self.setDarcyVelocityFrame)
        self.setDarcyVelocityFrame.QHGroupBox0.setMidLineWidth (0)
        self.setDarcyVelocityFrame.mainLayout.addWidget (self.setDarcyVelocityFrame.QHGroupBox0)

        self.setDarcyVelocityFrame.QVBox01 = QVBox (self.setDarcyVelocityFrame.QHGroupBox0)
        self.setDarcyVelocityFrame.QVBox02 = QVBox (self.setDarcyVelocityFrame.QHGroupBox0)
        self.setDarcyVelocityFrame.QVBox03 = QVBox (self.setDarcyVelocityFrame.QHGroupBox0)

        self.setDarcyVelocityFrame.QVBox01.setMargin (0)
        self.setDarcyVelocityFrame.QVBox01.setSpacing (5)
        self.setDarcyVelocityFrame.QVBox02.setMargin (0)
        self.setDarcyVelocityFrame.QVBox02.setSpacing (5)
        self.setDarcyVelocityFrame.QVBox03.setMargin (0)
        self.setDarcyVelocityFrame.QVBox03.setSpacing (5)

        self.setDarcyVelocityFrame.QVBox02.setMinimumSize (20, 10)
        self.setDarcyVelocityFrame.QVBox02.setMaximumSize (20, 10)

        self.setDarcyVelocityFrame.UxLabel = QLabel ('  Ux', self.setDarcyVelocityFrame.QVBox01)
        self.setDarcyVelocityFrame.UxLabel.resize (self.setDarcyVelocityFrame.UxLabel.sizeHint ()) 
        self.setDarcyVelocityFrame.UxLabel.setFocus ()

        self.setDarcyVelocityFrame.UyLabel = QLabel ('  Uy', self.setDarcyVelocityFrame.QVBox01)
        self.setDarcyVelocityFrame.UyLabel.resize (self.setDarcyVelocityFrame.UyLabel.sizeHint ())

        self.setDarcyVelocityFrame.UzLabel = QLabel ('  Uz', self.setDarcyVelocityFrame.QVBox01)
        self.setDarcyVelocityFrame.UzLabel.resize (self.setDarcyVelocityFrame.UzLabel.sizeHint ())

        self.setDarcyVelocityFrame.UxLineEdit = QLineEdit (self.setDarcyVelocityFrame.QVBox03)
        self.setDarcyVelocityFrame.UxLineEdit.setMinimumSize (110, 25)
        self.setDarcyVelocityFrame.UxLineEdit.setMaximumSize (110, 25)
        self.setDarcyVelocityFrame.UxLineEdit.setText (str (DarcyVelocity_list [0]))

        self.setDarcyVelocityFrame.UyLineEdit = QLineEdit (self.setDarcyVelocityFrame.QVBox03)
        self.setDarcyVelocityFrame.UyLineEdit.setMinimumSize (110, 25)
        self.setDarcyVelocityFrame.UyLineEdit.setMaximumSize (110, 25)
        self.setDarcyVelocityFrame.UyLineEdit.setText (str (DarcyVelocity_list [1]))

        self.setDarcyVelocityFrame.UzLineEdit = QLineEdit (self.setDarcyVelocityFrame.QVBox03)
        self.setDarcyVelocityFrame.UzLineEdit.setMinimumSize (110, 25)
        self.setDarcyVelocityFrame.UzLineEdit.setMaximumSize (110, 25)
        self.setDarcyVelocityFrame.UzLineEdit.setText (str (DarcyVelocity_list [2]))
        #self.setDarcyVelocityFrame.UzLineEdit.setEnabled (0)
	
        self.setDarcyVelocityFrame.QHGroupBox1 = QHGroupBox (self.setDarcyVelocityFrame)
        self.setDarcyVelocityFrame.QHGroupBox1.setMidLineWidth (0)
        self.setDarcyVelocityFrame.mainLayout.addWidget (self.setDarcyVelocityFrame.QHGroupBox1)

        self.setDarcyVelocityFrame.OKPB = QPushButton ('OK', self.setDarcyVelocityFrame.QHGroupBox1)
        self.setDarcyVelocityFrame.CancelPB = QPushButton ('Cancel', self.setDarcyVelocityFrame.QHGroupBox1)
        self.setDarcyVelocityFrame.HelpPB = QPushButton ('&Help', self.setDarcyVelocityFrame.QHGroupBox1)

        self.connect (self.setDarcyVelocityFrame.OKPB, SIGNAL ('clicked ()'), self.setDarcyVelocityFrame_ok)
        self.connect (self.setDarcyVelocityFrame.CancelPB, SIGNAL ('clicked ()'), self.setDarcyVelocityFrame_cancel)
        self.connect (self.setDarcyVelocityFrame.HelpPB, SIGNAL ('clicked ()'), self.setDarcyVelocityFrame_help)

        self.setDarcyVelocityFrame.show ()


    def setDarcyVelocityFrame_ok (self):
        
        global DarcyVelocity_kind
        global DarcyVelocity_list
	
	if self.setDarcyVelocityFrame.Organizer[0].isChecked ():
	    DarcyVelocity_kind = 'By Component'
	elif self.setDarcyVelocityFrame.Organizer[1].isChecked ():
	    DarcyVelocity_kind = 'By Field'
        else:
	    pass
	    
	DarcyVelocity_list [0] = str (self.setDarcyVelocityFrame.UxLineEdit.text ())
	DarcyVelocity_list [1] = str (self.setDarcyVelocityFrame.UyLineEdit.text ())
	DarcyVelocity_list [2] = str (self.setDarcyVelocityFrame.UzLineEdit.text ())
	
	self.setDarcyVelocityFrame.close ()
   
    def setDarcyVelocityFrame_cancel (self):

        self.setDarcyVelocityFrame.close ()

    def setDarcyVelocityFrame_help (self):

        self.Help ()

    def byField (self):

        self.byFieldMB = QMessageBox()
        setPosition (self.byFieldMB)
        self.byFieldMB.setCaption ('Warning')
        self.byFieldMB.setText ('This option is not yet available.')
        self.byFieldMB.setIcon (QMessageBox.Warning)
        self.byFieldMB.show ()
        self.setDarcyVelocityFrame.Organizer[0].setChecked (1)

#=========================================================

    def Run (self):
     
        if Solver == 'Modflow' and ChemistryTool == 'PhreeqC':
            self.hydraulicRun ()
        if Solver == 'Modflow' and ChemistryTool == 'Traces_PhreeqC':
            self.iterate ()
	elif Solver == 'Modflow_Mt3d_PhreeqC':
	    self.iterate ()
	elif Solver == 'Chemistry':
	    self.iterate ()
	else:
	    pass
	
        
# debug_run        
        
#=========================================================

    def hydraulicRun (self):

        self.hydraulicRunFrame = QFrame ()
        self.hydraulicRunFrame.setCaption ('Iterate (Hydraulic)')
        setPosition (self.hydraulicRunFrame)
        self.hydraulicRunFrame.setMinimumWidth (200)
        self.hydraulicRunFrame.setMaximumWidth (200)

        self.hydraulicRunFrame.mainLayout = QVBoxLayout (self.hydraulicRunFrame, 10, -1, 'hydraulicRun_mainLayout')
        self.hydraulicRunFrame.mainLayout.setMargin (Marge)
        self.hydraulicRunFrame.mainLayout.setSpacing (Space)
      
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        hydraulicRunFrame_comment = Comments ['hydraulicRun']

        self.hydraulicRunFrame.QHGroupBoxA = QHGroupBox (self.hydraulicRunFrame)
	QToolTip.add (self.hydraulicRunFrame.QHGroupBoxA, hydraulicRunFrame_comment)

        self.hydraulicRunFrame.QHGroupBoxA.setMargin (5)
        self.hydraulicRunFrame.QHGroupBoxA.setMidLineWidth (0)
        self.hydraulicRunFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.hydraulicRunFrame.mainLayout.addWidget (self.hydraulicRunFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.hydraulicRunFrame.QHBoxLayout1 = QHBoxLayout ()
        self.hydraulicRunFrame.mainLayout.addLayout (self.hydraulicRunFrame.QHBoxLayout1)

        self.hydraulicRunFrame.QButtonGroup1 = QButtonGroup (self.hydraulicRunFrame, "hydraulicRunFrame_QButtonGroup1" )
        self.hydraulicRunFrame.QButtonGroup1.setMidLineWidth (0)
        self.hydraulicRunFrame.QVBoxLayout10 = QVBoxLayout (self.hydraulicRunFrame.QButtonGroup1, 10)
        self.hydraulicRunFrame.QVBoxLayout10.setMargin (15)
        self.hydraulicRunFrame.QVBoxLayout10.setSpacing (15)
        self.hydraulicRunFrame.QHBoxLayout1.addWidget (self.hydraulicRunFrame.QButtonGroup1)

        self.hydraulicRunFrame.Organizer = range (2)

        self.hydraulicRunFrame.Organizer[0] = QRadioButton (self.hydraulicRunFrame.QButtonGroup1)
        self.hydraulicRunFrame.Organizer[0].setText('Stationary Problem')
        self.hydraulicRunFrame.QVBoxLayout10.addWidget (self.hydraulicRunFrame.Organizer[0])
        self.hydraulicRunFrame.Organizer[0].setChecked (1)
        #self.connect (self.hydraulicRunFrame.Organizer[0], SIGNAL ('clicked ()'), self.stationaryProblem)

        self.hydraulicRunFrame.Organizer[1] = QRadioButton (self.hydraulicRunFrame.QButtonGroup1)
        self.hydraulicRunFrame.Organizer[1].setText( 'Transient Problem' )
        self.hydraulicRunFrame.QVBoxLayout10.addWidget (self.hydraulicRunFrame.Organizer[1])
        self.connect (self.hydraulicRunFrame.Organizer[1], SIGNAL ('clicked ()'), self.transientProblem)
       
        self.hydraulicRunFrame.QVBoxLayout10.activate()
        self.hydraulicRunFrame.QButtonGroup1.adjustSize ()

        self.hydraulicRunFrame.QHGroupBox1 = QHGroupBox (self.hydraulicRunFrame)
        self.hydraulicRunFrame.QHGroupBox1.setMidLineWidth (0)
        self.hydraulicRunFrame.mainLayout.addWidget (self.hydraulicRunFrame.QHGroupBox1)

        self.hydraulicRunFrame.OKPB = QPushButton ('OK', self.hydraulicRunFrame.QHGroupBox1)
        self.hydraulicRunFrame.OKPB.setFocus ()
        self.hydraulicRunFrame.CancelPB = QPushButton ('Cancel', self.hydraulicRunFrame.QHGroupBox1)
        self.hydraulicRunFrame.HelpPB = QPushButton ('&Help', self.hydraulicRunFrame.QHGroupBox1)

        self.connect (self.hydraulicRunFrame.OKPB, SIGNAL ('clicked ()'), self.hydraulicRunFrame_ok)
        self.connect (self.hydraulicRunFrame.CancelPB, SIGNAL ('clicked ()'), self.hydraulicRunFrame_cancel)
        self.connect (self.hydraulicRunFrame.HelpPB, SIGNAL ('clicked ()'), self.hydraulicRunFrame_help)

        self.hydraulicRunFrame.show ()

    def hydraulicRunFrame_ok (self):

        self.hydraulicRunFrame.close ()

    def hydraulicRunFrame_cancel (self):

        self.hydraulicRunFrame.close ()

    def hydraulicRunFrame_help (self):

        self.hydraulicRunFrame.close ()

    def transientProblem (self):

        self.transientProblemMB = QMessageBox()
        setPosition (self.transientProblemMB)
        self.transientProblemMB.setCaption ('Warning')
        self.transientProblemMB.setText ('This option is not yet available.')
        self.transientProblemMB.setIcon (QMessageBox.Warning)
        self.transientProblemMB.show ()
        self.hydraulicRunFrame.Organizer[0].setChecked (1)












###########################################################################################
##                                                                                       ##
##                     INTERACTIVE XY PLOT FRAME (BEGINNING)                             ##
##                                                                                       ##
###########################################################################################



    def interactive_XY_plot (self):

        global InteractiveXYPlot_AvailableAqueousComponents_list

        self.InteractiveXYPlotFrame = QFrame ()
        self.InteractiveXYPlotFrame.setCaption ('Point Concentration over Time')
        setPosition (self.InteractiveXYPlotFrame)

        self.InteractiveXYPlotFrame.mainLayout = QVBoxLayout (self.InteractiveXYPlotFrame, 10, -1, 'InteractiveXYPlotFrame_mainLayout')
        self.InteractiveXYPlotFrame.mainLayout.setMargin (Marge)
        self.InteractiveXYPlotFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        InteractiveXYPlot_comment = Comments ['Point_Concentration_Over_Time']

        self.InteractiveXYPlotFrame.QHGroupBoxA = QHGroupBox (self.InteractiveXYPlotFrame)
        QToolTip.add (self.InteractiveXYPlotFrame.QHGroupBoxA, InteractiveXYPlot_comment)

        self.InteractiveXYPlotFrame.QHGroupBoxA.setMargin (5)
        self.InteractiveXYPlotFrame.QHGroupBoxA.setMidLineWidth (0)
        self.InteractiveXYPlotFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.InteractiveXYPlotFrame.mainLayout.addWidget (self.InteractiveXYPlotFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlotFrame.QHGroupBox0 = QHGroupBox (self.InteractiveXYPlotFrame)
        self.InteractiveXYPlotFrame.QHGroupBox0.setMargin (10)
        self.InteractiveXYPlotFrame.QHGroupBox0.setMidLineWidth (0)
        self.InteractiveXYPlotFrame.mainLayout.addWidget (self.InteractiveXYPlotFrame.QHGroupBox0)

        self.InteractiveXYPlotFrame.QVBox01 = QVBox (self.InteractiveXYPlotFrame.QHGroupBox0)
        self.InteractiveXYPlotFrame.QVBox02 = QVBox (self.InteractiveXYPlotFrame.QHGroupBox0)
        self.InteractiveXYPlotFrame.QVBox03 = QVBox (self.InteractiveXYPlotFrame.QHGroupBox0)

        self.InteractiveXYPlotFrame.QVBox01.setMargin (0)
        self.InteractiveXYPlotFrame.QVBox01.setSpacing (5)
        self.InteractiveXYPlotFrame.QVBox03.setMargin (0)
        self.InteractiveXYPlotFrame.QVBox03.setSpacing (5)
       
        self.InteractiveXYPlotFrame.QVBox02.setMinimumSize (10, 10)

        self.InteractiveXYPlotFrame.AqueousSolutionLabel = QLabel ('Aqueous Components to plot', self.InteractiveXYPlotFrame.QVBox01)
        self.InteractiveXYPlotFrame.AqueousSolutionLabel.resize (self.InteractiveXYPlotFrame.AqueousSolutionLabel.sizeHint ())

        self.InteractiveXYPlotFrame.AqueousSolutionComboBox = QComboBox (self.InteractiveXYPlotFrame.QVBox01)
        self.InteractiveXYPlotFrame.AqueousSolutionComboBox.setMinimumSize (200, 25)
        self.InteractiveXYPlotFrame.AqueousSolutionComboBox.setMaximumSize (200, 25)
        
        i = 0
        while i < len (InteractiveXYPlot_AqueousComponentsToPlot_list):
            self.InteractiveXYPlotFrame.AqueousSolutionComboBox.insertItem (str (InteractiveXYPlot_AqueousComponentsToPlot_list [i]))
            i = i+1
       
        self.InteractiveXYPlotFrame.AvailableLabel = QLabel ('Available Aqueous Components', self.InteractiveXYPlotFrame.QVBox03)
        self.InteractiveXYPlotFrame.AvailableLabel.resize (self.InteractiveXYPlotFrame.AqueousSolutionLabel.sizeHint ())
        
        self.InteractiveXYPlotFrame.AvailableComboBox = QComboBox (self.InteractiveXYPlotFrame.QVBox03)
        self.InteractiveXYPlotFrame.AvailableComboBox.setMinimumSize (200, 25)
        self.InteractiveXYPlotFrame.AvailableComboBox.setMaximumSize (200, 25)
        self.connect (self.InteractiveXYPlotFrame.AvailableComboBox, SIGNAL ('activated (int)'), self.InteractiveXYPlotFrame_AvailableComboBox_activate)

# on recupere les mineraux...
# On ne peut plotter que des especes aqueuses
        """
        InteractiveXYPlot_AvailableMineralPhases_list = []
        i = 0
        while i < len (MineralPhases_list):
            spec = str (MineralPhases_list [i])
            if (spec != ''):
                if spec in InteractiveXYPlot_AvailableMineralPhases_list:
                    i = i+1
                else:
                    InteractiveXYPlot_AvailableMineralPhases_list.append (str (spec))
                    i = i+1
            else:
                break
        InteractiveXYPlot_AvailableMineralPhases_list.sort ()
        InteractiveXYPlot_AvailableMineralPhases_list.reverse ()
        k = 0
        while k < len (InteractiveXYPlot_AvailableMineralPhases_list):
            self.InteractiveXYPlotFrame.AvailableComboBox.insertItem (InteractiveXYPlot_AvailableMineralPhases_list [k], 0)
            k = k+1
        """

##  On recupere les especes composantes aqueuses (en traitant les redondances).
##  Ces especes sont stockees dans la liste InteractiveXYPlot_AvailableAqueousComponents_list

        i = 0
        while i < len (AqueousStates_list):
            j = 0
            while (j < len (AqueousStates_Species_list [i])):
                spec = str (AqueousStates_Species_list [i][j][0])
                if (spec != ''):
                    if spec in InteractiveXYPlot_AvailableAqueousComponents_list:
                        j = j+1
                    else:
		        if spec.find ('mineral ') == -1:
                            InteractiveXYPlot_AvailableAqueousComponents_list.append (str (spec))
                            j = j+1
			else:
			    j = j+1
                else:
                    break
            i = i+1
# debug_plot


##  On effectue ensuite un tri et une inversion de cette liste,
##  puis on la recopie dans la boite combo correspondante

    #   Tri
        InteractiveXYPlot_AvailableAqueousComponents_list.sort ()
        
    #   Inversion de l ordre des elements pour qu ils apparaissent dans l ordre lexicographique
        InteractiveXYPlot_AvailableAqueousComponents_list.reverse ()

    #   Recopie
        k = 0
        while k < len (InteractiveXYPlot_AvailableAqueousComponents_list):
            self.InteractiveXYPlotFrame.AvailableComboBox.insertItem (InteractiveXYPlot_AvailableAqueousComponents_list [k], 0)
            k = k+1
      
#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlotFrame.QHBox1 = QHBox (self.InteractiveXYPlotFrame)
        self.InteractiveXYPlotFrame.QHBox1.setMargin (0)
        self.InteractiveXYPlotFrame.QHBox1.setSpacing (10)
        self.InteractiveXYPlotFrame.QHBox1.setMidLineWidth (0)
        self.InteractiveXYPlotFrame.mainLayout.addWidget (self.InteractiveXYPlotFrame.QHBox1)

        self.InteractiveXYPlotFrame.QVGroupBox10 = QHGroupBox (self.InteractiveXYPlotFrame.QHBox1)
        self.InteractiveXYPlotFrame.QVGroupBox10.setTitle ('Point to plot')
        self.InteractiveXYPlotFrame.QVGroupBox10.setMargin (5)

        self.InteractiveXYPlotFrame.QHBox100 = QHBox (self.InteractiveXYPlotFrame.QVGroupBox10)
        self.InteractiveXYPlotFrame.QHBox101 = QHBox (self.InteractiveXYPlotFrame.QVGroupBox10)
        self.InteractiveXYPlotFrame.QHBox100.setMargin (5)
        self.InteractiveXYPlotFrame.QHBox100.setSpacing (10)
        self.InteractiveXYPlotFrame.QHBox101.setMargin (5)
        self.InteractiveXYPlotFrame.QHBox101.setSpacing (10)

        self.InteractiveXYPlotFrame.ILabel = QLabel ('I', self.InteractiveXYPlotFrame.QHBox100)

        self.InteractiveXYPlotFrame.JLabel = QLabel ('J', self.InteractiveXYPlotFrame.QHBox101)

        self.InteractiveXYPlotFrame.ILineEdit = QLineEdit (self.InteractiveXYPlotFrame.QHBox100)
        self.InteractiveXYPlotFrame.ILineEdit.setMinimumSize (50, 25)
        self.InteractiveXYPlotFrame.ILineEdit.setMaximumSize (50, 25)
        self.InteractiveXYPlotFrame.ILineEdit.setText (str (InteractiveXYPlot_Parameters_list [0]))
        
        self.InteractiveXYPlotFrame.JLineEdit = QLineEdit (self.InteractiveXYPlotFrame.QHBox101)
        self.InteractiveXYPlotFrame.JLineEdit.setMinimumSize (50, 25)
        self.InteractiveXYPlotFrame.JLineEdit.setMaximumSize (50, 25)
        self.InteractiveXYPlotFrame.JLineEdit.setText (str (InteractiveXYPlot_Parameters_list [1]))

        self.InteractiveXYPlotFrame.QVGroupBox11 = QVGroupBox (self.InteractiveXYPlotFrame.QHBox1)
        self.InteractiveXYPlotFrame.QVGroupBox11.setTitle ('Plot Frequency')
        self.InteractiveXYPlotFrame.QVGroupBox11.setMargin (5)

        self.InteractiveXYPlotFrame.QHBox110 = QHBox (self.InteractiveXYPlotFrame.QVGroupBox11)
        self.InteractiveXYPlotFrame.QHBox110.setMargin (5)
        self.InteractiveXYPlotFrame.QHBox110.setSpacing (10)

        self.InteractiveXYPlotFrame.PlotFrequencySpacerLabel = QLabel ('      ', self.InteractiveXYPlotFrame.QHBox110)

        self.InteractiveXYPlotFrame.PlotFrequencyLineEdit = QLineEdit (self.InteractiveXYPlotFrame.QHBox110)
        self.InteractiveXYPlotFrame.PlotFrequencyLineEdit.setText (str (InteractiveXYPlot_Parameters_list [2]))
        self.InteractiveXYPlotFrame.PlotFrequencyLineEdit.setMinimumSize (50, 25)
        self.InteractiveXYPlotFrame.PlotFrequencyLineEdit.setMaximumSize (50, 25)

#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlotFrame.QHGroupBox2 = QHGroupBox (self.InteractiveXYPlotFrame)
        self.InteractiveXYPlotFrame.QHGroupBox2.setMargin (10)
        self.InteractiveXYPlotFrame.QHGroupBox2.setMidLineWidth (0)
        self.InteractiveXYPlotFrame.mainLayout.addWidget (self.InteractiveXYPlotFrame.QHGroupBox2)

        self.InteractiveXYPlotFrame.OKPB = QPushButton ('OK', self.InteractiveXYPlotFrame.QHGroupBox2)
        self.InteractiveXYPlotFrame.DeletePB = QPushButton ('Delete', self.InteractiveXYPlotFrame.QHGroupBox2)
        self.InteractiveXYPlotFrame.CancelPB = QPushButton ('Cancel', self.InteractiveXYPlotFrame.QHGroupBox2)
        self.InteractiveXYPlotFrame.HelpPB = QPushButton ('&Help', self.InteractiveXYPlotFrame.QHGroupBox2)

        self.connect (self.InteractiveXYPlotFrame.OKPB, SIGNAL ('clicked ()'), self.InteractiveXYPlotFrame_ok)
        self.connect (self.InteractiveXYPlotFrame.DeletePB,  SIGNAL ('clicked ()'), self.InteractiveXYPlotFrame_delete)
        self.connect (self.InteractiveXYPlotFrame.CancelPB, SIGNAL ('clicked ()'), self.InteractiveXYPlotFrame_cancel)
        self.connect (self.InteractiveXYPlotFrame.HelpPB, SIGNAL ('clicked ()'), self.InteractiveXYPlotFrame_help)

#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlotFrame.show ()

#----------------------------------------------------------------------------------------------

    def InteractiveXYPlotFrame_ok (self):

        global InteractiveXYPlot_Parameters_list
        global InteractiveXYPlot_AqueousComponentsToPlot_list
        global InteractiveXYPlot_AvailableAqueousComponents_list

        InteractiveXYPlot_AvailableAqueousComponents_list.sort ()

        InteractiveXYPlot_Parameters_list [0] = int (str (self.InteractiveXYPlotFrame.ILineEdit.text ()))
        InteractiveXYPlot_Parameters_list [1] = int (str (self.InteractiveXYPlotFrame.JLineEdit.text ()))
        InteractiveXYPlot_Parameters_list [2] = int (str (self.InteractiveXYPlotFrame.PlotFrequencyLineEdit.text ()))

        self.InteractiveXYPlotFrame.close ()

    def InteractiveXYPlotFrame_delete (self):

        global InteractiveXYPlot_AqueousComponentsToPlot_list

        if ((self.InteractiveXYPlotFrame.AqueousSolutionComboBox.count ()) != 0):
            text = str (self.InteractiveXYPlotFrame.AqueousSolutionComboBox.currentText ())
            index = int (InteractiveXYPlot_AqueousComponentsToPlot_list.index (text))
            self.InteractiveXYPlotFrame.AqueousSolutionComboBox.removeItem (self.InteractiveXYPlotFrame.AqueousSolutionComboBox.currentItem ())
            del InteractiveXYPlot_AqueousComponentsToPlot_list [index]
            if ((self.InteractiveXYPlotFrame.AqueousSolutionComboBox.count ()) != 0):
                self.InteractiveXYPlotFrame.AqueousSolutionComboBox.setCurrentItem (0)
        else:
            self.InteractiveXYPlotFrameMB = QMessageBox()
            self.InteractiveXYPlotFrameMB.setCaption ('Error')
            self.InteractiveXYPlotFrameMB.setText ('There is no more Aqueous Component to plot.')
            self.InteractiveXYPlotFrameMB.setIcon (QMessageBox.Critical)
            self.InteractiveXYPlotFrameMB.show ()
            
    def InteractiveXYPlotFrame_cancel (self):

        self.InteractiveXYPlotFrame.close ()

    def InteractiveXYPlotFrame_help (self):

        self.Help ()

    def InteractiveXYPlotFrame_AvailableComboBox_activate (self):

        global InteractiveXYPlot_AqueousComponentsToPlot_list

        self.InteractiveXYPlotFrame.AqueousSolutionComboBox.insertItem (self.InteractiveXYPlotFrame.AvailableComboBox.currentText (), 0)
        InteractiveXYPlot_AqueousComponentsToPlot_list.append (str (self.InteractiveXYPlotFrame.AvailableComboBox.currentText ()))
        InteractiveXYPlot_AqueousComponentsToPlot_list.sort ()


###########################################################################################
##                                                                                       ##
##                           INTERACTIVE XY PLOT FRAME (END)                             ##
##                                                                                       ##
###########################################################################################




## plot interactif temps / espace


    def over_space_and_time (self):

        self.InteractiveXYPlot_Space_and_TimeFrame = QFrame ()
        self.InteractiveXYPlot_Space_and_TimeFrame.setCaption ('Concentration over Space and Time')
        setPosition (self.InteractiveXYPlot_Space_and_TimeFrame)

        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout = QVBoxLayout (self.InteractiveXYPlot_Space_and_TimeFrame, 10, -1, 'InteractiveXYPlot_Space_and_TimeFrame_mainLayout')
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.setMargin (Marge)
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        InteractiveXYPlot_Space_and_Time_comment = Comments ['Concentration_Over_Space_And_Time']

        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA = QHGroupBox (self.InteractiveXYPlot_Space_and_TimeFrame)
	QToolTip.add (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA, InteractiveXYPlot_Space_and_Time_comment)

        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA.setMargin (5)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA.setMidLineWidth (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0 = QHGroupBox (self.InteractiveXYPlot_Space_and_TimeFrame)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0.setMargin (10)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0.setMidLineWidth (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0)

        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox01 = QVBox (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox02 = QVBox (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox03 = QVBox (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox0)

        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox01.setMargin (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox01.setSpacing (5)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox03.setMargin (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox03.setSpacing (5)
       
        self.InteractiveXYPlot_Space_and_TimeFrame.QVBox02.setMinimumSize (10, 10)

        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionLabel = QLabel ('Elements to plot', self.InteractiveXYPlot_Space_and_TimeFrame.QVBox01)
        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionLabel.resize (self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionLabel.sizeHint ())

        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox = QComboBox (self.InteractiveXYPlot_Space_and_TimeFrame.QVBox01)
        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.setMinimumSize (200, 25)
        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.setMaximumSize (200, 25)
        #self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.setEditable (1)
        
        i = 0
        while i < len (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list):
            self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.insertItem (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [i]))
            i = i+1
       
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableLabel = QLabel ('Available Elements', self.InteractiveXYPlot_Space_and_TimeFrame.QVBox03)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableLabel.resize (self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionLabel.sizeHint ())
        
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox = QComboBox (self.InteractiveXYPlot_Space_and_TimeFrame.QVBox03)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.setMinimumSize (200, 25)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.setMaximumSize (200, 25)
        self.connect (self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox, SIGNAL ('activated (int)'), self.InteractiveXYPlot_Space_and_TimeFrame_AvailableComboBox_activate)

#  We retrieve minerals...

        InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list = []
        i = 0
        while i < len (MineralPhases_list):
            spec = str (MineralPhases_list [i])
            if (spec != ''):
                if spec in InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list:
                    i = i+1
                else:
                    InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list.append (str (spec))
                    i = i+1
            else:
                i = i+1

#
## Update of mineral list for contour postprocessing with available equilibrium minerals.
#
        for mineral in AqueousStates_MineralPhases_list:
	   if mineral[1] not in InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list:
	       InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list.append(mineral[1])
	       pass
	   pass

        InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list.sort ()
        InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list.reverse ()
        k = 0
        while k < len (InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list):
            self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem (InteractiveXYPlot_Space_and_Time_AvailableMineralPhases_list [k], 0)
            k = k+1

#  We retrieve master species

        Components_species_tmp = []
        i = 0
        while i < len (Components_list):
            spec = str (Components_list [i])
            if (spec != ''):
                if spec in Components_species_tmp:
                    i = i+1
                elif spec.find ('(') != -1:
                    i = i+1
                else:
                    Components_species_tmp.append (str (spec))
                    i = i+1
            else: i = i+1
        Components_species_tmp.sort ()
        Components_species_tmp.reverse ()
        k = 0
        while k < len (Components_species_tmp):
            self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem (Components_species_tmp [k], 0)
            k = k+1

#  On recupere les especes composantes aqueuses (on traite les redondances a la fois avec les master species mais
#  egalement entre les differents etats aqueux).
#  Ces especes sont stockees dans la liste InteractiveXYPlot_AvailableAqueousComponents_list

        InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list = []        
        i = 0
        while i < len (AqueousStates_list):
            j = 0
            while (j < len (AqueousStates_Species_list [i])):
                spec = str (AqueousStates_Species_list [i][j][0])
                if (spec != ''):
                    if spec in InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list:
                        j = j+1
                    elif spec in Components_species_tmp:
                        j = j+1
                    else:
		        if spec.find ('mineral ') == -1:
                            InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list.append (str (spec))
                            j = j+1
			else:
			    j = j+1
                else:
                    break
            i = i+1

#  On effectue ensuite un tri et une inversion de cette liste,
#  puis on la recopie dans la boite combo correspondante

    #   Tri
        InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list.sort ()
        
    #   Inversion de l ordre des elements pour qu ils apparaissent dans l ordre lexicographique
        InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list.reverse ()

    #   Recopie
        k = 0
        while k < len (InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list):
            self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem (InteractiveXYPlot_Space_and_Time_AvailableAqueousComponents_list [k], 0)
            k = k+1

#  we add pH, pe, Eh, tc, H2O (mass), ionic strength (mu)

        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('pH', 0)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('pe', 1)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('Eh', 2)
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('tc', 3)            
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('mass_water', 4)            
        self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('ionicstrength', 5)            
	if PorosityState == 'variable':
            self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.insertItem ('porosity', 6)
             
#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1 = QHBox (self.InteractiveXYPlot_Space_and_TimeFrame)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1.setMargin (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1.setSpacing (10)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1.setMidLineWidth (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1)

        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1 = QButtonGroup ('Direction to plot', self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.setMinimumWidth (220)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.setMaximumWidth (220)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.QVBoxLayout10 = QVBoxLayout (self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1, 10)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.QVBoxLayout10.setMargin (15)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.QVBoxLayout10.setSpacing (15)
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.setExclusive(1)

        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.Organizer = range (2)

        self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton11 = QRadioButton(self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1)
        self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton11.setText( ('I'))
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.QVBoxLayout10.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton11)

        self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton12 = QRadioButton(self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1)
        self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton12.setText( ('J'))
        self.InteractiveXYPlot_Space_and_TimeFrame.ButtonGroup1.QVBoxLayout10.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton12)

        if (str (InteractiveXYPlot_Space_and_Time_Parameters_list [0] == 'I')):
            self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton11.setChecked (1)
        else:
            self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton12.setChecked (1)

        self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11 = QVGroupBox (self.InteractiveXYPlot_Space_and_TimeFrame.QHBox1)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11.setTitle ('Plot Frequency')
        self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11.setMargin (5)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11.setMinimumWidth (220)
        self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11.setMaximumWidth (220)

        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox110 = QHBox (self.InteractiveXYPlot_Space_and_TimeFrame.QVGroupBox11)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox110.setMargin (5)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHBox110.setSpacing (10)

        self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencySpacerLabel = QLabel ('      ', self.InteractiveXYPlot_Space_and_TimeFrame.QHBox110)

        self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencyLineEdit = QLineEdit (self.InteractiveXYPlot_Space_and_TimeFrame.QHBox110)
        self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencyLineEdit.setText (str (InteractiveXYPlot_Space_and_Time_Parameters_list [1]))
        self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencyLineEdit.setMinimumSize (50, 25)
        self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencyLineEdit.setMaximumSize (50, 25)

#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2 = QHGroupBox (self.InteractiveXYPlot_Space_and_TimeFrame)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2.setMargin (10)
        self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2.setMidLineWidth (0)
        self.InteractiveXYPlot_Space_and_TimeFrame.mainLayout.addWidget (self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2)

        self.InteractiveXYPlot_Space_and_TimeFrame.OKPB = QPushButton ('OK', self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2)
        self.InteractiveXYPlot_Space_and_TimeFrame.DeletePB = QPushButton ('Delete', self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2)
        self.InteractiveXYPlot_Space_and_TimeFrame.CancelPB = QPushButton ('Cancel', self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2)
        self.InteractiveXYPlot_Space_and_TimeFrame.HelpPB = QPushButton ('&Help', self.InteractiveXYPlot_Space_and_TimeFrame.QHGroupBox2)

        self.connect (self.InteractiveXYPlot_Space_and_TimeFrame.OKPB, SIGNAL ('clicked ()'), self.InteractiveXYPlot_Space_and_TimeFrame_ok)
        self.connect (self.InteractiveXYPlot_Space_and_TimeFrame.DeletePB,  SIGNAL ('clicked ()'), self.InteractiveXYPlot_Space_and_TimeFrame_delete)
        self.connect (self.InteractiveXYPlot_Space_and_TimeFrame.CancelPB, SIGNAL ('clicked ()'), self.InteractiveXYPlot_Space_and_TimeFrame_cancel)
        self.connect (self.InteractiveXYPlot_Space_and_TimeFrame.HelpPB, SIGNAL ('clicked ()'), self.InteractiveXYPlot_Space_and_TimeFrame_help)

#----------------------------------------------------------------------------------------------

        self.InteractiveXYPlot_Space_and_TimeFrame.show ()

#----------------------------------------------------------------------------------------------

    def InteractiveXYPlot_Space_and_TimeFrame_ok (self):

        global InteractiveXYPlot_Space_and_Time_Parameters_list
        global InteractiveXYPlot_Space_and_Time_ElementsToPlot_list

        if self.InteractiveXYPlot_Space_and_TimeFrame.RadioButton11.isChecked ():
            InteractiveXYPlot_Space_and_Time_Parameters_list [0] = 'I'
        else:
            InteractiveXYPlot_Space_and_Time_Parameters_list [0] = 'J'
        InteractiveXYPlot_Space_and_Time_Parameters_list [1] = int (str (self.InteractiveXYPlot_Space_and_TimeFrame.PlotFrequencyLineEdit.text ()))

        self.InteractiveXYPlot_Space_and_TimeFrame.close ()

    def InteractiveXYPlot_Space_and_TimeFrame_delete (self):

        global InteractiveXYPlot_Space_and_Time_ElementsToPlot_list

        if ((self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.count ()) != 0):
            text = str (self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.currentText ())
            index = int (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list.index (text))
            self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.removeItem (self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.currentItem ())
            del InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [index]
            if ((self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.count ()) != 0):
                self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.setCurrentItem (0)
        else:
            self.InteractiveXYPlot_Space_and_TimeFrameMB = QMessageBox()
            self.InteractiveXYPlot_Space_and_TimeFrameMB.setCaption ('Error')
            self.InteractiveXYPlot_Space_and_TimeFrameMB.setText ('There is no more Element to plot.')
            self.InteractiveXYPlot_Space_and_TimeFrameMB.setIcon (QMessageBox.Critical)
            self.InteractiveXYPlot_Space_and_TimeFrameMB.show ()

    def InteractiveXYPlot_Space_and_TimeFrame_cancel (self):

        self.InteractiveXYPlot_Space_and_TimeFrame.close ()

    def InteractiveXYPlot_Space_and_TimeFrame_help (self):

        self.Help ()

    def InteractiveXYPlot_Space_and_TimeFrame_AvailableComboBox_activate (self):

        global InteractiveXYPlot_Space_and_Time_ElementsToPlot_list

        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.insertItem (self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.currentText (), self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.currentItem ())
        InteractiveXYPlot_Space_and_Time_ElementsToPlot_list.append (str (self.InteractiveXYPlot_Space_and_TimeFrame.AvailableComboBox.currentText ()))
        InteractiveXYPlot_Space_and_Time_ElementsToPlot_list.sort ()
        self.InteractiveXYPlot_Space_and_TimeFrame.AqueousSolutionComboBox.setCurrentItem (0)


###########################################################################################
##                                                                                       ##
##                    MODFLOW SOLVER PARAMETERS FRAME (BEGINNING)                        ##
##                                                                                       ##
###########################################################################################

    def solver_parameters (self):

        if Solver is 'Modflow' and ChemistryTool is 'PhreeqC':
            self.ModflowSolverParameters ()

        if Solver is 'Modflow' and ChemistryTool is 'Traces_PhreeqC':
            self.Traces_Parameters ()
            
        elif Solver is 'Modflow_Mt3d':            
            self.ModflowSolverParameters ()
            self.Mt3d_SolverParameters ()
                        
        elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'PhreeqC':
            self.ModflowSolverParameters ()
            self.Mt3d_SolverParameters ()            
            self.ChemistryConvergenceParameters ()

        elif Solver is 'Chemistry':
            self.ChemistryConvergenceParameters ()
	    
        elif Solver is 'Modflow_Mt3d_PhreeqC' and ChemistryTool is 'Traces_PhreeqC':
            #self.ModflowSolverParameters ()
            self.Traces_Parameters ()
            self.ChemistryConvergenceParameters ()

#------------------------------------------------------------------------------------------------------------------------------------------
#  Modflow Solver Parameters Frame (beginning)
#------------------------------------------------------------------------------------------------------------------------------------------


    def ModflowSolverParameters (self):

        self.ModflowSolverParametersFrame = QFrame ()
        self.ModflowSolverParametersFrame.setCaption ('Modflow Solver Parameters')
        setPosition (self.ModflowSolverParametersFrame)

        self.ModflowSolverParametersFrame.mainLayout = QVBoxLayout (self.ModflowSolverParametersFrame, 10,-1, "ModflowSolverParametersFrame_mainLayout")
        self.ModflowSolverParametersFrame.mainLayout.setMargin (Marge)
        self.ModflowSolverParametersFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        ModflowSolverParameters_comment = Comments ['Modflow_Solver_Parameters']

        self.ModflowSolverParametersFrame.QHGroupBoxA = QHGroupBox (self.ModflowSolverParametersFrame)
        QToolTip.add (self.ModflowSolverParametersFrame.QHGroupBoxA, ModflowSolverParameters_comment)

        self.ModflowSolverParametersFrame.QHGroupBoxA.setMargin (5)
        self.ModflowSolverParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ModflowSolverParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ModflowSolverParametersFrame.mainLayout.addWidget (self.ModflowSolverParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ModflowSolverParametersFrame.QHGroupBox0 = QHGroupBox (self.ModflowSolverParametersFrame)
        self.ModflowSolverParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.ModflowSolverParametersFrame.mainLayout.addWidget (self.ModflowSolverParametersFrame.QHGroupBox0)

        self.ModflowSolverParametersFrame.QVBox01 = QVBox (self.ModflowSolverParametersFrame.QHGroupBox0)
        self.ModflowSolverParametersFrame.QVBox02 = QVBox (self.ModflowSolverParametersFrame.QHGroupBox0)
        self.ModflowSolverParametersFrame.QVBox03 = QVBox (self.ModflowSolverParametersFrame.QHGroupBox0)

        self.ModflowSolverParametersFrame.QVBox01.setMargin (0)
        self.ModflowSolverParametersFrame.QVBox01.setSpacing (5)
        self.ModflowSolverParametersFrame.QVBox02.setMargin (0)
        self.ModflowSolverParametersFrame.QVBox02.setSpacing (5)
        self.ModflowSolverParametersFrame.QVBox03.setMargin (0)
        self.ModflowSolverParametersFrame.QVBox03.setSpacing (5)

        self.ModflowSolverParametersFrame.UnderRelaxationFactorLabel = QLabel ('Under Relaxation Factor', self.ModflowSolverParametersFrame.QVBox01)
        self.ModflowSolverParametersFrame.UnderRelaxationFactorLabel.resize (self.ModflowSolverParametersFrame.UnderRelaxationFactorLabel.sizeHint ())        

        self.ModflowSolverParametersFrame.NumberOfIterationsLabel = QLabel ('Number of Iterations', self.ModflowSolverParametersFrame.QVBox01)
        self.ModflowSolverParametersFrame.NumberOfIterationsLabel.resize (self.ModflowSolverParametersFrame.NumberOfIterationsLabel.sizeHint ())

        self.ModflowSolverParametersFrame.ResidualConvergenceLabel = QLabel ('Residual Convergence', self.ModflowSolverParametersFrame.QVBox01)
        self.ModflowSolverParametersFrame.ResidualConvergenceLabel.resize (self.ModflowSolverParametersFrame.ResidualConvergenceLabel.sizeHint ())

        self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit = QLineEdit (self.ModflowSolverParametersFrame.QVBox03)
        #self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.setMinimumSize (100, 25)
        #self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.setMaximumSize (100, 25)

        self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit = QLineEdit (self.ModflowSolverParametersFrame.QVBox03)
        #self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.setMinimumSize (100, 25)
        #self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.setMaximumSize (100, 25)

        self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit = QLineEdit (self.ModflowSolverParametersFrame.QVBox03)
        #self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.setMinimumSize (100, 25)
        #self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.setMaximumSize (100, 25)
       
#------------------------------------------------------------------------------------------------------------------------------------------
      
        self.ModflowSolverParametersFrame.QHBoxLayout3 = QHGroupBox (self.ModflowSolverParametersFrame)
        self.ModflowSolverParametersFrame.mainLayout.addWidget (self.ModflowSolverParametersFrame.QHBoxLayout3)

        self.ModflowSolverParametersFrame.QHBoxLayout3.setMidLineWidth (0)

        self.ModflowSolverParametersFrame.OKPB = QPushButton ('OK', self.ModflowSolverParametersFrame.QHBoxLayout3, "ModflowSolverParametersFrame_PB0")
        self.ModflowSolverParametersFrame.OKPB.setFocus ()
        self.ModflowSolverParametersFrame.DefaultPB = QPushButton ('&Default', self.ModflowSolverParametersFrame.QHBoxLayout3, "ModflowSolverParametersFrame_PB1")
        self.ModflowSolverParametersFrame.ClearPB = QPushButton ('C&lear', self.ModflowSolverParametersFrame.QHBoxLayout3, "ModflowSolverParametersFrame_PB2")
        self.ModflowSolverParametersFrame.CancelPB = QPushButton ('&Cancel', self.ModflowSolverParametersFrame.QHBoxLayout3, "ModflowSolverParametersFrame_PB3")
        self.ModflowSolverParametersFrame.HelpPB = QPushButton ('&Help', self.ModflowSolverParametersFrame.QHBoxLayout3, "ModflowSolverParametersFrame_PB4")

        self.connect (self.ModflowSolverParametersFrame.OKPB, SIGNAL('clicked()'), self.ModflowSolverParametersFrame_ok)
        self.connect (self.ModflowSolverParametersFrame.DefaultPB, SIGNAL('clicked()'), self.ModflowSolverParametersFrame_default)
        self.connect (self.ModflowSolverParametersFrame.ClearPB, SIGNAL('clicked()'), self.ModflowSolverParametersFrame_clear)      
        self.connect (self.ModflowSolverParametersFrame.CancelPB, SIGNAL('clicked()'), self.ModflowSolverParametersFrame_cancel)
        self.connect (self.ModflowSolverParametersFrame.HelpPB, SIGNAL('clicked()'), self.ModflowSolverParametersFrame_help)

        QToolTip.add (self.ModflowSolverParametersFrame.DefaultPB, "Press CTRL+D for Default Parameters")
        QToolTip.add (self.ModflowSolverParametersFrame.ClearPB, "Press CTRL+l to Clear all Parameters")
        QToolTip.add (self.ModflowSolverParametersFrame.CancelPB, "Press CTRL+C to Close this Window")
        QToolTip.add (self.ModflowSolverParametersFrame.HelpPB, "Press CTRL+H for Help")
        self.ModflowSolverParametersFrame.DefaultPB.setAccel(Qt.CTRL + Qt.Key_D)
        self.ModflowSolverParametersFrame.ClearPB.setAccel(Qt.CTRL + Qt.Key_L)
        self.ModflowSolverParametersFrame.CancelPB.setAccel(Qt.CTRL + Qt.Key_C)
        self.ModflowSolverParametersFrame.HelpPB.setAccel(Qt.CTRL + Qt.Key_H)

        self.ModflowSolverParametersFrame_init ()

        self.ModflowSolverParametersFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------
#  Methods of the Modflow Solver Parameters Frame
#------------------------------------------------------------------------------------------------------------------------------------------

    def ModflowSolverParametersFrame_ok (self):

        global Modflow_accl
        global Modflow_mxiter
        global Modflow_hclose
        
        Modflow_accl = float (str (self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.text ()))
        Modflow_mxiter = int (str (self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.text ()))
        Modflow_hclose = float (str (self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.text ()))
       
        self.ModflowSolverParametersFrame.close ()
        
#------------------------------------------------------------------------------------------------------------------------------------------
    
    def ModflowSolverParametersFrame_default (self):

        self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.setText (str (Modflow_Default_accl))
        self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.setText (str (Modflow_Default_mxiter))
        self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.setText (str (Modflow_Default_hclose))
        self.ModflowSolverParametersFrame.OKPB.setFocus ()
       
#------------------------------------------------------------------------------------------------------------------------------------------

    def ModflowSolverParametersFrame_init (self):

        self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.setText (str (Modflow_accl))
        self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.setText (str (Modflow_mxiter))
        self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.setText (str (Modflow_hclose))
        self.ModflowSolverParametersFrame.OKPB.setFocus ()
       
#------------------------------------------------------------------------------------------------------------------------------------------

    def ModflowSolverParametersFrame_clear (self):

        self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.clear ()
        self.ModflowSolverParametersFrame.NumberOfIterationsLineEdit.clear ()
        self.ModflowSolverParametersFrame.ResidualConvergenceLineEdit.clear ()
        self.ModflowSolverParametersFrame.UnderRelaxationFactorLineEdit.setFocus ()
        
#------------------------------------------------------------------------------------------------------------------------------------------
       
    def ModflowSolverParametersFrame_cancel (self):

        self.ModflowSolverParametersFrame.close ()
          
#------------------------------------------------------------------------------------------------------------------------------------------

    def ModflowSolverParametersFrame_help (self):

        self.Help ()


              
###########################################################################################
##                                                                                       ##
##                        MODFLOW SOLVER PARAMETERS FRAME (END)                          ##
##                                                                                       ##
###########################################################################################




###########################################################################################
##                                                                                       ##
##                        MT3D SOLVER PARAMETERS FRAME (BEGINNING)                       ##
##                                                                                       ##
###########################################################################################



    def Mt3d_SolverParameters (self):
    
        self.Mt3d_SolverParametersFrame = QFrame ()
        self.Mt3d_SolverParametersFrame.setCaption ('Mt3d Solver Parameters')
        setPosition (self.Mt3d_SolverParametersFrame)

        self.Mt3d_SolverParametersFrame.mainLayout = QVBoxLayout (self.Mt3d_SolverParametersFrame, 10, -1, 'Mt3d_SolverParametersFrame_mainLayout')
        self.Mt3d_SolverParametersFrame.mainLayout.setMargin (Marge)
        self.Mt3d_SolverParametersFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Mt3d_SolverParameters_comment = Comments ['Mt3d_Solver_Parameters']

        self.Mt3d_SolverParametersFrame.QHGroupBoxA = QHGroupBox (self.Mt3d_SolverParametersFrame)
        QToolTip.add (self.Mt3d_SolverParametersFrame.QHGroupBoxA, Mt3d_SolverParameters_comment)

        self.Mt3d_SolverParametersFrame.QHGroupBoxA.setMargin (5)
        self.Mt3d_SolverParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.Mt3d_SolverParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.Mt3d_SolverParametersFrame.mainLayout.addWidget (self.Mt3d_SolverParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.Mt3d_SolverParametersFrame.QBox2 = QHBox (self.Mt3d_SolverParametersFrame)
        self.Mt3d_SolverParametersFrame.QBox2.setMargin (0)
        self.Mt3d_SolverParametersFrame.QBox2.setMidLineWidth (0)
        self.Mt3d_SolverParametersFrame.mainLayout.addWidget ( self.Mt3d_SolverParametersFrame.QBox2)
        
	self.ButtonGroup0 = QButtonGroup('Advection', self.Mt3d_SolverParametersFrame.QBox2)
        self.ButtonGroup0.QVBoxLayout00 = QVBoxLayout (self.ButtonGroup0, 10)
        self.ButtonGroup0.QVBoxLayout00.setMargin (20)
        self.ButtonGroup0.QVBoxLayout00.setSpacing (12)
        self.ButtonGroup0.setExclusive(1)

        self.ButtonGroup0.Organizer = range (3)

        self.RadioButton01 = QRadioButton(self.ButtonGroup0)
        self.RadioButton01.setText( ('TVD'))
        self.ButtonGroup0.QVBoxLayout00.addWidget (self.RadioButton01)

        self.RadioButton02 = QRadioButton(self.ButtonGroup0)
        self.RadioButton02.setText( ('Central'))
        self.ButtonGroup0.QVBoxLayout00.addWidget (self.RadioButton02)

        self.RadioButton03 = QRadioButton(self.ButtonGroup0)
        self.RadioButton03.setText( ('1st Upwind'))
        self.ButtonGroup0.QVBoxLayout00.addWidget (self.RadioButton03)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.Mt3d_SolverParametersFrame.QBox1 = QHBox (self.Mt3d_SolverParametersFrame)
        self.Mt3d_SolverParametersFrame.QBox1.setMargin (0)
        self.Mt3d_SolverParametersFrame.QBox1.setMidLineWidth (0)
        self.Mt3d_SolverParametersFrame.mainLayout.addWidget ( self.Mt3d_SolverParametersFrame.QBox1)

        self.ButtonGroup1 = QButtonGroup ('Conjugate Gradient Preconditioner', self.Mt3d_SolverParametersFrame.QBox1)
        self.ButtonGroup1.QVBoxLayout10 = QVBoxLayout (self.ButtonGroup1, 10)
        self.ButtonGroup1.QVBoxLayout10.setMargin (20)
        self.ButtonGroup1.QVBoxLayout10.setSpacing (12)
        self.ButtonGroup1.setExclusive(1)

        self.ButtonGroup1.Organizer = range (3)

        self.RadioButton11 = QRadioButton(self.ButtonGroup1)
        self.RadioButton11.setText( ('Jacobi'))
        self.ButtonGroup1.QVBoxLayout10.addWidget (self.RadioButton11)

        self.RadioButton12 = QRadioButton(self.ButtonGroup1)
        self.RadioButton12.setText( ('SSOR'))
        self.ButtonGroup1.QVBoxLayout10.addWidget (self.RadioButton12)
        
        self.RadioButton13 = QRadioButton(self.ButtonGroup1)
        self.RadioButton13.setText( ('Modified Incomplete Cholesky'))
        self.ButtonGroup1.QVBoxLayout10.addWidget (self.RadioButton13)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.Mt3d_SolverParametersFrame.QHGroupBox0 = QHGroupBox (self.Mt3d_SolverParametersFrame)
        self.Mt3d_SolverParametersFrame.QHGroupBox0.setMargin (10)
        self.Mt3d_SolverParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.Mt3d_SolverParametersFrame.mainLayout.addWidget ( self.Mt3d_SolverParametersFrame.QHGroupBox0)

        self.Mt3d_SolverParametersFrame.QVBox01 = QVBox (self.Mt3d_SolverParametersFrame.QHGroupBox0)
        self.Mt3d_SolverParametersFrame.QVBox02 = QVBox (self.Mt3d_SolverParametersFrame.QHGroupBox0)
        self.Mt3d_SolverParametersFrame.QVBox03 = QVBox (self.Mt3d_SolverParametersFrame.QHGroupBox0)

        self.Mt3d_SolverParametersFrame.QVBox01.setMargin (0)
        self.Mt3d_SolverParametersFrame.QVBox01.setSpacing (5)
        self.Mt3d_SolverParametersFrame.QVBox02.setMinimumSize (50, 10)
        self.Mt3d_SolverParametersFrame.QVBox02.setMaximumSize (50, 10)
        self.Mt3d_SolverParametersFrame.QVBox03.setMargin (0)
        self.Mt3d_SolverParametersFrame.QVBox03.setSpacing (5)

        self.Mt3d_SolverParametersFrame.mxiterLabel = QLabel ('mxiter', self.Mt3d_SolverParametersFrame.QVBox01)
        self.Mt3d_SolverParametersFrame.mxiterLabel.resize (self.Mt3d_SolverParametersFrame.mxiterLabel.sizeHint ())
        QToolTip.add (self.Mt3d_SolverParametersFrame.mxiterLabel, 'Number Maximum of iterations')

        self.Mt3d_SolverParametersFrame.Iter1Label = QLabel ('iter1', self.Mt3d_SolverParametersFrame.QVBox01)
        self.Mt3d_SolverParametersFrame.Iter1Label.resize (self.Mt3d_SolverParametersFrame.Iter1Label.sizeHint ())

        self.Mt3d_SolverParametersFrame.acclLabel = QLabel('accl', self.Mt3d_SolverParametersFrame.QVBox01)
        self.Mt3d_SolverParametersFrame.acclLabel.resize (self.Mt3d_SolverParametersFrame.acclLabel.sizeHint ())
        QToolTip.add (self.Mt3d_SolverParametersFrame.acclLabel, 'Under Relaxation Factor')

        self.Mt3d_SolverParametersFrame.ccloseLabel = QLabel('cclose', self.Mt3d_SolverParametersFrame.QVBox01)
        self.Mt3d_SolverParametersFrame.ccloseLabel.resize (self.Mt3d_SolverParametersFrame.ccloseLabel.sizeHint ())
        
        self.Mt3d_SolverParametersFrame.mxiterLineEdit = QLineEdit (self.Mt3d_SolverParametersFrame.QVBox03)
        #self.Mt3d_SolverParametersFrame.mxiterLineEdit.setMinimumSize (100, 25)
        #self.Mt3d_SolverParametersFrame.mxiterLineEdit.setMaximumSize (100, 25)
        #QToolTip.add (self.Mt3d_SolverParametersFrame.mxiterLineEdit, 'mxiter value = '+str(Mt3d_mxiter))
	
        self.Mt3d_SolverParametersFrame.iter1LineEdit = QLineEdit (self.Mt3d_SolverParametersFrame.QVBox03)
        #self.Mt3d_SolverParametersFrame.iter1LineEdit.setMinimumSize (100, 25)
        #self.Mt3d_SolverParametersFrame.iter1LineEdit.setMaximumSize (100, 25)
        
        self.Mt3d_SolverParametersFrame.acclLineEdit = QLineEdit (self.Mt3d_SolverParametersFrame.QVBox03)
        #self.Mt3d_SolverParametersFrame.acclLineEdit.setMinimumSize (100, 25)
        #self.Mt3d_SolverParametersFrame.acclLineEdit.setMaximumSize (100, 25)
        
        self.Mt3d_SolverParametersFrame.ccloseLineEdit = QLineEdit (self.Mt3d_SolverParametersFrame.QVBox03)
        #self.Mt3d_SolverParametersFrame.ccloseLineEdit.setMinimumSize (100, 25)
        #self.Mt3d_SolverParametersFrame.ccloseLineEdit.setMaximumSize (100, 25)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.Mt3d_SolverParametersFrame.QHGroupBox0 = QHGroupBox (self.Mt3d_SolverParametersFrame)
        self.Mt3d_SolverParametersFrame.mainLayout.addWidget (self.Mt3d_SolverParametersFrame.QHGroupBox0)
        self.Mt3d_SolverParametersFrame.QHGroupBox0.setMargin (10)
        self.Mt3d_SolverParametersFrame.QHGroupBox0.setMidLineWidth (0)

        self.Mt3d_SolverParametersFrame.OKPB = QPushButton ('OK', self.Mt3d_SolverParametersFrame.QHGroupBox0)
        self.Mt3d_SolverParametersFrame.CancelPB = QPushButton ('Cancel', self.Mt3d_SolverParametersFrame.QHGroupBox0)
        self.Mt3d_SolverParametersFrame.HelpPB = QPushButton ('Help', self.Mt3d_SolverParametersFrame.QHGroupBox0)

        self.connect (self.Mt3d_SolverParametersFrame.OKPB, SIGNAL ('clicked ()'), self.Mt3d_SolverParametersFrame_ok)
        self.connect (self.Mt3d_SolverParametersFrame.CancelPB, SIGNAL ('clicked ()'), self.Mt3d_SolverParametersFrame_cancel)
        self.connect (self.Mt3d_SolverParametersFrame.HelpPB, SIGNAL ('clicked ()'), self.Mt3d_SolverParametersFrame_help)

        self.Mt3dSolverParametersFrame_init ()
	
        self.Mt3d_SolverParametersFrame.show ()

    def Mt3d_SolverParametersFrame_ok (self):
        
        global Mt3d_mxiter
        global Mt3d_iter1
        global Mt3d_accl
        global Mt3d_cclose
        global Mt3d_ConjugateGradientPreconditioner
        global Mt3d_advection

        Mt3d_mxiter = int (str (self.Mt3d_SolverParametersFrame.mxiterLineEdit.text ()))
        Mt3d_iter1 = int (str (self.Mt3d_SolverParametersFrame.iter1LineEdit.text ()))
        Mt3d_accl = float (str (self.Mt3d_SolverParametersFrame.acclLineEdit.text ()))
        Mt3d_cclose = float (str (self.Mt3d_SolverParametersFrame.ccloseLineEdit.text ()))

        if self.RadioButton11.isChecked ():
            Mt3d_ConjugateGradientPreconditioner = 'JACOBI'
        elif self.RadioButton12.isChecked ():
            Mt3d_ConjugateGradientPreconditioner = 'SSOR'
        elif self.RadioButton13.isChecked ():
            Mt3d_ConjugateGradientPreconditioner = 'MIC'  # Modified Incomplete Cholesky

        if self.RadioButton03.isChecked ():
            Mt3d_advection = 'UPWIND'
        elif self.RadioButton01.isChecked ():
            Mt3d_advection = 'TVD'
        elif self.RadioButton02.isChecked ():
            Mt3d_advection = 'Central'

        self.Mt3d_SolverParametersFrame.close ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def Mt3d_SolverParametersFrame_cancel (self):
        
        self.Mt3d_SolverParametersFrame.close ()
        
#------------------------------------------------------------------------------------------------------------------------------------------

    def Mt3d_SolverParametersFrame_help (self):

        self.Help ()

    def Mt3dSolverParametersFrame_init (self):
        
        self.Mt3d_SolverParametersFrame.mxiterLineEdit.setText (str (Mt3d_mxiter))
        self.Mt3d_SolverParametersFrame.iter1LineEdit.setText (str (Mt3d_iter1))
        self.Mt3d_SolverParametersFrame.acclLineEdit.setText (str (Mt3d_accl))
        self.Mt3d_SolverParametersFrame.ccloseLineEdit.setText (str (Mt3d_cclose))

        if Mt3d_advection == 'UPWIND':
            self.RadioButton03.setChecked (1)
        elif Mt3d_advection == 'TVD':
            self.RadioButton01.setChecked (1)
        elif Mt3d_advection == 'Central':
            self.RadioButton02.setChecked (1)

        if Mt3d_ConjugateGradientPreconditioner == 'JACOBI':
            self.RadioButton11.setChecked (1)
        elif Mt3d_ConjugateGradientPreconditioner == 'SSOR':
            self.RadioButton12.setChecked (1)
        elif Mt3d_ConjugateGradientPreconditioner == 'MIC':      # Modified Incomplete Cholesky
            self.RadioButton13.setChecked (1)        

        self.Mt3d_SolverParametersFrame.OKPB.setFocus ()


                      
###########################################################################################
##                                                                                       ##
##                        MT3D SOLVER PARAMETERS FRAME (END)                             ##
##                                                                                       ##
###########################################################################################

# debug_traces




    def Traces_Parameters (self):
    
        self.TracesParametersFrame = QFrame ()
        self.TracesParametersFrame.setCaption ('Traces Solver Parameters')
        setPosition (self.TracesParametersFrame)
        #self.TracesParametersFrame.setMinimumSize (270, 200)

        self.TracesParametersFrame.mainLayout = QVBoxLayout (self.TracesParametersFrame, 10, -1, 'TracesParametersFrame_mainLayout')
        self.TracesParametersFrame.mainLayout.setMargin (Marge)
        self.TracesParametersFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        #TracesParameters_comment = Comments ['Traces_Parameters']

        self.TracesParametersFrame.QHGroupBoxA = QHGroupBox (self.TracesParametersFrame)
        #QToolTip.add (self.TracesParametersFrame.QHGroupBoxA, TracesParameters_comment)

        self.TracesParametersFrame.QHGroupBoxA.setMargin (5)
        self.TracesParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.TracesParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.TracesParametersFrame.mainLayout.addWidget (self.TracesParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.TracesParametersFrame.QBox4 = QHBox (self.TracesParametersFrame)
        self.TracesParametersFrame.QBox4.setMargin (0)
        self.TracesParametersFrame.QBox4.setMidLineWidth (0)
        self.TracesParametersFrame.mainLayout.addWidget ( self.TracesParametersFrame.QBox4)
        
	self.TracesParametersFrame.ButtonGroup2 = QButtonGroup ('Scheme', self.TracesParametersFrame.QBox4)
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20 = QVBoxLayout (self.TracesParametersFrame.ButtonGroup2, 10)
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.setMargin (20)
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.setSpacing (12)
        self.TracesParametersFrame.ButtonGroup2.setExclusive (1)

        self.TracesParametersFrame.ButtonGroup2.Organizer = range (3)

        self.TracesParametersFrame.RadioButton21 = QRadioButton (self.TracesParametersFrame.ButtonGroup2)
        self.TracesParametersFrame.RadioButton21.setText (('Theta = 1 (Implicit)'))
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.addWidget (self.TracesParametersFrame.RadioButton21)
        self.TracesParametersFrame.RadioButton21.setChecked (1)
        #self.connect (self.TracesParametersFrame.RadioButton21, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)
	
        self.TracesParametersFrame.RadioButton22 = QRadioButton (self.TracesParametersFrame.ButtonGroup2)
        self.TracesParametersFrame.RadioButton22.setText (('Theta = 0 (Explicit)'))
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.addWidget (self.TracesParametersFrame.RadioButton22)
        #self.connect (self.TracesParametersFrame.RadioButton22, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)

	
        self.TracesParametersFrame.RadioButton23 = QRadioButton (self.TracesParametersFrame.ButtonGroup2)
        self.TracesParametersFrame.RadioButton23.setText (('0 < Theta < 1 (Crank-Nicholson)'))
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.addWidget (self.TracesParametersFrame.RadioButton23)
        #self.connect (self.TracesParametersFrame.RadioButton23, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)
        
        self.TracesParametersFrame.lineedit = QLineEdit (self.TracesParametersFrame.ButtonGroup2)
        self.TracesParametersFrame.ButtonGroup2.QVBoxLayout20.addWidget (self.TracesParametersFrame.lineedit)
        self.TracesParametersFrame.lineedit.setEnabled (0)
        

#------------------------------------------------------------------------------------------------------------------------------------------

        self.TracesParametersFrame.QBox3 = QHBox (self.TracesParametersFrame)
        self.TracesParametersFrame.QBox3.setMargin (0)
        self.TracesParametersFrame.QBox3.setMidLineWidth (0)
        self.TracesParametersFrame.mainLayout.addWidget ( self.TracesParametersFrame.QBox3)
        
	self.TracesParametersFrame.ButtonGroup1 = QButtonGroup ('Library', self.TracesParametersFrame.QBox3)
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10 = QVBoxLayout (self.TracesParametersFrame.ButtonGroup1, 10)
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10.setMargin (20)
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10.setSpacing (12)
        self.TracesParametersFrame.ButtonGroup1.setExclusive (1)

        self.TracesParametersFrame.ButtonGroup1.Organizer = range (3)

        self.TracesParametersFrame.RadioButton11 = QRadioButton (self.TracesParametersFrame.ButtonGroup1)
        self.TracesParametersFrame.RadioButton11.setText (('Gauss'))
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10.addWidget (self.TracesParametersFrame.RadioButton11)
        self.TracesParametersFrame.RadioButton11.setChecked (1)
        self.connect (self.TracesParametersFrame.RadioButton11, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)
	
        self.TracesParametersFrame.RadioButton12 = QRadioButton (self.TracesParametersFrame.ButtonGroup1)
        self.TracesParametersFrame.RadioButton12.setText (('NSPCG'))
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10.addWidget (self.TracesParametersFrame.RadioButton12)
        self.connect (self.TracesParametersFrame.RadioButton12, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)

	
        self.TracesParametersFrame.RadioButton13 = QRadioButton (self.TracesParametersFrame.ButtonGroup1)
        self.TracesParametersFrame.RadioButton13.setText (('Slap'))
        self.TracesParametersFrame.ButtonGroup1.QVBoxLayout10.addWidget (self.TracesParametersFrame.RadioButton13)
        self.connect (self.TracesParametersFrame.RadioButton13, SIGNAL ('clicked ()'), self.TracesParametersFrame_Library_activate)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.TracesParametersFrame.QHGroupBox0 = QHGroupBox (self.TracesParametersFrame)
        self.TracesParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.TracesParametersFrame.mainLayout.addWidget (self.TracesParametersFrame.QHGroupBox0)

        self.TracesParametersFrame.QVBox01 = QVBox (self.TracesParametersFrame.QHGroupBox0)
        self.TracesParametersFrame.QVBox02 = QVBox (self.TracesParametersFrame.QHGroupBox0)
        self.TracesParametersFrame.QVBox03 = QVBox (self.TracesParametersFrame.QHGroupBox0)

        self.TracesParametersFrame.QVBox01.setMargin (0)
        self.TracesParametersFrame.QVBox01.setSpacing (5)
        self.TracesParametersFrame.QVBox02.setMargin (0)
        self.TracesParametersFrame.QVBox02.setSpacing (5)
        self.TracesParametersFrame.QVBox03.setMargin (0)
        self.TracesParametersFrame.QVBox03.setSpacing (5)

        self.TracesParametersFrame.PreconditionerLabel = QLabel ('Preconditioner', self.TracesParametersFrame.QVBox01)
        #self.TracesParametersFrame.PreconditionerLabel.resize (self.TracesParametersFrame.PreconditionerLabel.sizeHint ())

        self.TracesParametersFrame.AcceleratorLabel = QLabel ('Accelerator', self.TracesParametersFrame.QVBox01)
        #self.TracesParametersFrame.AcceleratorLabel.resize (self.TracesParametersFrame.AcceleratorLabel.sizeHint ())

        self.TracesParametersFrame.PreconditionerComboBox = QComboBox (self.TracesParametersFrame.QVBox03)
        #self.TracesParametersFrame.PreconditionerComboBox.setMinimumSize (120, 25)
        #self.TracesParametersFrame.PreconditionerComboBox.setMaximumSize (120, 25)
        #self.connect (self.TracesParametersFrame.PreconditionerComboBox, SIGNAL ('activated (int)'), self.TracesParametersFrame_PreconditionerComboBox_activate)
	
        self.TracesParametersFrame.AcceleratorComboBox = QComboBox (self.TracesParametersFrame.QVBox03)
        #self.TracesParametersFrame.AcceleratorComboBox.setMinimumSize (120, 25)
        #self.TracesParametersFrame.AcceleratorComboBox.setMaximumSize (120, 25)
        #self.connect (self.TracesParametersFrame.AcceleratorComboBox, SIGNAL ('activated (int)'), self.TracesParametersFrame_AcceleratorComboBox_activate)

	self.TracesParametersFrame.QHGroupBox0.setEnabled (0)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.TracesParametersFrame.QHGroupBox1 = QHGroupBox (self.TracesParametersFrame)
        self.TracesParametersFrame.QHGroupBox1.setMidLineWidth (0)
        self.TracesParametersFrame.mainLayout.addWidget (self.TracesParametersFrame.QHGroupBox1)

        self.TracesParametersFrame.QVBox11 = QVBox (self.TracesParametersFrame.QHGroupBox1)
        self.TracesParametersFrame.QVBox12 = QVBox (self.TracesParametersFrame.QHGroupBox1)
        self.TracesParametersFrame.QVBox13 = QVBox (self.TracesParametersFrame.QHGroupBox1)

        self.TracesParametersFrame.QVBox11.setMargin (0)
        self.TracesParametersFrame.QVBox11.setSpacing (5)
        self.TracesParametersFrame.QVBox12.setMargin (0)
        self.TracesParametersFrame.QVBox12.setSpacing (5)
        self.TracesParametersFrame.QVBox13.setMargin (0)
        self.TracesParametersFrame.QVBox13.setSpacing (5)

        self.TracesParametersFrame.ConvergenceCriterionLabel = QLabel ('Convergence Criterion', self.TracesParametersFrame.QVBox11)
        #self.TracesParametersFrame.ConvergenceCriterionLabel.resize (self.TracesParametersFrame.ConvergenceCriterionLabel.sizeHint ())

        self.TracesParametersFrame.MaxOfIterationsLabel = QLabel ('Max. of Iterations', self.TracesParametersFrame.QVBox11)
        #self.TracesParametersFrame.MaxOfIterationsLabel.resize (self.TracesParametersFrame.MaxOfIterationsLabel.sizeHint ())

        self.TracesParametersFrame.ConvergenceCriterionLineEdit = QLineEdit (self.TracesParametersFrame.QVBox13)
        self.TracesParametersFrame.ConvergenceCriterionLineEdit.setText ('1.e-14')
        #self.TracesParametersFrame.ConvergenceCriterionLineEdit.setMinimumSize (120, 25)
        #self.TracesParametersFrame.ConvergenceCriterionLineEdit.setMaximumSize (120, 25)

        self.TracesParametersFrame.MaxOfIterationsLineEdit = QLineEdit (self.TracesParametersFrame.QVBox13)
        self.TracesParametersFrame.MaxOfIterationsLineEdit.setText ('1000')
        #self.TracesParametersFrame.MaxOfIterationsLineEdit.setMinimumSize (120, 25)
        #self.TracesParametersFrame.MaxOfIterationsLineEdit.setMaximumSize (120, 25)

        self.TracesParametersFrame.QHGroupBox5 = QHGroupBox (self.TracesParametersFrame)
        self.TracesParametersFrame.mainLayout.addWidget (self.TracesParametersFrame.QHGroupBox5)
        self.TracesParametersFrame.QHGroupBox5.setMargin (10)
        self.TracesParametersFrame.QHGroupBox5.setMidLineWidth (0)

        self.TracesParametersFrame.OKPB = QPushButton ('OK', self.TracesParametersFrame.QHGroupBox5)
        self.TracesParametersFrame.CancelPB = QPushButton ('Cancel', self.TracesParametersFrame.QHGroupBox5)
        self.TracesParametersFrame.HelpPB = QPushButton ('Help', self.TracesParametersFrame.QHGroupBox5)
        self.TracesParametersFrame.OKPB.setFocus ()

        self.connect (self.TracesParametersFrame.OKPB, SIGNAL ('clicked ()'), self.TracesParametersFrame_ok)
        self.connect (self.TracesParametersFrame.CancelPB, SIGNAL ('clicked ()'), self.TracesParametersFrame_cancel)
        self.connect (self.TracesParametersFrame.HelpPB, SIGNAL ('clicked ()'), self.TracesParametersFrame_help)

        self.TracesParametersFrame_init ()

        self.TracesParametersFrame.show ()
	
    def TracesParametersFrame_init (self):
    
        global Traces_Parameters

        if Traces_Parameters ['library'] == 'gauss':
            self.TracesParametersFrame.RadioButton11.setChecked (1)
        elif Traces_Parameters ['library'] == 'nspcg':
            self.TracesParametersFrame.RadioButton12.setChecked (1)
        elif Traces_Parameters ['library'] == 'slap':
            self.TracesParametersFrame.RadioButton13.setChecked (1)

        self.TracesParametersFrame_Library_activate ()   
        
        if Traces_Parameters ['thetaScheme'] == 1:
            self.TracesParametersFrame.RadioButton21.setChecked (1)
        elif Traces_Parameters ['thetaScheme'] == 0:
            self.TracesParametersFrame.RadioButton22.setChecked (1)
        else:
            self.TracesParametersFrame.RadioButton23.setChecked (1)
        
        self.TracesParametersFrame.ConvergenceCriterionLineEdit.setText (str (Traces_Parameters ['tolSolver']))
        self.TracesParametersFrame.MaxOfIterationsLineEdit.setText (str (Traces_Parameters ['iterSolver']))

    def TracesParametersFrame_ok (self):

        global Traces_Parameters

        Traces_Parameters ['tolSolver'] = float (str (self.TracesParametersFrame.ConvergenceCriterionLineEdit.text ()))
        Traces_Parameters ['iterSolver'] = int (str (self.TracesParametersFrame.MaxOfIterationsLineEdit.text ()))

        # thetaScheme
        if self.TracesParametersFrame.RadioButton21.isChecked ():
            Traces_Parameters ['thetaScheme'] = 1
        elif self.TracesParametersFrame.RadioButton22.isChecked ():
            Traces_Parameters ['thetaScheme'] = 0
        elif self.TracesParametersFrame.RadioButton23.isChecked ():
            Traces_Parameters ['thetaScheme'] = 0.5
        else:
            pass
            
        # library
        if self.TracesParametersFrame.RadioButton11.isChecked ():
            Traces_Parameters ['library'] = 'gauss'
        elif self.TracesParametersFrame.RadioButton12.isChecked ():
            Traces_Parameters ['library'] = 'nspcg'
        elif self.TracesParametersFrame.RadioButton13.isChecked ():
            Traces_Parameters ['library'] = 'slap'
        else:
            pass

        if self.TracesParametersFrame.RadioButton11.isChecked ():
            Traces_Parameters ['accelerator']    = 'cg'
            Traces_Parameters ['preconditioner'] = 'NEUM'
        else:
            Traces_Parameters ['accelerator']    = str (self.TracesParametersFrame.AcceleratorComboBox.currentText ())
            Traces_Parameters ['preconditioner'] = str (self.TracesParametersFrame.PreconditionerComboBox.currentText ())

# debug_traces

        self.TracesParametersFrame.close ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def TracesParametersFrame_cancel (self):
        
        self.TracesParametersFrame.close ()
        
#------------------------------------------------------------------------------------------------------------------------------------------

    def TracesParametersFrame_help (self):

        self.Help ()
    """
    def Mt3dSolverParametersFrame_init (self):
        
        self.Mt3d_SolverParametersFrame.mxiterLineEdit.setText (str (Mt3d_mxiter))
        self.Mt3d_SolverParametersFrame.iter1LineEdit.setText (str (Mt3d_iter1))
        self.Mt3d_SolverParametersFrame.acclLineEdit.setText (str (Mt3d_accl))
        self.Mt3d_SolverParametersFrame.ccloseLineEdit.setText (str (Mt3d_cclose))

        if Mt3d_advection == 'UPWIND':
            self.RadioButton03.setChecked (1)
        elif Mt3d_advection == 'TVD':
            self.RadioButton01.setChecked (1)
        elif Mt3d_advection == 'Central':
            self.RadioButton02.setChecked (1)

        if Mt3d_ConjugateGradientPreconditioner == 'JACOBI':
            self.RadioButton11.setChecked (1)
        elif Mt3d_ConjugateGradientPreconditioner == 'SSOR':
            self.RadioButton12.setChecked (1)
        elif Mt3d_ConjugateGradientPreconditioner == 'MIC':      # Modified Incomplete Cholesky
            self.RadioButton13.setChecked (1)        

        self.Mt3d_SolverParametersFrame.OKPB.setFocus ()
    """
# debug_traces

    def TracesParametersFrame_Library_activate (self):
    
        # Library = "gauss"
	if self.TracesParametersFrame.RadioButton11.isOn ():
	    self.TracesParametersFrame.PreconditionerComboBox.clear ()
	    self.TracesParametersFrame.AcceleratorComboBox.clear ()
	    self.TracesParametersFrame.QHGroupBox0.setEnabled (0)
        
	# Library = "nspcg"
        elif self.TracesParametersFrame.RadioButton12.isOn ():
	    self.TracesParametersFrame.PreconditionerComboBox.clear ()
	    self.TracesParametersFrame.AcceleratorComboBox.clear ()
	    self.TracesParametersFrame.QHGroupBox0.setEnabled (1)

	    # Par rapport a imfscomponent.py, on a enleve les redondances: NEUM et NEU pour NEUMANN par exemple
	    # Liste originale: ['NEUM','DEGR','NEU','CHOL','JACO','SOR','IC','MIC','RICH','LSP']
	    NSPCG_Preconditioner_list = ['NEUMANN','CHOLESKY','JACOBI','SOR','IC','MIC','RICHARDSON','LSP']
	    for preconditioner in NSPCG_Preconditioner_list:
                self.TracesParametersFrame.PreconditionerComboBox.insertItem (preconditioner)

	    # Par rapport a imfscomponent.py, on a enleve les redondances: NEUM et NEU pour NEUMANN par exemple
	    # Liste originale: ['CONJ','CG','SRCG','SRSI','SOR','BASIC','NONE','ME', \
            #                   'BCGS','GMRE','ORTH','CGNR','LANC','LSQR','LEAS',    \
            #                   'ODIR','OMIN','ORES','IOM']
	    NSPCG_Accelerator_list = ['CG','SRCG','SRSI','SOR','BASIC','NONE','ME', \
                                      'BCGS','GMRE','ORTHOMIN','CGNR','LANC','LSQR','LEAS',    \
                                      'ORES','IOM']
            for accelerator in NSPCG_Accelerator_list:
                self.TracesParametersFrame.AcceleratorComboBox.insertItem (accelerator)

	# Library = "slap"
        elif self.TracesParametersFrame.RadioButton13.isOn ():
	    self.TracesParametersFrame.PreconditionerComboBox.clear ()
	    self.TracesParametersFrame.AcceleratorComboBox.clear ()
	    self.TracesParametersFrame.QHGroupBox0.setEnabled (1)
	    
	    Slap_Preconditioner_list = ['CHOLESKY','DIAG','ILU']
	    for preconditioner in Slap_Preconditioner_list:
                self.TracesParametersFrame.PreconditionerComboBox.insertItem (preconditioner)

	    # Par rapport a imfscomponent.py, on a enleve les redondances: NEUM et NEU pour NEUMANN par exemple
	    # Liste originale: ['BCG','BCGS','BICG','CONJ','CG','CGN','CGS','GMRE',       \ 
            #                   'JACO','JAC','GS','BASIC','NONE','IR','','OMIN','ORTHOMIN']
	    Slap_Accelerator_list = ['BCG','BCGS','BICG','CG','CGN','CGS','GMRE', \
                                     'JACOBI','GS','BASIC','NONE','ORTHOMIN']
            for accelerator in Slap_Accelerator_list:
                self.TracesParametersFrame.AcceleratorComboBox.insertItem (accelerator)
	        
    def TracesParametersFrame_PreconditionerComboBox_activate (self):
        pass
	


	
    def TracesParametersFrame_AcceleratorComboBox_activate (self):
    
        pass
        

###########################################################################################
##                                                                                       ##
##                    CHEMISTRY SOLVER PARAMETERS FRAME (BEGINNING)                      ##
##                                                                                       ##
###########################################################################################



    def ChemistryConvergenceParameters (self):

        self.ChemistryConvergenceParametersFrame = QFrame ()
        self.ChemistryConvergenceParametersFrame.setCaption ('Chemistry Solver Parameters')
        setPosition (self.ChemistryConvergenceParametersFrame)

        self.ChemistryConvergenceParametersFrame.mainLayout = QVBoxLayout (self.ChemistryConvergenceParametersFrame, 10,-1, "ChemistryConvergenceParametersFrame_mainLayout")
        self.ChemistryConvergenceParametersFrame.mainLayout.setMargin (Marge)
        self.ChemistryConvergenceParametersFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        ChemistryConvergenceParameters_comment = Comments ['Chemistry_Solver_Parameters']

        self.ChemistryConvergenceParametersFrame.QHGroupBoxA = QHGroupBox (self.ChemistryConvergenceParametersFrame)
        QToolTip.add (self.ChemistryConvergenceParametersFrame.QHGroupBoxA, ChemistryConvergenceParameters_comment)

        self.ChemistryConvergenceParametersFrame.QHGroupBoxA.setMargin (5)
        self.ChemistryConvergenceParametersFrame.QHGroupBoxA.setMidLineWidth (0)
        self.ChemistryConvergenceParametersFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.ChemistryConvergenceParametersFrame.mainLayout.addWidget (self.ChemistryConvergenceParametersFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.ChemistryConvergenceParametersFrame.QHGroupBox0 = QHGroupBox (self.ChemistryConvergenceParametersFrame)
        self.ChemistryConvergenceParametersFrame.QHGroupBox0.setMidLineWidth (0)
        self.ChemistryConvergenceParametersFrame.mainLayout.addWidget (self.ChemistryConvergenceParametersFrame.QHGroupBox0)

        self.ChemistryConvergenceParametersFrame.QVBox01 = QVBox (self.ChemistryConvergenceParametersFrame.QHGroupBox0)
        self.ChemistryConvergenceParametersFrame.QVBox02 = QVBox (self.ChemistryConvergenceParametersFrame.QHGroupBox0)
        self.ChemistryConvergenceParametersFrame.QVBox03 = QVBox (self.ChemistryConvergenceParametersFrame.QHGroupBox0)

        self.ChemistryConvergenceParametersFrame.QVBox01.setMargin (0)
        self.ChemistryConvergenceParametersFrame.QVBox01.setSpacing (5)
        self.ChemistryConvergenceParametersFrame.QVBox02.setMargin (0)
        self.ChemistryConvergenceParametersFrame.QVBox02.setSpacing (5)
        self.ChemistryConvergenceParametersFrame.QVBox03.setMargin (0)
        self.ChemistryConvergenceParametersFrame.QVBox03.setSpacing (5)

        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLabel = QLabel ('Number of Iterations', self.ChemistryConvergenceParametersFrame.QVBox01)
        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLabel.resize (self.ChemistryConvergenceParametersFrame.NumberOfIterationsLabel.sizeHint ())

        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLabel = QLabel ('Convergence Criterion', self.ChemistryConvergenceParametersFrame.QVBox01)
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLabel.resize (self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLabel.sizeHint ())

        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit = QLineEdit (self.ChemistryConvergenceParametersFrame.QVBox03)
        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setText (str (PhreeqC_NumberOfIterations))
        #self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setMinimumSize (120, 25)
        #self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setMaximumSize (120, 25)
        QToolTip.add (self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit, "Default Maximum Number of Iterations for\nNewton-Raphson convergence")

        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit = QLineEdit (self.ChemistryConvergenceParametersFrame.QVBox03)
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.setText (str (PhreeqC_ConvergenceCriterion))
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.setMinimumSize (120, 25)
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.setMaximumSize (120, 25)
        #QToolTip.add (self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit, "Convergence Criterion for the Algebraic System,\nnorm of the maximum is used")

#------------------------------------------------------------------------------------------------------------------------------------------
# debug_chemistry

        #self.ChemistryConvergenceParametersFrame.QHGroupBox3 = QHGroupBox ('Specific Parameters (KNOBS)', self.ChemistryConvergenceParametersFrame)
        #self.ChemistryConvergenceParametersFrame.QHGroupBox3.setMidLineWidth (0)
        #self.ChemistryConvergenceParametersFrame.mainLayout.addWidget (self.ChemistryConvergenceParametersFrame.QHGroupBox3)

        #self.ChemistryConvergenceParametersFrame.SpecificParametersTextEdit = QTextEdit (self.ChemistryConvergenceParametersFrame.QHGroupBox3)

#------------------------------------------------------------------------------------------------------------------------------------------




#------------------------------------------------------------------------------------------------------------------------------------------
# optional parameters

        self.ChemistryConvergenceParametersFrame.QHGroupBox4 = QHGroupBox ('Optional Parameters', self.ChemistryConvergenceParametersFrame)
        self.ChemistryConvergenceParametersFrame.QHGroupBox4.setMidLineWidth (0)
        self.ChemistryConvergenceParametersFrame.mainLayout.addWidget (self.ChemistryConvergenceParametersFrame.QHGroupBox4)
	
	self.ChemistryConvergenceParametersFrame.QVBox41 = QVBox (self.ChemistryConvergenceParametersFrame.QHGroupBox4)
	self.ChemistryConvergenceParametersFrame.QVBox42 = QVBox (self.ChemistryConvergenceParametersFrame.QHGroupBox4)
	
	self.ChemistryConvergenceParametersFrame.QVBox41.setMargin (0)
	self.ChemistryConvergenceParametersFrame.QVBox41.setSpacing (5)
	self.ChemistryConvergenceParametersFrame.QVBox42.setMargin (0)
	self.ChemistryConvergenceParametersFrame.QVBox42.setSpacing (5)
	
	self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton = QRadioButton ('pe_step_size', self.ChemistryConvergenceParametersFrame.QVBox41)
        self.connect (self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton, SIGNAL ('clicked ()'), self.pe_step_size_activated)
	
	self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit = QLineEdit (self.ChemistryConvergenceParametersFrame.QVBox42)

#------------------------------------------------------------------------------------------------------------------------------------------

        self.ChemistryConvergenceParametersFrame.QHGroupBox1 = QHGroupBox (self.ChemistryConvergenceParametersFrame)
        self.ChemistryConvergenceParametersFrame.QHGroupBox1.setMidLineWidth (0)
        self.ChemistryConvergenceParametersFrame.mainLayout.addWidget (self.ChemistryConvergenceParametersFrame.QHGroupBox1)

        self.ChemistryConvergenceParametersFrame.OKPB = QPushButton ('OK', self.ChemistryConvergenceParametersFrame.QHGroupBox1)
        self.ChemistryConvergenceParametersFrame.OKPB.setFocus ()
        self.ChemistryConvergenceParametersFrame.DefaultPB = QPushButton ('&Default', self.ChemistryConvergenceParametersFrame.QHGroupBox1)
        self.ChemistryConvergenceParametersFrame.ClearPB = QPushButton ('C&lear', self.ChemistryConvergenceParametersFrame.QHGroupBox1)
        self.ChemistryConvergenceParametersFrame.CancelPB = QPushButton ('&Cancel', self.ChemistryConvergenceParametersFrame.QHGroupBox1)
        self.ChemistryConvergenceParametersFrame.HelpPB = QPushButton ('&Help', self.ChemistryConvergenceParametersFrame.QHGroupBox1)

        self.connect (self.ChemistryConvergenceParametersFrame.OKPB, SIGNAL('clicked()'), self.ChemistryConvergenceParametersFrame_ok)
        self.connect (self.ChemistryConvergenceParametersFrame.DefaultPB, SIGNAL('clicked()'), self.ChemistryConvergenceParametersFrame_default)
        self.connect (self.ChemistryConvergenceParametersFrame.ClearPB, SIGNAL('clicked()'), self.ChemistryConvergenceParametersFrame_clear)      
        self.connect (self.ChemistryConvergenceParametersFrame.CancelPB, SIGNAL('clicked()'), self.ChemistryConvergenceParametersFrame_cancel)
        self.connect (self.ChemistryConvergenceParametersFrame.HelpPB, SIGNAL('clicked()'), self.ChemistryConvergenceParametersFrame_help)
                    
        QToolTip.add (self.ChemistryConvergenceParametersFrame.DefaultPB, "Press CTRL+D for Default Parameters")
        QToolTip.add (self.ChemistryConvergenceParametersFrame.ClearPB, "Press CTRL+l to Clear all Parameters")
        QToolTip.add (self.ChemistryConvergenceParametersFrame.CancelPB, "Press CTRL+C to Close this Window")
        QToolTip.add (self.ChemistryConvergenceParametersFrame.HelpPB, "Press CTRL+H for Help")
        self.ChemistryConvergenceParametersFrame.DefaultPB.setAccel(Qt.CTRL + Qt.Key_D)
        self.ChemistryConvergenceParametersFrame.ClearPB.setAccel(Qt.CTRL + Qt.Key_L)
        self.ChemistryConvergenceParametersFrame.CancelPB.setAccel(Qt.CTRL + Qt.Key_C)
        self.ChemistryConvergenceParametersFrame.HelpPB.setAccel(Qt.CTRL + Qt.Key_H)     
                   
        self.ChemistryConvergenceParametersFrame_init ()

        self.ChemistryConvergenceParametersFrame.show ()

#------------------------------------------------------------------------------------------------------------------------------------------

    def ChemistryConvergenceParametersFrame_ok (self):

        global PhreeqC_NumberOfIterations
	global PhreeqC_pe_step_size_list
        #global PhreeqC_ConvergenceCriterion
        #global PhreeqC_KNOBS
        
        PhreeqC_NumberOfIterations = int (str (self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.text ()))
	
	if self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.isChecked ():
	    PhreeqC_pe_step_size_list [0] = '1'
	    PhreeqC_pe_step_size_list [1] = str (self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.text ())
	else:
	    PhreeqC_pe_step_size_list [0] = '0'
	    PhreeqC_pe_step_size_list [1] = ''
	    
	#PhreeqC_ConvergenceCriterion = float (str (self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.text ()))
        #PhreeqC_KNOBS = str (self.ChemistryConvergenceParametersFrame.SpecificParametersTextEdit.text())
	#PhreeqC_KNOBS_list = []
	#PhreeqC_KNOBS_list.append (PhreeqC_KNOBS)

        self.ChemistryConvergenceParametersFrame.close ()

    def ChemistryConvergenceParametersFrame_init (self):

        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setText (str (PhreeqC_NumberOfIterations))
	if PhreeqC_pe_step_size_list [0] == '0':
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.setChecked (0)
	else: 
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.setChecked (1)
	self.pe_step_size_activated ()

        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.setText (str (PhreeqC_ConvergenceCriterion))
        #self.ChemistryConvergenceParametersFrame.SpecificParametersTextEdit.setText(str (PhreeqC_KNOBS))
        self.ChemistryConvergenceParametersFrame.OKPB.setFocus ()

    def ChemistryConvergenceParametersFrame_default (self):

        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setText (str (PhreeqC_Default_NumberOfIterations))
	if PhreeqC_Default_pe_step_size_list [0] == '0':
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.setChecked (0)
	else: 
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.setChecked (1)
	self.pe_step_size_activated ()
	
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.setText (str (PhreeqC_Default_ConvergenceCriterion))
        #self.ChemistryConvergenceParametersFrame.SpecificParametersTextEdit.setText(str (PhreeqC_Default_KNOBS))
        self.ChemistryConvergenceParametersFrame.OKPB.setFocus ()

    def ChemistryConvergenceParametersFrame_clear (self):

        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.clear ()
	self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.setChecked (0)
	self.pe_step_size_activated ()
        #self.ChemistryConvergenceParametersFrame.ConvergenceCriterionLineEdit.clear ()
        #self.ChemistryConvergenceParametersFrame.SpecificParametersTextEdit.clear ()
        self.ChemistryConvergenceParametersFrame.NumberOfIterationsLineEdit.setFocus ()

    def ChemistryConvergenceParametersFrame_cancel (self):

        self.ChemistryConvergenceParametersFrame.close ()

    def ChemistryConvergenceParametersFrame_help (self):

        self.Help ()

    def pe_step_size_activated (self):
        
	if self.ChemistryConvergenceParametersFrame.pe_step_sizeRadiobutton.isChecked ():
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.setEnabled (1)
	    if str (PhreeqC_pe_step_size_list [1]) != '':
	        self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.setText (str (PhreeqC_pe_step_size_list [1]))
	        self.ChemistryConvergenceParametersFrame.OKPB.setFocus ()
            else:
	        self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.setFocus ()
	else:
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.setEnabled (0)
	    self.ChemistryConvergenceParametersFrame.pe_step_sizeLineEdit.clear ()
            self.ChemistryConvergenceParametersFrame.OKPB.setFocus ()
	

###########################################################################################
##                                                                                       ##
##                       CHEMISTRY SOLVER PARAMETERS FRAME (END)                         ##
##                                                                                       ##
###########################################################################################






###########################################################################################
##                                                                                       ##
##                            ITERATE FRAME (BEGINNING)                                  ##
##                                                                                       ##
###########################################################################################



    def iterate (self):

        global Iterate_Algorithm

        self.IterateFrame = QFrame ()
        self.IterateFrame.setCaption ('Iterate')
        setPosition (self.IterateFrame)

        self.IterateFrame.mainLayout = QVBoxLayout (self.IterateFrame, 10, -1, "IterateFrame_mainLayout")
        self.IterateFrame.mainLayout.setMargin (Marge)
        self.IterateFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Iterate_comment = Comments ['Iterate']

        self.IterateFrame.QHGroupBoxA = QHGroupBox (self.IterateFrame)
        QToolTip.add (self.IterateFrame.QHGroupBoxA, Iterate_comment)

        self.IterateFrame.QHGroupBoxA.setMargin (5)
        self.IterateFrame.QHGroupBoxA.setMidLineWidth (0)
        self.IterateFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.IterateFrame.mainLayout.addWidget (self.IterateFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.IterateFrame.QHBox0 = QHBox (self.IterateFrame)
        self.IterateFrame.QHBox0.setMargin (0)
        self.IterateFrame.QHBox0.setMidLineWidth (0)
        self.IterateFrame.mainLayout.addWidget (self.IterateFrame.QHBox0)
            
        self.IterateFrame.QButtonGroup1 = QButtonGroup ("Algorithm", self.IterateFrame.QHBox0, "IterateFrame_QButtonGroup1" )
        
        self.IterateFrame.QVBoxLayout10 = QVBoxLayout (self.IterateFrame.QButtonGroup1, 10)
        self.IterateFrame.QVBoxLayout10.setMargin (15)
        self.IterateFrame.QVBoxLayout10.setSpacing (10)

        self.IterateFrame.Organizer = range (4)

        self.IterateFrame.Organizer[0] = QRadioButton (self.IterateFrame.QButtonGroup1)
        self.IterateFrame.Organizer[0].setText("One Step")
        self.IterateFrame.Organizer[0].setEnabled (1)
        self.connect (self.IterateFrame.Organizer[0], SIGNAL ('clicked ()'), self.Iterate1Step_activate)
        self.IterateFrame.QVBoxLayout10.addWidget (self.IterateFrame.Organizer[0])
              
        self.IterateFrame.Organizer[1] = QRadioButton (self.IterateFrame.QButtonGroup1)
        self.IterateFrame.Organizer[1].setText("CC")
        self.IterateFrame.Organizer[1].setEnabled (1)
        self.connect (self.IterateFrame.Organizer[1], SIGNAL ('clicked ()'), self.Picard_activate)
        self.IterateFrame.QVBoxLayout10.addWidget (self.IterateFrame.Organizer[1])

        self.IterateFrame.Organizer[2] = QRadioButton (self.IterateFrame.QButtonGroup1)
        self.IterateFrame.Organizer[2].setText("TC")
        self.IterateFrame.Organizer[2].setEnabled (0)
        self.connect (self.IterateFrame.Organizer[2], SIGNAL ('clicked ()'), self.Picard_activate)
        self.IterateFrame.QVBoxLayout10.addWidget (self.IterateFrame.Organizer[2])

        self.IterateFrame.Organizer[3] = QRadioButton (self.IterateFrame.QButtonGroup1)
        self.IterateFrame.Organizer[3].setText("TT")
        self.IterateFrame.Organizer[3].setEnabled (0)
        self.connect (self.IterateFrame.Organizer[3], SIGNAL ('clicked ()'), self.Picard_activate)
        self.IterateFrame.QVBoxLayout10.addWidget (self.IterateFrame.Organizer[3])

        self.IterateFrame.QButtonGroup1.adjustSize ()
        self.IterateFrame.QVBoxLayout10.activate()

        if Iterate_Algorithm == 'One_Step':
            self.IterateFrame.Organizer[0].setChecked (1)
        elif  Iterate_Algorithm == 'CC':
            self.IterateFrame.Organizer[1].setChecked (1)
        elif  Iterate_Algorithm == 'TC':
            self.IterateFrame.Organizer[2].setChecked (1)
        elif  Iterate_Algorithm == 'TT':
            self.IterateFrame.Organizer[3].setChecked (1)

#----------------------------------------------------------------------------------------------       

        self.IterateFrame.QHGroupBox1 = QHGroupBox ('', self.IterateFrame)
        self.IterateFrame.QHGroupBox1.setMargin (10)
        self.IterateFrame.QHGroupBox1.setMidLineWidth (0)
        self.IterateFrame.mainLayout.addWidget (self.IterateFrame.QHGroupBox1)

        self.IterateFrame.QHBox11 = QHBox (self.IterateFrame.QHGroupBox1)
        self.IterateFrame.QHBox11.setMargin (0)
        self.IterateFrame.QHBox11.setSpacing (15)        

        self.IterateFrame.QVBox111 = QVBox (self.IterateFrame.QHBox11)
        self.IterateFrame.QVBox112 = QVBox (self.IterateFrame.QHBox11)
        self.IterateFrame.QVBox113 = QVBox (self.IterateFrame.QHBox11)
        
        self.IterateFrame.QVBox111.setMargin (0)
        self.IterateFrame.QVBox111.setSpacing (5)
        self.IterateFrame.QVBox112.setMargin (0)
        self.IterateFrame.QVBox112.setSpacing (5)
        self.IterateFrame.QVBox113.setMargin (0)
        self.IterateFrame.QVBox113.setSpacing (5)
              
        self.IterateFrame.InitialTimeLabel = QLabel ("Initial Time in", self.IterateFrame.QVBox111)
        self.IterateFrame.InitialTimeLabel.resize (self.IterateFrame.InitialTimeLabel.sizeHint ())

        self.IterateFrame.UnitLabel = QLabel (str (Time_Unit), self.IterateFrame.QVBox112)
        self.IterateFrame.UnitLabel.resize (self.IterateFrame.UnitLabel.sizeHint ())

        self.IterateFrame.InitialTimeLineEdit = QLineEdit (self.IterateFrame.QVBox113)
        self.IterateFrame.InitialTimeLineEdit.setMinimumSize (135, 25)
        self.IterateFrame.InitialTimeLineEdit.setMaximumSize (135, 25)
        self.IterateFrame.InitialTimeLineEdit.setText (str (Iterate_InitialTime))

        self.IterateFrame.InitialTimeStepSizeLabel = QLabel ("Initial Time Step Size in", self.IterateFrame.QVBox111)
        self.IterateFrame.InitialTimeStepSizeLabel.resize (self.IterateFrame.InitialTimeStepSizeLabel.sizeHint ())

        self.IterateFrame.UnitLabel2 = QLabel (str (Time_Unit), self.IterateFrame.QVBox112)
        self.IterateFrame.UnitLabel2.resize (self.IterateFrame.UnitLabel2.sizeHint ())

        self.IterateFrame.InitialTimeStepSizeLineEdit = QLineEdit (self.IterateFrame.QVBox113)
        self.IterateFrame.InitialTimeStepSizeLineEdit.setMinimumSize (135, 25)
        self.IterateFrame.InitialTimeStepSizeLineEdit.setMaximumSize (135, 25)
        self.IterateFrame.InitialTimeStepSizeLineEdit.setText (str (Iterate_InitialTimeStepSize))

        self.IterateFrame.SimulationTimeLabel = QLabel ("Simulation Time in", self.IterateFrame.QVBox111)
        self.IterateFrame.SimulationTimeLabel.resize (self.IterateFrame.SimulationTimeLabel.sizeHint ())

        self.IterateFrame.UnitLabel3 = QLabel (str (Time_Unit), self.IterateFrame.QVBox112)
        self.IterateFrame.UnitLabel3.resize (self.IterateFrame.UnitLabel3.sizeHint ())

        self.IterateFrame.SimulationTimeLineEdit = QLineEdit (self.IterateFrame.QVBox113)
        self.IterateFrame.SimulationTimeLineEdit.setMinimumSize (135, 25)
        self.IterateFrame.SimulationTimeLineEdit.setMaximumSize (135, 25)
        self.IterateFrame.SimulationTimeLineEdit.setText (str (Iterate_SimulationTime))

        self.IterateFrame.QHGroupBox1.setEnabled (1)
        
#-------------------------------------------------------------------------------------------------------------------------------------

        self.IterateFrame.QHGroupBox2 = QHGroupBox ("CC, TC or TT Algorithm", self.IterateFrame)
        self.IterateFrame.QHGroupBox2.setMargin (5)
        self.IterateFrame.QHGroupBox2.setMidLineWidth (0)
        self.IterateFrame.mainLayout.addWidget (self.IterateFrame.QHGroupBox2)
       	
	self.IterateFrame.QVBox20 = QVBox (self.IterateFrame.QHGroupBox2)
        self.IterateFrame.QVBox20.setMargin (0)
        self.IterateFrame.QVBox20.setSpacing (5)        	
	
	self.IterateFrame.QHBox21 = QHBox (self.IterateFrame.QVBox20)
        self.IterateFrame.QHBox21.setMargin (0)
        self.IterateFrame.QHBox21.setSpacing (5)        

        self.IterateFrame.QVBox210 = QVBox (self.IterateFrame.QHBox21)
        self.IterateFrame.QVBox211 = QVBox (self.IterateFrame.QHBox21)
        self.IterateFrame.QVBox212 = QVBox (self.IterateFrame.QHBox21)
        self.IterateFrame.QHBox213 = QHBox (self.IterateFrame.QVBox20)
        
        self.IterateFrame.QVBox210.setMargin (0)
        self.IterateFrame.QVBox210.setSpacing (5)
        self.IterateFrame.QVBox211.setMargin (0)
        self.IterateFrame.QVBox211.setSpacing (5)
        self.IterateFrame.QVBox212.setMargin (0)
        self.IterateFrame.QVBox212.setSpacing (5)
        self.IterateFrame.QHBox213.setMargin (0)
        self.IterateFrame.QHBox213.setSpacing (5)
               
        self.IterateFrame.MinTimeStepLabel = QLabel ("Minimum Time Step Size in "+str (Time_Unit), self.IterateFrame.QVBox210)
        self.IterateFrame.MinTimeStepLabel.resize (self.IterateFrame.MinTimeStepLabel.sizeHint ())

        self.IterateFrame.MinTimeStepLineEdit = QLineEdit (self.IterateFrame.QVBox212)
        self.IterateFrame.MinTimeStepLineEdit.setMinimumSize (90, 25)
        self.IterateFrame.MinTimeStepLineEdit.setMaximumSize (90, 25)
        self.IterateFrame.MinTimeStepLineEdit.setText (str (Iterate_MinTimeStep))

        self.IterateFrame.MaxTimeStepLabel = QLabel ("Maximum Time Step Size in "+str (Time_Unit), self.IterateFrame.QVBox210)
        self.IterateFrame.MaxTimeStepLabel.resize (self.IterateFrame.MaxTimeStepLabel.sizeHint ())

        self.IterateFrame.MaxTimeStepLineEdit = QLineEdit (self.IterateFrame.QVBox212)
        self.IterateFrame.MaxTimeStepLineEdit.setMinimumSize (90, 25)
        self.IterateFrame.MaxTimeStepLineEdit.setMaximumSize (90, 25)
        self.IterateFrame.MaxTimeStepLineEdit.setText (str (Iterate_MaxTimeStep))

        self.IterateFrame.IterationTargetNumberForThePicardLabel = QLabel ("Iteration Target Number For The Picard", self.IterateFrame.QVBox210)
        self.IterateFrame.IterationTargetNumberForThePicardLabel.resize (self.IterateFrame.IterationTargetNumberForThePicardLabel.sizeHint ())

        self.IterateFrame.IterationTargetNumberForThePicardLineEdit = QLineEdit (self.IterateFrame.QVBox212)
        self.IterateFrame.IterationTargetNumberForThePicardLineEdit.setMinimumSize (90, 25)
        self.IterateFrame.IterationTargetNumberForThePicardLineEdit.setMaximumSize (90, 25)
        self.IterateFrame.IterationTargetNumberForThePicardLineEdit.setText (str (Iterate_IterationTargetNumberForThePicard))

        self.IterateFrame.MaxOfIterationsForThePicardLabel = QLabel ("Max. of Iterations for the Picard", self.IterateFrame.QVBox210)
        self.IterateFrame.MaxOfIterationsForThePicardLabel.resize (self.IterateFrame.MaxOfIterationsForThePicardLabel.sizeHint ())

        self.IterateFrame.MaxOfIterationsForThePicardLineEdit = QLineEdit (self.IterateFrame.QVBox212)
        self.IterateFrame.MaxOfIterationsForThePicardLineEdit.setMinimumSize (90, 25)
        self.IterateFrame.MaxOfIterationsForThePicardLineEdit.setMaximumSize (90, 25)
        self.IterateFrame.MaxOfIterationsForThePicardLineEdit.setText (str (Iterate_MaxOfIterationsForThePicard))

        self.IterateFrame.CouplingPrecisionLabel = QLabel ("Coupling Precision", self.IterateFrame.QVBox210)
        self.IterateFrame.CouplingPrecisionLabel.resize (self.IterateFrame.CouplingPrecisionLabel.sizeHint ())

        self.IterateFrame.CouplingPrecisionLineEdit = QLineEdit (self.IterateFrame.QVBox212)
        self.IterateFrame.CouplingPrecisionLineEdit.setMinimumSize (90, 25)
        self.IterateFrame.CouplingPrecisionLineEdit.setMaximumSize (90, 25)
        self.IterateFrame.CouplingPrecisionLineEdit.setText (str (Iterate_CouplingPrecision))        

        self.IterateFrame.RelaxationFactorsLabel = QLabel ("Relaxation Factors:  ", self.IterateFrame.QHBox213)
        self.IterateFrame.RelaxationFactorsLabel.resize (self.IterateFrame.RelaxationFactorsLabel.sizeHint ())

        self.IterateFrame.MinLabel = QLabel ("Under", self.IterateFrame.QHBox213)
        self.IterateFrame.MinLabel.resize (self.IterateFrame.MinLabel.sizeHint ())

        self.IterateFrame.MinLineEdit = QLineEdit (self.IterateFrame.QHBox213)
        self.IterateFrame.MinLineEdit.setText (str (Iterate_RelaxationMinFactor))
        self.IterateFrame.MinLineEdit.setMinimumSize (50, 25)
        self.IterateFrame.MinLineEdit.setMaximumSize (50, 25)

        self.IterateFrame.MaxLabel = QLabel ("   Over", self.IterateFrame.QHBox213)
        self.IterateFrame.MaxLabel.resize (self.IterateFrame.MaxLabel.sizeHint ())

        self.IterateFrame.MaxLineEdit = QLineEdit (self.IterateFrame.QHBox213)
        self.IterateFrame.MaxLineEdit.setText (str (Iterate_RelaxationMaxFactor))
        self.IterateFrame.MaxLineEdit.setMinimumSize (50, 25)
        self.IterateFrame.MaxLineEdit.setMaximumSize (50, 25)
     
        if Iterate_Algorithm == 'One_Step':
            self.IterateFrame.Organizer[0].setChecked (1)
	    self.IterateFrame.QHGroupBox2.setEnabled (0)
        elif  Iterate_Algorithm == 'CC':
            self.IterateFrame.Organizer[1].setChecked (1)
	    self.IterateFrame.QHGroupBox2.setEnabled (1)
        elif  Iterate_Algorithm == 'TC':
            self.IterateFrame.Organizer[2].setChecked (1)
	    self.IterateFrame.QHGroupBox2.setEnabled (1)
        elif  Iterate_Algorithm == 'TT':
            self.IterateFrame.Organizer[3].setChecked (1)
	    self.IterateFrame.QHGroupBox2.setEnabled (1)
    
#--------------------------------------------------------------------------------------------------------------------------------------

        self.IterateFrame.QHGroupBox4 = QHGroupBox (self.IterateFrame)
        self.IterateFrame.QHGroupBox4.setMargin (5)
        self.IterateFrame.QHGroupBox4.setMidLineWidth (0)
        self.IterateFrame.mainLayout.addWidget (self.IterateFrame.QHGroupBox4)

        self.IterateFrame.IteratePB = QPushButton ('Iterate', self.IterateFrame.QHGroupBox4)
        self.IterateFrame.IteratePB.setFocus ()
        self.IterateFrame.CancelPB = QPushButton ('Cancel', self.IterateFrame.QHGroupBox4)
        self.IterateFrame.HelpPB = QPushButton ('&Help', self.IterateFrame.QHGroupBox4)           

        self.connect (self.IterateFrame.IteratePB, SIGNAL ('clicked ()'), self.IterateFrame_iterate)
        self.connect (self.IterateFrame.CancelPB, SIGNAL ('clicked ()'), self.IterateFrame_cancel)
        self.connect (self.IterateFrame.HelpPB, SIGNAL ('clicked ()'), self.IterateFrame_help)

#-------------------------------------------------------------------------------------------------------------------------------------

        self.IterateFrame.show ()

#-------------------------------------------------------------------------------------------------------------------------------------

# debug_iterate


    def IterateFrame_iterate (self):

        global Iterate_Algorithm

        global Iterate_InitialTime
        global Iterate_InitialTimeStepSize
        global Iterate_SimulationTime

        global Iterate_MinTimeStep
        global Iterate_MaxTimeStep
        global Iterate_IterationTargetNumberForThePicard
        global Iterate_MaxOfIterationsForThePicard
        global Iterate_CouplingPrecision
        global Iterate_RelaxationMinFactor
        global Iterate_RelaxationMaxFactor        
        
	ok = 1
	if self.IterateFrame.Organizer[0].isChecked ():
            Iterate_Algorithm = 'One_Step'            
        elif self.IterateFrame.Organizer[1].isChecked ():
            Iterate_Algorithm = 'CC'
        elif self.IterateFrame.Organizer[2].isChecked ():
            Iterate_Algorithm = 'TC'
        elif self.IterateFrame.Organizer[3].isChecked ():
            Iterate_Algorithm = 'TT'
	else:
	    pass

        try:
            Iterate_InitialTime = eval (str (self.IterateFrame.InitialTimeLineEdit.text ()))
	except:
	    self.IterateFrame.InitialTimeMB = QMessageBox()
	    self.IterateFrame.InitialTimeMB.setCaption ('Error')
	    self.IterateFrame.InitialTimeMB.setText ('The initial time must be an integer or a float (usually set to 0.0).\nYou have entered \"'+str (self.IterateFrame.InitialTimeLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.InitialTimeMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.InitialTimeMB.show ()
	    self.IterateFrame.InitialTimeLineEdit.setFocus ()
	    ok = 0
        try:
            Iterate_InitialTimeStepSize = eval (str (self.IterateFrame.InitialTimeStepSizeLineEdit.text ()))
	except:
	    self.IterateFrame.InitialTimeStepMB = QMessageBox()
	    self.IterateFrame.InitialTimeStepMB.setCaption ('Error')
	    self.IterateFrame.InitialTimeStepMB.setText ('The initial time step must be an integer or a float.\nYou have entered \"'+str (self.IterateFrame.InitialTimeStepSizeLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.InitialTimeStepMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.InitialTimeStepMB.show ()
	    self.IterateFrame.InitialTimeStepSizeLineEdit.setFocus ()
	    ok = 0
        try:
	    Iterate_SimulationTime = eval (str (self.IterateFrame.SimulationTimeLineEdit.text ()))
	#except (NameError, SyntaxError, AttributeError), e:
	except:
	    self.IterateFrame.SimulationTimeMB = QMessageBox()
	    self.IterateFrame.SimulationTimeMB.setCaption ('Error')
	    self.IterateFrame.SimulationTimeMB.setText ('The simulation time must be an integer or a float.\nYou have entered \"'+str (self.IterateFrame.SimulationTimeLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.SimulationTimeMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.SimulationTimeMB.show ()
	    self.IterateFrame.SimulationTimeLineEdit.setFocus ()
	    ok = 0
	if Iterate_SimulationTime >= Iterate_InitialTime:
	    pass
	else:
	    self.IterateFrame.TimeMB1 = QMessageBox()
	    self.IterateFrame.TimeMB1.setCaption ('Error')
	    self.IterateFrame.TimeMB1.setText ('The simulation time must be superior than the initial time.\nPlease modify it.')
	    self.IterateFrame.TimeMB1.setIcon (QMessageBox.Critical)
	    self.IterateFrame.TimeMB1.show ()
	    self.IterateFrame.SimulationTimeLineEdit.setFocus ()
	    ok = 0
	if Iterate_SimulationTime >= Iterate_InitialTimeStepSize:
	    pass
	else:
	    self.IterateFrame.TimeMB2 = QMessageBox()
	    self.IterateFrame.TimeMB2.setCaption ('Error')
	    self.IterateFrame.TimeMB2.setText ('The simulation time must be superior than the initial time step.\nPlease modify it.')
	    self.IterateFrame.TimeMB2.setIcon (QMessageBox.Critical)
	    self.IterateFrame.TimeMB2.show ()
	    self.IterateFrame.SimulationTimeLineEdit.setFocus ()
	    ok = 0



        Iterate_MinTimeStep = str (self.IterateFrame.MinTimeStepLineEdit.text ())
        Iterate_MaxTimeStep = str (self.IterateFrame.MaxTimeStepLineEdit.text ())

        
	
        try:
	    Iterate_IterationTargetNumberForThePicard = int (str (self.IterateFrame.IterationTargetNumberForThePicardLineEdit.text ()))
	except:
	    self.IterateFrame.IterationTargetNumberForThePicardMB = QMessageBox()
	    self.IterateFrame.IterationTargetNumberForThePicardMB.setCaption ('Error')
	    self.IterateFrame.IterationTargetNumberForThePicardMB.setText ('The iteration target number for the Picard must be an integer.\nYou have entered \"'+str (self.IterateFrame.IterationTargetNumberForThePicardLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.IterationTargetNumberForThePicardMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.IterationTargetNumberForThePicardMB.show ()
	    self.IterateFrame.IterationTargetNumberForThePicardLineEdit.setFocus ()
	    ok = 0
        try:
            Iterate_MaxOfIterationsForThePicard = int (str (self.IterateFrame.MaxOfIterationsForThePicardLineEdit.text ()))
	except:
	    self.IterateFrame.MaxOfIterationsForThePicardMB = QMessageBox()
	    self.IterateFrame.MaxOfIterationsForThePicardMB.setCaption ('Error')
	    self.IterateFrame.MaxOfIterationsForThePicardMB.setText ('The max. of iterations for the Picard must be an integer.\nYou have entered \"'+str (self.IterateFrame.MaxOfIterationsForThePicardLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.MaxOfIterationsForThePicardMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.MaxOfIterationsForThePicardMB.show ()
	    self.IterateFrame.MaxOfIterationsForThePicardLineEdit.setFocus ()
	    ok = 0        
	if Iterate_MaxOfIterationsForThePicard >= Iterate_IterationTargetNumberForThePicard:
	    pass
	else:
	    self.IterateFrame.PicardMB = QMessageBox()
	    self.IterateFrame.PicardMB.setCaption ('Error')
	    self.IterateFrame.PicardMB.setText ('The max. of iterations for the Picard must be superior\nthan the iteration target number.\nYou have entered \"'+str (self.IterateFrame.MaxOfIterationsForThePicardLineEdit.text ())+'\" and \"'+str (self.IterateFrame.IterationTargetNumberForThePicardLineEdit.text ())+'\".\nPlease modify it.')
	    self.IterateFrame.PicardMB.setIcon (QMessageBox.Critical)
	    self.IterateFrame.PicardMB.show ()
	    self.IterateFrame.IterationTargetNumberForThePicardLineEdit.setFocus ()
	    ok = 0
        


        Iterate_CouplingPrecision = str (self.IterateFrame.CouplingPrecisionLineEdit.text ())
        Iterate_RelaxationMinFactor = str (self.IterateFrame.MinLineEdit.text ())
        Iterate_RelaxationMaxFactor = str (self.IterateFrame.MaxLineEdit.text ())

        if ok:
	    self.IterateFrame.close ()
            self.exe ()
        else:
	    pass


    def IterateFrame_cancel (self):

        self.IterateFrame.close ()

    def IterateFrame_help (self):

        self.Help ()

    def Picard_activate (self):

        self.IterateFrame.QHGroupBox2.setEnabled (1)
        self.IterateFrame.QHGroupBox1.setEnabled (1)

    def Iterate1Step_activate (self):

        self.IterateFrame.QHGroupBox2.setEnabled (0)
        self.IterateFrame.QHGroupBox1.setEnabled (1)

    

###########################################################################################
##                                                                                       ##
##                               ITERATE FRAME (END)                                     ##
##                                                                                       ##
###########################################################################################













#----------------------------------------------------------------------------------------------
#  functions
#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#  Cas test sur Modflow (beginning)
#----------------------------------------------------------------------------------------------

# debug_run

    def exe_hydraulics (self):
    
        global Mesh_list_InJ
        global Solver 
        global mineralEquilibrium_list

        hydraulics_filename = './'+str (Title)+'_hydraulics.py'
        #try:
        #    f = open (hydraulics_filename, 'w')
        f = open (hydraulics_filename, 'w')

        f.write ('\n')
        f.write ('\n')
        f.write ('\nfrom structuredmesh import *')
        f.write ('\nfrom ModflowSaturatedHydrow import *')
        f.write ('\nfrom study import *')
        f.write ('\nfrom material import Material')
        f.write ('\nfrom physicalquantities import Permeability, Head, Velocity')
        f.write ('\nfrom commonmodel import Region')
        f.write ('\nfrom commonmodel import InitialCondition')
        f.write ('\nfrom typechecktools import verifyClass')
        f.write ('\nfrom saturatedhydraulicproblem import BoundaryCondition')
        f.write ('\nfrom tensors import Tensor2D')
	f.write ('\nfrom datamodel import Vector')
        f.write ('\n')
        f.write ('\n')

        # Calcul de nx et ny

        nx = 0
        i = 0
        while i < len (Mesh_list_InI):
            N_of_Cells = int (str (Mesh_list_InI [i][0]))
            nx = nx + N_of_Cells
            i = i+1

        ny = 0
        j = 0
        if len (Mesh_list_InJ) == 0:
            Mesh_list_InJ = [[1, 1.0, 1.0]]
        while j < len (Mesh_list_InJ):
            N_of_Cells = int (str (Mesh_list_InJ [j][0]))
            ny = ny + N_of_Cells
            j = j+1

        f.write ('\nstudy = Study(\'')
        f.write (str (Title))
        f.write ('\')')
        f.write ('\n')
        f.write ('\nmesh = StructuredMesh2D(\"global\",\"XY\")')
        f.write ('\nnx = ')
        f.write (str (nx))
        f.write ('\nny = ')
        f.write (str (ny))
        f.write ('\nnb_of_intervals = [nx,ny]')

    #  calcul de dx

        dx = []
        k = 0
        while k < len (Mesh_list_InI):
            factor = 1
            i = 1
            N_of_Cells = int (str (Mesh_list_InI [k][0]))
            l = float (str (Mesh_list_InI [k][1]))
            Geom_Ratio = float (str (Mesh_list_InI [k][2]))
            while i < N_of_Cells:
                factor = factor + pow (Geom_Ratio, i)
                i = i+1
            dx_min = l / factor
            dx_aux = [dx_min]
            i = 1
            while i < N_of_Cells + 1:
                dx_next = dx_aux [i-1] * pow (Geom_Ratio, i)
                dx_aux.append (dx_next)
                dx.append (dx_next)
                i = i+1
            k = k+1

    #  calcul de dy

        dy = []
        k = 0
        while k < len (Mesh_list_InJ):
            factor = 1
            i = 1
            N_of_Cells = int (str (Mesh_list_InJ [k][0]))
            l = float (str (Mesh_list_InJ [k][1]))
            Geom_Ratio = float (str (Mesh_list_InJ [k][2]))
            while i < N_of_Cells:
                factor = factor + pow (Geom_Ratio, i)
                i = i+1
            dy_min = l / factor
            dy_aux = [dy_min]
            i = 1
            while i < N_of_Cells + 1:
                dy_next = dy_aux [i-1] * pow (Geom_Ratio, i)
                dy_aux.append (dy_next)
                dy.append (dy_next)
                i = i+1
            k = k+1

        if len (dx) != 0:
            dx [0] = dx [0]/2

        f.write ('\ndx = ')
        f.write (str (dx))
        f.write ('\ndy = ')
        f.write (str (dy))
        f.write ('\npointlist_x = [0.0]')
        f.write ('\npointlist_y = [0.0]')
        f.write ('\nfor i in range(0,len(dx),1):')
        f.write ('\n    pointlist_x.append(pointlist_x[i]+dx[i])')
        f.write ('\nfor i in range(0,len(dy),1):')
        f.write ('\n    pointlist_y.append(pointlist_y[i]+dy[i])')
        f.write ('\nmesh.setAxis(\"X\",pointlist_x)')
        f.write ('\nmesh.setAxis(\"Y\",pointlist_y)')
        f.write ('\n')

        i = 0
        while i < len (Materials_list):

            dx_permeability = str (Materials_Properties_list [i][0])
            dy_permeability = str (Materials_Properties_list [i][1])
            porosity = str (Materials_Properties_list [i][2])
            effectiveDiffusion = str (Materials_Properties_list [i][3])
            longitudinalDispersivity = str (Materials_Properties_list [i][4])
            transverseDispersivity = str (Materials_Properties_list [i][5])
            f.write ('\n')
            f.write (Materials_list [i])
            f.write ('_material = Material (name = \"')
            f.write (Materials_list [i])
            f.write ('\", ')
            f.write ('permeability = Permeability (value = Tensor2D (')
            f.write (dx_permeability)
            f.write (', ')
            f.write (dy_permeability)
            f.write (')))')
            i = i+1

        Zones = []
        Boundaries = []
        i = 0
        while i < len (Zones_list):

            kind = str (Zone_Material_AqueousState_list [i][6])
            if (kind == 'Zone'): 
                Zones.append (Zones_list [i])
            else:    #  This is a boundary
                Boundaries.append (Zones_list [i])
            i = i+1
        f.write ('\n')
        f.write ('\nregions_list = []')
        f.write ('\ninitialconditions_list = []')
        i = 0
        while i < len (Zones):

            Zone = str (Zones [i])
            Zone = replace (str (Zone), " ", "_")
            index = Zones_list.index (str (Zones [i]))
            Material = str (Zone_Material_AqueousState_list [index][0])
            AqueousState = str (Zone_Material_AqueousState_list [index][1])
            i_min = str (Zone_Material_AqueousState_list [index][2])
            j_min = str (Zone_Material_AqueousState_list [index][3])
            i_max = str (Zone_Material_AqueousState_list [index][4])
            j_max = str (Zone_Material_AqueousState_list [index][5])
            f.write ('\n')
            f.write (Zone)
            f.write ('_reg_m = StructuredMesh2D (\"')
            f.write (Zone)
            f.write ('Region\", \"XY\")')
            f.write ('\n')
            f.write (Zone)
            f.write ('_reg_m.setZone (\"')
            f.write (Zone)
            f.write ('Region\", index_min = Index2D (')
            f.write (i_min)
            f.write (', ')
            f.write (j_min)
            f.write ('), index_max = Index2D (')
            f.write (i_max)
            f.write (', ')
            f.write (j_max)
            f.write ('))')
            f.write ('\nreg')
            str_i = str (i)
            f.write (str_i)
            f.write (' = Region (')
            f.write (Zone)
            f.write ('_reg_m, ')
            f.write (Material)
            f.write ('_material')
            f.write (')')
            f.write ('\nregions_list.append (reg')
            f.write (str_i)
            f.write (')')
            f.write ('\n')
            f.write ('\nreg')
            f.write (str_i)
            f.write ('_ic = InitialCondition (')
            f.write (Zone)
            f.write ('_reg_m, value = Head (value = ')
            l = 0
            while l < len (Zone_BCKind_list) and str (Zone_BCKind_list [l][0]) != str (Zone):
                l = l+1
            head_value = str (BCValues_list [l])
            f.write (head_value)
            f.write ('))')
            f.write ('\ninitialconditions_list.append (')
            f.write ('reg')
            f.write (str_i)
            f.write ('_ic)')        

            i = i+1
        j = i
        k = 0
        f.write ('\n')
        f.write ('\nboundaryconditions_list = []')
        while k < len (Boundaries):

            index = Zones_list.index (str (Boundaries [k]))
            Boundary = str (Boundaries [k])
            Boundary = replace (str (Boundary), " ", "_")
            Material = str (Zone_Material_AqueousState_list [index][0])
            AqueousState = str (Zone_Material_AqueousState_list [index][1])
            i_min = str (Zone_Material_AqueousState_list [index][2])
            j_min = str (Zone_Material_AqueousState_list [index][3])
            i_max = str (Zone_Material_AqueousState_list [index][4])
            j_max = str (Zone_Material_AqueousState_list [index][5])
            f.write ('\n')
            f.write ('\n')
            f.write (Boundary)
            f.write ('_bo_m')
            str_k = str (k)
            f.write (str_k)
            f.write (' = StructuredMesh2D (\"')
            f.write (Boundary)
            f.write ('boundary\", \"XY\")')
            f.write ('\n')
            f.write (Boundary)
            f.write ('_bo_m')
            f.write (str_k)
            f.write ('.setZone (\"')
            f.write (Boundary)
            f.write ('boundary\", index_min = Index2D (')
            f.write (i_min)
            f.write (', ')
            f.write (j_min)
            f.write ('), index_max = Index2D (')
            f.write (i_max)
            f.write (', ')
            f.write (j_max)
            f.write ('))')
##                 f.write ('\nreg')
##                 str_j = str (j)
##                 f.write (str_j)
##                 f.write (' = Region (')
##                 f.write (Boundary)
##                 f.write ('_bo_m')
##                 f.write (str_k)
##                 f.write (', ')
##                 f.write (Material)
##                 f.write ('_material')
##                 f.write (')')
##                 f.write ('\nregions_list.append (reg')
##                 f.write (str_j)
##                 f.write (')')
            f.write ('\nBoundary = ')
            f.write (Boundary)
            f.write ('_bo_m')
            f.write (str_k)
            f.write ('\nhead_value = Head (value = ')
            l = 0
            bcKind = 'Dirichlet'
            head_value = str (0.0)
            while l < len (Zone_BCKind_list) and (str (Zone_BCKind_list [l][0]) != str (Boundary)):
                l = l+1
            bcKind = str (Zone_BCKind_list [l][1])
            head_value = str (BCValues_list [l])
            f.write (head_value)
            f.write (')')
            f.write ('\nbc_')
            f.write (Boundary)
            f.write (str_k)
            f.write (' = BoundaryCondition (')
            f.write (Boundary)
            f.write ('_bo_m')
            f.write (str_k)
            f.write (', ')
            if str (bcKind) == 'Dirichlet':
                f.write ('\'Dirichlet\'')
            else:
                pass
            f.write (', head_value)')
            f.write ('\nboundaryconditions_list.append (bc_')
            f.write (Boundary)
            f.write (str_k)            
            f.write (')')            
            j = j+1
            k = k+1

        f.write ('\ntitle = \" ')
        f.write (str (Title))
        f.write (' \"')

        f.write ('\n#-----------------')
        f.write ('\n# Darcy resolution')
        f.write ('\n#-----------------')

        f.write ('\nmxiter = ')
        f.write (str (Modflow_mxiter))
        f.write ('\naccl = ')
        f.write (str (Modflow_accl))
        f.write ('\nhclose = ')
        f.write (str (Modflow_hclose))
        f.write ('\nStudy_type = \'Saturated\'')
        f.write ('\ndarcy = SaturatedHydroModflow(study._name,regions_list,boundaryconditions_list,initialconditions_list)')
        f.write ('\ndarcy.setMesh(mesh)')
        f.write ('\ndarcy.setData()')
        f.write ('\nfilename_sip=\"Monod.sip\"') 
        f.write ('\nmodflow_sip=setSolverParameter(mxiter,accl,hclose)')
        f.write ('\nmodflow_sip.sauvegarde(filename_sip)')
        f.write ('\nos.system(\"modflow.exe < modf.fil\")')

        f.close ()        

      	command = 'python '+hydraulics_filename
       	os.system (command)
    
        #except:
        #    print "There is a problem"    
    



    def exe (self):

        global Mesh_list_InJ
        global Solver 
        global mineralEquilibrium_list

        mineralEquilibrium_list = []

        #f = open ('./Modflow_file.py', 'w')
        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
                mode = 'unstructured'
            else:
                mode = 'structured'
        else:
            mode = 'structured'

        if Solver == 'Modflow_Mt3d_PhreeqC' and (ChemistryTool == 'PhreeqC' or ChemistryTool == 'Traces_PhreeqC'):


## 	#----------------------------------------------------------------------------------------------
## 	#  Cas test sur Modflow (end)
## 	#----------------------------------------------------------------------------------------------


            """
            f.write ('\n')
            f.write ('\n')
            f.write ('\nfrom structuredmesh import *')
            f.write ('\nfrom ModflowSaturatedHydro import *')
            f.write ('\nfrom study import *')
            f.write ('\nfrom material import Material')
            f.write ('\nfrom physicalquantities import Permeability, Head, Velocity')
            f.write ('\nfrom commonmodel import Region')
            f.write ('\nfrom commonmodel import InitialCondition')
            f.write ('\nfrom typechecktools import verifyClass')
            f.write ('\nfrom saturatedhydraulicproblem import BoundaryCondition')
            f.write ('\nfrom tensors import Tensor2D')
	    f.write ('\nfrom datamodel import Vector')
            f.write ('\n')
            f.write ('\n')

            # Calcul de nx et ny

            nx = 0
            i = 0
            while i < len (Mesh_list_InI):
                N_of_Cells = int (str (Mesh_list_InI [i][0]))
                nx = nx + N_of_Cells
                i = i+1

            ny = 0
            j = 0
            if len (Mesh_list_InJ) == 0:
                Mesh_list_InJ = [[1, 1.0, 1.0]]
            while j < len (Mesh_list_InJ):
                N_of_Cells = int (str (Mesh_list_InJ [j][0]))
                ny = ny + N_of_Cells
                j = j+1

            f.write ('\nstudy = Study(\'')
            f.write (str (Title))
            f.write ('\')')
            f.write ('\n')
            f.write ('\nmesh = StructuredMesh2D(\"global\",\"XY\")')
            f.write ('\nnx = ')
            f.write (str (nx))
            f.write ('\nny = ')
            f.write (str (ny))
            f.write ('\nnb_of_intervals = [nx,ny]')

	#  calcul de dx

            dx = []
            k = 0
            while k < len (Mesh_list_InI):
                factor = 1
                i = 1
                N_of_Cells = int (str (Mesh_list_InI [k][0]))
                l = float (str (Mesh_list_InI [k][1]))
                Geom_Ratio = float (str (Mesh_list_InI [k][2]))
                while i < N_of_Cells:
                    factor = factor + pow (Geom_Ratio, i)
                    i = i+1
                dx_min = l / factor
                dx_aux = [dx_min]
                i = 1
                while i < N_of_Cells + 1:
                    dx_next = dx_aux [i-1] * pow (Geom_Ratio, i)
                    dx_aux.append (dx_next)
                    dx.append (dx_next)
                    i = i+1
                k = k+1

	#  calcul de dy

            dy = []
            k = 0
            while k < len (Mesh_list_InJ):
                factor = 1
                i = 1
                N_of_Cells = int (str (Mesh_list_InJ [k][0]))
                l = float (str (Mesh_list_InJ [k][1]))
                Geom_Ratio = float (str (Mesh_list_InJ [k][2]))
                while i < N_of_Cells:
                    factor = factor + pow (Geom_Ratio, i)
                    i = i+1
                dy_min = l / factor
                dy_aux = [dy_min]
                i = 1
                while i < N_of_Cells + 1:
                    dy_next = dy_aux [i-1] * pow (Geom_Ratio, i)
                    dy_aux.append (dy_next)
                    dy.append (dy_next)
                    i = i+1
                k = k+1

            if len (dx) != 0:
                dx [0] = dx [0]/2

            f.write ('\ndx = ')
            f.write (str (dx))
            f.write ('\ndy = ')
            f.write (str (dy))
            f.write ('\npointlist_x = [0.0]')
            f.write ('\npointlist_y = [0.0]')
            f.write ('\nfor i in range(0,len(dx),1):')
            f.write ('\n    pointlist_x.append(pointlist_x[i]+dx[i])')
            f.write ('\nfor i in range(0,len(dy),1):')
            f.write ('\n    pointlist_y.append(pointlist_y[i]+dy[i])')
            f.write ('\nmesh.setAxis(\"X\",pointlist_x)')
            f.write ('\nmesh.setAxis(\"Y\",pointlist_y)')
            f.write ('\n')

            i = 0
            while i < len (Materials_list):

                dx_permeability = str (Materials_Properties_list [i][0])
                dy_permeability = str (Materials_Properties_list [i][1])
                porosity = str (Materials_Properties_list [i][2])
                effectiveDiffusion = str (Materials_Properties_list [i][3])
                longitudinalDispersivity = str (Materials_Properties_list [i][4])
                transverseDispersivity = str (Materials_Properties_list [i][5])
                f.write ('\n')
                f.write (Materials_list [i])
                f.write ('_material = Material (name = \"')
                f.write (Materials_list [i])
                f.write ('\", ')
                f.write ('permeability = Permeability (value = Tensor2D (')
                f.write (dx_permeability)
                f.write (', ')
                f.write (dy_permeability)
                f.write (')))')
                i = i+1
                
            Zones = []
            Boundaries = []
            i = 0
            while i < len (Zones_list):

                kind = str (Zone_Material_AqueousState_list [i][6])
                if (kind == 'Zone'): 
                    Zones.append (Zones_list [i])
                else:    #  This is a boundary
                    Boundaries.append (Zones_list [i])
                i = i+1
            f.write ('\n')
            f.write ('\nregions_list = []')
            f.write ('\ninitialconditions_list = []')
            i = 0
            while i < len (Zones):

                Zone = str (Zones [i])
                Zone = replace (str (Zone), " ", "_")
                index = Zones_list.index (str (Zones [i]))
                Material = str (Zone_Material_AqueousState_list [index][0])
                AqueousState = str (Zone_Material_AqueousState_list [index][1])
                i_min = str (Zone_Material_AqueousState_list [index][2])
                j_min = str (Zone_Material_AqueousState_list [index][3])
                i_max = str (Zone_Material_AqueousState_list [index][4])
                j_max = str (Zone_Material_AqueousState_list [index][5])
                f.write ('\n')
                f.write (Zone)
                f.write ('_reg_m = StructuredMesh2D (\"')
                f.write (Zone)
                f.write ('Region\", \"XY\")')
                f.write ('\n')
                f.write (Zone)
                f.write ('_reg_m.setZone (\"')
                f.write (Zone)
                f.write ('Region\", index_min = Index2D (')
                f.write (i_min)
                f.write (', ')
                f.write (j_min)
                f.write ('), index_max = Index2D (')
                f.write (i_max)
                f.write (', ')
                f.write (j_max)
                f.write ('))')
                f.write ('\nreg')
                str_i = str (i)
                f.write (str_i)
                f.write (' = Region (')
                f.write (Zone)
                f.write ('_reg_m, ')
                f.write (Material)
                f.write ('_material')
                f.write (')')
                f.write ('\nregions_list.append (reg')
                f.write (str_i)
                f.write (')')
                f.write ('\n')
                f.write ('\nreg')
                f.write (str_i)
                f.write ('_ic = InitialCondition (')
                f.write (Zone)
                f.write ('_reg_m, value = Head (value = ')
                l = 0
                while l < len (Zone_BCKind_list) and str (Zone_BCKind_list [l][0]) != str (Zone):
                    l = l+1
                head_value = str (BCValues_list [l])
                f.write (head_value)
                f.write ('))')
                f.write ('\ninitialconditions_list.append (')
                f.write ('reg')
                f.write (str_i)
                f.write ('_ic)')        

                i = i+1
            j = i
            k = 0
            f.write ('\n')
            f.write ('\nboundaryconditions_list = []')
            while k < len (Boundaries):

                index = Zones_list.index (str (Boundaries [k]))
                Boundary = str (Boundaries [k])
                Boundary = replace (str (Boundary), " ", "_")
                Material = str (Zone_Material_AqueousState_list [index][0])
                AqueousState = str (Zone_Material_AqueousState_list [index][1])
                i_min = str (Zone_Material_AqueousState_list [index][2])
                j_min = str (Zone_Material_AqueousState_list [index][3])
                i_max = str (Zone_Material_AqueousState_list [index][4])
                j_max = str (Zone_Material_AqueousState_list [index][5])
                f.write ('\n')
                f.write ('\n')
                f.write (Boundary)
                f.write ('_bo_m')
                str_k = str (k)
                f.write (str_k)
                f.write (' = StructuredMesh2D (\"')
                f.write (Boundary)
                f.write ('boundary\", \"XY\")')
                f.write ('\n')
                f.write (Boundary)
                f.write ('_bo_m')
                f.write (str_k)
                f.write ('.setZone (\"')
                f.write (Boundary)
                f.write ('boundary\", index_min = Index2D (')
                f.write (i_min)
                f.write (', ')
                f.write (j_min)
                f.write ('), index_max = Index2D (')
                f.write (i_max)
                f.write (', ')
                f.write (j_max)
                f.write ('))')
##                 f.write ('\nreg')
##                 str_j = str (j)
##                 f.write (str_j)
##                 f.write (' = Region (')
##                 f.write (Boundary)
##                 f.write ('_bo_m')
##                 f.write (str_k)
##                 f.write (', ')
##                 f.write (Material)
##                 f.write ('_material')
##                 f.write (')')
##                 f.write ('\nregions_list.append (reg')
##                 f.write (str_j)
##                 f.write (')')
                f.write ('\nBoundary = ')
                f.write (Boundary)
                f.write ('_bo_m')
                f.write (str_k)
                f.write ('\nhead_value = Head (value = ')
                l = 0
                bcKind = 'Dirichlet'
                head_value = str (0.0)
                while l < len (Zone_BCKind_list) and (str (Zone_BCKind_list [l][0]) != str (Boundary)):
                    l = l+1
                bcKind = str (Zone_BCKind_list [l][1])
                head_value = str (BCValues_list [l])
                f.write (head_value)
                f.write (')')
                f.write ('\nbc_')
                f.write (Boundary)
                f.write (str_k)
                f.write (' = BoundaryCondition (')
                f.write (Boundary)
                f.write ('_bo_m')
                f.write (str_k)
                f.write (', ')
                if str (bcKind) == 'Dirichlet':
                    f.write ('\'Dirichlet\'')
                else:
                    pass
                f.write (', head_value)')
                f.write ('\nboundaryconditions_list.append (bc_')
                f.write (Boundary)
                f.write (str_k)            
                f.write (')')            
                j = j+1
                k = k+1

            f.write ('\ntitle = \" ')
            f.write (str (Title))
            f.write (' \"')

            f.write ('\n#-----------------')
            f.write ('\n# Darcy resolution')
            f.write ('\n#-----------------')

            f.write ('\nmxiter = ')
            f.write (str (Modflow_mxiter))
            f.write ('\naccl = ')
            f.write (str (Modflow_accl))
            f.write ('\nhclose = ')
            f.write (str (Modflow_hclose))
            f.write ('\nStudy_type = \'Saturated\'')
            f.write ('\ndarcy = SaturatedHydroModflow(study._name,regions_list,boundaryconditions_list,initialconditions_list)')
            f.write ('\ndarcy.setMesh(mesh)')
            f.write ('\ndarcy.setData()')
            f.write ('\nfilename_sip=\"Monod.sip\"') 
            f.write ('\nmodflow_sip=setSolverParameter(mxiter,accl,hclose)')
            f.write ('\nmodflow_sip.sauvegarde(filename_sip)')
            f.write ('\nos.system(\"modflow.exe < modf.fil\")')

            f.close ()        
            """



            runfile_name = './'+str (Title)+'.py'
            try:
                runfile = open (runfile_name, 'w')

                try:
                    t = open ('./'+Title+'.txt', 'r')
                    m = ''
                    runfile.write ('\n')
                    runfile.write ('\n')
                    runfile.write ('\n#===========================#')
                    runfile.write ('\n#  Description of the case  #')
                    runfile.write ('\n#===========================#')
                    runfile.write ('\n')
                    for i in t.readlines ():
                        m = m+'#  '+i
                    runfile.write (m)
                    runfile.write ('\n#')
                except:
                    pass
                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n#=========================================================#')
                runfile.write ('\n#  Runfile: this file is generated through the Interface  #')
                runfile.write ('\n#=========================================================#')
                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n#===========#')
                runfile.write ('\n#  Imports  #')
                runfile.write ('\n#===========#')
                if mode == 'unstructured':
                    runfile.write ('\nimport os')	    
                    runfile.write ('\nfrom mesh import *')	    
                    runfile.write ('\nfrom datamodel import *')	    
                    runfile.write ('\nimport getopt')	    
                    runfile.write ('\nimport sys')	    
                    runfile.write ('\nfrom chemicaltransportmodule import *')
                elif Parallel_NumberOfNodes != 1:
                    runfile.write ('\nfrom mt3dcomponent import Mt3d')
                    runfile.write ('\nfrom structuredmesh import *')
                    runfile.write ('\nfrom material import Material')
                    runfile.write ('\nfrom saturatedhydraulicproblem import BoundaryCondition')
                    runfile.write ('\nfrom physicalquantities import Permeability, Head, Porosity, KinematicDispersion, EffectiveDiffusion, Velocity')
                    runfile.write ('\nfrom commonmodel import Region')
                    runfile.write ('\nfrom commonmodel import InitialCondition')
                    runfile.write ('\nfrom commonmodel import BoundaryCondition')
                    runfile.write ('\nfrom species import Species')
                    runfile.write ('\nfrom chemicaltransport import ChemicalTransportProblem')
                    runfile.write ('\nfrom os import system')
                    runfile.write ('\nfrom datamodel import Vector')
                    runfile.write ('\nfrom phreeqccomponent import *')
                    runfile.write ('\nfrom chemicaltransportmodule import ChemicalTransportModule')
                    runfile.write ('\nfrom chemical import *')	    
                    runfile.write ('\nimport time')

                    runfile.write ('\n\nimport Numeric')	    
                    runfile.write ('\nfrom Scientific import MPI')


                    	    
                else:
                    runfile.write ('\nfrom structuredmesh import *')
                #runfile.write ('\nfrom material import Material')
                #runfile.write ('\nfrom saturatedhydraulicproblem import BoundaryCondition')
                #runfile.write ('\nfrom physicalquantities import Permeability, Head, Porosity, KinematicDispersion, EffectiveDiffusion, Velocity')
                #runfile.write ('\nfrom commonmodel import Region')
                #runfile.write ('\nfrom commonmodel import InitialCondition')
                #runfile.write ('\nfrom commonmodel import BoundaryCondition')
                #runfile.write ('\nfrom species import Species')
                #runfile.write ('\nfrom chemicaltransport import ChemicalTransportProblem')
                    runfile.write ('\nfrom os import system')
                #runfile.write ('\nfrom datamodel import Vector')
                #runfile.write ('\nfrom phreeqccomponent import *')
                    runfile.write ('\nfrom chemicaltransportmodule import ChemicalTransportModule')
                #runfile.write ('\nfrom chemical import *')	    
                    runfile.write ('\nfrom datamodel import *')	    
                runfile.write ('\nfrom physicalquantities import *')
                runfile.write ('\n#===========#')
	        runfile.write ('\n')
                if Parallel_NumberOfNodes != 1:
                    pass
                else:
                    runfile.write ('\nsetProblemType (\"chemicaltransport\")')
	        #------------------------------

                if mode == 'unstructured':
                    runfile.write ('\nmed_manager = importMedFromFile (\'')
                    runfile.write (str (Medfile))
                    runfile.write ('\')')
                    runfile.write ('\nmesh = med_manager.getMesh(med_manager.getMeshesNames()[0])')




                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\nnewSpeciesList=[]')
                runfile.write ('\n')


# debug_run
                runfile.write ('\n')
                runfile.write ('\n#============================================#')
                runfile.write ('\n#  Definition of Solution Component Species  #')
                runfile.write ('\n#============================================#')
                runfile.write ('\n')
                i = 0
                while i < len (Components_list):

                    Component_tmp = str (Components_list [i])
                    Component_tmp = Component_tmp.replace ('(', '_')
                    Component_tmp = Component_tmp.replace (')', '_')
                    runfile.write ('\n# ')
                    runfile.write (Component_tmp)

	            """runfile.write ('\n')
                    runfile.write (Component_tmp)
                    runfile.write (' = AqueousComponentSpecies (symbol = \"')
                    runfile.write (ComponentSpecies_Name_list [i])
                    runfile.write ('\", name = \"')
                    runfile.write (Components_list [i])
                    if '(' not in Components_list [i]:
                        runfile.write ('\", element = \"')
                        runfile.write (ComponentSpecies_Formula_list [i])
                    molarMass = str (Components_Properties_list [i][0])
                    alkalinity = str (Components_Properties_list [i][1])
                    runfile.write ('\", molarMass = MolarMass (')
                    runfile.write (molarMass)
                    runfile.write ('), alkalinity = ')
                    runfile.write (alkalinity)
                    runfile.write (')')
		    """

                    runfile.write ('\nnewSpeciesList.append (AqueousComponentSpecies (symbol = \"')
                    runfile.write (ComponentSpecies_Name_list [i])
                    runfile.write ('\", name = \"')
                    runfile.write (Components_list [i])
                    if '(' not in Components_list [i]:
                        runfile.write ('\", element = \"')
                        runfile.write (ComponentSpecies_Formula_list [i])
                    molarMass = str (Components_Properties_list [i][0])
                    alkalinity = str (Components_Properties_list [i][1])
                    runfile.write ('\", molarMass = MolarMass (')
                    runfile.write (molarMass)
                    runfile.write ('), alkalinity = ')
                    runfile.write (alkalinity)
                    runfile.write ('))')
                    i = i+1

                runfile.write ('\n')
                runfile.write ('\n#============================================#')
                runfile.write ('\n#  Definition of Solution Secondary Species  #')
                runfile.write ('\n#============================================#')
                runfile.write ('\n')
                i = 0
                while i < len (AqueousSpecies_list):
                    runfile.write ('\n# ')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write ('\n')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write ('reaction = []')
                    j = 0
                    while j < len (AqueousSpecies_Species_list [i]):
                        test = AqueousSpecies_Species_list [i][j][0]
                        if (test != ''):
                            runfile.write ('\n')
                            runfile.write (AqueousSpecies_list [i])
                            runfile.write ('reaction.append ((\"')
                            spec = str (AqueousSpecies_Species_list [i][j][0])
                            runfile.write (spec)
                            runfile.write ('\", ')
                            conc = str (AqueousSpecies_Species_list [i][j][1])
                            runfile.write (conc)
                            runfile.write ('))')
                            j = j+1
                        else:
                            break
                    runfile.write ('\n')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write (' = AqueousSecondarySpecies (\"')
                    runfile.write (AqueousSpecies_Formula_list [i])
                    runfile.write ('\", ')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write ('reaction, logK25 = ')
                    log_k = str (float (AqueousSpecies_Properties_list [i][0]))
                    runfile.write (log_k)
                    runfile.write (', name = \"')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write ('\")')
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (AqueousSpecies_list [i])
                    runfile.write (')')
                    i = i+1
                i = 0
                while i < len (Components_list):

                    if '(' in Components_list [i]:
                        pass
                    else:
                        Component_tmp = str (Components_list [i])
                        Component_tmp = Component_tmp.replace ('(', '_')
                        Component_tmp = Component_tmp.replace (')', '_')
                        runfile.write ('\n# ')
                        runfile.write (Component_tmp)
                        runfile.write ('\n')
                        runfile.write (Component_tmp)
                        runfile.write ('reaction = []')
                        runfile.write ('\n')
                        runfile.write (Component_tmp)
                        runfile.write ('reaction.append ((\"')
                        runfile.write (ComponentSpecies_Name_list [i])
                        runfile.write ('\", 1))')
                        runfile.write ('\n')
                        runfile.write (Component_tmp)
                        runfile.write (' = AqueousSecondarySpecies (\"')
                        runfile.write (ComponentSpecies_Name_list [i])
                        runfile.write ('\", ')
                        runfile.write (Component_tmp)
                        runfile.write ('reaction, logK25 = 0.0, name = \"')
                        runfile.write (Component_tmp)
                        runfile.write ('\")')
                        runfile.write ('\nnewSpeciesList.append (')
                        runfile.write (Component_tmp)
                        runfile.write (')') 
                    i = i+1

                runfile.write ('\n')
                runfile.write ('\n#===========================================#')
                runfile.write ('\n#  Definition of Mineral Secondary Species  #')
                runfile.write ('\n#===========================================#')
                runfile.write ('\n')
                i = 0
                while i < len (MineralPhases_list):
                    runfile.write ('\n# ')
                    runfile.write (MineralPhases_list [i])
                    runfile.write ('\n')
                    runfile.write (MineralPhases_list [i])
                    runfile.write ('reaction = []')
                    j = 0
                    while (j < len (MineralPhases_Species_list [i])):
                        test = MineralPhases_Species_list [i][j][0]
                        if (test != ''):
                            runfile.write ('\n')
                            runfile.write (MineralPhases_list [i])
                            runfile.write ('reaction.append ((\"')
                            spec = str (MineralPhases_Species_list [i][j][0])
                            runfile.write (spec)
                            runfile.write ('\", ')
                            conc = str (MineralPhases_Species_list [i][j][1])
                            runfile.write (conc)
                            runfile.write ('))')
                            j = j+1
                        else:
                            break
                    runfile.write ('\n')
                    runfile.write (MineralPhases_list [i])
                    runfile.write (' = MineralSecondarySpecies (\"')
                    runfile.write (MineralPhases_Formula_list [i])
                    runfile.write ('\", ')
                    runfile.write (MineralPhases_list [i])
                    runfile.write ('reaction, logK25 = ')
                    log_k = str (float (MineralPhases_Properties_list [i][0]))
                    runfile.write (log_k)	
                    runfile.write (', name = \"')
                    runfile.write (MineralPhases_list [i])
                    runfile.write ('\"')
                    
                    if str (MineralPhases_Properties_list [i][2]) == "Density":
                        density = str (float (MineralPhases_Properties_list [i][3]))
                        runfile.write (', density = Density ('+density+', \'kg/m3\')')
                    else:
                        pass
                    runfile.write (')')
                    
    # debug_density                
                    
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (MineralPhases_list [i])
                    runfile.write (')')
                    i = i+1

                i = 0
                already = 0
                while (i < len (AqueousStates_list) and already == 0):
                    if str (AqueousStates_Properties_list [i][3]) == 'Fix':
                        runfile.write ('\n')
                        runfile.write ('\n# Fix_H+')
                        runfile.write ('\nFixphreaction = []')
                        runfile.write ('\nFixphreaction.append ((\"H+\", 1))')
                        runfile.write ('\nlog_k = 0.0')
                        runfile.write ('\nFixph = MineralSecondarySpecies (\"H+\", Fixphreaction, log_k, \"Fix_H+\")')
                        runfile.write ('\nnewSpeciesList.append (Fixph)')
                        already = 1
                    else:
                        pass
                    i = i+1

                i = 0
                while i < len (SurfaceMasterSpecies_list):
                    Name = str (SurfaceMasterSpecies_list [i])
                    Formula = str (SurfaceMasterSpecies_Formula_list [i])
                    runfile.write ('\n#')
                    runfile.write (Formula)
                    runfile.write ('\n')
                    runfile.write (Formula)
                    runfile.write ('_site = SurfaceSiteComponentSpecies (\"')
                    runfile.write (Name)
                    runfile.write ('\", name = \"')
                    runfile.write (Formula)
                    runfile.write ('\")')
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (Formula)
                    runfile.write ('_site')
                    runfile.write (')')
                    i = i+1         
    #debug_run

                i = 0
                while i < len (SurfaceMasterSpecies_list):

                    Name = str (SurfaceMasterSpecies_list [i])
                    Formula = str (SurfaceMasterSpecies_Formula_list [i])        
                    runfile.write ('\n#')
                    runfile.write (Name)
                    runfile.write ('\nlogK25 = 0.0')
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write (' = SurfaceSecondarySpecies (\"')
                    runfile.write (Name)
                    runfile.write ('\", [], logK25)')
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write ('.setFormationReaction ([(\"')
                    runfile.write (Name)
                    runfile.write ('\", 1)])')
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (Name)
                    runfile.write (')')
                    i = i+1

                i = 0
                while i < len (SurfaceSpecies_list):

                    Name = str (SurfaceSpecies_list [i])
                    Name = Name.replace ('(', '_')
                    Name = Name.replace (')', '_')
                    Name = Name.replace ('+', '_')
                    Name = Name.replace ('-', '_')
                    Formula = str (SurfaceSpecies_list [i])
                    runfile.write ('\n# ')
                    runfile.write (Name)
                    log_k = str (float (SurfaceSpecies_Properties_list [i][0]))
                    runfile.write ('\nlogK = ')
                    runfile.write (log_k)
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write (' = SurfaceSecondarySpecies(\"')
                    runfile.write (Formula)
                    runfile.write ('\",[],logK)')
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write ('.setFormationReaction([')
                    j = 0
                    while (j < len (SurfaceSpecies_Reactants_list [i])):
                        test = SurfaceSpecies_Reactants_list [i][j][0]
                        if (test != ''):
                            runfile.write ('(\"')
                            spec = str (SurfaceSpecies_Reactants_list [i][j][0])
                            runfile.write (spec)
                            runfile.write ('\", ')
                            conc = str (SurfaceSpecies_Reactants_list [i][j][1])
                            runfile.write (conc)
                            runfile.write (')')
                            runfile.write (', ')
                            j = j+1
                        else:
                            break
                    runfile.write ('])')
                    runfile.write ('\nnewSpeciesList.append(')
                    runfile.write (Name)
                    runfile.write (')')
                    i = i+1


















                runfile.write ('\n')
                runfile.write ('\n#================================#')
                runfile.write ('\n#  Definition of aqueous states  #')
                runfile.write ('\n#================================#')
                i = 0
                mineralEquilibrium_list = []
                while i < len (AqueousStates_list):

                    runfile.write ('\n')
                    runfile.write ('\n#-----------------------------------------------------')
                    runfile.write ('\n#  Definition of the Aqueous ')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (' chemical State')
                    runfile.write ('\n#-----------------------------------------------------')
                    runfile.write ('\nAqueousspecieslist_')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (' = []')
                    j = 0
                    tmp_list = []
                    while (j < len (AqueousStates_Species_list [i])):

                        test = str (AqueousStates_Species_list [i][j][0])
                        aux_list = []
                        if (test != ''):
                            spec = str (AqueousStates_Species_list [i][j][0])
                            conc = str (AqueousStates_Species_list [i][j][1])
                            ind_crochet = spec.find ('[')
			    if ind_crochet != -1:
			        ind_mineral = spec.find ('mineral')
			        if ind_mineral != -1:
                                    aux_spec = spec [:spec.index ('[')]
                                    aux_spec = aux_spec.replace (' ', '')
                                    aux_list.append (aux_spec)
                                    aux_list.append (conc)
                                    mineral = spec [spec.index ('(') + 1:spec.index (')')].replace (' ', '')
                                    aux_list.append (mineral)
				    tmp_list.append (aux_list)
	                        else:
			            print ('pas de mineral')
			            pass
	                    else:
                                spec_tmp = spec
                                spec_tmp = spec_tmp.replace ('(', '_')
                                spec_tmp = spec_tmp.replace (')', '_')
                                spec_tmp = spec_tmp.replace ('+', '_p')
                                spec_tmp = spec_tmp.replace ('-', '_m')
				
				
				
#		species_tmp = str (self.AqueousSolutionFrame.Table1.text (i, 0))
#		stoich_coef_tmp = str (self.AqueousSolutionFrame.Table1.text (i, 1))
#		species_tmp = species_tmp.replace ('+', 'p')
#		species_tmp = species_tmp.replace ('-', 'm')
#		species_tmp = species_tmp.replace ('(', 'b')
#		species_tmp = species_tmp.replace (')', 'b')
		

				
				
				
                                if Concentration_Unit == 'moles/l':
                        	    runfile.write ('\nAqueousspecieslist_')
                        	    runfile.write (AqueousStates_list [i])
                        	    runfile.write ('.append (')
                                    runfile.write ('ElementConcentration (\'')
                                    runfile.write (spec)
                                    runfile.write ('\', ')
                                    conc = str (AqueousStates_Species_list [i][j][1])
                                    runfile.write (conc)
                                    runfile.write (', \"')
                                    runfile.write ('mol/l')
                                    runfile.write ('\")')
                        	    runfile.write (')')
		                else:
                        	    runfile.write ('\nAqueousspecieslist_')
                        	    runfile.write (AqueousStates_list [i])
                        	    runfile.write ('.append (')
                                    runfile.write ('ElementConcentration (\'')
                                    runfile.write (spec)
                                    runfile.write ('\', ')
                                    conc = str (float(AqueousStates_Species_list [i][j][1])*1.e-3)
                                    #conc = str (float(AqueousStates_Species_list [i][j][1]))
                                    runfile.write (conc)
                                    runfile.write (', \"')
                                    runfile.write ('mol/m3')
                                    runfile.write ('\")')
                        	    runfile.write (')')
		        j = j+1
                    mineralEquilibrium_list.append (tmp_list)
                    runfile.write ('\n')
                    runfile.write ('\nAqueousSolution_')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (' = AqueousSolution (Aqueousspecieslist_')
                    runfile.write (AqueousStates_list [i])
                    pH = str (AqueousStates_Properties_list [i][1])
		    if pH == '':
		        runfile.write (', pH = None')
		    else:
                        runfile.write (', pH = ')
                        runfile.write (pH)                                        
                    pe = str (AqueousStates_Properties_list [i][2])
                    if pe == '':
		        runfile.write (', pe = None')
		    elif (pe != '') and (str (AqueousStates_Properties_list [i][9]) == 'pe'):
                        runfile.write (', pe = ')
		        runfile.write (pe)
		    elif (pe != '') and (str (AqueousStates_Properties_list [i][9]) == 'Eh'):
                        runfile.write (', Eh = ')
		        runfile.write (pe)
                    else:
                        runfile.write (', pe = None')
                    temp = str (AqueousStates_Properties_list [i][0])
                    if temp == '':
		        runfile.write (', temperature = None)')
                    elif temp != '':
                        runfile.write (', temperature = ')
                        runfile.write (temp)
                        runfile.write (')')
                    else:
                        runfile.write (', temperature = None)')



    # debug_run

                    i = i+1
                runfile.write ('\n#================================#')
                runfile.write ('\n')
                runfile.write ('\n')
                i = 0
                while i < len (AqueousStates_list):

                    runfile.write ('\ngasPhase_')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (' = []')
                    runfile.write ('\ngasPhasesolution_')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (' = GasPhase (gasPhase_')
                    runfile.write (AqueousStates_list [i])
                    runfile.write (')')
                    i = i+1
                    runfile.write ('\n')
                States = []    
                i = 0
                while i < len (AqueousStates_Gas_list):

                    state = str (AqueousStates_Gas_list [i][0])
                    if state not in States:
                        States.append (state)
                    i = i+1

                j = 0
                while j < len (AqueousStates_Gas_list):

                    AS_tmp = str (AqueousStates_Gas_list [j][0])
                    G_tmp = str (AqueousStates_Gas_list [j][1])
                    log_tmp = str (float (AqueousStates_Gas_Properties_list [j][0]))
                    runfile.write ('\n')
                    if '(' in G_tmp:
                        index = G_tmp.index ('(')
                        runfile.write (G_tmp [:index])
                    else:
                        runfile.write (G_tmp)
                    runfile.write ('_gas = Fugacity (\"')
                    runfile.write (G_tmp)
                    runfile.write ('\", ')
                    runfile.write (log_tmp)
                    runfile.write (')')            
                    runfile.write ('\ngasPhase_')
                    runfile.write (AS_tmp)
                    runfile.write ('.append (')
                    if '(' in G_tmp:
                        index = G_tmp.index ('(')
                        runfile.write (G_tmp [:index])
                    else:
                        runfile.write (G_tmp)
                    runfile.write ('_gas')
                    runfile.write (')')
                    j = j+1

                for x in States:

                    runfile.write ('\ngasPhasesolution_')
                    runfile.write (x)
                    runfile.write (' = GasPhase (gasPhase_')
                    runfile.write (x)
                    runfile.write (')')

                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n#===========================================#')
                runfile.write ('\n#  Sorption sites: EXCHANGE_MASTER_SPECIES  #')
                runfile.write ('\n#===========================================#')
                runfile.write ('\n')
                i = 0
                while i < len (ExchangeMasterSpecies_list):

                    Name = str (ExchangeMasterSpecies_list [i])
                    Formula = str (ExchangeMasterSpecies_Formula_list [i])        
                    runfile.write ('\n#')
                    runfile.write (Name)
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write (' = SorbingSiteComponentSpecies(\"')
                    runfile.write (Formula)
                    runfile.write ('\", name = \"')
                    runfile.write (Name)
                    runfile.write ('\")')
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (Name)
                    runfile.write (')')
                    i = i+1


                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n#==============================================#')
                runfile.write ('\n#  Sorbed Secondary Species: EXCHANGE_SPECIES  #')
                runfile.write ('\n#==============================================#')
                runfile.write ('\n')
                i = 0
                while i < len (ExchangeMasterSpecies_list):

                    Name = str (ExchangeMasterSpecies_list [i])
                    Formula = str (ExchangeMasterSpecies_Formula_list [i])        
                    runfile.write ('\n#')
                    runfile.write (Name)
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write (' = SorbedSecondarySpecies (\"')
                    runfile.write (Formula)
                    runfile.write ('\", [], logK25 = 0.0)')
                    runfile.write ('\n')
                    runfile.write (Name)
                    runfile.write ('.setFormationReaction ([(\"')
                    runfile.write (Formula)
                    runfile.write ('\", 1)])')
                    runfile.write ('\nnewSpeciesList.append (')
                    runfile.write (Name)
                    runfile.write (')')
                    i = i+1

                i = 0
                while i < len (ExchangeSpecies_list):

                    runfile.write ('\n# ')
                    runfile.write (ExchangeSpecies_list [i])

                    law = str (ExchangeSpecies_Properties_list [i][1])
                    coef_1 = str (ExchangeSpecies_Properties_list [i][2])
                    coef_2 = str (ExchangeSpecies_Properties_list [i][3])

                    log_k = str (float (ExchangeSpecies_Properties_list [i][0]))
                    runfile.write ('\n')
                    runfile.write (ExchangeSpecies_list [i])
                    runfile.write (' = SorbedSecondarySpecies(\"')
                    runfile.write (ExchangeSpecies_list [i])
                    runfile.write ('\", [], logK25 = ')
                    runfile.write (log_k)
		    if law == 'Davies':
		        runfile.write (', activity_law = Davies()')
		    elif law == 'Debye':
		        runfile.write (', coef_a = ')
			runfile.write (coef_1)
		        runfile.write (', coef_b = ')
                        runfile.write (coef_2)
		    else:
		        pass	
                    runfile.write (')')
                    runfile.write ('\n')
                    runfile.write (ExchangeSpecies_list [i])
                    runfile.write ('.setFormationReaction([')
                    j = 0
                    while (j < len (ExchangeSpecies_Reactants_list [i])):

                        test = ExchangeSpecies_Reactants_list [i][j][0]
                        if (test != ''):
                            runfile.write ('(\"')
                            spec = str (ExchangeSpecies_Reactants_list [i][j][0])
                            runfile.write (spec)
                            runfile.write ('\", ')
                            conc = str (ExchangeSpecies_Reactants_list [i][j][1])
                            runfile.write (conc)
                            runfile.write (')')
                            runfile.write (', ')
                            j = j+1

                        else:
                            break

                    runfile.write ('])')
                    runfile.write ('\nnewSpeciesList.append(')
                    runfile.write (ExchangeSpecies_list [i])
                    runfile.write (')')

                    i = i+1

                ##    Equilibrium phases Frame: we associate An aqueous state with a mineral phase        
                runfile.write ('\n##')
                runfile.write ('\n##  StageChemicalState Definitions')
                runfile.write ('\n##')
                ##  il faut parcourir 1 fois la liste pour creer les listes dont on a besoin:   listofmineralp_...
                States = []    
                i = 0
		print " on parcourt aSlist"
                while i < len (AqueousStates_list):
                    state = str (AqueousStates_list [i])
                #while i < len (AqueousStates_MineralPhases_list):           
                #    state = str (AqueousStates_MineralPhases_list [i][0])
                    if state not in States:
                        States.append (state)
                    i = i+1
		print " line 20993 ",States
                for x in States:

                    runfile.write ('\nMineralspecies_')
                    runfile.write (x)
                    runfile.write (' = []')

		temp_minerallist = []
                runfile.write ("\n")
                i = 0
		#
		# using python 2.2 a simple sort doesn't work
		#
                while i < len (AqueousStates_MineralPhases_list):

                    mineraltt = str("")
                    AS_tmp = str (AqueousStates_MineralPhases_list [i][0])
                    M_tmp = str (AqueousStates_MineralPhases_list [i][1])
                    M_tmp_tmp = M_tmp
                    M_tmp_tmp = M_tmp_tmp.replace ('(', '_')
                    M_tmp_tmp = M_tmp_tmp.replace (')', '_')
                    M_tmp_tmp = M_tmp_tmp.replace ('-', '_')
                    saturationIndex_tmp = str (AqueousStates_MineralPhases_Properties_list [i][0])
                    Amount_tmp = str (AqueousStates_MineralPhases_Properties_list [i][1])
                    try:
		        DissolveOnly_tmp = str (AqueousStates_MineralPhases_Properties_list [i][2])
		    except:
		        DissolveOnly_tmp = ""
                    #runfile.write ('\nMineralspecies_')
                    mineraltt+="\nMineralspecies_"
		    #runfile.write (AS_tmp)
                    mineraltt+=AS_tmp
                    #runfile.write ('.append(')
		    mineraltt+=".append("
# debug_dissolve
                    if DissolveOnly_tmp	== "Dissolve Only":
                        #runfile.write ('ToDissolveMineralTotalConcentration')
			mineraltt+="ToDissolveMineralTotalConcentration"
                    else:	
                        #runfile.write ('MineralTotalConcentration')
			mineraltt+="MineralTotalConcentration"
                    #runfile.write ('(symbol=\"')
		    mineraltt+="(symbol=\""
		    
                    #runfile.write (M_tmp)
		    mineraltt+=M_tmp
		    
                    #runfile.write ('\",value=')
		    mineraltt+="\",value="
		    
                    #runfile.write (Amount_tmp)
		    mineraltt+=Amount_tmp
		    
                    #runfile.write (', unit = \"')
		    mineraltt+=",unit=\""
                    if Concentration_Unit == 'moles/l':
                            #runfile.write ('mol/l')
			    mineraltt+="mol/l"
                    if saturationIndex_tmp != '': 
                        #runfile.write ('\", saturationIndex = ')
			mineraltt+="\",saturationIndex="
                        #runfile.write (saturationIndex_tmp)
			mineraltt+=saturationIndex_tmp
                    else:
                        #runfile.write ('\"')
			mineraltt+="\""
                    #runfile.write ('))')
		    mineraltt+="))"             
                    #runfile.write (mineraltt)
	            temp_minerallist.append(mineraltt)
                    i = i+1
		temp_minerallist.sort()
		for i in temp_minerallist:
	            runfile.write(i) 
                runfile.write ('\n')
		del(temp_minerallist)
                for x in States:
                    runfile.write ('\nMineralPhaseSolution_')
                    runfile.write (x)
                    runfile.write (' = MineralPhase (Mineralspecies_')
                    runfile.write (x)
                    runfile.write (')')


        ### EXCHANGE

                """
	        runfile.write ('\n#===================================#')
                runfile.write ('\n#  Sorbing Site Capacity: EXCHANGE  #')
                runfile.write ('\n#===================================#')
                States = []
                i = 0
                while i < len (AqueousStates_ExchangeSpecies_list):

                    state = str (AqueousStates_ExchangeSpecies_list [i][0])
                    if state not in States:
                        States.append (state)
                    i = i+1

                for x in States:
                    runfile.write ('\nlistofsorptionsitespecies_')
                    runfile.write (x)
                    runfile.write (' = []')
                runfile.write ('\n')
                i = 0
                while i < len (AqueousStates_ExchangeSpecies_list):

                    runfile.write ('\n')
                    F_tmp = str (AqueousStates_ExchangeSpecies_list [i][1])
                    AS_tmp = str (AqueousStates_ExchangeSpecies_list [i][0])
                    runfile.write (F_tmp)
                    runfile.write (' = ExchangeBindingSpecies(\"')
                    runfile.write (F_tmp)
                    runfile.write ('\", ')
                    Name = str (AqueousStates_ExchangeSpecies_Properties_list [i][1])
                    Quantity = str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
                    if (Name == ""):
                        runfile.write ('MolesAmount (')
                        runfile.write (Quantity)
                        runfile.write (', ')
                        #if Concentration_Unit == 'moles/l':
                        runfile.write ('\"mol\")')
                    else:
          # que se passe-t il en presence d une phase pure ?
                        runfile.write ('MolesAmount (')
                        runfile.write (Quantity)
                        runfile.write (', ')
                        #if Concentration_Unit == 'moles/l':
                        runfile.write ('\"mol\")')

                    runfile.write (')')
                    runfile.write ('\nlistofsorptionsitespecies_')
                    runfile.write (AS_tmp)
                    runfile.write ('.append (')
                    runfile.write (F_tmp)
                    runfile.write (')')

                    i = i+1


	        """
	        runfile.write ('\n')           
                runfile.write ('\n#===========#')           
                runfile.write ('\n#  EXCHANGE #')           
                runfile.write ('\n#===========#')           
                runfile.write ('\n')           
                runfile.write ('\n')
                j = 0
                while j < len (AqueousStates_list):
                    runfile.write ('\nIonicExchanger_')
                    runfile.write (AqueousStates_list [j])
                    runfile.write (' = []')
                    runfile.write ('\nIonicExchangerSolution_')
                    runfile.write (AqueousStates_list [j])
                    runfile.write (' = IonicExchangers (IonicExchanger_')
                    runfile.write (AqueousStates_list [j])
                    runfile.write (')')
                    runfile.write ('\n')
                    j = j + 1

                States = []
                i = 0
                while i < len (AqueousStates_ExchangeSpecies_list):

                    state = str (AqueousStates_ExchangeSpecies_list [i][0])
                    if state not in States:
                        States.append (state)
                    i = i+1

                for x in States:

                    runfile.write ('\nIonicExchanger_')
                    runfile.write (x)
                    runfile.write (' = []')
                    runfile.write ('\nIonicExchangerSolution_')
                    runfile.write (x)
                    runfile.write (' = IonicExchangers (IonicExchanger_')
                    runfile.write (x)
                    runfile.write (')')

                runfile.write ('\n')
                i = 0

                while i < len (AqueousStates_ExchangeSpecies_list):

                    AS_tmp = str (AqueousStates_ExchangeSpecies_list [i][0])
                    F_tmp = str (AqueousStates_ExchangeSpecies_list [i][1])
                    Kind = str (AqueousStates_ExchangeSpecies_Properties_list [i][0])
                    Name = str (AqueousStates_ExchangeSpecies_Properties_list [i][1])
                    Quantity = str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
                    runfile.write ('\n')
                    runfile.write (F_tmp)            
                    if (Kind == 'Amount'):
                        runfile.write (' = ExchangeBindingSpecies (\'')
                        runfile.write (F_tmp)
                        runfile.write ('\', ')
                        runfile.write ('MolesAmount (')
                        runfile.write (Quantity)
                        runfile.write (', \'')
                        #if Concentration_Unit == "moles/l":
                        runfile.write ('mol\'))')
                        #else:
                         #   pass
                    elif (Kind == 'Equilibrium'):
# debug_18_11_2005
                        runfile.write (' = ExchangeMineralBindingSpecies (\'')
                        runfile.write (F_tmp)
                        runfile.write ('\', \'')
                        runfile.write (Name)
                        runfile.write ('\', ')
                        runfile.write (Quantity)
                        runfile.write (')')


                    runfile.write ('\nIonicExchanger_')
                    runfile.write (AS_tmp)
                    runfile.write ('.append (')
                    runfile.write (F_tmp)
                    runfile.write (')')
                    i = i+1            

                runfile.write ('\n')
                for x in States:

                    runfile.write ('\nIonicExchangerSolution_')
                    runfile.write (x)            
                    runfile.write (' = IonicExchangers (IonicExchanger_')
                    runfile.write (x)
                    runfile.write (')')
                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n')
                #runfile.write ('\n#')
                #runfile.write ('\n##')
                #runfile.write ('\n##  Treatment of the AqueousComponentSpecies')
                #runfile.write ('\n##')


# debug_run


                runfile.write ('\n')
                runfile.write ('\n#================================================#')
                runfile.write ('\n#  Definition of Surface Site Component Species  #')
                runfile.write ('\n#================================================#')
                runfile.write ('\n')
                if len (AqueousStates_SurfaceSpecies_list) != 0:
                    j = 0
                    while j < len (AqueousStates_list):
                        runfile.write ('\nSurfaceComplexation_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (' = []')
                        runfile.write ('\nSurfaceComplexationSolution_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (')')
                        runfile.write ('\n')
                        j = j + 1
                else:  # a faire... test sur surface pour ne pas écrire lorsque l'on n'en a pas besoin
                    j = 0
                    while j < len (AqueousStates_list):
                        runfile.write ('\nSurfaceComplexation_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (' = []')
                        runfile.write ('\nSurfaceComplexationSolution_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
                        runfile.write (AqueousStates_list [j])
                        runfile.write (')')
                        runfile.write ('\n')
                        j = j + 1
                    pass

                States = []
                i = 0
                while i < len (AqueousStates_SurfaceSpecies_list):
                    state = str (AqueousStates_SurfaceSpecies_list [i][0])
                    if state not in States:
                        States.append (state)
                    i = i+1

                for x in States:
                    runfile.write ('\nSurfaceComplexation_')
                    runfile.write (x)
                    runfile.write (' = []')
                    runfile.write ('\nSurfaceComplexationSolution_')
                    runfile.write (x)
                    runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
                    runfile.write (x)
                    runfile.write (')')

                runfile.write ('\n')
                i = 0            
                while i < len (AqueousStates_SurfaceSpecies_list):
                    AS_tmp = str (AqueousStates_SurfaceSpecies_list [i][0])
                    F_tmp = str (AqueousStates_SurfaceSpecies_list [i][1])
                    NumberOfSites = str (AqueousStates_SurfaceSpecies_Properties_list [i][0])
                    SpecificArea_on_off = str (AqueousStates_SurfaceSpecies_Properties_list [i][1])
                    SpecificArea = str (AqueousStates_SurfaceSpecies_Properties_list [i][2])
                    Mass = str (AqueousStates_SurfaceSpecies_Properties_list [i][3])
                    F_tmp_2 = F_tmp
                    F_tmp_2 = F_tmp_2.replace ('(', '_')
                    F_tmp_2 = F_tmp_2.replace (')', '_')
                    F_tmp_2 = F_tmp_2.replace ('+', '_')
                    F_tmp_2 = F_tmp_2.replace ('-', '_')
                    runfile.write ('\n')
                    runfile.write (F_tmp_2)
                    runfile.write ('Site_')
                    runfile.write (F_tmp_2)
                    runfile.write (' = SurfaceBindingSpecies (\'')
                    runfile.write (F_tmp)
                    runfile.write ('\', MolesAmount (')
                    runfile.write (NumberOfSites)
                    runfile.write (', \'')
                    runfile.write ('mol\')')
                    if SpecificArea_on_off == 'On':
                        runfile.write (', specificAreaPerGram = SpecificAreaPerGram (\'')
                        runfile.write (F_tmp)
                        runfile.write ('\', ')
                        runfile.write (SpecificArea)
                        runfile.write (')')
                        runfile.write (', mass = Mass (')
                        runfile.write (Mass)
                        runfile.write (', \"g\"))')
                    else:
                        runfile.write (')')

                    runfile.write ('\nSurfaceComplexation_')
                    runfile.write (AS_tmp)
                    runfile.write ('.append (')
                    runfile.write (F_tmp_2)
                    runfile.write ('Site_')
                    runfile.write (F_tmp_2)
                    runfile.write (')')
                    i = i+1            

                runfile.write ('\n')
                for x in States:

                    runfile.write ('\nSurfaceComplexationSolution_')
                    runfile.write (x)   
                    runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
                    runfile.write (x)
                    runfile.write (')')



# debug_run



                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\nProblemName = \"')
                runfile.write (str (Title))
                runfile.write ('\"')
                runfile.write ('\nPhreeqc_file = \"')
                runfile.write (str (Title))
                runfile.write ('.txt\"')
                runfile.write ('\n')
                runfile.write ('\n')
                if mode == 'structured':
                    runfile.write ('\n#==========================#')
                    runfile.write ('\n#  Definition of the mesh  #')
                    runfile.write ('\n#==========================#')
                    runfile.write ('\nmesh = StructuredMesh2D(\"global\",\"XY\")')
# debug_run

        #  calcul de dx
                    """    

                    dx = []
                    k = 0
                    while k < len (Mesh_list_InI):
                        factor = 1
                        i = 1
                        N_of_Cells = int (str (Mesh_list_InI [k][0]))
                        l = float (str (Mesh_list_InI [k][1]))
                        Geom_Ratio = float (str (Mesh_list_InI [k][2]))
                        while i < N_of_Cells:
                            factor = factor + pow (Geom_Ratio, i)
                            i = i+1
                        dx_min = l / factor
			dx_aux = [dx_min]
                        i = 1
                        while i < N_of_Cells + 1:
                            dx_next = dx_aux [i-1] * pow (Geom_Ratio, i)
                            dx_aux.append (dx_next)
                            dx.append (dx_next)
                            i = i+1
                        k = k+1
                    """    

 #debug_geometricratio                       
                    """    
                    dx = []
                    k = 0
                    while k < len (Mesh_list_InI):
                        i = 1
                        N_of_Cells = int (str (Mesh_list_InI [k][0]))
                        l = float (str (Mesh_list_InI [k][1]))
                        Geom_Ratio = float (str (Mesh_list_InI [k][2]))
                        
                        dx_aux = [float (l / N_of_Cells)]
                        i = 1
                        while i < N_of_Cells + 1:
                            dx_next = dx_aux [i-1] * Geom_Ratio / l
                            dx_aux.append (dx_next)
                            dx.append (dx_next)
                            i = i+1
                        k = k+1
                    """



            #  calcul de dy
                    dy = []
                    k = 0
                    while k < len (Mesh_list_InJ):
                        factor = 1
                        i = 1
                        N_of_Cells = int (str (Mesh_list_InJ [k][0]))
                        l = float (str (Mesh_list_InJ [k][1]))
                        Geom_Ratio = float (str (Mesh_list_InJ [k][2]))
                        while i < N_of_Cells:
                            factor = factor + pow (Geom_Ratio, i)
                            i = i+1
                        dy_min = l / factor
                        dy_aux = [dy_min]
                        i = 1
                        while i < N_of_Cells + 1:
                            dy_next = dy_aux [i-1] * pow (Geom_Ratio, i)
                            dy_aux.append (dy_next)
                            dy.append (dy_next)
                            i = i+1
                        k = k+1

                    #if len (dy) == 0:
	            #    dy = [1.0]


                    #if len (dx) != 0:
                    #    dx [0] = dx [0]/2
                    #runfile.write ('\ndx = ')
                    #runfile.write (str (dx))
                    runfile.write ('\ndx = [')
		    k = 0
		    dx_min = 0
                    while k < len (Mesh_list_InI):
                        factor = 1
                        i = 1
                        N_of_Cells = int (str (Mesh_list_InI [k][0]))
                        l = float (str (Mesh_list_InI [k][1]))
                        Geom_Ratio = float (str (Mesh_list_InI [k][2]))
                        while i < N_of_Cells:
                            factor = factor + pow (Geom_Ratio, i)
                            i = i+1
                        dx_min = l / factor
			if k == 0:
			    runfile.write (str(dx_min/2))
			    i = 1
			    while i < N_of_Cells:
			        runfile.write (' ,'+str(dx_min))
			        i=i+1
			elif k == len (Mesh_list_InI):
			    i = 1
			    while i < N_of_Cells:
			        runfile.write (' ,'+str(dx_min))
			        i=i+1
			    runfile.write (str(dx_min))
			else:
			    i = 1
			    while i < N_of_Cells+1:
			        runfile.write (' ,'+str(dx_min))
			        i=i+1
                        k = k+1
                    runfile.write (']')

                    if len (dy) == 0:
	                dy = [1.0]
                        runfile.write ('\ndy = ')
                        runfile.write (str (dy))
		    else:
                	runfile.write ('\ndy = [')
			k = 0
			dy_min = 0
                	while k < len (Mesh_list_InJ):
                            factor = 1
                            i = 1
                            N_of_Cells = int (str (Mesh_list_InJ [k][0]))
                            l = float (str (Mesh_list_InJ [k][1]))
                            Geom_Ratio = float (str (Mesh_list_InJ [k][2]))
                            while i < N_of_Cells:
                        	factor = factor + pow (Geom_Ratio, i)
                        	i = i+1
                            dy_min = l / factor
			    if k == 0:
				runfile.write (str(dy_min))
				i = 1
				while i < N_of_Cells:
			            runfile.write (' ,'+str(dy_min))
			            i=i+1
			    elif k == len (Mesh_list_InJ):
				i = 1
				while i < N_of_Cells:
			            runfile.write (' ,'+str(dy_min))
			            i=i+1
				runfile.write (str(dy_min))
			    else:
				i = 1
				while i < N_of_Cells+1:
			            runfile.write (' ,'+str(dy_min))
			            i=i+1
                            k = k+1
                	runfile.write (']')

		    
                    runfile.write ('\npointlist_x = [0.0]')
                    runfile.write ('\npointlist_y = [0.0]')
                    runfile.write ('\nfor i in range (0, len (dx), 1):')
                    runfile.write ('\n    pointlist_x.append (pointlist_x[i] + dx[i])')
                    runfile.write ('\nfor i in range (0, len (dy), 1):')
                    runfile.write ('\n    pointlist_y.append (pointlist_y[i] + dy[i])')
                    runfile.write ('\nmesh.setAxis(\"X\",pointlist_x)')
                    runfile.write ('\nmesh.setAxis(\"Y\",pointlist_y)')

            #  calcul de nx
            ####  En theorie on ne doit pas en avoir besoin...

                    nx = 0
                    i = 0
                    while i < len (Mesh_list_InI):
                        N_of_Cells = int (str (Mesh_list_InI [i][0]))
                        nx = nx + N_of_Cells
                        i = i+1

            #  calcul de ny
            ####  En theorie on ne doit pas en avoir besoin...

                    ny = 0
                    j = 0
                    if len (Mesh_list_InJ) == 0:
                        Mesh_list_InJ = [[1, 1.0, 1.0]]
                    while j < len (Mesh_list_InJ):
                        N_of_Cells = int (str (Mesh_list_InJ [j][0]))
                        ny = ny + N_of_Cells
                        j = j+1

                    runfile.write ('\nnx = ')
                    runfile.write (str (nx))
                    runfile.write ('\nny = ')
                    runfile.write (str (ny))
                    runfile.write ('\n#==========================#')
                    runfile.write ('\n')
                    runfile.write ('\n')   
                    
                    
                runfile.write ('\n#===========================#')
                runfile.write ('\n#  Definition of Materials  #')
                runfile.write ('\n#===========================#')
                i = 0
                while i < len (Materials_list):

                    permeability = str (Materials_Properties_list [i][0])
                    porosity = str (Materials_Properties_list [i][2])
                    effectiveDiffusion = str (Materials_Properties_list [i][3])
                    longitudinalDispersivity = str (Materials_Properties_list [i][4])
                    transverseDispersivity = str (Materials_Properties_list [i][5])

                    runfile.write ('\n')
                    runfile.write (Materials_list [i])
                    runfile.write ('_material = Material (name = \"')
                    runfile.write (Materials_list [i])
		    runfile.write ('\",\n                          effectiveDiffusion = EffectiveDiffusion (')
                    runfile.write (effectiveDiffusion)
                    runfile.write ('),\n                          permeability = Permeability (')
                    runfile.write (permeability)
                    runfile.write ('),\n                          porosity = Porosity (')
                    runfile.write (porosity)
                    runfile.write ('),\n                          kinematicDispersion = KinematicDispersion (')
                    runfile.write (longitudinalDispersivity)
                    runfile.write (', ')
                    runfile.write (transverseDispersivity)
                    runfile.write ('))')
                    i = i+1
                runfile.write ('\n#===========================#')
                runfile.write ('\n')
                runfile.write ('\n')

                if mode == 'structured':
        #  SET ZONES
                    Zones = []
                    Boundaries = []
                    i = 0
                    while i < len (Zones_list):

                        kind = str (Zone_Material_AqueousState_list [i][6])
                        if (kind == 'Zone'): 
                            Zones.append (Zones_list [i])
                        else:    #  This is a boundary
                            Boundaries.append (Zones_list [i])

                        i = i+1



	            runfile.write ('\n#=========================#')
	            runfile.write ('\n#  Definition of Zones  #')
	            runfile.write ('\n#=========================#')	    
                    runfile.write ('\n')
                    runfile.write ('\n#---------------')
                    runfile.write ('\n#  Zones   ')
                    runfile.write ('\n#---------------')	    
	            runfile.write ('\nregions_list = []')
                    runfile.write ('\ninitialconditions_list = []')
                    i = 0
                    while i < len (Zones):

                        Zone = str (Zones [i])
                        Zone = replace (str (Zone), " ", "_")
                        index = Zones_list.index (str (Zones [i]))
                        Material = str (Zone_Material_AqueousState_list [index][0])
                        AqueousState = str (Zone_Material_AqueousState_list [index][1])
                        i_min = str (Zone_Material_AqueousState_list [index][2])
                        j_min = str (Zone_Material_AqueousState_list [index][3])
                        i_max = str (Zone_Material_AqueousState_list [index][4])
                        j_max = str (Zone_Material_AqueousState_list [index][5])
                        runfile.write ('\n')
                        runfile.write (Zone)
                        runfile.write ('_reg_m = StructuredMesh2D (\"')
                        runfile.write (Zone)
                        runfile.write ('Region\", \"XY\")')
                        runfile.write ('\n')
                        runfile.write (Zone)
                        runfile.write ('_reg_m.setZone (\"')
                        runfile.write (Zone)
                        runfile.write ('Region\", index_min = Index2D (')
                        runfile.write (i_min)
                        runfile.write (', ')
                        runfile.write (j_min)
                        runfile.write ('), index_max = Index2D (')
                        runfile.write (i_max)
                        runfile.write (', ')
                        runfile.write (j_max)
                        runfile.write ('))')
                        runfile.write ('\nreg')
                        str_i = str (i)
                        runfile.write (str_i)
                        runfile.write (' = Region (')
                        runfile.write (Zone)
                        runfile.write ('_reg_m, ')
                        runfile.write (Material)
                        runfile.write ('_material')
                        runfile.write (')')
                        runfile.write ('\nregions_list.append (reg')
                        runfile.write (str_i)
                        runfile.write (')')
                        runfile.write ('\n')
                        runfile.write (Zone)
                        #runfile.write (AqueousState)
                        if ChemistryTool == 'PhreeqC':
                            runfile.write ('ColumnStage = StageChemicalState (\"')
                        elif ChemistryTool == 'Chess':
                            runfile.write ('ColumnStage = GlobalChemicalState (\"')
                        runfile.write (Zone)
                        #runfile.write (AqueousState)
                        runfile.write ('\", AqueousSolution_')
                        runfile.write (AqueousState)
                        runfile.write (', MineralPhaseSolution_')
                        runfile.write (AqueousState)
                        runfile.write (', gasPhasesolution_')
                        runfile.write (AqueousState)
                        runfile.write (', IonicExchangerSolution_')
                        runfile.write (AqueousState)
                        #if ...
                  #  AS_tmp = str (AqueousStates_SurfaceSpecies_list [i][0])
                   # F_tmp = str (AqueousStates_SurfaceSpecies_list [i][1])

                        runfile.write (', SurfaceComplexationSolution_')
                        runfile.write (AqueousState)

		        l = AqueousStates_list.index (AqueousState)
                        if str (AqueousStates_Properties_list [l][6]) == 'Balance':
                            runfile.write (', balance = (\"')
                            element = str (AqueousStates_Properties_list [l][8])
                            n_of_moles = str (AqueousStates_Properties_list [l][7])
                            runfile.write (element)
                            runfile.write ('\", ')
                            runfile.write (n_of_moles)
                            runfile.write (')')
                        else:
                            pass
                        if str (AqueousStates_Properties_list [l][3]) == 'Fix':
                            runfile.write (', phFixed = (\"')
                            element = str (AqueousStates_Properties_list [l][5])
                            n_of_moles = str (AqueousStates_Properties_list [l][4])
                            runfile.write (element)
                            runfile.write ('\", ')
                            runfile.write (n_of_moles)
                            runfile.write (')')
                        else:
                            pass 

                        t = 0
                        if len (mineralEquilibrium_list [l]) != 0:
                            runfile.write (', mineralEquilibrium = [')
                            while t < (len (mineralEquilibrium_list [l]) -1):
                                if len (mineralEquilibrium_list [l][t]) != 0:
			            spec = str (mineralEquilibrium_list [l][t][0])
                                    conc = str (mineralEquilibrium_list [l][t][1])
                                    mineral = str (mineralEquilibrium_list [l][t][2])
                                    runfile.write ('(\"')
                                    runfile.write (spec)
                                    runfile.write ('\", \"')
                                    runfile.write (mineral)
                                    runfile.write ('\", ')
                                    runfile.write (conc)
                                    runfile.write (')')
                                    runfile.write (', ')
			        else:
			            pass
                                t = t+1
                            if len (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1]) != 0:
		                spec = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1][0])
                                conc = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) -1][1])
                                mineral = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1][2])
                                runfile.write ('(\"')
                                runfile.write (spec)
                                runfile.write ('\", \"')
                                runfile.write (mineral)
                                runfile.write ('\", ')
                                runfile.write (conc)
                                runfile.write (')]')
		            else:
		                pass
                        else: 
                            pass

                        if str (AqueousStates_Properties_list [l][3]) == 'Charge':
                            runfile.write (', charge = 1')
                        else:
                            pass 

                        runfile.write (')')
                        runfile.write ('\nreg')
                        runfile.write (str_i)
                        runfile.write ('_ic = InitialCondition (')
                        runfile.write (Zone)
                        runfile.write ('_reg_m, value = ')
                        runfile.write (Zone)
                        #runfile.write (AqueousState)
                        runfile.write ('ColumnStage)')
                        runfile.write ('\ninitialconditions_list.append (')
                        runfile.write ('reg')
                        runfile.write (str_i)
                        runfile.write ('_ic)')        
                        i = i+1
                    j = i
                    k = 0
                    runfile.write ('\n')	    
                    runfile.write ('\n#---------------')
                    runfile.write ('\n#  Boundaries   ')
                    runfile.write ('\n#---------------')	    
                    runfile.write ('\nboundaryconditions_list = []')
                    while k < len (Boundaries):

                        index = Zones_list.index (str (Boundaries [k]))
                        Boundary = str (Boundaries [k])
                        Boundary = replace (str (Boundary), " ", "_")
                        Material = str (Zone_Material_AqueousState_list [index][0])
                        AqueousState = str (Zone_Material_AqueousState_list [index][1])
                        i_min = str (Zone_Material_AqueousState_list [index][2])
                        j_min = str (Zone_Material_AqueousState_list [index][3])
                        i_max = str (Zone_Material_AqueousState_list [index][4])
                        j_max = str (Zone_Material_AqueousState_list [index][5])
                        runfile.write ('\n')
                        runfile.write (Boundary)
                        runfile.write ('_bo_m')
                        str_k = str (k)
                        runfile.write (str_k)
                        runfile.write (' = StructuredMesh2D (\"')
                        runfile.write (Boundary)
                        runfile.write ('boundary\", \"XY\")')
                        runfile.write ('\n')
                        runfile.write (Boundary)
                        runfile.write ('_bo_m')
                        runfile.write (str_k)
                        runfile.write ('.setZone (\"')
                        runfile.write (Boundary)
                        runfile.write ('boundary\", index_min = Index2D (')
                        runfile.write (i_min)
                        runfile.write (', ')
                        runfile.write (j_min)
                        runfile.write ('), index_max = Index2D (')
                        runfile.write (i_max)
                        runfile.write (', ')
                        runfile.write (j_max)
                        runfile.write ('))')
                        runfile.write ('\nreg')
                        str_j = str (j)
                        runfile.write (str_j)
                        runfile.write (' = Region (')
                        runfile.write (Boundary)
                        runfile.write ('_bo_m')
                        runfile.write (str_k)
                        runfile.write (', ')
                        runfile.write (Material)
                        runfile.write ('_material')
                        runfile.write (')')
                        runfile.write ('\nregions_list.append (reg')
                        runfile.write (str_j)
                        runfile.write (')')
                        runfile.write ('\n')
                        runfile.write (AqueousState)
                        runfile.write ('_bcStage')
                        runfile.write (str_k)
                        if ChemistryTool == 'PhreeqC':
                            runfile.write (' = StageChemicalState (\"')
                        elif ChemistryTool == 'Chess':
                            runfile.write (' = GlobalChemicalState (\"')
                        runfile.write (AqueousState)
                        runfile.write ('_bc')
                        runfile.write (str_k)
                        runfile.write ('\", AqueousSolution_')
                        runfile.write (AqueousState)
                        runfile.write (', MineralPhaseSolution_')
                        runfile.write (AqueousState)
                        runfile.write (', gasPhasesolution_')
                        runfile.write (AqueousState)
                        runfile.write (', IonicExchangerSolution_')
                        runfile.write (AqueousState)
                        runfile.write (', SurfaceComplexationSolution_')
                        runfile.write (AqueousState)
                        l = AqueousStates_list.index (AqueousState)
                        if str (AqueousStates_Properties_list [l][6]) == 'Balance':
                            runfile.write (', balance = (\"')
                            element = str (AqueousStates_Properties_list [l][8])
                            n_of_moles = str (AqueousStates_Properties_list [l][7])
                            runfile.write (element)
                            runfile.write ('\", ')
                            runfile.write (n_of_moles)
                            runfile.write (')')
                        else:
                            pass                                
                        if str (AqueousStates_Properties_list [l][3]) == 'Fix':
                            runfile.write (', phFixed = (\"')
                            element = str (AqueousStates_Properties_list [l][5])
                            n_of_moles = str (AqueousStates_Properties_list [l][4])
                            runfile.write (element)
                            runfile.write ('\", ')
                            runfile.write (n_of_moles)
                            runfile.write (')')
                        else:
                            pass                    

                        t = 0
                        if len (mineralEquilibrium_list [l]) != 0:
                            runfile.write (', mineralEquilibrium = [')
                            while t < (len (mineralEquilibrium_list [l]) -1):
                                if len (mineralEquilibrium_list [l][t]) != 0:
			            spec = str (mineralEquilibrium_list [l][t][0])
                                    conc = str (mineralEquilibrium_list [l][t][1])
                                    mineral = str (mineralEquilibrium_list [l][t][2])
                                    runfile.write ('(\"')
                                    runfile.write (spec)
                                    runfile.write ('\", \"')
                                    runfile.write (mineral)
                                    runfile.write ('\", ')
                                    runfile.write (conc)
                                    runfile.write (')')
                                    runfile.write (', ')
			        else:
			            pass
                                t = t+1
                            if len (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1]) != 0:
		                spec = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1][0])
                                conc = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) -1][1])
                                mineral = str (mineralEquilibrium_list [l][len (mineralEquilibrium_list [l]) - 1][2])
                                runfile.write ('(\"')
                                runfile.write (spec)
                                runfile.write ('\", \"')
                                runfile.write (mineral)
                                runfile.write ('\", ')
                                runfile.write (conc)
                                runfile.write (')]')
		            else:
		                pass
                        else: 
                            pass

                        if str (AqueousStates_Properties_list [l][3]) == 'Charge':
                            runfile.write (', charge = 1')
                        else:
                            pass 

                        runfile.write (')')
                        runfile.write ('\nbc_')
                        runfile.write (Boundary)
                        runfile.write (str_k)
                        runfile.write (' = BoundaryCondition (')
                        runfile.write (Boundary)
                        runfile.write ('_bo_m')
                        runfile.write (str_k)
                        runfile.write (', \'Dirichlet\', value = ')
                        runfile.write (AqueousState)
                        runfile.write ('_bcStage')
                        runfile.write (str_k)
                        runfile.write (')')           
                        runfile.write ('\nboundaryconditions_list.append (bc_')
                        runfile.write (Boundary)
                        runfile.write (str_k)            
                        runfile.write (')')            
                        j = j+1
                        k = k+1

                    runfile.write ('\n')

			
			
		else:
		
		    i = 0
                    regions_tmp = []
                    if len (Unstructured_Zone_Material_list) != 0:
                	while i < (len (Unstructured_Zone_Material_list) - 1):
                            regions_tmp.append ('Region (support = mesh.getZone (\''+str (Unstructured_Zone_Material_list [i][0])+'\'), material = '+str (Unstructured_Zone_Material_list [i][1])+'_material)')                    
                            i = i+1
                	regions_tmp.append ('Region (support = mesh.getZone (\''+str (Unstructured_Zone_Material_list [len (Unstructured_Zone_Material_list) - 1][0])+'\'), material = '+str (Unstructured_Zone_Material_list [len (Unstructured_Zone_Material_list) - 1][1])+'_material)')
                    else:
                	pass
                    runfile.write ('\n')
                    runfile.write ('\n#=========================#')
                    runfile.write ('\n#  Definition of regions  #')
                    runfile.write ('\n#=========================#')
                    runfile.write ('\nregions_list = [')                
                    i = 0
                    if len (regions_tmp) != 0:
                        while i < (len (regions_tmp)-1):
                            runfile.write (str (regions_tmp [i]))                    
                	    runfile.write (',\n           ')
                	    i = i+1
                        runfile.write (str (regions_tmp [len (regions_tmp)-1]))
                    runfile.write (']')


                    i = 0
                    ic_tmp = []
                    if len (InitialConditions_list) != 0:
                	while i < (len (InitialConditions_list) - 1):
                            ic_tmp.append ('InitialCondition (zone = mesh.getZone (\''+str (InitialConditions_list [i][0])+'\'),\
                            \n                                       value = StageChemicalState (\''+str (InitialConditions_list [i][0])+'\',\
                            \n                                                                   AqueousSolution_'+str (InitialConditions_list [i][1])+',\
                            \n                                                                   MineralPhaseSolution_'+str (InitialConditions_list [i][1])+',\
                            \n                                                                   gasPhasesolution_'+str (InitialConditions_list [i][1])+'))')

							       

                            i = i+1
                	ic_tmp.append ('InitialCondition (zone = mesh.getZone (\''+str (InitialConditions_list [len (InitialConditions_list) - 1][0])+'\'),\
                        \n                                       value = StageChemicalState (\''+str (InitialConditions_list [len (InitialConditions_list) - 1][0])+'\',\
                        \n                                                                   AqueousSolution_'+str (InitialConditions_list [len (InitialConditions_list) - 1][1])+',\
                        \n                                                                   MineralPhaseSolution_'+str (InitialConditions_list [len (InitialConditions_list) - 1][1])+',\
                        \n                                                                   gasPhasesolution_'+str (InitialConditions_list [len (InitialConditions_list) - 1][1])+'))')                   
                    else:
                	pass
                    runfile.write ('\n')		
                    runfile.write ('\n#====================================#')
                    runfile.write ('\n#  Definition of Initial Conditions  #')
                    runfile.write ('\n#====================================#')
                    runfile.write ('\ninitialconditions_list = [')
                    i = 0
                    if len (ic_tmp) != 0:
                        while i < (len (ic_tmp)-1):
                       	    runfile.write (str (ic_tmp [i]))                    
                	    runfile.write (',\n      ')
                	    i = i+1
                        runfile.write (str (ic_tmp [len (ic_tmp)-1]))
                    runfile.write (']')




# debug_run







                    i = 0
                    bc_tmp = []
                    if len (BoundaryConditions_list) != 0:
                	while i < (len (BoundaryConditions_list) - 1):
                            bc_tmp.append ('BoundaryCondition (mesh.getBoundary (\''+str (BoundaryConditions_list [i][0])+'\'),\
                            \n                         type = \'Dirichlet\',\
                            \n                         value = StageChemicalState (\''+str (BoundaryConditions_list [i][0])+'\',\
                            \n                                                     AqueousSolution_'+str (BoundaryConditions_list [i][1])+',\
                            \n                                                     MineralPhaseSolution_'+str (BoundaryConditions_list [i][1])+',\
                            \n                                                     gasPhasesolution_'+str (BoundaryConditions_list [i][1])+'))')

							       

                            i = i+1
                	bc_tmp.append ('BoundaryCondition (mesh.getBoundary (\''+str (BoundaryConditions_list [len (BoundaryConditions_list) - 1][0])+'\'),\
                        \n                         type = \'Dirichlet\',\
                        \n                         value = StageChemicalState (\''+str (BoundaryConditions_list [len (BoundaryConditions_list) - 1][0])+'\',\
                        \n                                                     AqueousSolution_'+str (BoundaryConditions_list [len (BoundaryConditions_list) - 1][1])+',\
                        \n                                                     MineralPhaseSolution_'+str (BoundaryConditions_list [len (BoundaryConditions_list) - 1][1])+',\
                        \n                                                     gasPhasesolution_'+str (BoundaryConditions_list [len (BoundaryConditions_list) - 1][1])+'))')                   
                    else:
                	pass
                    runfile.write ('\n')		
                    runfile.write ('\n#=====================================#')
                    runfile.write ('\n#  Definition of Boundary Conditions  #')
                    runfile.write ('\n#=====================================#')
                    runfile.write ('\nboundaryconditions_list = [')
                    i = 0
                    if len (bc_tmp) != 0:
                        while i < (len (bc_tmp)-1):
                	    runfile.write (str (bc_tmp [i]))                    
                	    runfile.write (',\n      ')
                	    i = i+1
                        runfile.write (str (bc_tmp [len (bc_tmp)-1]))
                    runfile.write (']')
                
                
                
                # kinetics
                                        
                runfile.write ('\n')
                runfile.write ('\nkineticLaws = []')
                i = 0
                while i < len (AqueousStates_KineticRates_list):
                    AqueousState = str (AqueousStates_KineticRates_list [i][0])
                    KineticRate = str (AqueousStates_KineticRates_list [i][1])
                    kind = str (AqueousStates_KineticRates_Properties_list [i][0])
                    if kind == 'Standard':
                        power = str (float (AqueousStates_KineticRates_Properties_list [i][1]))
                        rate = str (float (AqueousStates_KineticRates_Properties_list [i][2]))
                        specificSurfaceArea = str (float (AqueousStates_KineticRates_Properties_list [i][3]))
                        runfile.write ('\nkineticLaws.append (ReversibleKineticLaw (\"')
                        runfile.write (KineticRate)
                        runfile.write ('\"')
                        runfile.write (',rate = ReactionRate (')
                        runfile.write (rate)
                        runfile.write (',\'mol/m2/s\'), power = ')
                        runfile.write (power)
                        sphereModelExp_On_Off = str (AqueousStates_KineticRates_Properties_list [i][4])
                        if sphereModelExp_On_Off == 'On':
                            sphereModelExponent = str (float (AqueousStates_KineticRates_Properties_list [i][5]))
                            runfile.write (', sphereModelExponent = ')
                            runfile.write (sphereModelExponent)
                        else:
                            pass
                        runfile.write (', specificSurfaceArea = ')
                        runfile.write (specificSurfaceArea)
                        runfile.write ('))')
                    elif kind == 'Specific':
                        parameter = str (AqueousStates_KineticRates_Properties_list [i][1])
                        #runfile.write (', parameter = \"')
                        #runfile.write (parameter)
                        #runfile.write ('\"))')
			pass
                    i = i+1



                # expected outputs
                i = 0
                lenEO = len (ExpectedOutputs_list)
                if lenEO > 0:
                    runfile.write ('\n\noutputs_list = [')
                    while i < len (ExpectedOutputs_list):
                        if i == 0:
                            runfile.write ('ExpectedOutput (quantity = \'')
                        else:
                            runfile.write ('\n                ExpectedOutput (quantity = \'')
                        if str (ExpectedOutputs_list [i]) in ['pH', 'pe', 'Eh', 'tc', 'mass_water', 'ionicstrength']:
                            runfile.write (str (ExpectedOutputs_list [i]) + '\',')
                        else:
                            runfile.write ('Concentration\',')
                            runfile.write ('\n                                unknow = \'')
                            runfile.write (str (ExpectedOutputs_list [i]) + '\',')
                            runfile.write ('\n                                unit = \'mol/l\',')
                        runfile.write ('\n                                format = \'table\',')
                        runfile.write ('\n                                timeSpecification = TimeSpecification (times = [')
                        j = 0
                        while j < len (Times_list):
                            if j == (len (Times_list) - 1):
                                runfile.write (str (float (Times_list [j])) + '])')
                            else:
                                runfile.write (str (float (Times_list [j])) + ', ')
                            j = j+1
                        if str (ExpectedOutputs_list [i]) in ['pH', 'pe', 'Eh', 'tc', 'mass_water', 'ionicstrength']:
                            if i == (lenEO - 1):
                                runfile.write (')')
                            else:
                                runfile.write ('),')
                        else:                    
                            runfile.write (',\n                                name = \'')
                            runfile.write (str (ExpectedOutputs_list [i]))
                            if i == (lenEO - 1):
                                runfile.write ('\')')
                            else:
                                runfile.write ('\'),')
                        i = i+1
                    runfile.write (']')
                else:
                    pass

                runfile.write ('\n')
                runfile.write ('\n')
                runfile.write ('\n#=========================#')
                runfile.write ('\n#  Definition of Problem  #')
                runfile.write ('\n#=========================#')
                runfile.write ('\nproblem = ChemicalTransportProblem (\"')
                runfile.write (str (Title))
                runfile.write ('\",\n			            regions = regions_list,')
                runfile.write ('\n			            boundaryConditions = boundaryconditions_list,')
                runfile.write ('\n			            initialConditions = initialconditions_list,')
                runfile.write ('\n			            calculationTimes = [')
                runfile.write (str (Iterate_InitialTime))
                if '.' in str (Iterate_InitialTime):
	            pass
                else:
                    runfile.write ('.')
                runfile.write (', ')
                runfile.write (str (Iterate_SimulationTime))
                if '.' in str (Iterate_SimulationTime):
                    pass     
                else:
                    runfile.write ('.')        
                runfile.write ('],')     
                runfile.write ('\n				    sources = None,')
                runfile.write ('\n				    darcyVelocity = ')
	        if str (DarcyVelocity_list [0]) != '':
	            runfile.write ('Velocity (Vector ([')
		    runfile.write (str (float (DarcyVelocity_list [0])))
		    runfile.write (', ')
		    runfile.write (str (float (DarcyVelocity_list [1])))
		    runfile.write (', ')
		    runfile.write (str (float (DarcyVelocity_list [2])))
		    runfile.write ('])),')
                else:
	            runfile.write ('None,')
	            pass
                runfile.write ('\n			            bdd = \'')
                runfile.write (str (DefaultDatabase))
	        runfile.write ('\',')
                runfile.write ('\n			            newSpeciesList = newSpeciesList,')
                runfile.write ('\n			            kineticLaws = kineticLaws,')
# debug_parallel
                if Parallel_NumberOfNodes != 1:
                    runfile.write ('\n			            mpiAnz = MPI.world.size,')
#------------
# Porosity
#
                runfile.write ('\n			            porosityState = \'')
                runfile.write (PorosityState+'\',')
#---------------

#debug_diffusion      
#-------------
# Diffusion
#               
                if DiffusionState == "Winsauer":
                    runfile.write ('\n			            diffusionLaw = WinsauerDiffusionLaw (')
                    for m in Materials_list:
                        try:
			    cem_coeff = str (float (DiffusionLaws_dict [str (m)][2]))
			except:
			    cem_coeff = '0.0'
                        try:
			    perc_threshold_porosity = str (float (DiffusionLaws_dict [str (m)][3]))
			except:
			    perc_threshold_porosity = '0.0'
			if cem_coeff == '':
			    cem_coeff = '0.0'
			if perc_threshold_porosity  == '':
			    perc_threshold_porosity = '0.0'
		    runfile.write (cem_coeff)
		    runfile.write (', ')
		    ###
		    #  pb sur perc_threshold_porosity si != 0 ---> a voir dans chemicaltransportmodule
		    ###
		    runfile.write (perc_threshold_porosity)		    
		    runfile.write ('),')

                if DiffusionState == "Exponential":
                    runfile.write ('\n			            diffusionLaw = ExponentialDiffusionLaw (')
                    for m in Materials_list:
                        try:
			    exp_coeff = str (float (DiffusionLaws_dict [str (m)][2]))             
		        except:
		            exp_coeff = '0.0'
		    if exp_coeff == '':
		        exp_coeff = '0.0'    
		    runfile.write (exp_coeff)
		    runfile.write ('),')
		
		#####################################
		#  pb sur linear law: le calcul stoppe rapidement ---> pb de coeff ???
		#####################################	    
                if DiffusionState == "Linear":
                    runfile.write ('\n			            diffusionLaw = LinearDiffusionLaw (')
                    for m in Materials_list:
                        try:
			    linear_coeff = str (float (DiffusionLaws_dict [str (m)][2]))             
		        except:
		            linear_coeff = '0.0'
		    if linear_coeff == '':
		        linear_coeff = '0.0'    
		    runfile.write (linear_coeff)
		    runfile.write ('),')

                if DiffusionState == "Proportional":
                    runfile.write ('\n			            diffusionLaw = ProportionalDiffusionLaw (),')
                elif DiffusionState == "Constant":
                    pass
                else:
                    pass
#---------------------                
                runfile.write ('\n			            activityLaw = None,')
                runfile.write ('\n			            timeUnit = \'s\',')
		if Thermal == 'On':
                    runfile.write ('\n			            temperature = \'variable\',')
		else:
                    runfile.write ('\n			            temperature = \'constant\',')		  
                if len (ExpectedOutputs_list) != 0:
                    runfile.write ('\n			            outputs = outputs_list)')
                else:
                    runfile.write ('\n			            outputs = None)')
                runfile.write ('\n#=========================#')
                runfile.write ('\n')
                runfile.write ('\n')
# debug_parallel                
                
                if Parallel_NumberOfNodes != 1:
                    runfile.write ('\n#======================================================#')
                    runfile.write ('\n#  Define the calculation module and set problem data  #')
                    runfile.write ('\n#======================================================#')
                    runfile.write ('\nif MPI.world.rank==0:')
                    runfile.write ('\n    print \"chemicaltransport module \"')
                    runfile.write ('\n    module = ChemicalTransportModule ()')
                    runfile.write ('\n    module.setData (problem, ')
                    #if mode == 'unstructured':
                    #    runfile.write ('unstructured = 1, ')
                    #else:
                    #    pass
                    runfile.write ('trace = 0, mesh = mesh, algorithm = \"')
                    if Iterate_Algorithm == 'One_Step':
                        runfile.write ('NI')
                    elif Iterate_Algorithm == 'CC':
                        runfile.write ('CC')
                    runfile.write ('\")')        
                    runfile.write ('\n    module.setCouplingParameter (InitialTimeStep       = ')
                    if Iterate_Algorithm == 'One_Step':
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))			
                        runfile.write (',')
                        runfile.write ('\n                                 MinTimeStep           = ')
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))
                        runfile.write (',')
                        runfile.write ('\n                                 MaxTimeStep           = ')
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))
                        runfile.write (',')
                        runfile.write ('\n                                 CoefIncreaTimeStep    = 1.0,')
                        runfile.write ('\n                                 CoefDecreaTimeStep    = 1.0,')
                        runfile.write ('\n                                 CouplingPrecision     = ')
                        runfile.write (str (float (Iterate_CouplingPrecision)))                           
                        runfile.write (',')
                        runfile.write ('\n                                 MaxCouplingStep       = 2,')
                        runfile.write ('\n                                 ObjectiveCouplingStep = 2)')
                    elif Iterate_Algorithm == 'CC':
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))			
                        runfile.write (',')
                        runfile.write ('\n                                 MinTimeStep           = ')
                        runfile.write (str (float (Iterate_MinTimeStep)))
                        runfile.write (',')
                        runfile.write ('\n                                 MaxTimeStep           = ')
                        runfile.write (str (float (Iterate_MaxTimeStep)))
                        runfile.write (',')
                        runfile.write ('\n                                 CoefIncreaTimeStep    = ')
                        runfile.write (str (float (Iterate_RelaxationMaxFactor)))
                        runfile.write (',')
                        runfile.write ('\n                                 CoefDecreaTimeStep    = ')
                        runfile.write (str (float (Iterate_RelaxationMinFactor)))
                        runfile.write (',')
                        runfile.write ('\n                                 CouplingPrecision     = ')
                        runfile.write (str (float (Iterate_CouplingPrecision)))                           
                        runfile.write (',')
                        runfile.write ('\n                                 MaxCouplingStep       = ')
                        runfile.write (str (Iterate_MaxOfIterationsForThePicard))
                        runfile.write (',')
                        runfile.write ('\n                                 ObjectiveCouplingStep = ')
                        runfile.write (str (Iterate_IterationTargetNumberForThePicard))
                        runfile.write (')')
                    if mode == 'structured':
                        runfile.write ('\n    module.setTransportParameters (\"')
                        runfile.write (Mt3d_advection)
                        runfile.write ('\")')
                        runfile.write ('\n    module.setTransportParameters (\"')
                        runfile.write (Mt3d_ConjugateGradientPreconditioner)
                        runfile.write ('\", ')
                        runfile.write (str (Mt3d_cclose))
                        runfile.write (')')
		    else:
		        pass
		    i = 0
		    k = 0
                    while i < len (AqueousStates_KineticRates_list):
                        AqueousState = str (AqueousStates_KineticRates_list [i][0])
                        KineticRate = str (AqueousStates_KineticRates_list [i][1])
                        kind = str (AqueousStates_KineticRates_Properties_list [i][0])
                        if kind == 'Specific':
			    k = k+1
                            parameter = str (AqueousStates_KineticRates_Properties_list [i][1])
                            runfile.write ('\n')
                            runfile.write ('\n    kineticlaw_'+str (k)+' = \\')
			    for s in parameter.split ("\n"):
			        if s != '':
				    s = s.replace ('"', '\'')			    
			            runfile.write ('\n\"'+s+'\\n\"+\\')
			        else:
				    pass
            		    runfile.write ('\n\"\"')
			    runfile.write ('\n    module.setChemicalParameter (kineticlaw_'+str (k)+')')
                        i = i+1

#debug_KNOBS
#PhreeqC_KNOBS
#        global PhreeqC_NumberOfIterations
#        global PhreeqC_ConvergenceCriterion
# attention voir si fonctionne en //
                    """
                    if PhreeqC_KNOBS != '':
                        runfile.write ('\n')
			runfile.write ('\n    module.setChemicalParameter (\"'+PhreeqC_KNOBS+'\")')
                        
                    else:
                        runfile.write ('\n    module.setChemicalParameter (\"KNOBS\\n -iterations ')
                        runfile.write (str (PhreeqC_NumberOfIterations))
                        runfile.write ('\\n -convergence_tolerance ')
                        runfile.write (str (PhreeqC_ConvergenceCriterion))
                        runfile.write ('\\n\")')

                    """
                    """

                    if len (PostprocessingContours_AqueousComponentsToPlot_list) != 0:
                        runfile.write ('\n')
                        runfile.write ('\nmodule.setVtkStructuredFileWriterParameter(')
                        runfile.write (str (PostprocessingContours_Parameters_list [0]))
                        runfile.write (', ')
                        runfile.write (str (PostprocessingContours_AqueousComponentsToPlot_list))
                        runfile.write (', \"')
                        if str (PostprocessingContours_Parameters_list [1]) == 's':
                            runfile.write ('s')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Hours':
                            runfile.write ('hours')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Days':
                            runfile.write ('days')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Years':
                            runfile.write ('years')
                        else:
                            pass
                        runfile.write ('\")')
                    else:
                        pass

    # debug_XYPLOT

                    if len (InteractiveXYPlot_AqueousComponentsToPlot_list) != 0:
                        runfile.write ('\n')
                        list_of_species_toplot = []
                        point_to_plot = '1'
                        if str (InteractiveXYPlot_Parameters_list [1]) == '1': 
                            point_to_plot = str (InteractiveXYPlot_Parameters_list [0])
                        else:
                            point_to_plot = int (str (InteractiveXYPlot_Parameters_list [1])) * int (nx) + int (str (InteractiveXYPlot_Parameters_list [0]))
                        i = 0
                        while i < len (InteractiveXYPlot_AqueousComponentsToPlot_list):
                            list_of_species_toplot.append (str (InteractiveXYPlot_AqueousComponentsToPlot_list [i]))
                            i = i+1
                        runfile.write ('\nmodule.setInteractivePlot(\" ')
                        runfile.write (str (Title))
                        runfile.write (' \", ')
                        runfile.write (str (list_of_species_toplot))
                        runfile.write (', pointtoplot = ')
                        runfile.write (str (point_to_plot))
                        runfile.write (', plotfrequency = ')
                        runfile.write (str (InteractiveXYPlot_Parameters_list [2]))
                        runfile.write (')')

                    if len (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list) != 0:
                        runfile.write ('\n')
                        runfile.write ('\ninteractive_outputs = []')           
                        i = 0
                        while i < len (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list):
                            runfile.write ('\ninteractive_outputs.append (ExpectedOutput (unknow = \'')
                            runfile.write (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [i]))
                            runfile.write ('\', format = \'table\', name = \'')
                            runfile.write (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [i]))
                            runfile.write ('\'))')
                            i = i+1
                        runfile.write ('\nmodule.setInteractiveSpatialPlot (interactive_outputs, interactivespatialplotfrequency = ')
                        runfile.write (str (int (InteractiveXYPlot_Space_and_Time_Parameters_list [1])))
                        runfile.write (')\n')
                    """
                    
                    """
                    if mode == 'unstructured':
                        runfile.write ('\nmodule.transport.setTransportParameter (tolSolver = ')
		        runfile.write (str (Traces_Parameters ['tolSolver']))
                        runfile.write (', iterSolver = ')
                        runfile.write (str (Traces_Parameters ['iterSolver']))
                        runfile.write (', iterPrecip = 5, indAlliances = 0, indMemory = 0, library = \'')
                        runfile.write (str (Traces_Parameters ['library']))
                        runfile.write ('\', preconditioner = \'')
                        runfile.write (str (Traces_Parameters ['preconditioner']))
                        runfile.write ('\', accelerator = \'')
                        runfile.write (str (Traces_Parameters ['accelerator']))
                        runfile.write ('\', thetaScheme = ')
                        runfile.write (str (Traces_Parameters ['thetaScheme']))
                        runfile.write (', storageMode = \'SCF\')')
                    else:
                    """
                    runfile.write ('\n    module.setComponent (\"mt3d\", \"phreeqc\")')
                    runfile.write ('\n    module.run (MPI.world)')
                    #
#to do              #  Complete with comparison to analytical solution
                    #
                    runfile.write ('\n    module.end ()')
                    runfile.write ('\n#==================================================#')   
                    runfile.write ('\n\n###############\n###   END   ###\n###############\n')
                    runfile.write ('\nelse:')
                    runfile.write ('\n    ind = MPI.world.rank')
                    runfile.write ('\n    nb_procs = MPI.world.size')
                    runfile.write ('\n    nx = mesh.nb_of_intervals[0]')
                    runfile.write ('\n    ny = mesh.nb_of_intervals[1]\n')
                    runfile.write ('\n    if isInstance(initialconditions_list[0].zone,StructuredMesh):')
                    runfile.write ('\n        internalcellsnumber,StatesBounds = problem.getInitialConditionBoundaries()')
                    runfile.write ('\n    param = problem.getBoundaryConditions()')
                    runfile.write ('\n    name = problem.getName()')
                    runfile.write ('\n    problem.setName(\"pb_slave_\"+str(MPI.world.rank))')
                    runfile.write ('\n    problem.setDarcyVelocity(darcyVelocity=Velocity(Vector(0.,0.,0.)))\n')
                    runfile.write ('\n    kineticLaws = problem.getKineticLaws()')
                    runfile.write ('\n    if kineticLaws==None:')
                    runfile.write ('\n        kineticLaws=[]\n')
                    runfile.write ('\n    regions_List = problem.getRegions()')
                    runfile.write ('\n    ic_list = problem.getInitialConditions()\n')
                    runfile.write ('\n    if internalcellsnumber%(MPI.world.size-1)==0:')
                    runfile.write ('\n        slaveInternalCells = (internalcellsnumber)/(MPI.world.size-1)')
                    runfile.write ('\n        slaveInternalCells0 = slaveInternalCells')
                    runfile.write ('\n    else:')
                    runfile.write ('\n        if (MPI.world.rank<MPI.world.size-1):')
                    runfile.write ('\n            slaveInternalCells = (internalcellsnumber)/(MPI.world.size-1)+1')
                    runfile.write ('\n            slaveInternalCells0 = slaveInternalCells')
                    runfile.write ('\n        else:')
                    runfile.write ('\n            slaveInternalCells = internalcellsnumber- ((internalcellsnumber)/(MPI.world.size-1)+1)*(MPI.world.size-2)')
                    runfile.write ('\n            slaveInternalCells0 = (internalcellsnumber)/(MPI.world.size-1)+1\n')
                    runfile.write ('\n    deb = (MPI.world.rank-1)*slaveInternalCells+1')
                    runfile.write ('\n    fin = (MPI.world.rank)*slaveInternalCells #+1 cellule frontiere\n')    
                    runfile.write ('\n    dellist = []\n\n')
                    runfile.write ('\n    generic_material = Material(name = "generic",	effectiveDiffusion = EffectiveDiffusion (0.),\
							porosity = Porosity (value = 1.0),\
							kinematicDispersion = KinematicDispersion (1.0, 0.0))')
                    runfile.write ('\n    slave_initialConditionList = []')
                    runfile.write ('\n    slave_regionList = []\n')        
                    runfile.write ('\n    for ic in StatesBounds:')
                    runfile.write ('\n        i1 = StatesBounds[ic][0][0]')
                    runfile.write ('\n        i2 = StatesBounds[ic][0][1]')
                    runfile.write ('\n        zone = StatesBounds[ic][1]')
                    runfile.write ('\n        chemical_state = StatesBounds[ic][2]\n')
                    runfile.write ('\n        deb_zone = i1')
                    runfile.write ('\n        fin_zone = i2')
                    runfile.write ('\n        if deb_zone-deb < 0 and fin_zone -deb < 0:')
                    runfile.write ('\n            dellist.append(ic)')
                    runfile.write ('\n        elif deb_zone-fin > 0 and fin_zone -fin > 0:')
                    runfile.write ('\n            dellist.append(ic)')
                    runfile.write ('\n        else:')
                    runfile.write ('\n            zone.zones[0].min.i = max(1,zone.zones[0].min.i-deb+1)')
                    runfile.write ('\n            zone.zones[0].max.i = min(fin_zone - deb+1,slaveInternalCells)')
                    runfile.write ('\n            zone.zones[0].min.j = 1')
                    runfile.write ('\n            zone.zones[0].max.j = 1')
                    runfile.write ('\n            slave_initialConditionList.append(InitialCondition(zone = zone,value = chemical_state))')
                    runfile.write ('\n            slave_regionList.append(Region(support = zone,material = generic_material))\n')
                    runfile.write ('\n    problem.setInitialConditions(slave_initialConditionList)')
                    runfile.write ('\n    problem.setRegions(slave_regionList)\n')    
                    runfile.write ('\n    cas_slave = ChemicalTransportModule()\n')
                    runfile.write ('\n    cas_slave.setData (problem, trace = 0, mesh = mesh, algorithm=\"')
                    if Iterate_Algorithm == 'One_Step':
                        runfile.write ('NI')
                    elif Iterate_Algorithm == 'CC':
                        runfile.write ('CC')
                    runfile.write ('\")')        
                    runfile.write ('\n    cas_slave.setMeshSlave (MPI.world.rank)\n')


                    runfile.write ('\n    cas_slave.setTransportParameters(\"')
                    runfile.write (Mt3d_advection)
                    runfile.write ('\")')
                    runfile.write ('\n    cas_slave.setTransportParameters(\"')
                    runfile.write (Mt3d_ConjugateGradientPreconditioner)
                    runfile.write ('\", ')
                    runfile.write (str (Mt3d_cclose))
                    runfile.write (')')
                    runfile.write ('\n    cas_slave.setComponent(\"mt3d\",\"phreeqc\")')
                    runfile.write ('\n    ind = MPI.world.rank')



                    runfile.write ('\n    itt=0')
                    runfile.write ('\n    while 1:')
                    runfile.write ('\n        itt=itt+1')
                    runfile.write ('\n        conc_aqu_kp1,src,tag,count = MPI.world.receive(Numeric.Float,None,None)')
                    runfile.write ('\n        if len(conc_aqu_kp1)==1:')
                    runfile.write ('\n            if conc_aqu_kp1[0]==1.:')
                    runfile.write ('\n                break')
                    runfile.write ('\n            elif  conc_aqu_kp1[0]==2.:')
                    runfile.write ('\n                name,src,tag= MPI.world.receiveString(0)')
                    runfile.write ('\n                values = cas_slave.chemical.getOutput(name)')
                    runfile.write ('\n                MPI.world.send(Numeric.array(values),0,0)')
                    runfile.write ('\n        else:')
                    runfile.write ('\n            if kineticLaws!=[]:')
                    runfile.write ('\n                timeStep,src,tag,count=MPI.world.receive(Numeric.Float,None,None)')
                    runfile.write ('\n                cas_slave.setTimeStep_slave(timeStep[0])')
                    runfile.write ('\n            deb_time=time.time()')
                    runfile.write ('\n            conc=cas_slave.equilibrate_slave(conc_aqu_kp1=conc_aqu_kp1.tolist())')
                    runfile.write ('\n            end_time=time.time()')
                    runfile.write ('\n            cpu_time_chem=end_time-deb_time')
                    runfile.write ('\n            MPI.world.send(Numeric.array(conc),0,0)')
                    runfile.write ('\n            MPI.world.send(Numeric.array(cpu_time_chem),0,0)\n')
                    runfile.write ('\n    cas_slave.end()')
                    runfile.write ('\n    print \"#########\"')
                    runfile.write ('\n    print \"end for slave \",MPI.world.rank')
                    runfile.write ('\n    print \"#########\"')







##  nb proc = 1  ##
                else:
                    runfile.write ('\n#======================================================#')
                    runfile.write ('\n#  Define the calculation module and set problem data  #')
                    runfile.write ('\n#======================================================#')
                    runfile.write ('\nmodule = ChemicalTransportModule ()')
                    runfile.write ('\nmodule.setData (problem, ')
                    if mode == 'unstructured':
                        runfile.write ('unstructured = 1, ')
                    else:
                        pass
                    runfile.write ('trace = 0, mesh = mesh, algorithm = \"')
                    if Iterate_Algorithm == 'One_Step':
                        runfile.write ('NI')
                    elif Iterate_Algorithm == 'CC':
                        runfile.write ('CC')
                    runfile.write ('\")')        
                    runfile.write ('\n#======================================================#')
                    runfile.write ('\n')
                    runfile.write ('\n')
                    runfile.write ('\n#==================================================#')
                    runfile.write ('\n#  Define the Component and its solver parameters  #')
                    runfile.write ('\n#==================================================#')
                    #if mode == 'unstructured':
                    #    runfile.write ('\nmodule.setComponent(TransportComponent = \"Traces\", ChemicalComponent = \"Phreeqc\")')
                    #else:
                    #    pass
                    runfile.write ('\nmodule.setCouplingParameter (InitialTimeStep       = ')
                    if Iterate_Algorithm == 'One_Step':
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))			
                        runfile.write (',')
                        runfile.write ('\n                             MinTimeStep           = ')
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))
                        runfile.write (',')
                        runfile.write ('\n                             MaxTimeStep           = ')
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))
                        runfile.write (',')
                        runfile.write ('\n                             CoefIncreaTimeStep    = 1.0,')
                        runfile.write ('\n                             CoefDecreaTimeStep    = 1.0,')
                        runfile.write ('\n                             CouplingPrecision     = ')
                        runfile.write (str (float (Iterate_CouplingPrecision)))                           
                        runfile.write (',')
                        runfile.write ('\n                             MaxCouplingStep       = 2,')
                        runfile.write ('\n                             ObjectiveCouplingStep = 2)')
                    elif Iterate_Algorithm == 'CC':
                        runfile.write (str (float (Iterate_InitialTimeStepSize)))			
                        runfile.write (',')
                        runfile.write ('\n                             MinTimeStep           = ')
                        runfile.write (str (float (Iterate_MinTimeStep)))
                        runfile.write (',')
                        runfile.write ('\n                             MaxTimeStep           = ')
                        runfile.write (str (float (Iterate_MaxTimeStep)))
                        runfile.write (',')
                        runfile.write ('\n                             CoefIncreaTimeStep    = ')
                        runfile.write (str (float (Iterate_RelaxationMaxFactor)))
                        runfile.write (',')
                        runfile.write ('\n                             CoefDecreaTimeStep    = ')
                        runfile.write (str (float (Iterate_RelaxationMinFactor)))
                        runfile.write (',')
                        runfile.write ('\n                             CouplingPrecision     = ')
                        runfile.write (str (float (Iterate_CouplingPrecision)))                           
                        runfile.write (',')
                        runfile.write ('\n                             MaxCouplingStep       = ')
                        runfile.write (str (Iterate_MaxOfIterationsForThePicard))
                        runfile.write (',')
                        runfile.write ('\n                             ObjectiveCouplingStep = ')
                        runfile.write (str (Iterate_IterationTargetNumberForThePicard))
                        runfile.write (')')
                    if mode == 'structured':
                        runfile.write ('\n')
                        runfile.write ('\nmodule.setTransportParameters (\"')
                        runfile.write (Mt3d_advection)
                        runfile.write ('\")')
                        runfile.write ('\nmodule.setTransportParameters (\"')
                        runfile.write (Mt3d_ConjugateGradientPreconditioner)
                        runfile.write ('\", ')
                        runfile.write (str (Mt3d_cclose))
                        runfile.write (')')
		    else:
		        pass

    # debug_kinetics		    
		    i = 0
		    k = 0
                    while i < len (AqueousStates_KineticRates_list):
                        AqueousState = str (AqueousStates_KineticRates_list [i][0])
                        KineticRate = str (AqueousStates_KineticRates_list [i][1])
                        kind = str (AqueousStates_KineticRates_Properties_list [i][0])
                        if kind == 'Specific':
			    k = k+1
                            parameter = str (AqueousStates_KineticRates_Properties_list [i][1])
                            runfile.write ('\n')
                            runfile.write ('\nkineticlaw_'+str (k)+' = \\')
			    for s in parameter.split ("\n"):
			        if s != '':
				    s = s.replace ('"', '\'')			    
			            runfile.write ('\n\"'+s+'\\n\"+\\')
			        else:
				    pass
            		    runfile.write ('\n\"\"')
			    runfile.write ('\nmodule.setChemicalParameter (kineticlaw_'+str (k)+')')
                        i = i+1

#debug_KNOBS
#PhreeqC_KNOBS
#        global PhreeqC_NumberOfIterations
#        global PhreeqC_ConvergenceCriterion

                    if str (PhreeqC_pe_step_size_list [1]) == '':
                        if str (PhreeqC_NumberOfIterations) == str (PhreeqC_Default_NumberOfIterations):
			    pass
			else:
			    runfile.write ('\nmodule.setChemicalParameter (\"KNOBS\\n -iterations\\t')
                            runfile.write (str (PhreeqC_NumberOfIterations))
			    runfile.write ('\\n\")')
                    else:
		        if str (PhreeqC_NumberOfIterations) == str (PhreeqC_Default_NumberOfIterations):
			    runfile.write ('\nmodule.setChemicalParameter (\"KNOBS\\n -pe_step_size\\t')
			    runfile.write (str (PhreeqC_pe_step_size_list [1]))
			else:
			    runfile.write ('\nmodule.setChemicalParameter (\"KNOBS\\n -iterations\\t')
                            runfile.write (str (PhreeqC_NumberOfIterations))
                            runfile.write ('\\n -pe_step_size\\t')
			    runfile.write (str (PhreeqC_pe_step_size_list [1]))			    
                        runfile.write ('\\n\")')





                    """
                    if PhreeqC_KNOBS != '':
                        runfile.write ('\n')
			runfile.write ('\nmodule.setChemicalParameter (\"'+PhreeqC_KNOBS+'\")')
                        
                    else:
                        runfile.write ('\nmodule.setChemicalParameter (\"KNOBS\\n -iterations ')
                        runfile.write (str (PhreeqC_NumberOfIterations))
                        runfile.write ('\\n -convergence_tolerance ')
                        runfile.write (str (PhreeqC_ConvergenceCriterion))
                        runfile.write ('\\n\")')
                    """



    #		    \n"+\



                    if len (PostprocessingContours_AqueousComponentsToPlot_list) != 0:
                        runfile.write ('\n')
                        runfile.write ('\nmodule.setVtkStructuredFileWriterParameter(')
                        runfile.write (str (PostprocessingContours_Parameters_list [0]))
                        runfile.write (', ')
                        runfile.write (str (PostprocessingContours_AqueousComponentsToPlot_list))
                        runfile.write (', \"')
                        if str (PostprocessingContours_Parameters_list [1]) == 's':
                            runfile.write ('s')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Hours':
                            runfile.write ('hours')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Days':
                            runfile.write ('days')
                        elif str (PostprocessingContours_Parameters_list [1]) == 'Years':
                            runfile.write ('years')
                        else:
                            pass
                        runfile.write ('\")')
                    else:
                        pass

    # debug_XYPLOT

                    if len (InteractiveXYPlot_AqueousComponentsToPlot_list) != 0:
                        runfile.write ('\n')
                        list_of_species_toplot = []
                        point_to_plot = '1'
                        if str (InteractiveXYPlot_Parameters_list [1]) == '1': 
                            point_to_plot = str (InteractiveXYPlot_Parameters_list [0])
                        else:
                            point_to_plot = int (str (InteractiveXYPlot_Parameters_list [1])) * int (nx) + int (str (InteractiveXYPlot_Parameters_list [0]))
                        i = 0
                        while i < len (InteractiveXYPlot_AqueousComponentsToPlot_list):
                            list_of_species_toplot.append (str (InteractiveXYPlot_AqueousComponentsToPlot_list [i]))
                            i = i+1
                        runfile.write ('\nmodule.setInteractivePlot(\" ')
                        runfile.write (str (Title))
                        runfile.write (' \", ')
                        runfile.write (str (list_of_species_toplot))
                        runfile.write (', pointtoplot = ')
                        runfile.write (str (point_to_plot))
                        runfile.write (', plotfrequency = ')
                        runfile.write (str (InteractiveXYPlot_Parameters_list [2]))
                        runfile.write (')')

                    if len (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list) != 0:
                        runfile.write ('\n')
                        runfile.write ('\ninteractive_outputs = []')           
                        i = 0
                        while i < len (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list):
                            runfile.write ('\ninteractive_outputs.append (ExpectedOutput (unknow = \'')
                            runfile.write (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [i]))
                            runfile.write ('\', format = \'table\', name = \'')
                            runfile.write (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list [i]))
                            runfile.write ('\'))')
                            i = i+1
                        runfile.write ('\nmodule.setInteractiveSpatialPlot (interactive_outputs, interactivespatialplotfrequency = ')
                        runfile.write (str (int (InteractiveXYPlot_Space_and_Time_Parameters_list [1])))
                        runfile.write (')\n')

                    if mode == 'unstructured':
                        runfile.write ('\nmodule.setComponent(TransportComponent = \"Traces\", ChemicalComponent = \"Phreeqc\")')
                        runfile.write ('\nmodule.transport.setTransportParameter (tolSolver = ')
		        runfile.write (str (Traces_Parameters ['tolSolver']))
                        runfile.write (', iterSolver = ')
                        runfile.write (str (Traces_Parameters ['iterSolver']))
                        runfile.write (', iterPrecip = 5, indAlliances = 0, indMemory = 0, library = \'')
                        runfile.write (str (Traces_Parameters ['library']))
                        runfile.write ('\', preconditioner = \'')
                        runfile.write (str (Traces_Parameters ['preconditioner']))
                        runfile.write ('\', accelerator = \'')
                        runfile.write (str (Traces_Parameters ['accelerator']))
                        runfile.write ('\', thetaScheme = ')
                        runfile.write (str (Traces_Parameters ['thetaScheme']))
                        runfile.write (', storageMode = \'SCF\')')
                    else:
                        runfile.write ('\nmodule.setComponent(\"mt3d\",\"phreeqc\")')


# debug_run

                    #runfile.write ('\nmodule.run()')
                    runfile.write ('\nmodule.launch()')
                    runfile.write ('\ncurrent_time = module.calculationTimes[0]')
                    runfile.write ('\nwhile (module.current_time < module.calculationTimes[-1]):')
                    runfile.write ('\n    module.oneTimeStep()')
                    runfile.write ('\nmodule.finalOutputsWriter()')
			    
                    i = 0
		    if len (ExpectedOutputs_list) > 0:
		        runfile.write ('\n\n')
		        runfile.write ('\n#==================================================#')
		        runfile.write ('\n# Expected outputs                                 #')
		        runfile.write ('\n#==================================================#')
		        runfile.write ('\nimport os')
		    while i < len (ExpectedOutputs_list):
		        runfile.write ('\n\n#------------------------------------------')
		        runfile.write ('\n# ')
			runfile.write (str (ExpectedOutputs_list[i]))
		        runfile.write ('\n#------------------------------------------')
		        runfile.write ('\nname = \'')
			runfile.write (str (ExpectedOutputs_list[i])+'\'')
		        runfile.write ('\noutputs = module.getOutput(name)')
			runfile.write ('\nfor output in outputs:')
			runfile.write ('\n    time = output[0]')
			runfile.write ('\n    file = name + \"_%10.4e\"%(time) + \'.tab\'')
			runfile.write ('\n    if os.path.exists(file):')
			runfile.write ('\n        os.remove(file)')
			runfile.write ('\n    output[1].writeToFile(file)')
		        runfile.write ('\n#------------------------------------------')
			i = i+1
		    
                    #runfile.write ('\n\nmodule.end()')
                    runfile.write ('\n#==================================================#')   


    # debug_comp		
         	    #	
		    # comparison between calculated and analytic solutions
		    # if the analytic one was given by the user
		    #
                    #if os.access ('./comp.py', 0) == 0:
		    #    pass
		    #else:
                    #    runfile.write ('\n')
                    #    runfile.write ('\n')
                    #    runfile.write ('\n#==================================================#')
                    #    runfile.write ('\n#  Getting Outputs')
                    #    runfile.write ('\n#==================================================#')
		    #    runfile.write ('\nm = \'\'')
                    #    runfile.write ('\nf = open (\'./comp.py\', \'r\')')
                    #    runfile.write ('\nfor l in f.readlines ():')
                    #    runfile.write ('\n    m = m+l')
                    #    runfile.write ('\nexec (m)')




        ##
        ##  FAIRE UNE LISTE SPECIFIQUE AUX OUTPUTS DU POSTPROCESSING 
        ##  POUR REMPLACER InteractiveXYPlot_Space_and_Time_ElementsToPlot_list
        ##
        ##  LA CREER DANS LA FENETRE MAINTENANT...
        ## 
                    i = 0
                    while i < len (Postprocessing_ElementsToPlot_list):                
                        runfile.write ('\n')
                        runfile.write ('\nfrom tables import Table')
                        runfile.write ('\nres_')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write (' = module.getOutput (\'')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_table\')')
                        runfile.write ('\n')
                        runfile.write ('\ntimes_')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write (' = []')                
                        runfile.write ('\nfor elem in res_')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write (':')
                        runfile.write ('\n    ')
                        runfile.write ('times_')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('.append (elem [0])')                
                        runfile.write ('\n    ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_column_titles = elem [1].column_titles')
                        runfile.write ('\n    ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_title = elem [1].title')
                        runfile.write ('\n    ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values = elem [1].values')              
                        runfile.write ('\nx = []')
                        runfile.write ('\ny = []')
                        runfile.write ('\nz = []')
                        runfile.write ('\nif len (')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values) == 2:')
                        runfile.write ('\n    x = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [0]')
                        runfile.write ('\nelif len (')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values) == 3:')
                        runfile.write ('\n    x = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [0]')
                        runfile.write ('\n    y = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [1]')
                        runfile.write ('\nelif len (')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values) == 4:')
                        runfile.write ('\n    x = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [0]')
                        runfile.write ('\n    y = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [1]')
                        runfile.write ('\n    z = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [2]')
                        runfile.write ('\nelse:')
                        runfile.write ('\n    print \'error (dimensions of the table).\'')
                        runfile.write ('\n    pass')
                        runfile.write ('\nvalues = ')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values [len (')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_values) -1]')                           
                        runfile.write ('\nfilename = \"./vtk_file_')
                        runfile.write (str (Postprocessing_ElementsToPlot_list [i]))
                        runfile.write ('_elem [0]')
                        runfile.write ('\"')
                        runfile.write ('\nvtk_file = open (filename, \'w\')')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"# vtk DataFile\"))')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(vtk_Title))')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"ASCII\"))')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"DATASET RECTILINEAR_GRID\"))')
                        runfile.write ('\nvtk_file.write (\"%s %d %d %s\\n\"%(\"DIMENSIONS\",len(x),len(y),\"1\"))')
                        runfile.write ('\nvtk_file.write (\"%s %d %s\\n\"%(\"X_COORDINATES \",len(x),\" float\"))')
                        runfile.write ('\nfor i in x:')
                        runfile.write ('\n    vtk_file.write (\"%f\\n\"%(i))') 
                        runfile.write ('\nvtk_file.write (\"%s %d %s\\n\"%(\"Y_COORDINATES \",len(y),\" float\"))')
                        runfile.write ('\nfor i in y:')
                        runfile.write ('\n    vtk_file.write (\"%f\\n\"%(i))') 
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"Z_COORDINATES 1 float\"))')
                        runfile.write ('\nvtk_file.write (\"%f\\n\"%(0.0))')
                        runfile.write ('\nvtk_file.write (\"%s %d\\n\"%(\"POINT_DATA\",len(values)))')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"SCALARS Ca+ float\"))')
                        runfile.write ('\nvtk_file.write (\"%s\\n\"%(\"LOOKUP_TABLE default\"))')
                        runfile.write ('\nfor i in values:')
                        runfile.write ('\n    vtk_file.write (\"%f\\n\"%(i))')           
                        i = i+1
                runfile.close ()

                #------------------------------------------------------
                #  Execution of the python file
                #  Outputs will be printed into the mainframe
                #------------------------------------------------------
                self.proc = QProcess (self)
                self.proc.addArgument ("python")
                self.proc.addArgument (runfile_name)
                self.connect (self.proc, SIGNAL ('readyReadStdout()'), self.readFromStdout)
                self.connect (self.proc, SIGNAL ('readyReadStderr()'), self.readFromStderr)
                self.proc.start ()
                #if self.proc.waitForFinished():
		#if IsRunning:
		#    pass
		#else:
		#    self.proc.start()
		#    while self.proc.isRunning ():
		#        pass
		#print self.proc.exitCode ()
		# self.proc.pid ()
                #------------------------------------------------------

            except:
                self.Opening_RunfileMB = QMessageBox()
                self.Opening_RunfileMB.setCaption ('Error')
                self.Opening_RunfileMB.setText ('Problem with the creation of '+str (Title)+'.py')
                self.Opening_RunfileMB.setIcon (QMessageBox.Critical)
                self.Opening_RunfileMB.show ()

        #elif Solver == 'Modflow_Mt3d_PhreeqC' and ChemistryTool == 'Traces_PhreeqC':
        
         #   self.unstructured_chemicalTransport ()

        elif Solver == 'Chemistry' and ChemistryTool == 'PhreeqC':
            
            self.exe_chemistry ()

        elif Solver == 'Chemistry' and ChemistryTool == 'Chess':

            self.exe_chemistry_chess ()
            
        #elif Parallel_NumberOfNodes != 1:
        
         #   print "Multiprocessor Simulation"

        elif Solver == 'Modflow' and ChemistryTool == 'Traces_PhreeqC':
        
            Traces_Hydraulic_runfile_name = './'+str (Title)+'_hydraulic.py'
            try:
                traces_runfile = open (Traces_Hydraulic_runfile_name, 'w')
                try:
                    t = open ('./'+Title+'.txt', 'r')
                    m = ''
                    traces_runfile.write ('\n')
                    traces_runfile.write ('\n')
                    traces_runfile.write ('\n#===========================#')
                    traces_runfile.write ('\n#  Description of the case  #')
                    traces_runfile.write ('\n#===========================#')
                    traces_runfile.write ('\n')
                    for i in t.readlines ():
                        m = m+'#  '+i
                    traces_runfile.write (m)
                    traces_runfile.write ('\n#')
                except:
                    pass
                traces_runfile.write ('\n#============================================#')
                traces_runfile.write ('\n#  Import common necessary modules (python)  #')
                traces_runfile.write ('\n#============================================#')
                traces_runfile.write ('\nimport os')
                traces_runfile.write ('\nimport sys')
                traces_runfile.write ('\nfrom mesh import *')
                traces_runfile.write ('\nfrom datamodel import *')
                traces_runfile.write ('\nfrom math import sqrt, pow')
                traces_runfile.write ('\n#===========================================#')
                traces_runfile.write ('\n#  Import Module depending on problem type  #')
                traces_runfile.write ('\n#===========================================#')
                traces_runfile.write ('\nfrom saturatedhydraulicmodule import SaturatedHydraulic')
                traces_runfile.write ('\n#=======================================================#')
                traces_runfile.write ('\n#  Import optional modules depending on component type  #')
                traces_runfile.write ('\n#=======================================================#')
                traces_runfile.write ('\nfrom saturatedhydraulic_parsing import saturatedhydraulic_parsing')
                traces_runfile.write ('\nfrom time import time')
                traces_runfile.write ('\nfrom porflowconnec import getElementContainingPoint,getElementBarycenter')
                traces_runfile.write ('\nfrom porflowconnecvrai import getElementOnPoint')
                traces_runfile.write ('\n')		
                #traces_runfile.write ('\n#=====================#')
                #traces_runfile.write ('\n#  Arguments parsing  #')
                #traces_runfile.write ('\n#=====================#')
                #traces_runfile.write ('\ncompo, meshing,solver,pressureorigin,trace,libraryName,preconditioner,residual,citmax,citmin,sitmin,sitmax,case,DataTransfert = saturatedhydraulic_parsing(sys.argv[1:])')
                #traces_runfile.write ('\n')		
                traces_runfile.write ('\n#==========================#')
                traces_runfile.write ('\n#  Problem Initialisation  #')
                traces_runfile.write ('\n#==========================#')
                traces_runfile.write ('\nsetProblemType (\'SaturatedHydraulic\')')
                traces_runfile.write ('\n')		
                traces_runfile.write ('\n#===========================#')
                traces_runfile.write ('\n#  Definition of Materials  #')
                traces_runfile.write ('\n#===========================#')
                i = 0
                while i < len (Materials_list):

                    permeability = str (Materials_Properties_list [i][0])
                    porosity = str (Materials_Properties_list [i][2])
                    effectiveDiffusion = str (Materials_Properties_list [i][3])
                    longitudinalDispersivity = str (Materials_Properties_list [i][4])
                    transverseDispersivity = str (Materials_Properties_list [i][5])

                    traces_runfile.write ('\n')
                    traces_runfile.write (Materials_list [i])
                    traces_runfile.write ('_material = Material (name = \"')
                    traces_runfile.write (Materials_list [i])
		    traces_runfile.write ('\",\n                          permeability = Permeability (')
                    traces_runfile.write (permeability)
                    traces_runfile.write ('))')
                    i = i+1
                #traces_runfile.write ('\n#===========================#')
                traces_runfile.write ('\n')
                traces_runfile.write ('\n#=============================#')
                traces_runfile.write ('\n#  Definition of the Meshing  #')
                traces_runfile.write ('\n#=============================#')
                traces_runfile.write ('\nmed_manager = importMedFromFile (\'')
                traces_runfile.write (str (Medfile))
                traces_runfile.write ('\')')
                traces_runfile.write ('\nmesh = med_manager.getMesh(med_manager.getMeshesNames()[0])')
                i = 0
                if len (UnstructuredHydraulicBC_list) != 0:
                    bc_tmp = []
                    while i < (len (UnstructuredHydraulicBC_list) - 1):
                        bc_tmp.append ('BoundaryCondition (mesh.getBoundary (\''+str (UnstructuredHydraulicBC_list [i][0])+'\'), \''+str (UnstructuredHydraulicBC_list [i][1])+'\', Head ('+str (UnstructuredHydraulicBC_list [i][2])+'))')                    
                        i = i+1
                    bc_tmp.append ('BoundaryCondition (mesh.getBoundary (\''+str (UnstructuredHydraulicBC_list [len (UnstructuredHydraulicBC_list) - 1][0])+'\'), \''+str (UnstructuredHydraulicBC_list [len (UnstructuredHydraulicBC_list) - 1][1])+'\', Head ('+str (UnstructuredHydraulicBC_list [len (UnstructuredHydraulicBC_list) - 1][2])+'))')                    
                else:
                    pass
                traces_runfile.write ('\n')		
                traces_runfile.write ('\n#===============================================#')
                traces_runfile.write ('\n#  Definition of Hydraulic Boundary Conditions  #')
                traces_runfile.write ('\n#===============================================#')
                traces_runfile.write ('\nbc = [')
                i = 0
                while i < (len (bc_tmp)-1):
                    traces_runfile.write (str (bc_tmp [i]))                    
                    traces_runfile.write (',\n      ')
                    i = i+1
                traces_runfile.write (str (bc_tmp [len (bc_tmp)-1]))
                traces_runfile.write (']')
                #traces_runfile.write ('\n#===============================================#')
                i = 0
                if len (Unstructured_Zone_Material_list) != 0:
                    regions_tmp = []
                    while i < (len (Unstructured_Zone_Material_list) - 1):
                        regions_tmp.append ('Region (support = mesh.getZone (\''+str (Unstructured_Zone_Material_list [i][0])+'\'), material = '+str (Unstructured_Zone_Material_list [i][1])+'_material)')                    
                        i = i+1
                    regions_tmp.append ('Region (support = mesh.getZone (\''+str (Unstructured_Zone_Material_list [len (Unstructured_Zone_Material_list) - 1][0])+'\'), material = '+str (Unstructured_Zone_Material_list [len (Unstructured_Zone_Material_list) - 1][1])+'_material)')
                else:
                    pass
                traces_runfile.write ('\n')
                traces_runfile.write ('\n#=========================#')
                traces_runfile.write ('\n#  Definition of regions  #')
                traces_runfile.write ('\n#=========================#')
                traces_runfile.write ('\nregions = [')                
                i = 0
                while i < (len (regions_tmp)-1):
                    traces_runfile.write (str (regions_tmp [i]))                    
                    traces_runfile.write (',\n           ')
                    i = i+1
                traces_runfile.write (str (regions_tmp [len (regions_tmp)-1]))
                traces_runfile.write (']')
                #traces_runfile.write ('\n#=========================#')
                traces_runfile.write ('\n')
                traces_runfile.write ('\n#=========================#')
                traces_runfile.write ('\n#  Definition of Problem  #')
                traces_runfile.write ('\n#=========================#')
                traces_runfile.write ('\npb = SaturatedHydraulicProblem (name = \'')
		traces_runfile.write (str (mw.mesh_name))
                traces_runfile.write ('\',\n                                regions = regions,')
                traces_runfile.write ('\n                                boundaryConditions = bc,')
                traces_runfile.write ('\n                                outputs = [])')
                traces_runfile.write ('\n')
                traces_runfile.write ('\n#===========================================================#')
                traces_runfile.write ('\n#  Define the calculation module and set problem data into  #')
                traces_runfile.write ('\n#===========================================================#')
                traces_runfile.write ('\nhydro = SaturatedHydraulic ()')
                traces_runfile.write ('\nhydro.setData (pb)')
                traces_runfile.write ('\nhydro.setComponent (\'Traces\')')
                traces_runfile.write ('\nhydro.setParameter (tolSolver = ')
		traces_runfile.write (str (Traces_Parameters ['tolSolver']))
                traces_runfile.write (', iterSolver = ')
                traces_runfile.write (str (Traces_Parameters ['iterSolver']))
                traces_runfile.write (')')
                traces_runfile.write ('\nhydro.setParameter (indAlliances = 0, indMemory = 0)')
                traces_runfile.write ('\nhydro.run()')
                #traces_runfile.write ('\n#===========================================================#')
                traces_runfile.close ()
                
                #------------------------------------------------------
                #  Execution of the python file
                #  Outputs will be printed into the mainframe
                #------------------------------------------------------
                self.proc = QProcess (self)
                self.proc.addArgument ("python")
                self.proc.addArgument (Traces_Hydraulic_runfile_name)
                self.connect (self.proc, SIGNAL ('readyReadStdout()'), self.readFromStdout)
                self.connect (self.proc, SIGNAL ('readyReadStderr()'), self.readFromStderr)
                self.proc.start()
                #------------------------------------------------------

            except:
                self.Opening_RunfileMB = QMessageBox()
                self.Opening_RunfileMB.setCaption ('Error')
                self.Opening_RunfileMB.setText ('Can\'t open '+str (Title)+'_hydraulic.py in the current directory.\nPlease look at your permissions.')
                self.Opening_RunfileMB.setIcon (QMessageBox.Critical)
                self.Opening_RunfileMB.show ()
                
                
                
                
		
                
                
# debug_run



    def readFromStdout(self):
     
        while self.proc.canReadLineStdout ():
            line = str (self.proc.readLineStdout ())        
            self.view.MainFrameTextBrowser.append(line)

    def readFromStderr(self):
     
        while self.proc.canReadLineStderr ():
            line = str (self.proc.readLineStderr ())        
            self.view.MainFrameTextBrowser.append(line)
            
            
    def unstructured_chemicalTransport (self):
        
        pass
    
    

    def exe_chemistry (self):	
    			
        global AqueousState_to_equilibrate

        phreeqc_runfile_name = './'+AqueousState_to_equilibrate+'.py'
        phreeqc_runfile = open (phreeqc_runfile_name, 'w')

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n# Runfile: this file is generated through the Interface.')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\nfrom species import Species')
        phreeqc_runfile.write ('\n#--------------------------')
        phreeqc_runfile.write ('\n# mt3d importation methods#')
        phreeqc_runfile.write ('\n#--------------------------')
        phreeqc_runfile.write ('\nfrom phreeqccomponent import *')
        phreeqc_runfile.write ('\nfrom chemical import *')
        phreeqc_runfile.write ('\nfrom chemicalmodule import *')
        phreeqc_runfile.write ('\nfrom physicalquantities import *')
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\nPhreeqc_url_bdd = \"')
        phreeqc_runfile.write (DefaultDatabase)
        phreeqc_runfile.write ('\"')
        phreeqc_runfile.write ('\nChemicalStateList = []')
        phreeqc_runfile.write ('\nnewSpeciesList=[]')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n## Definition of aqueous states')
        phreeqc_runfile.write ('\n## It will be modified')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        index = AqueousStates_list.index (AqueousState_to_equilibrate)
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n# Definition of the Aqueous ')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' chemical State')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\nAqueousspecieslist_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' = []')
        phreeqc_runfile.write ('\n')
        j = 0
	mineralEquilibrium_list = []
	tmp_list = []
        while (j < len (AqueousStates_Species_list [index])):

            test = str (AqueousStates_Species_list [index][j][0])
            aux_list = []
	    if (test != ''):
                spec = str (AqueousStates_Species_list [index][j][0])
                if Concentration_Unit == 'moles/l':
                    conc = str (AqueousStates_Species_list [index][j][1])
                elif Concentration_Unit == 'moles/m3':
                    conc = str (float(AqueousStates_Species_list [index][j][1])*1.e-3)
                ind_crochet = spec.find ('[')
		if ind_crochet != -1:
		    ind_mineral = spec.find ('mineral')
		    if ind_mineral != -1:
                        aux_spec = spec [:spec.index ('[')]
                        aux_spec = aux_spec.replace (' ', '')
                        aux_list.append (aux_spec)
                        aux_list.append (conc)
                        mineral = spec [spec.index ('(') + 1:spec.index (')')].replace (' ', '')
                        aux_list.append (mineral)
			tmp_list.append (aux_list)
	            else:
			print ('pas de mineral')
			pass
		else:
		    spec_tmp = spec
                    spec_tmp = spec_tmp.replace ('(', '_')
                    spec_tmp = spec_tmp.replace (')', '_')
                    spec_tmp = spec_tmp.replace ('+', '_p')
                    spec_tmp = spec_tmp.replace ('-', '_m')
                    phreeqc_runfile.write ('\n')
                    phreeqc_runfile.write ('\n')
                    phreeqc_runfile.write (spec_tmp)
                    phreeqc_runfile.write ('_')
                    phreeqc_runfile.write (AqueousState_to_equilibrate)
                    phreeqc_runfile.write (' = ElementConcentration (\'')
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\', ')
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write (', \"')
                    if Concentration_Unit == 'moles/l':
                	phreeqc_runfile.write ('mol/l')
                    phreeqc_runfile.write ('\")')
                    phreeqc_runfile.write ('\nAqueousspecieslist_')
                    phreeqc_runfile.write (AqueousState_to_equilibrate)
                    phreeqc_runfile.write ('.append (')
                    phreeqc_runfile.write (spec_tmp)
                    phreeqc_runfile.write ('_')
                    phreeqc_runfile.write (AqueousState_to_equilibrate)
                    phreeqc_runfile.write (')')
            j = j+1
	mineralEquilibrium_list.append (tmp_list)
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\nAqueousSolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' = AqueousSolution (Aqueousspecieslist_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        pH = str (AqueousStates_Properties_list [index][1])
        if pH == '':
            phreeqc_runfile.write (', pH = None')
	else:
            phreeqc_runfile.write (', pH = ')
            phreeqc_runfile.write (pH)                                        
        pe = str (AqueousStates_Properties_list [index][2])
        if pe == '':
	    phreeqc_runfile.write (', pe = None')
	elif (pe != '') and (str (AqueousStates_Properties_list [index][9]) == 'pe'):
            phreeqc_runfile.write (', pe = ')
            phreeqc_runfile.write (pe)
	elif (pe != '') and (str (AqueousStates_Properties_list [index][9]) == 'Eh'):
            phreeqc_runfile.write (', Eh = ')
            phreeqc_runfile.write (pe)
        else:
            phreeqc_runfile.write (', pe = None')
        temp = str (AqueousStates_Properties_list [index][0])
        if temp == '':
	    phreeqc_runfile.write (', temperature = None)')
        elif temp != '':
            phreeqc_runfile.write (', temperature = ')
            phreeqc_runfile.write (temp)
            phreeqc_runfile.write (')')
        else:
            phreeqc_runfile.write (', temperature = None)')
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\ngasPhase_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' = []')
        phreeqc_runfile.write ('\ngasPhasesolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' = GasPhase (gasPhase_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (')')
        phreeqc_runfile.write ('\n')
        States = []
        i = 0
        while i < len (AqueousStates_Gas_list):

            state = str (AqueousStates_Gas_list [i][0])
            if state not in States:
                States.append (state)
            i = i+1
        j = 0
        while j < len (AqueousStates_Gas_list):

            AS_tmp = str (AqueousStates_Gas_list [j][0])
            if AS_tmp == AqueousState_to_equilibrate:
                G_tmp = str (AqueousStates_Gas_list [j][1])
                log_tmp = str (float (AqueousStates_Gas_Properties_list [j][0]))
                phreeqc_runfile.write ('\n')
                if '(' in G_tmp:
                    index = G_tmp.index ('(')
                    phreeqc_runfile.write (G_tmp [:index])
                else:
                    phreeqc_runfile.write (G_tmp)
                phreeqc_runfile.write ('_gas = Fugacity (\"')
                phreeqc_runfile.write (G_tmp)
                phreeqc_runfile.write ('\", ')
                phreeqc_runfile.write (log_tmp)
                phreeqc_runfile.write (')')
                phreeqc_runfile.write ('\ngasPhase_')
                phreeqc_runfile.write (AS_tmp)
                phreeqc_runfile.write ('.append (')
                if '(' in G_tmp:
                    index = G_tmp.index ('(')
                    phreeqc_runfile.write (G_tmp [:index])
                else:
                    phreeqc_runfile.write (G_tmp)
                phreeqc_runfile.write ('_gas')
                phreeqc_runfile.write (')')
                j = j+1

            else:
                j = j+1
                pass

##            for x in States:

        phreeqc_runfile.write ('\ngasPhasesolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (' = GasPhase (gasPhase_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (')')

        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n## Thereafter, we define the sorption site: EXCHANGE_MASTER_SPECIES')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')


#  Data Exchange Master Species

        phreeqc_runfile.write ('\nSorbingSiteList = []')
        i = 0
        while i < len (ExchangeMasterSpecies_list):

            Name = str (ExchangeMasterSpecies_list [i])
            Formula = str (ExchangeMasterSpecies_Formula_list [i])
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('_SorbingSite = SorbingSiteComponentSpecies(\"')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\",\"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\")')
            phreeqc_runfile.write ('\nSorbingSiteList.append(')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('_SorbingSite)')
            i = i+1
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n# V1')
        phreeqc_runfile.write ('\n#')
        i = 0
        while i < len (ExchangeMasterSpecies_list):

            Name = str (ExchangeMasterSpecies_list [i])
            Formula = str (ExchangeMasterSpecies_Formula_list [i])        
            phreeqc_runfile.write ('\n#')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (' = SorbingSiteComponentSpecies(\"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\", name = \"')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\")')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (')')
            i = i+1

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n## Treatment of the Sorbed Secondary Species: EXCHANGE_SPECIES')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')

        i = 0
        while i < len (ExchangeMasterSpecies_list):

            Name = str (ExchangeMasterSpecies_list [i])
            Formula = str (ExchangeMasterSpecies_Formula_list [i])        
            phreeqc_runfile.write ('\n#')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\nlogK25 = 0.0')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (' = SorbedSecondarySpecies (\"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\", [], logK25)')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('.setFormationReaction ([(\"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\", 1)])')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (')')
            i = i+1

        i = 0
        while i < len (ExchangeSpecies_list):

            phreeqc_runfile.write ('\n# ')
            phreeqc_runfile.write (ExchangeSpecies_list [i])

            law = str (ExchangeSpecies_Properties_list [i][1])
            coef_1 = str (ExchangeSpecies_Properties_list [i][2])
            coef_2 = str (ExchangeSpecies_Properties_list [i][3])

            log_k = str (float (ExchangeSpecies_Properties_list [i][0]))
            phreeqc_runfile.write ('\nlogK = ')
            phreeqc_runfile.write (log_k)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (ExchangeSpecies_list [i])
            phreeqc_runfile.write (' = SorbedSecondarySpecies(\"')
            phreeqc_runfile.write (ExchangeSpecies_list [i])
            phreeqc_runfile.write ('\",[],logK)')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (ExchangeSpecies_list [i])
            phreeqc_runfile.write ('.setFormationReaction([')
            j = 0
            while (j < len (ExchangeSpecies_Reactants_list [i])):

                test = ExchangeSpecies_Reactants_list [i][j][0]
                if (test != ''):
                    phreeqc_runfile.write ('(\"')
                    spec = str (ExchangeSpecies_Reactants_list [i][j][0])
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\", ')
                    conc = str (ExchangeSpecies_Reactants_list [i][j][1])
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write (')')
                    phreeqc_runfile.write (', ')
                    j = j+1

                else:
                    break

            phreeqc_runfile.write ('])')
            phreeqc_runfile.write ('\nnewSpeciesList.append(')
            phreeqc_runfile.write (ExchangeSpecies_list [i])
            phreeqc_runfile.write (')')

            i = i+1

        ##    Equilibrium phases Frame: we associate An aqueous state with a mineral phase        
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  StageChemicalState Definitions')
        phreeqc_runfile.write ('\n##')
        ##  il faut parcourir 1 fois la liste pour creer les listes dont on a besoin:   listofmineralp_...
        States = []    
        i = 0
	print "length of AqueousStates_MineralPhases_list",len (AqueousStates_MineralPhases_list)
        while i < len (AqueousStates_MineralPhases_list):           
            state = str (AqueousStates_MineralPhases_list [i][0])
            if state not in States:
                States.append (state)
            i = i+1
	print " 23488 ",States
        for x in States:
	    print " x value ",x
            phreeqc_runfile.write ('\nMineralspecies_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = []')
            phreeqc_runfile.write ('\n')            
	#
	# we intoduce the temp_minerallist to make the python file more readable
	#
	temp_minerallist = []
        i = 0
        while i < len (AqueousStates_MineralPhases_list):

            toto = ''
	    AS_tmp = str (AqueousStates_MineralPhases_list [i][0])
            M_tmp = str (AqueousStates_MineralPhases_list [i][1])
            M_tmp_tmp = M_tmp
            M_tmp_tmp = M_tmp_tmp.replace ('(', '_')
            M_tmp_tmp = M_tmp_tmp.replace (')', '_')
            M_tmp_tmp = M_tmp_tmp.replace ('-', '_')
            saturationIndex_tmp = str (AqueousStates_MineralPhases_Properties_list [i][0])
            try:
	        DissolveOnly_tmp = str (AqueousStates_MineralPhases_Properties_list [i][2])
	    except:
	        DissolveOnly_tmp = ""
            if saturationIndex_tmp != '': 
                pass
            else:
                saturationIndex_tmp = '0.0'
            Amount_tmp = str (AqueousStates_MineralPhases_Properties_list [i][1])

            
	    #phreeqc_runfile.write ('\n')
	    toto +='\n'
            #phreeqc_runfile.write (M_tmp_tmp)
	    toto +=M_tmp_tmp
            #phreeqc_runfile.write ('_')
	    toto +='_'
            #phreeqc_runfile.write (AS_tmp)
	    toto +=AS_tmp
            if DissolveOnly_tmp	== "Dissolve Only":
                phreeqc_runfile.write (' = ToDissolveMineralTotalConcentration')
	        toto +=' = ToDissolveMineralTotalConcentration'
            else:	
                phreeqc_runfile.write (' = MineralTotalConcentration')
	        toto +=" = MineralTotalConcentrationssss"
            #phreeqc_runfile.write (' (\"')
	    toto +=' (\"'
            #phreeqc_runfile.write (M_tmp)
	    toto +=M_tmp
            #phreeqc_runfile.write ('\", ')
	    toto +='\", '
            #phreeqc_runfile.write (Amount_tmp)
	    toto +=Amount_tmp
            #phreeqc_runfile.write (', \"')
	    toto +=', \"'
            if Concentration_Unit == 'moles/l':
                #phreeqc_runfile.write ('mol/l')
	        toto +='mol/l'
            #phreeqc_runfile.write ('\", saturationIndex = ')
	    toto +='\", saturationIndex = '
            #phreeqc_runfile.write (saturationIndex_tmp)
	    toto += saturationIndex_tmp
            #phreeqc_runfile.write (')')           
	    toto +=')'
            #phreeqc_runfile.write ('\nMineralspecies_')
	    toto +='\nMineralspecies_'
            #phreeqc_runfile.write (AS_tmp)
	    toto +=AS_tmp
            #phreeqc_runfile.write ('.append (')
	    toto +='.append ('
            #phreeqc_runfile.write (M_tmp_tmp)
	    toto +=M_tmp_tmp
            #phreeqc_runfile.write ('_')
	    toto +='_'
            #phreeqc_runfile.write (AS_tmp)
	    toto +=AS_tmp
            #phreeqc_runfile.write (')')           
	    toto +=')'
            i = i+1
	    temp_minerallist.append(toto)
	    print toto

	temp_minerallist = temp_minerallist.sort()    
	phreeqc_runfile.write ('\n')
        j = 0
        while j < len (AqueousStates_list):
            phreeqc_runfile.write ('\nMineralPhaseSolution_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (' = []')
            j = j + 1

        for x in States:

            phreeqc_runfile.write ('\nMineralPhaseSolution_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = MineralPhase (Mineralspecies_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (')')




### EXCHANGE

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  We finish by defining the Sorbing Site Capacity: EXCHANGE')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        States = []
        i = 0
        while i < len (AqueousStates_ExchangeSpecies_list):

            state = str (AqueousStates_ExchangeSpecies_list [i][0])
            if state not in States:
                States.append (state)
            i = i+1

        for x in States:

            phreeqc_runfile.write ('\nlistofsorptionsitespecies_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = []')

        phreeqc_runfile.write ('\n')
        i = 0

        while i < len (AqueousStates_ExchangeSpecies_list):

            phreeqc_runfile.write ('\n')
            F_tmp = str (AqueousStates_ExchangeSpecies_list [i][1])
            AS_tmp = str (AqueousStates_ExchangeSpecies_list [i][0])
            phreeqc_runfile.write (F_tmp)
            phreeqc_runfile.write (' = ExchangeBindingSpecies(\"')
            phreeqc_runfile.write (F_tmp)
            phreeqc_runfile.write ('\", ')
            Name = str (AqueousStates_ExchangeSpecies_Properties_list [i][1])
            Quantity = str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
            if (Name == ""):
                phreeqc_runfile.write ('MolesAmount (')
                phreeqc_runfile.write (Quantity)
                phreeqc_runfile.write (', ')
                #if Concentration_Unit == 'moles/l':
                phreeqc_runfile.write ('\"mol\")')
            else:
                # que se passe-t il en presence d une phase pure ?
                phreeqc_runfile.write ('MolesAmount (')
                phreeqc_runfile.write (Quantity)
                phreeqc_runfile.write (', ')
                #if Concentration_Unit == 'moles/l':
                phreeqc_runfile.write ('\"mol\")')

            phreeqc_runfile.write (')')
            phreeqc_runfile.write ('\nlistofsorptionsitespecies_')
            phreeqc_runfile.write (AS_tmp)
            phreeqc_runfile.write ('.append (')
            phreeqc_runfile.write (F_tmp)
            phreeqc_runfile.write (')')

            i = i+1

        phreeqc_runfile.write ('\n#')           
        phreeqc_runfile.write ('\n##')           
        phreeqc_runfile.write ('\n##  EXCHANGE (V1)')           
        phreeqc_runfile.write ('\n##')           
        phreeqc_runfile.write ('\n#')           
        phreeqc_runfile.write ('\n')
        j = 0
        while j < len (AqueousStates_list):
            phreeqc_runfile.write ('\nIonicExchanger_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (' = []')
            phreeqc_runfile.write ('\nIonicExchangerSolution_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (' = IonicExchangers (IonicExchanger_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (')')
            phreeqc_runfile.write ('\n')
            j = j + 1

        States = []
        i = 0
        while i < len (AqueousStates_ExchangeSpecies_list):

            state = str (AqueousStates_ExchangeSpecies_list [i][0])
            if state not in States:
                States.append (state)
            i = i+1

        for x in States:

            phreeqc_runfile.write ('\nIonicExchanger_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = []')
            phreeqc_runfile.write ('\nIonicExchangerSolution_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = IonicExchangers (IonicExchanger_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (')')

        phreeqc_runfile.write ('\n')
        i = 0

        while i < len (AqueousStates_ExchangeSpecies_list):

            AS_tmp = str (AqueousStates_ExchangeSpecies_list [i][0])
            F_tmp = str (AqueousStates_ExchangeSpecies_list [i][1])
            Kind = str (AqueousStates_ExchangeSpecies_Properties_list [i][0])
            Name = str (AqueousStates_ExchangeSpecies_Properties_list [i][1])
            Quantity = str (AqueousStates_ExchangeSpecies_Properties_list [i][2])
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (F_tmp)            
            if (Kind == 'Amount'):
                phreeqc_runfile.write (' = ExchangeBindingSpecies (\'')
                phreeqc_runfile.write (F_tmp)
                phreeqc_runfile.write ('\', ')
                phreeqc_runfile.write ('MolesAmount (')
                phreeqc_runfile.write (Quantity)
                phreeqc_runfile.write (', \'')
                #if Concentration_Unit == "moles/l":
                phreeqc_runfile.write ('mol\'))')
                #else:
                    #pass
            elif (Kind == 'Equilibrium'):
# debug_18_11_2005
                phreeqc_runfile.write (' = ExchangeMineralBindingSpecies (\'')
                phreeqc_runfile.write (F_tmp)
                phreeqc_runfile.write ('\', \'')
                phreeqc_runfile.write (Name)
                phreeqc_runfile.write ('\', ')
                phreeqc_runfile.write (Quantity)
                phreeqc_runfile.write (')')


            phreeqc_runfile.write ('\nIonicExchanger_')
            phreeqc_runfile.write (AS_tmp)
            phreeqc_runfile.write ('.append (')
            phreeqc_runfile.write (F_tmp)
            phreeqc_runfile.write (')')
            i = i+1            

        phreeqc_runfile.write ('\n')
        for x in States:

            phreeqc_runfile.write ('\nIonicExchangerSolution_')
            phreeqc_runfile.write (x)   
            phreeqc_runfile.write (' = IonicExchangers (IonicExchanger_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (')')
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Treatment of the AqueousComponentSpecies')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Treatment of the MineralSecondarySpecies')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        i = 0
        while i < len (MineralPhases_list):
            phreeqc_runfile.write ('\n# ')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write ('reaction = []')
            j = 0
            while (j < len (MineralPhases_Species_list [i])):
                test = MineralPhases_Species_list [i][j][0]
                if (test != ''):
                    phreeqc_runfile.write ('\n')
                    phreeqc_runfile.write (MineralPhases_list [i])
                    phreeqc_runfile.write ('reaction.append ((\"')
                    spec = str (MineralPhases_Species_list [i][j][0])
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\", ')
                    conc = str (MineralPhases_Species_list [i][j][1])
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write ('))')
                    j = j+1
                else:
                    break
            phreeqc_runfile.write ('\nlog_k = ')
            log_k = str (float (MineralPhases_Properties_list [i][0]))
            phreeqc_runfile.write (log_k)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write (' = MineralSecondarySpecies (\"')
            phreeqc_runfile.write (MineralPhases_Formula_list [i])
            phreeqc_runfile.write ('\", ')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write ('reaction, log_k, \"')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write ('\")')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (MineralPhases_list [i])
            phreeqc_runfile.write (')')
            i = i+1

        i = AqueousStates_list.index (AqueousState_to_equilibrate)
        if str (AqueousStates_Properties_list [i][3]) == 'Fix':
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write ('\n# Fix_H+')
            phreeqc_runfile.write ('\nFixphreaction = []')
            phreeqc_runfile.write ('\nFixphreaction.append ((\"H+\", 1))')
            phreeqc_runfile.write ('\nlog_k = 0.0')
            phreeqc_runfile.write ('\nFixph = MineralSecondarySpecies (\"H+\", Fixphreaction, log_k, \"Fix_H+\")')
            phreeqc_runfile.write ('\nnewSpeciesList.append (Fixph)')
        else:
            pass
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Thereafter, we define the surface site: SURFACE_MASTER_SPECIES')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        i = 0
        while i < len (SurfaceMasterSpecies_list):
            Name = str (SurfaceMasterSpecies_list [i])
            Formula = str (SurfaceMasterSpecies_Formula_list [i])
            phreeqc_runfile.write ('\n#')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('_site = SurfaceSiteComponentSpecies (\"')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\", name = \"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\")')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('_site')
            phreeqc_runfile.write (')')
            i = i+1         
        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Thereafter, we define the surface secondary species: SURFACE_SPECIES')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')

        i = 0
        while i < len (SurfaceMasterSpecies_list):

            Name = str (SurfaceMasterSpecies_list [i])
            Formula = str (SurfaceMasterSpecies_Formula_list [i])        
            phreeqc_runfile.write ('\n#')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\nlogK25 = 0.0')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (' = SurfaceSecondarySpecies (\"')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\", [], logK25)')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('.setFormationReaction ([(\"')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('\", 1)])')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (')')
            i = i+1

        i = 0
        while i < len (SurfaceSpecies_list):

            Name = str (SurfaceSpecies_list [i])
            Name = Name.replace ('(', '_')
            Name = Name.replace (')', '_')
            Name = Name.replace ('+', '_')
            Name = Name.replace ('-', '_')
            Formula = str (SurfaceSpecies_list [i])
            phreeqc_runfile.write ('\n# ')
            phreeqc_runfile.write (Name)
            log_k = str (float (SurfaceSpecies_Properties_list [i][0]))
            phreeqc_runfile.write ('\nlogK = ')
            phreeqc_runfile.write (log_k)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (' = SurfaceSecondarySpecies(\"')
            phreeqc_runfile.write (Formula)
            phreeqc_runfile.write ('\",[],logK)')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write ('.setFormationReaction([')
            j = 0
            while (j < len (SurfaceSpecies_Reactants_list [i])):
                test = SurfaceSpecies_Reactants_list [i][j][0]
                if (test != ''):
                    phreeqc_runfile.write ('(\"')
                    spec = str (SurfaceSpecies_Reactants_list [i][j][0])
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\", ')
                    conc = str (SurfaceSpecies_Reactants_list [i][j][1])
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write (')')
                    phreeqc_runfile.write (', ')
                    j = j+1
                else:
                    break
            phreeqc_runfile.write ('])')
            phreeqc_runfile.write ('\nnewSpeciesList.append(')
            phreeqc_runfile.write (Name)
            phreeqc_runfile.write (')')
            i = i+1

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Treatment of the SurfaceSiteComponentSpecies')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        j = 0
        while j < len (AqueousStates_list):
            phreeqc_runfile.write ('\nSurfaceComplexation_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (' = []')
            phreeqc_runfile.write ('\nSurfaceComplexationSolution_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
            phreeqc_runfile.write (AqueousStates_list [j])
            phreeqc_runfile.write (')')
            phreeqc_runfile.write ('\n')
            j = j + 1

        States = []
        i = 0
        while i < len (AqueousStates_SurfaceSpecies_list):
            state = str (AqueousStates_SurfaceSpecies_list [i][0])
            if state not in States:
                States.append (state)
            i = i+1

        for x in States:
            phreeqc_runfile.write ('\nSurfaceComplexation_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = []')
            phreeqc_runfile.write ('\nSurfaceComplexationSolution_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (')')

        phreeqc_runfile.write ('\n')
        i = 0

        while i < len (AqueousStates_SurfaceSpecies_list):
            AS_tmp = str (AqueousStates_SurfaceSpecies_list [i][0])
            F_tmp = str (AqueousStates_SurfaceSpecies_list [i][1])
            NumberOfSites = str (AqueousStates_SurfaceSpecies_Properties_list [i][0])
            SpecificArea_on_off = str (AqueousStates_SurfaceSpecies_Properties_list [i][1])
            SpecificArea = str (AqueousStates_SurfaceSpecies_Properties_list [i][2])
            Mass = str (AqueousStates_SurfaceSpecies_Properties_list [i][3])
            F_tmp_2 = F_tmp
            F_tmp_2 = F_tmp_2.replace ('(', '_')
            F_tmp_2 = F_tmp_2.replace (')', '_')
            F_tmp_2 = F_tmp_2.replace ('+', '_')
            F_tmp_2 = F_tmp_2.replace ('-', '_')
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (F_tmp_2)
            phreeqc_runfile.write ('Site = SurfaceBindingSpecies (\'')
            phreeqc_runfile.write (F_tmp)
            phreeqc_runfile.write ('\', MolesAmount (')
            phreeqc_runfile.write (NumberOfSites)
            phreeqc_runfile.write (', \'')
            phreeqc_runfile.write ('mol\')')
            if SpecificArea_on_off == 'On':
                phreeqc_runfile.write (', specificAreaPerGram = SpecificAreaPerGram (\'')
                phreeqc_runfile.write (F_tmp)
                phreeqc_runfile.write ('\', ')
                phreeqc_runfile.write (SpecificArea)
                phreeqc_runfile.write (')')
                phreeqc_runfile.write (', mass = Mass (')
                phreeqc_runfile.write (Mass)
                phreeqc_runfile.write (', \"g\"))')
            else:
                phreeqc_runfile.write (')')

            phreeqc_runfile.write ('\nSurfaceComplexation_')
            phreeqc_runfile.write (AS_tmp)
            phreeqc_runfile.write ('.append (')
            phreeqc_runfile.write (F_tmp_2)
            phreeqc_runfile.write ('Site')
            phreeqc_runfile.write (')')
            i = i+1            

        phreeqc_runfile.write ('\n')
        for x in States:

            phreeqc_runfile.write ('\nSurfaceComplexationSolution_')
            phreeqc_runfile.write (x)   
            phreeqc_runfile.write (' = SurfaceComplexation (SurfaceComplexation_')
            phreeqc_runfile.write (x)
            phreeqc_runfile.write (')')

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n##  Treatment of the solutioncomponentspecies')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        i = 0
        while i < len (Components_list):

            Component_tmp = str (Components_list [i])
            Component_tmp = Component_tmp.replace ('(', '_')
            Component_tmp = Component_tmp.replace (')', '_')
            phreeqc_runfile.write ('\n# ')
            phreeqc_runfile.write (Component_tmp)
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (Component_tmp)
            phreeqc_runfile.write (' = AqueousComponentSpecies (symbol = \"')
            phreeqc_runfile.write (ComponentSpecies_Name_list [i])
            phreeqc_runfile.write ('\", name = \"')
            phreeqc_runfile.write (Components_list [i])
            if '(' not in Components_list [i]:
                phreeqc_runfile.write ('\", element = \"')
                phreeqc_runfile.write (ComponentSpecies_Formula_list [i])
            molarMass = str (Components_Properties_list [i][0])
            alkalinity = str (Components_Properties_list [i][1])
            phreeqc_runfile.write ('\", molarMass = MolarMass(')
            phreeqc_runfile.write (molarMass)
            phreeqc_runfile.write ('), alkalinity = ')
            phreeqc_runfile.write (alkalinity)
            phreeqc_runfile.write (')')
            phreeqc_runfile.write ('\nnewSpeciesList.append(')
            phreeqc_runfile.write (Component_tmp)
            phreeqc_runfile.write (')')
            i = i+1

        phreeqc_runfile.write ('\n#')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n## Treatment of the Solution Secondary Species')
        phreeqc_runfile.write ('\n##')
        phreeqc_runfile.write ('\n#')
        i = 0
        while i < len (AqueousSpecies_list):
            phreeqc_runfile.write ('\n# ')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write ('reaction = []')
            j = 0
            while j < len (AqueousSpecies_Species_list [i]):
                test = AqueousSpecies_Species_list [i][j][0]
                if (test != ''):
                    phreeqc_runfile.write ('\n')
                    phreeqc_runfile.write (AqueousSpecies_list [i])
                    phreeqc_runfile.write ('reaction.append ((\"')
                    spec = str (AqueousSpecies_Species_list [i][j][0])
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\", ')
                    conc = str (AqueousSpecies_Species_list [i][j][1])
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write ('))')
                    j = j+1
                else:
                    break
            phreeqc_runfile.write ('\n')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write (' = AqueousSecondarySpecies (\"')
            phreeqc_runfile.write (AqueousSpecies_Formula_list [i])
            phreeqc_runfile.write ('\", ')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write ('reaction, logK25 = ')
            log_k = str (float (AqueousSpecies_Properties_list [i][0]))
            phreeqc_runfile.write (log_k)				
            phreeqc_runfile.write (', name = \"')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write ('\")')
            phreeqc_runfile.write ('\nnewSpeciesList.append (')
            phreeqc_runfile.write (AqueousSpecies_list [i])
            phreeqc_runfile.write (')')
            i = i+1
        i = 0
        while i < len (Components_list):

            if '(' in Components_list [i]:
                pass
            else:
                Component_tmp = str (Components_list [i])
                Component_tmp = Component_tmp.replace ('(', '_')
                Component_tmp = Component_tmp.replace (')', '_')
                phreeqc_runfile.write ('\n# ')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write ('\n')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write ('reaction = []')
                phreeqc_runfile.write ('\n')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write ('reaction.append ((\"')
                phreeqc_runfile.write (ComponentSpecies_Name_list [i])
                phreeqc_runfile.write ('\", 1))')
                phreeqc_runfile.write ('\n')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write (' = AqueousSecondarySpecies (\"')
                phreeqc_runfile.write (ComponentSpecies_Name_list [i])
                phreeqc_runfile.write ('\", ')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write ('reaction, logK25 = 0.0, name = \"')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write ('\")')
                phreeqc_runfile.write ('\nnewSpeciesList.append (')
                phreeqc_runfile.write (Component_tmp)
                phreeqc_runfile.write (')') 
            i = i+1

        phreeqc_runfile.write ('\n#')

        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write ('ColumnStage = StageChemicalState(\"')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write ('\", AqueousSolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (',MineralPhaseSolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (', gasPhasesolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (', IonicExchangerSolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write (', SurfaceComplexationSolution_')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        l = AqueousStates_list.index (AqueousState_to_equilibrate)
        if str (AqueousStates_Properties_list [l][6]) == 'Balance':
            phreeqc_runfile.write (', balance = (\"')
            element = str (AqueousStates_Properties_list [l][8])
            n_of_moles = str (AqueousStates_Properties_list [l][7])
            phreeqc_runfile.write (element)
            phreeqc_runfile.write ('\", ')
            phreeqc_runfile.write (n_of_moles)
            phreeqc_runfile.write (')')
        else:
            pass                                
        if str (AqueousStates_Properties_list [l][3]) == 'Fix':
            phreeqc_runfile.write (', phFixed = (\"')
            element = str (AqueousStates_Properties_list [l][5])
            n_of_moles = str (AqueousStates_Properties_list [l][4])
            phreeqc_runfile.write (element)
            phreeqc_runfile.write ('\", ')
            phreeqc_runfile.write (n_of_moles)
            phreeqc_runfile.write (')')
        else:
            pass
	    
#debug_p
                
	t = 0
	if len (mineralEquilibrium_list [0]) != 0:
            phreeqc_runfile.write (', mineralEquilibrium = [')
            while t < (len (mineralEquilibrium_list [0]) -1):
        	if len (mineralEquilibrium_list [0][t]) != 0:
		    spec = str (mineralEquilibrium_list [0][t][0])
                    conc = str (mineralEquilibrium_list [0][t][1])
                    mineral = str (mineralEquilibrium_list [0][t][2])
                    phreeqc_runfile.write ('(\"')
                    phreeqc_runfile.write (spec)
                    phreeqc_runfile.write ('\", \"')
                    phreeqc_runfile.write (mineral)
                    phreeqc_runfile.write ('\", ')
                    phreeqc_runfile.write (conc)
                    phreeqc_runfile.write (')')
                    phreeqc_runfile.write (', ')
		else:
		    pass
        	t = t+1
            if len (mineralEquilibrium_list [0][len (mineralEquilibrium_list [0]) - 1]) != 0:
		spec = str (mineralEquilibrium_list [0][len (mineralEquilibrium_list [0]) - 1][0])
        	conc = str (mineralEquilibrium_list [0][len (mineralEquilibrium_list [0]) -1][1])
        	mineral = str (mineralEquilibrium_list [0][len (mineralEquilibrium_list [0]) - 1][2])
        	phreeqc_runfile.write ('(\"')
        	phreeqc_runfile.write (spec)
        	phreeqc_runfile.write ('\", \"')
        	phreeqc_runfile.write (mineral)
        	phreeqc_runfile.write ('\", ')
        	phreeqc_runfile.write (conc)
        	phreeqc_runfile.write (')]')
	    else:
		pass
	else: 
            pass
                
        if str (AqueousStates_Properties_list [l][3]) == 'Charge':
            phreeqc_runfile.write (', charge = 1')
        else:
            pass 
                        
        phreeqc_runfile.write (')')
        """
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\nkineticLaws = []')
        i = 0
        while i < len (AqueousStates_KineticRates_list):
            AqueousState = str (AqueousStates_KineticRates_list [i][0])
            KineticRate = str (AqueousStates_KineticRates_list [i][1])
            kind = str (AqueousStates_KineticRates_Properties_list [i][0])
            phreeqc_runfile.write ('\nkineticLaws.append (ReversibleKineticLaw (\"')
            phreeqc_runfile.write (KineticRate)
            phreeqc_runfile.write ('\"')
            if kind == 'Standard':
                power = str (float (AqueousStates_KineticRates_Properties_list [i][1]))
                rate = str (float (AqueousStates_KineticRates_Properties_list [i][2]))
                specificSurfaceArea = str (float (AqueousStates_KineticRates_Properties_list [i][3]))
                phreeqc_runfile.write (',rate = ReactionRate (')
                phreeqc_runfile.write (rate)
                phreeqc_runfile.write (',\'mol/m2/s\'), power = ')
                phreeqc_runfile.write (power)
                sphereModelExp_On_Off = str (AqueousStates_KineticRates_Properties_list [i][4])
                if sphereModelExp_On_Off == 'On':
                    sphereModelExponent = str (float (AqueousStates_KineticRates_Properties_list [i][5]))
                    phreeqc_runfile.write (', sphereModelExponent = ')
                    phreeqc_runfile.write (sphereModelExponent)
                else:
                    pass
                phreeqc_runfile.write (', specificSurfaceArea = ')
                phreeqc_runfile.write (specificSurfaceArea)
            elif kind == 'Specific':
                parameter = str (AqueousStates_KineticRates_Properties_list [i][1])
                phreeqc_runfile.write (', parameter = ')
                phreeqc_runfile.write (parameter)
            phreeqc_runfile.write ('))')
            i = i+1
        """
        phreeqc_runfile.write ('\n')
        phreeqc_runfile.write ('\nproblem = ChemicalProblem (name=\'Test chimie PhreeqC 0D\', ')
        phreeqc_runfile.write ('bdd = Phreeqc_url_bdd, chemicalState=')
        phreeqc_runfile.write (AqueousState_to_equilibrate)
        phreeqc_runfile.write ('ColumnStage, newSpeciesList=newSpeciesList)')
        phreeqc_runfile.write ('\nmodule  = Chemical()')
        phreeqc_runfile.write ('\nmodule.setData(problem)')
        phreeqc_runfile.write ('\nmodule.setComponent(\'Phreeqc\')')
        phreeqc_runfile.write ('\nmodule.setVerbose(0)')
        phreeqc_runfile.write ('\nmodule.setParameter(\'phreeqcchem\',\'phreeqcchem.phout\')')
        phreeqc_runfile.write ('\nmodule.run()')
        phreeqc_runfile.write ('\nok = module.getOutput()')
        phreeqc_runfile.write ('\nfile = open (\'./outputs.py\', \'w\')')
        phreeqc_runfile.write ('\nfile.write (\'outputs = \')')
        phreeqc_runfile.write ('\nfile.write (str (ok))')
        phreeqc_runfile.write ('\nfile.close ()')
        phreeqc_runfile.write ('\nmodule.end()')

        phreeqc_runfile.close ()

        #------------------------------------------------------
        #  execution du fichier python genere
        #------------------------------------------------------
        fn = phreeqc_runfile_name
        fileName = str (fn)
        try:
            case = open(fileName,'r')
        except:
            return

        for l in case.readlines ():
            code = l
            exec code

        self.get_outputs ()
        #------------------------------------------------------


#----------------------------------------------------------------------------------------------
#  runfile (end)
#----------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------

    def exe_chemistry_chess (self):

        chess_runfile_name = './'+str (Title)+'_chess.py'
        chess_runfile = open (chess_runfile_name, 'w')
        #  We try to open a file (located in the current directory)
        #  with the same name but with the extension ".txt"
        #  ( "_chess.py").
        #  This file (if it exists) contains a description of the case.
        #  This file may be generated from the "Summary" frame,
        #  but can also be written by the user.
        try:
            t = open ('./'+str (Title)+'.txt', 'r')
            m = ''
            chess_runfile.write ('\n')
            chess_runfile.write ('\n')
            chess_runfile.write ('\n#===========================#')
            chess_runfile.write ('\n#  Description of the case  #')
            chess_runfile.write ('\n#===========================#')
            chess_runfile.write ('\n')
            for i in t.readlines ():
                m = m+'#  '+i
            chess_runfile.write (m)
            chess_runfile.write ('\n#')
        except:
            pass
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#================================================================#')
        chess_runfile.write ('\n#                                                                #')
        chess_runfile.write ('\n#  Chess Runfile: this file is generated through the Interface.  #')
        chess_runfile.write ('\n#                                                                #')
        chess_runfile.write ('\n#================================================================#')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#===========#')
        chess_runfile.write ('\n#  Imports  #')
        chess_runfile.write ('\n#===========#')
        chess_runfile.write ('\nfrom datamodel import *')
        chess_runfile.write ('\nfrom chemicalmodule import *')
        chess_runfile.write ('\n#===========#')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#===========================#')
        chess_runfile.write ('\n#  First, set problem type  #')
        chess_runfile.write ('\n#===========================#')
        chess_runfile.write ('\nsetProblemType(\"Chemical\")')
        chess_runfile.write ('\n#===========================#')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#========================================================================#')
        chess_runfile.write ('\n#  For Modules requiring Species, define Species and Element properties  #')
        chess_runfile.write ('\n#========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        #  Aqueous Component Species 
        #
        #
        i = 0
        while i < len (Components_list):
            Component_tmp = str (Components_list [i])
            Component_tmp = Component_tmp.replace ('(', '_')
            Component_tmp = Component_tmp.replace (')', '_')
            space = ' ' * len (Component_tmp)
            ComponentSpeciesName_tmp = str (ComponentSpecies_Name_list [i])
            #            
            #  Chess necessite des '[...]' autour des + ou -           
            #            
            if ComponentSpeciesName_tmp.find ('+') != -1:
                aux = ComponentSpeciesName_tmp [ComponentSpeciesName_tmp.find ('+'):]                
                ComponentSpeciesName_tmp = ComponentSpeciesName_tmp [:ComponentSpeciesName_tmp.find ('+')] + '[' + aux + ']'
            else:
                pass
            if ComponentSpeciesName_tmp.find ('-') != -1:
                aux = ComponentSpeciesName_tmp [ComponentSpeciesName_tmp.find ('-'):]                
                ComponentSpeciesName_tmp = ComponentSpeciesName_tmp [:ComponentSpeciesName_tmp.find ('+')] + '[' + aux + ']'
            else:
                pass
            #
            #  voir s'il n'y a pas de probleme avec les ++ , +2, ou 2+ par exemple...
            #
            chess_runfile.write ('\n')
            chess_runfile.write (Component_tmp)
            chess_runfile.write (' = AqueousComponentSpecies (symbol = \'')
            #chess_runfile.write (ComponentSpecies_Name_list [i])
            chess_runfile.write (ComponentSpeciesName_tmp)
            chess_runfile.write ('\',')
            chess_runfile.write ('\n'+space+'                            name = \'')
            chess_runfile.write (Components_list [i])
            if '(' not in Components_list [i]:
                chess_runfile.write ('\',')
                chess_runfile.write ('\n'+space+'                            element = \'')
                chess_runfile.write (ComponentSpecies_Formula_list [i])
            molarMass = str (Components_Properties_list [i][0])
            alkalinity = str (Components_Properties_list [i][1])
            chess_runfile.write ('\',')
            chess_runfile.write ('\n'+space+'                            molarMass = MolarMass (')
            chess_runfile.write (molarMass)
            chess_runfile.write (', \'kg/mol\'),')
            chess_runfile.write ('\n'+space+'                            alkalinity = ')
            chess_runfile.write (alkalinity)
            chess_runfile.write (')')
            chess_runfile.write ('\n')
            i = i+1
        #===================================================================================


        #===================================================================================
        #  Aqueous Secondary Species 
        #
        #
        i = 0
        while i < len (AqueousSpecies_list):
            SecondarySpecies_tmp = str (AqueousSpecies_list [i])
            SecondarySpecies_tmp = SecondarySpecies_tmp.replace ('(', '_')
            SecondarySpecies_tmp = SecondarySpecies_tmp.replace (')', '_')
            space = ' ' * len (SecondarySpecies_tmp)
            AqueousSpeciesFormula_tmp = str (AqueousSpecies_Formula_list [i])
            #            
            #  Chess necessite des '[...]' autour des + ou -           
            #            
            if AqueousSpeciesFormula_tmp.find ('+') != -1:
                aux = AqueousSpeciesFormula_tmp [AqueousSpeciesFormula_tmp.find ('+'):]                
                AqueousSpeciesFormula_tmp = AqueousSpeciesFormula_tmp [:AqueousSpeciesFormula_tmp.find ('+')] + '[' + aux + ']'
            else:
                pass
            if AqueousSpeciesFormula_tmp.find ('-') != -1:
                aux = AqueousSpeciesFormula_tmp [AqueousSpeciesFormula_tmp.find ('-'):]                
                AqueousSpeciesFormula_tmp = AqueousSpeciesFormula_tmp [:AqueousSpeciesFormula_tmp.find ('+')] + '[' + aux + ']'
            else:
                pass
            #
            #  voir s'il n'y a pas de probleme avec les ++ , +2, ou 2+ par exemple...
            #
            chess_runfile.write ('\n')
            chess_runfile.write (SecondarySpecies_tmp)
            chess_runfile.write (' = AqueousSecondarySpecies (symbol = \'')
            chess_runfile.write (AqueousSpeciesFormula_tmp)
            chess_runfile.write ('\',')
            chess_runfile.write ('\n'+space+'                            name = \'')
            chess_runfile.write (AqueousSpecies_list [i])
            chess_runfile.write ('\',')
            formationReaction = []
            j = 0
            while j < len (AqueousSpecies_Species_list [i]):
                test = AqueousSpecies_Species_list [i][j][0]
                if (test != ''):
                    spec = str (AqueousSpecies_Species_list [i][j][0])
                    #            
                    #  Chess necessite des '[...]' autour des + ou -           
                    #            
                    if spec.find ('+') != -1:
                        aux = spec [spec.find ('+'):]                
                        spec = spec [:spec.find ('+')] + '[' + aux + ']'
                    else:
                        pass
                    if spec.find ('-') != -1:
                        aux = spec [spec.find ('-'):]                
                        spec = spec [:spec.find ('+')] + '[' + aux + ']'
                    else:
                        pass
                    #
                    #  voir s'il n'y a pas de probleme avec les ++ , +2, ou 2+ par exemple...
                    #
                    conc = float (str (AqueousSpecies_Species_list [i][j][1]))
                    tuple_ = (spec, conc)
                    formationReaction.append (tuple_)
                    j = j+1
                else:
                    break
            chess_runfile.write ('\n'+space+'                            formationReaction = ')            
            chess_runfile.write (str (formationReaction))
            chess_runfile.write (',')
            log_k = str (float (AqueousSpecies_Properties_list [i][0]))
            chess_runfile.write ('\n'+space+'                            logK25 = ')
            chess_runfile.write (log_k)
            chess_runfile.write (')')
            chess_runfile.write ('\n')
            i = i+1
        #===================================================================================


        #===================================================================================
        #  Minerals 
        #
        #
        i = 0
        while i < len (MineralPhases_list):
            Mineral_tmp = str (MineralPhases_list [i])
            Mineral_tmp = Mineral_tmp.replace ('(', '_')
            Mineral_tmp = Mineral_tmp.replace (')', '_')
            space = ' ' * len (Mineral_tmp)
            chess_runfile.write ('\n')
            chess_runfile.write (Mineral_tmp)
            chess_runfile.write (' = MineralSecondarySpecies (symbol = \'')
            #  Ici en theorie on devrait mettre la formule et non le nom du mineral mais 
            #  Chess ne le permet pas...
            #chess_runfile.write (MineralPhases_Formula_list [i])
            chess_runfile.write (MineralPhases_list [i])
            chess_runfile.write ('\',')
            chess_runfile.write ('\n'+space+'                            name = \'')
            chess_runfile.write (MineralPhases_list [i])
            chess_runfile.write ('\',')
            formationReaction = []
            j = 0
            while j < len (MineralPhases_Species_list [i]):
                test = MineralPhases_Species_list [i][j][0]
                if (test != ''):
                    spec = str (MineralPhases_Species_list [i][j][0])
                    #            
                    #  Chess necessite des '[...]' autour des + ou -           
                    #            
                    if spec.find ('+') != -1:
                        aux = spec [spec.find ('+'):]                
                        spec = spec [:spec.find ('+')] + '[' + aux + ']'
                    else:
                        pass
                    if spec.find ('-') != -1:
                        aux = spec [spec.find ('-'):]                
                        spec = spec [:spec.find ('+')] + '[' + aux + ']'
                    else:
                        pass
                    #
                    #  voir s'il n'y a pas de probleme avec les ++ , +2, ou 2+ par exemple...
                    #
                    conc = float (str (MineralPhases_Species_list [i][j][1]))
                    tuple_ = (spec, conc)
                    formationReaction.append (tuple_)
                    j = j+1
                else:
                    break
            chess_runfile.write ('\n'+space+'                            formationReaction = ')
            chess_runfile.write (str (formationReaction))
            chess_runfile.write (',')
            log_k = str (float (MineralPhases_Properties_list [i][0]))
            chess_runfile.write ('\n'+space+'                            logK25 = ')
            chess_runfile.write (log_k)	
            chess_runfile.write (',')
            density = str (float (MineralPhases_Properties_list [i][3]))
            chess_runfile.write ('\n'+space+'                            density = Density (')
            chess_runfile.write (density)
            chess_runfile.write (', \'kg/m3\'))')
            chess_runfile.write ('\n')
            i = i+1
        #===================================================================================
        new_species_list = []
        i = 0
        while i < len (Components_list):
            Component_tmp = str (Components_list [i])
            Component_tmp = Component_tmp.replace ('(', '_')
            Component_tmp = Component_tmp.replace (')', '_')
            new_species_list.append (Component_tmp)
            i = i+1
        i = 0
        while i < len (AqueousSpecies_list):
            SecondarySpecies_tmp = str (AqueousSpecies_list [i])
            SecondarySpecies_tmp = SecondarySpecies_tmp.replace ('(', '_')
            SecondarySpecies_tmp = SecondarySpecies_tmp.replace (')', '_')
            new_species_list.append (SecondarySpecies_tmp)
            i = i+1
        i = 0
        while i < len (MineralPhases_list):
            Mineral_tmp = str (MineralPhases_list [i])
            Mineral_tmp = Mineral_tmp.replace ('(', '_')
            Mineral_tmp = Mineral_tmp.replace (')', '_')
            new_species_list.append (Mineral_tmp)
            i = i+1
        
        chess_runfile.write ('\nnew_species = [')
        i = 0
        while i < (len (new_species_list) - 1):
            chess_runfile.write (str (new_species_list [i]))
            chess_runfile.write (', ')
            i = i+1
        chess_runfile.write (str (new_species_list [len (new_species_list) - 1]))
        chess_runfile.write (']')
        chess_runfile.write ('\n\n#========================================================================#')
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  Definition of all non attached variables : Velocity, ChemicalState ...  #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        #  Aqueous Solutions 
        #
        #
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\n')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write (' = GlobalChemicalState (\"')
            chess_runfile.write (AqueousStates_list [i])
            chess_runfile.write ('\",')
            pH = str (AqueousStates_Properties_list [i][1])
            if pH != '':
                chess_runfile.write ('\n'+space+'                        pH = ')
                chess_runfile.write (pH)
                chess_runfile.write (',')
            else:
                pass
            pe = str (AqueousStates_Properties_list [i][2])
            if pe != '':
                chess_runfile.write ('\n'+space+'                        pe = ')
                chess_runfile.write (pe)
                chess_runfile.write (',')
            else:
                pass
            #
            #  Voir pour Eh: dans l'etat actuel de la fenetre on ne peut l'entrer
            #

            #
            #  Attention prevoir un test dans le cas ou 
            #  il n'y aurait pas de contrainte
            #
            chess_runfile.write ('\n'+space+'                        constraints = ')
            chess_runfile.write ('\n'+space+'                        [')
            #
            #  Total concentrations
            #
            j = 0
            while (j < len (AqueousStates_Species_list [i]) - 1):
                test = str (AqueousStates_Species_list [i][j][0])
                if (test != ''):
                    spec = str (AqueousStates_Species_list [i][j][0])
                    conc = str (AqueousStates_Species_list [i][j][1])
                    ind_crochet = spec.find ('[')
                    if ind_crochet != -1:
                        aux_spec = spec [:spec.index ('[')]
                        aux_spec = aux_spec.replace (' ', '')
                        spec = aux_spec
                    else:
                        pass
                    if Concentration_Unit == 'moles/l':
                        if j != 0:
                            chess_runfile.write (',\n'+space+'                         TotalConcentration (\"')
                        else:
                            chess_runfile.write ('TotalConcentration (\"')
                        chess_runfile.write (spec)
                        chess_runfile.write ('\", ')
                        chess_runfile.write (conc)
                        chess_runfile.write (', \"')
                        chess_runfile.write ('mol/l')
                        chess_runfile.write ('\")')
                    else:
                        if j != 0:
                            chess_runfile.write (',\n'+space+'                         TotalConcentration (\"')
                        else:
                            chess_runfile.write ('TotalConcentration (\"')
                        chess_runfile.write (spec)
                        chess_runfile.write ('\", ')
                        chess_runfile.write (conc)
                        chess_runfile.write (', \"')
                        chess_runfile.write ('mol/m3')
                        chess_runfile.write ('\")')
                else:
                    pass
                j = j+1
            j = len (AqueousStates_Species_list [i]) - 1
            test = str (AqueousStates_Species_list [i][j][0])
            if (test != ''):
                spec = str (AqueousStates_Species_list [i][j][0])
                conc = str (AqueousStates_Species_list [i][j][1])
                ind_crochet = spec.find ('[')
                if ind_crochet != -1:
                    aux_spec = spec [:spec.index ('[')]
                    aux_spec = aux_spec.replace (' ', '')
                    spec = aux_spec
                else:
                    pass
                if Concentration_Unit == 'moles/l':
                    if j != 0:
                        chess_runfile.write (',\n'+space+'                         TotalConcentration (\"')
                    else:
                        chess_runfile.write ('TotalConcentration (\"')
                    chess_runfile.write (spec)
                    chess_runfile.write ('\", ')
                    chess_runfile.write (conc)
                    chess_runfile.write (', \"')
                    chess_runfile.write ('mol/l')
                    chess_runfile.write ('\")')
                else:
                    if j != 0:
                        chess_runfile.write (',\n'+space+'                         TotalConcentration (\"')
                    else:
                        chess_runfile.write ('TotalConcentration (\"')
                    chess_runfile.write (spec)
                    chess_runfile.write ('\", ')
                    chess_runfile.write (conc)
                    chess_runfile.write (', \"')
                    chess_runfile.write ('mol/l')
                    chess_runfile.write ('\")')
            else:
                pass
            j = 0
            while j < len (AqueousStates_MineralPhases_list):
                if str (AqueousStates_list [i]) == str (AqueousStates_MineralPhases_list [j][0]):
                    AS_tmp = str (AqueousStates_MineralPhases_list [j][0])
                    M_tmp = str (AqueousStates_MineralPhases_list [j][1])
                    Amount_tmp = str (AqueousStates_MineralPhases_Properties_list [j][1])
                    if str (AqueousStates_Species_list [i][0][0]) == '':
                        chess_runfile.write ('MineralTotalMolalConcentration (\"')
                    else:
                        chess_runfile.write (',\n'+space+'                         MineralTotalMolalConcentration (\"')
                    chess_runfile.write (M_tmp)
                    chess_runfile.write ('\", ')
                    chess_runfile.write (Amount_tmp)
                    chess_runfile.write (', \"')
                    chess_runfile.write ('molal\"')
                    chess_runfile.write (')')           
                else:
                    pass
                j = j+1
            #
            #  Voir pour les autres contraintes...
            #
            chess_runfile.write ('])')
            #
            #  Voir pour surfaceAreas and balance
            #
            i = i+1
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  Definition of Problem: Insert all previous variables in the problem     #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        #  Chemical problem(s)
        #
        #        
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\nproblem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write (' = ChemicalProblem (name = \'')
            chess_runfile.write (str (Title))
            chess_runfile.write (' ')
            chess_runfile.write (AqueousStates_list [i])
            chess_runfile.write ('\',\n'+space+'                            bdd = \'')
            chess_runfile.write (str (DefaultDatabase))
            chess_runfile.write ('\',\n'+space+'                            newSpeciesList = new_species,')
            chess_runfile.write ('\n'+space+'                            chemicalState = ')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write (')')
            i = i+1
            #
            #  Voir pour l'argument "outputs"
            #
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  Define the calculation module and set problem data                      #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        #  Calculation module(s)
        #
        #        
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write (' = Chemical ()')
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.setData (problem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write (')')
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.setComponent (\'Chess\')')
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.setParameter (\'OutputFile\', \'chemicalmodule_chess_')
            chess_runfile.write (str (Title))
            chess_runfile.write ('_')
            chess_runfile.write (AqueousStates_list [i])
            chess_runfile.write ('\')')
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.setParameter (\'Report\', 1)')
            chess_runfile.write ('\n')
            i = i+1
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  Run computations                                                        #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.run ()')
            i = i+1
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  Getting Outputs                                                         #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.printOutputState ()')
            i = i+1
        #===================================================================================
        chess_runfile.write ('\n')
        chess_runfile.write ('\n')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n#  End                                                                     #')
        chess_runfile.write ('\n#==========================================================================#')
        chess_runfile.write ('\n')
        #===================================================================================
        i = 0
        while i < len (AqueousStates_list):
            AqueousState_tmp = str (AqueousStates_list [i])
            AqueousState_tmp = AqueousState_tmp.replace ('(', '_')
            AqueousState_tmp = AqueousState_tmp.replace (')', '_')
            space = ' ' * len (AqueousState_tmp)
            chess_runfile.write ('\nchem_')
            chess_runfile.write (AqueousState_tmp)
            chess_runfile.write ('.end ()')
            i = i+1


#  debug_chess



        chess_runfile.close ()
        os.system ('python '+chess_runfile_name+'&')

#==========================
#
# End of 0D Chess
#
#==========================


        

#----------------------------------------------------------------------------------------------
       
    def exit (self):

        nb = QMessageBox.warning (self, 'Warning', 'Do you really want to quit?', QMessageBox.Yes | QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
        if nb == 3:         #  This number belongs to the "YES" button   
            self.close ()

## #----------------------------------------------------------------------------------------------

##     def equilibrate (self):

##         self.EquilibrateFrame = QFrame ()
##         self.EquilibrateFrame.setCaption ('Equilibrate')

##         self.EquilibrateFrame.mainLayout = QVBoxLayout (self.EquilibrateFrame, 10, -1, 'EquilibrateFrame_mainLayout')
##         self.EquilibrateFrame.mainLayout.setMargin (Marge)
##         self.EquilibrateFrame.mainLayout.setSpacing (Space)

## #----------------------------------------------------------------------------------------------
 
##         self.EquilibrateFrame.QVGroupBox0 = QVGroupBox (self.EquilibrateFrame)
##         self.EquilibrateFrame.QVGroupBox0.setMargin (10)
##         self.EquilibrateFrame.QVGroupBox0.setMidLineWidth (0)
##         self.EquilibrateFrame.mainLayout.addWidget (self.EquilibrateFrame.QVGroupBox0)

##         self.EquilibrateFrame.QHBox01 = QHBox (self.EquilibrateFrame.QVGroupBox0)
##         self.EquilibrateFrame.QHBox02 = QHBox (self.EquilibrateFrame.QVGroupBox0)
        
##         self.EquilibrateFrame.QHBox01.setMargin (10)
##         self.EquilibrateFrame.QHBox01.setSpacing (20)
##         self.EquilibrateFrame.QHBox02.setMargin (10)
##         self.EquilibrateFrame.QHBox02.setSpacing (20)

##         self.EquilibrateFrame.ListOfAqueousStatesLabel = QLabel ('List Of Aqueous States', self.EquilibrateFrame.QHBox01)
##         self.EquilibrateFrame.ListOfAqueousStatesLabel.resize (self.EquilibrateFrame.ListOfAqueousStatesLabel.sizeHint ())

##         self.EquilibrateFrame.ListOfAqueousStatesComboBox = QComboBox (self.EquilibrateFrame.QHBox01)
##         self.EquilibrateFrame.ListOfAqueousStatesComboBox.setMinimumSize (200, 25)
##         self.EquilibrateFrame.ListOfAqueousStatesComboBox.setMaximumSize (200, 25)
##         self.connect (self.EquilibrateFrame.ListOfAqueousStatesComboBox, SIGNAL ('activated (int)'), self.EquilibrateFrame_ListOfAqueousStatesComboBox_activate)
##         i = 0
##         while i < len (AqueousStates_list):
##             self.EquilibrateFrame.ListOfAqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
##             i = i+1

##         self.EquilibrateFrame.AqueousStateToEquilibrateLabel = QLabel ('Aqueous State To Equilibrate', self.EquilibrateFrame.QHBox02)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLabel.resize (self.EquilibrateFrame.AqueousStateToEquilibrateLabel.sizeHint ())

##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit = QLineEdit (self.EquilibrateFrame.QHBox02)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setMinimumSize (200, 25)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setMaximumSize (200, 25)
## #  set default value (list in comboBox or single value in this lineEdit)
##         i = 0
##         while i < len (AqueousSolutionToEquilibrate_list):
##             self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setText (str (AqueousSolutionToEquilibrate_list [i]))
##             i = i+1

## #----------------------------------------------------------------------------------------------

##         self.EquilibrateFrame.QHGroupBox0 = QHGroupBox (self.EquilibrateFrame)
##         self.EquilibrateFrame.QHGroupBox0.setMargin (10)
##         self.EquilibrateFrame.QHGroupBox0.setMidLineWidth (0)
##         self.EquilibrateFrame.mainLayout.addWidget (self.EquilibrateFrame.QHGroupBox0)

##         self.EquilibrateFrame.EquilibratePB = QPushButton ('Equilibrate', self.EquilibrateFrame.QHGroupBox0)
##         self.EquilibrateFrame.CancelPB = QPushButton ('Cancel', self.EquilibrateFrame.QHGroupBox0)
##         self.EquilibrateFrame.HelpPB = QPushButton ('&Help', self.EquilibrateFrame.QHGroupBox0)

##         self.connect (self.EquilibrateFrame.EquilibratePB, SIGNAL ('clicked ()'), self.EquilibrateFrame_Equilibrate)
##         self.connect (self.EquilibrateFrame.CancelPB, SIGNAL ('clicked ()'), self.EquilibrateFrame_cancel)
##         self.connect (self.EquilibrateFrame.HelpPB, SIGNAL ('clicked ()'), self.EquilibrateFrame_help)

## #----------------------------------------------------------------------------------------------

##         self.EquilibrateFrame.show ()

## #----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
 
    def equilibrate (self):

        self.EquilibrateFrame = QFrame ()
        self.EquilibrateFrame.setCaption ('Equilibrate')

        self.EquilibrateFrame.mainLayout = QVBoxLayout (self.EquilibrateFrame, 10, -1, 'EquilibrateFrame_mainLayout')
        self.EquilibrateFrame.mainLayout.setMargin (Marge)
        self.EquilibrateFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Equilibrate_comment = 'This window enables the user to simulate an equilibrium.\n '

        self.EquilibrateFrame.QHGroupBoxA = QHGroupBox (self.EquilibrateFrame)
        QToolTip.add (self.EquilibrateFrame.QHGroupBoxA, Equilibrate_comment)

        self.EquilibrateFrame.QHGroupBoxA.setMargin (5)
        self.EquilibrateFrame.QHGroupBoxA.setMidLineWidth (0)
        self.EquilibrateFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.EquilibrateFrame.mainLayout.addWidget (self.EquilibrateFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.EquilibrateFrame.QVGroupBox0 = QVGroupBox (self.EquilibrateFrame)
        self.EquilibrateFrame.QVGroupBox0.setMargin (0)
        self.EquilibrateFrame.QVGroupBox0.setMidLineWidth (0)
        self.EquilibrateFrame.mainLayout.addWidget (self.EquilibrateFrame.QVGroupBox0)

        self.EquilibrateFrame.QHBox01 = QHBox (self.EquilibrateFrame.QVGroupBox0)
##         self.EquilibrateFrame.QHBox02 = QHBox (self.EquilibrateFrame.QVGroupBox0)
        
        self.EquilibrateFrame.QHBox01.setMargin (5)
        self.EquilibrateFrame.QHBox01.setSpacing (25)
##         self.EquilibrateFrame.QHBox02.setMargin (10)
##         self.EquilibrateFrame.QHBox02.setSpacing (20)

        self.EquilibrateFrame.ListOfAqueousStatesLabel = QLabel ('Aqueous State To Equilibrate', self.EquilibrateFrame.QHBox01)
        self.EquilibrateFrame.ListOfAqueousStatesLabel.resize (self.EquilibrateFrame.ListOfAqueousStatesLabel.sizeHint ())

        self.EquilibrateFrame.ListOfAqueousStatesComboBox = QComboBox (self.EquilibrateFrame.QHBox01)
        self.EquilibrateFrame.ListOfAqueousStatesComboBox.setMinimumSize (200, 25)
        self.EquilibrateFrame.ListOfAqueousStatesComboBox.setMaximumSize (200, 25)
        self.connect (self.EquilibrateFrame.ListOfAqueousStatesComboBox, SIGNAL ('activated (int)'), self.EquilibrateFrame_ListOfAqueousStatesComboBox_activate)
        i = 0
        while i < len (AqueousStates_list):
            self.EquilibrateFrame.ListOfAqueousStatesComboBox.insertItem (AqueousStates_list [i], 0)
            i = i+1

##         self.EquilibrateFrame.AqueousStateToEquilibrateLabel = QLabel ('Aqueous State To Equilibrate', self.EquilibrateFrame.QHBox02)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLabel.resize (self.EquilibrateFrame.AqueousStateToEquilibrateLabel.sizeHint ())

##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit = QLineEdit (self.EquilibrateFrame.QHBox02)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setMinimumSize (200, 25)
##         self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setMaximumSize (200, 25)
## #  set default value (list in comboBox or single value in this lineEdit)
##         i = 0
##         while i < len (AqueousSolutionToEquilibrate_list):
##             self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setText (str (AqueousSolutionToEquilibrate_list [i]))
##             i = i+1

#----------------------------------------------------------------------------------------------

        self.EquilibrateFrame.QHGroupBox0 = QHGroupBox (self.EquilibrateFrame)
        self.EquilibrateFrame.QHGroupBox0.setMargin (10)
        self.EquilibrateFrame.QHGroupBox0.setMidLineWidth (0)
        self.EquilibrateFrame.mainLayout.addWidget (self.EquilibrateFrame.QHGroupBox0)

        self.EquilibrateFrame.EquilibratePB = QPushButton ('Equilibrate', self.EquilibrateFrame.QHGroupBox0)
        self.EquilibrateFrame.CancelPB = QPushButton ('Cancel', self.EquilibrateFrame.QHGroupBox0)
        self.EquilibrateFrame.HelpPB = QPushButton ('&Help', self.EquilibrateFrame.QHGroupBox0)

        self.connect (self.EquilibrateFrame.EquilibratePB, SIGNAL ('clicked ()'), self.EquilibrateFrame_Equilibrate)
        self.connect (self.EquilibrateFrame.CancelPB, SIGNAL ('clicked ()'), self.EquilibrateFrame_cancel)
        self.connect (self.EquilibrateFrame.HelpPB, SIGNAL ('clicked ()'), self.EquilibrateFrame_help)

#----------------------------------------------------------------------------------------------

        self.EquilibrateFrame.show ()

#----------------------------------------------------------------------------------------------

    def EquilibrateFrame_Equilibrate (self):

        pass

##         g.write ("\nSOLUTION 0 Fluide entrant = fluide a l eq avec l argile")
##         g.write ("\n\ttemp ")
##         sol = str (AqueousStatesTemperatures_list [0])
##         g.write (sol)
##         g.write ("\n\tpH ")
##         pH = str (AqueousStatespH_list [0])
##         g.write (pH)
##         g.write ("\n\tpe ")
##         pe = str (AqueousStatespe_list [0])
##         g.write (pe)
##         g.write ("\n\tunits mol/l")
##         i = 0
##         while i < len (AqueousStatesSpecies_list):
##             g.write ("\n\t")
##             spec = str (AqueousStatesSpecies_list [i])
##             g.write (spec)
##             g.write ("    ")
##             conc = str (AqueousStatesConcentrations_list [i])
##             g.write (conc)
##             i = i+1
##         g.write ("\nEND")
##         g.close ()


    def EquilibrateFrame_cancel (self):

        self.EquilibrateFrame.close ()

    def EquilibrateFrame_help (self):

        self.Help ()

    def EquilibrateFrame_ListOfAqueousStatesComboBox_activate (self):

        self.EquilibrateFrame.AqueousStateToEquilibrateLineEdit.setText (self.EquilibrateFrame.ListOfAqueousStatesComboBox.currentText ())
        
#----------------------------------------------------------------------------------------------

    def output_controls (self):

        self.OutputControlsFrame = QFrame ()
        self.OutputControlsFrame.setCaption ('Output Controls')  

        self.OutputControlsFrame.show ()

    def postprocessing_XY_plot (self):

        self.PlotFrame = QFrame ()
        self.PlotFrame.setCaption ('Postprocessing XY plot')

        self.PlotFrame.mainLayout = QVBoxLayout (self.PlotFrame, 10, -1, 'PlotFrame_mainLayout')
        self.PlotFrame.mainLayout.setMargin (Marge)
        self.PlotFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Plot_comment = '\n '

        self.PlotFrame.QHGroupBoxA = QHGroupBox (self.PlotFrame)
        QToolTip.add (self.PlotFrame.QHGroupBoxA, Plot_comment)

        self.PlotFrame.QHGroupBoxA.setMargin (5)
        self.PlotFrame.QHGroupBoxA.setMidLineWidth (0)
        self.PlotFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.PlotFrame.mainLayout.addWidget (self.PlotFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.PlotFrame.QHBox0 = QHBox (self.PlotFrame)
        self.PlotFrame.QHBox0.setMargin (0)
        self.PlotFrame.QHBox0.setSpacing (5)
        self.PlotFrame.QHBox0.setMidLineWidth (0)
        self.PlotFrame.mainLayout.addWidget (self.PlotFrame.QHBox0)

        self.PlotFrame.QButtonGroup1 = QButtonGroup ('', self.PlotFrame.QHBox0, 'PlotFrame_QButtonGroup1' )
       
        self.PlotFrame.QVBoxLayout01 = QVBoxLayout (self.PlotFrame.QButtonGroup1, 10)
        self.PlotFrame.QVBoxLayout01.setMargin (10)
        self.PlotFrame.QVBoxLayout01.setSpacing (10)

        self.PlotFrame.Organizer = range (3)

        self.PlotFrame.Organizer[0] = QRadioButton (self.PlotFrame.QButtonGroup1)
        self.PlotFrame.Organizer[0].setText('Aqueous Components')
        self.PlotFrame.Organizer[0].setChecked (1)
##        self.connect (self.PlotFrame.Organizer[0], SIGNAL ('clicked ()'), self.PlotFrame_)
        self.PlotFrame.QVBoxLayout01.addWidget (self.PlotFrame.Organizer[0])
              
        self.PlotFrame.Organizer[1] = QRadioButton (self.PlotFrame.QButtonGroup1)
        self.PlotFrame.Organizer[1].setText('Sorbed Components')
##        self.connect (self.PlotFrame.Organizer[1], SIGNAL ('clicked ()'), self.PlotFrame_)
        self.PlotFrame.QVBoxLayout01.addWidget (self.PlotFrame.Organizer[1])
        
        self.PlotFrame.Organizer[2] = QRadioButton (self.PlotFrame.QButtonGroup1)
        self.PlotFrame.Organizer[2].setText('Mineral Phase')
        self.PlotFrame.QVBoxLayout01.addWidget (self.PlotFrame.Organizer[2])

        self.PlotFrame.QButtonGroup1.adjustSize ()
        self.PlotFrame.QVBoxLayout01.activate()

#----------------------------------------------------------------------------------------------

        self.PlotFrame.QHGroupBox01 = QHGroupBox (self.PlotFrame.QHBox0)
        self.PlotFrame.QHGroupBox01.setMargin (10)
        
        self.PlotFrame.QVBox010 = QVBox (self.PlotFrame.QHGroupBox01)
        self.PlotFrame.QVBox011 = QVBox (self.PlotFrame.QHGroupBox01)

        self.PlotFrame.QVBox010.setMargin (0)
        self.PlotFrame.QVBox010.setSpacing (5)
        self.PlotFrame.QVBox011.setMargin (0)
        self.PlotFrame.QVBox011.setSpacing (5)
        
        self.PlotFrame.I_IndexLabel = QLabel ('I Index', self.PlotFrame.QVBox010)
        self.PlotFrame.I_IndexLabel.resize (self.PlotFrame.I_IndexLabel.sizeHint ())

        self.PlotFrame.J_IndexLabel = QLabel ('J Index', self.PlotFrame.QVBox010)
        self.PlotFrame.J_IndexLabel.resize (self.PlotFrame.J_IndexLabel.sizeHint ())

        self.PlotFrame.PlotFrequencyLabel = QLabel ('Plot Frequency', self.PlotFrame.QVBox010)
        self.PlotFrame.PlotFrequencyLabel.resize (self.PlotFrame.PlotFrequencyLabel.sizeHint ())

        self.PlotFrame.I_IndexLineEdit = QLineEdit (self.PlotFrame.QVBox011)
        self.PlotFrame.I_IndexLineEdit.setMinimumSize (70, 25)
        self.PlotFrame.I_IndexLineEdit.setMaximumSize (70, 25)
        self.PlotFrame.I_IndexLineEdit.setFocus ()

        self.PlotFrame.J_IndexLineEdit = QLineEdit (self.PlotFrame.QVBox011)
        self.PlotFrame.J_IndexLineEdit.setMinimumSize (70, 25)
        self.PlotFrame.J_IndexLineEdit.setMaximumSize (70, 25)

        self.PlotFrame.PlotFrequencyLineEdit = QLineEdit (self.PlotFrame.QVBox011)
        self.PlotFrame.PlotFrequencyLineEdit.setMinimumSize (70, 25)
        self.PlotFrame.PlotFrequencyLineEdit.setMaximumSize (70, 25)

#----------------------------------------------------------------------------------------------

        self.PlotFrame.QHGroupBox1 = QHGroupBox (self.PlotFrame)
        self.PlotFrame.QHGroupBox1.setMargin (10)
        self.PlotFrame.QHGroupBox1.setMidLineWidth (0)
        self.PlotFrame.mainLayout.addWidget (self.PlotFrame.QHGroupBox1)

        self.PlotFrame.QVBox10 = QVBox (self.PlotFrame.QHGroupBox1)
        self.PlotFrame.QVBox11 = QVBox (self.PlotFrame.QHGroupBox1)
        
        self.PlotFrame.QVBox10.setMargin (0)
        self.PlotFrame.QVBox10.setSpacing (5)
        self.PlotFrame.QVBox11.setMargin (0)
        self.PlotFrame.QVBox11.setSpacing (5)

        self.PlotFrame.NameOfTheFileLabel = QLabel ('Name of the file', self.PlotFrame.QVBox10)
        self.PlotFrame.NameOfTheFileLabel.resize ( self.PlotFrame.NameOfTheFileLabel.sizeHint ())

        self.PlotFrame.NameOfTheFileLineEdit = QLineEdit (self.PlotFrame.QVBox10)
        self.PlotFrame.NameOfTheFileLineEdit.setMinimumSize (150, 25)
        self.PlotFrame.NameOfTheFileLineEdit.setMaximumSize (150, 25)

        self.PlotFrame.FileDescriptionLabel = QLabel ('File description', self.PlotFrame.QVBox11)
        self.PlotFrame.FileDescriptionLabel.resize (self.PlotFrame.FileDescriptionLabel.sizeHint ())
        
        self.PlotFrame.FileDescriptionLineEdit = QLineEdit (self.PlotFrame.QVBox11)
        self.PlotFrame.FileDescriptionLineEdit.setMinimumSize (150, 25)
        self.PlotFrame.FileDescriptionLineEdit.setMaximumSize (150, 25)
        
#----------------------------------------------------------------------------------------------

        self.PlotFrame.QHGroupBox2 = QHGroupBox (self.PlotFrame)
        self.PlotFrame.QHGroupBox2.setMargin (10)
        self.PlotFrame.QHGroupBox2.setMidLineWidth (0)
        self.PlotFrame.mainLayout.addWidget (self.PlotFrame.QHGroupBox2)

        self.PlotFrame.OKPB = QPushButton ('OK', self.PlotFrame.QHGroupBox2)
        self.PlotFrame.AddPB = QPushButton ('Add', self.PlotFrame.QHGroupBox2)
        self.PlotFrame.CancelPB = QPushButton ('Cancel', self.PlotFrame.QHGroupBox2)
        self.PlotFrame.HelpPB = QPushButton ('&Help', self.PlotFrame.QHGroupBox2)

        self.connect (self.PlotFrame.OKPB, SIGNAL ('clicked ()'), self.PlotFrame_ok)
        self.connect (self.PlotFrame.AddPB,  SIGNAL ('clicked ()'), self.PlotFrame_add)
        self.connect (self.PlotFrame.CancelPB, SIGNAL ('clicked ()'), self.PlotFrame_cancel)
        self.connect (self.PlotFrame.HelpPB, SIGNAL ('clicked ()'), self.PlotFrame_help)
           
#----------------------------------------------------------------------------------------------

        self.PlotFrame.show ()
        
#----------------------------------------------------------------------------------------------

    def PlotFrame_ok (self):

        self.postprocessing_variables_to_plot ()
        self.PlotFrame.close ()

    def PlotFrame_add (self):

        global PostprocessingXYPlot_Parameters_list

        Temp_list = []
        
        if self.PlotFrame.Organizer[0].isChecked ():
            Temp_list.append ('AqueousComponents')
        elif self.PlotFrame.Organizer[1].isChecked ():
            Temp_list.append ('SorbedComponents')
        elif self.PlotFrame.Organizer[2].isChecked ():
            Temp_list.append ('MineralPhase')

        Temp_list.append (int (str (self.PlotFrame.I_IndexLineEdit.text ())))
        Temp_list.append (int (str (self.PlotFrame.J_IndexLineEdit.text ())))
        Temp_list.append (float (str (self.PlotFrame.PlotFrequencyLineEdit.text ())))
        Temp_list.append (str (self.PlotFrame.NameOfTheFileLineEdit.text ()))
        Temp_list.append (str (self.PlotFrame.FileDescriptionLineEdit.text ()))

        PostprocessingXYPlot_Parameters_list.append (Temp_list)

        self.PlotFrame.Organizer[0].setChecked (1)
        self.PlotFrame.I_IndexLineEdit.clear ()
        self.PlotFrame.J_IndexLineEdit.clear ()
        self.PlotFrame.PlotFrequencyLineEdit.clear ()
        self.PlotFrame.NameOfTheFileLineEdit.clear ()
        self.PlotFrame.FileDescriptionLineEdit.clear ()
        self.PlotFrame.I_IndexLineEdit.setFocus ()

    def PlotFrame_cancel (self):

        self.PlotFrame.close ()

    def PlotFrame_help (self):
        
        self.Help ()

#----------------------------------------------------------------------------------------------

    def plot2 (self):

        self.PlotFrame2 = QFrame ()
        self.PlotFrame2.setCaption ('Postprocessing')

        self.PlotFrame2.mainLayout = QVBoxLayout (self.PlotFrame2, 10, -1, 'PlotFrame2_mainLayout')
        self.PlotFrame2.mainLayout.setMargin (Marge)
        self.PlotFrame2.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Plot2_comment = '\n '

        self.PlotFrame2.QHGroupBoxA = QHGroupBox (self.PlotFrame2)
        QToolTip.add (self.PlotFrame2.QHGroupBoxA, Plot2_comment)

        self.PlotFrame2.QHGroupBoxA.setMargin (5)
        self.PlotFrame2.QHGroupBoxA.setMidLineWidth (0)
        self.PlotFrame2.QHGroupBoxA.setMinimumSize (80, 20)
        self.PlotFrame2.mainLayout.addWidget (self.PlotFrame2.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.PlotFrame2.QHBox0 = QHBox (self.PlotFrame2)
        self.PlotFrame2.QHBox0.setMargin (0)
        self.PlotFrame2.QHBox0.setSpacing (10)
        self.PlotFrame2.QHBox0.setMidLineWidth (0)
        self.PlotFrame2.mainLayout.addWidget (self.PlotFrame2.QHBox0)

        self.PlotFrame2.QVGroupBox00 = QVGroupBox (self.PlotFrame2.QHBox0)
        self.PlotFrame2.QVGroupBox00.setMargin (10)
        
        self.PlotFrame2.AvailableVariablesLabel = QLabel ('Available variables', self.PlotFrame2.QVGroupBox00)
        self.PlotFrame2.AvailableVariablesLabel.resize (self.PlotFrame2.AvailableVariablesLabel.sizeHint ())
        self.PlotFrame2.AvailableVariablesComboBox = QComboBox (self.PlotFrame2.QVGroupBox00)
        self.PlotFrame2.AvailableVariablesComboBox.setMinimumSize (200, 25)
        self.PlotFrame2.AvailableVariablesComboBox.setMaximumSize (200, 25)
        self.connect (self.PlotFrame2.AvailableVariablesComboBox, SIGNAL ('activated (int)'), self.PlotFrame2_AvailableVariablesComboBox_activate)

        self.PlotFrame2.VariablesToPlotLabel = QLabel ('Variables to plot', self.PlotFrame2.QVGroupBox00)
        self.PlotFrame2.VariablesToPlotLabel.resize (self.PlotFrame2.VariablesToPlotLabel.sizeHint ())

        self.PlotFrame2.VariablesToPlotComboBox = QComboBox (self.PlotFrame2.QVGroupBox00)
        self.PlotFrame2.VariablesToPlotComboBox.setMinimumSize (200, 25)
        self.PlotFrame2.VariablesToPlotComboBox.setMaximumSize (200, 25)
##        self.connect (self.PlotFrame2.VariablesToPlotComboBox, SIGNAL ('activated (int)'), self.PlotFrame2_VariablesToPlotComboBox_activate)

        self.PlotFrame2.QVGroupBox10 = QVGroupBox (self.PlotFrame2.QHBox0)
        self.PlotFrame2.QVGroupBox10.setMargin (10)

        self.PlotFrame2.spacerLabel = QLabel ('  ', self.PlotFrame2.QVGroupBox10)
        self.PlotFrame2.spacerLabel.setMinimumSize (25, 5)
        self.PlotFrame2.spacerLabel.setMaximumSize (25, 5)
                
        self.PlotFrame2.QHBox100 = QHBox (self.PlotFrame2.QVGroupBox10)
        self.PlotFrame2.QHBox101 = QHBox (self.PlotFrame2.QVGroupBox10)

        self.PlotFrame2.QHBox100.setMargin (8)
        self.PlotFrame2.QHBox100.setSpacing (10)
        self.PlotFrame2.QHBox101.setMargin (10)
        self.PlotFrame2.QHBox101.setSpacing (10)

        self.PlotFrame2.TMinLabel = QLabel ('t min', self.PlotFrame2.QHBox100)
        self.PlotFrame2.TMinLabel.setMinimumSize (40, 25)
        self.PlotFrame2.TMinLabel.setMaximumSize (40, 25)

        self.PlotFrame2.TMinLineEdit = QLineEdit (self.PlotFrame2.QHBox100)
        self.PlotFrame2.TMinLineEdit.setMinimumSize (50, 25)
        self.PlotFrame2.TMinLineEdit.setMaximumSize (50, 25)

        self.PlotFrame2.TMaxLabel = QLabel ('t max', self.PlotFrame2.QHBox101)
        self.PlotFrame2.TMaxLabel.setMinimumSize (40, 25)
        self.PlotFrame2.TMaxLabel.setMaximumSize (40, 25)

        self.PlotFrame2.TMaxLineEdit = QLineEdit (self.PlotFrame2.QHBox101)
        self.PlotFrame2.TMaxLineEdit.setMinimumSize (50, 25)
        self.PlotFrame2.TMaxLineEdit.setMaximumSize (50, 25)
          
#----------------------------------------------------------------------------------------------        

        self.PlotFrame2.QHGroupBox2 = QHGroupBox (self.PlotFrame2)
        self.PlotFrame2.QHGroupBox2.setMargin (10)
        self.PlotFrame2.QHGroupBox2.setMidLineWidth (0)
        self.PlotFrame2.mainLayout.addWidget (self.PlotFrame2.QHGroupBox2)

        self.PlotFrame2.OKPB = QPushButton ('OK', self.PlotFrame2.QHGroupBox2)
        self.PlotFrame2.HoldPB = QPushButton ('Hold', self.PlotFrame2.QHGroupBox2)
        self.PlotFrame2.OverwritePB = QPushButton ('Overwrite', self.PlotFrame2.QHGroupBox2)
        self.PlotFrame2.CancelPB = QPushButton ('Cancel', self.PlotFrame2.QHGroupBox2)
        self.PlotFrame2.HelpPB = QPushButton ('&Help', self.PlotFrame2.QHGroupBox2)

        self.connect (self.PlotFrame2.OKPB, SIGNAL ('clicked ()'), self.PlotFrame2_ok)
##         self.connect (self.PlotFrame2.HoldPB, SIGNAL ('clicked ()'), self.PlotFrame2_hold)
##         self.connect (self.PlotFrame2.OverwritePB,  SIGNAL ('clicked ()'), self.PlotFrame2_overwrite)
        self.connect (self.PlotFrame2.CancelPB, SIGNAL ('clicked ()'), self.PlotFrame2_cancel)
        self.connect (self.PlotFrame2.HelpPB, SIGNAL ('clicked ()'), self.PlotFrame2_help)
           
#----------------------------------------------------------------------------------------------        
        
        self.PlotFrame2.show ()
        
#----------------------------------------------------------------------------------------------

    def PlotFrame2_ok (self):

        self.PlotFrame2.close ()

    def PlotFrame2_overwrite (self):

        pass

    def PlotFrame2_cancel (self):

        self.PlotFrame2.close ()

    def PlotFrame2_help (self):

        self.Help ()

    def PlotFrame2_AvailableVariablesComboBox_activate (self):

        self.PlotFrame2.VariablesToPlotComboBox.insertItem (self.PlotFrame2.AvailableVariablesComboBox.currentText ())

#----------------------------------------------------------------------------------------------

    def plot3 (self):
    
        self.PlotFrame3 = QFrame ()
        self.PlotFrame3.setCaption ('Postprocessing')

        self.PlotFrame3.mainLayout = QVBoxLayout (self.PlotFrame3, 10, -1, 'PlotFrame3_mainLayout')
        self.PlotFrame3.mainLayout.setMargin (Marge)
        self.PlotFrame3.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Plot3_comment = '\n '

        self.PlotFrame3.QHGroupBoxA = QHGroupBox (self.PlotFrame3)
        QToolTip.add (self.PlotFrame3.QHGroupBoxA, Plot3_comment)

        self.PlotFrame3.QHGroupBoxA.setMargin (5)
        self.PlotFrame3.QHGroupBoxA.setMidLineWidth (0)
        self.PlotFrame3.QHGroupBoxA.setMinimumSize (80, 20)
        self.PlotFrame3.mainLayout.addWidget (self.PlotFrame3.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.PlotFrame3.QHBox0 = QHBox (self.PlotFrame3)
        self.PlotFrame3.QHBox0.setMargin (0)
        self.PlotFrame3.QHBox0.setSpacing (10)
        self.PlotFrame3.QHBox0.setMidLineWidth (0)
        self.PlotFrame3.mainLayout.addWidget (self.PlotFrame3.QHBox0)

        self.PlotFrame3.QVGroupBox00 = QVGroupBox (self.PlotFrame3.QHBox0)
        self.PlotFrame3.QVGroupBox01 = QVGroupBox (self.PlotFrame3.QHBox0)

        self.PlotFrame3.QVGroupBox00.setMargin (0)
        self.PlotFrame3.QVGroupBox01.setMargin (0)

        self.PlotFrame3.PlotTitleLabel = QLabel ('Plot Title', self.PlotFrame3.QVGroupBox00)

        self.PlotFrame3.PlotTitleLineEdit = QLineEdit (self.PlotFrame3.QVGroupBox00)
        self.PlotFrame3.PlotTitleLineEdit.setMinimumSize (200, 25)
        self.PlotFrame3.PlotTitleLineEdit.setMaximumSize (200, 25)

        self.PlotFrame3.LegendTitleLabel = QLabel ('Legend Title', self.PlotFrame3.QVGroupBox01)

        self.PlotFrame3.LegendTitleLineEdit = QLineEdit (self.PlotFrame3.QVGroupBox01)
        self.PlotFrame3.LegendTitleLineEdit.setMinimumSize (200, 25)
        self.PlotFrame3.LegendTitleLineEdit.setMaximumSize (200, 25)

#----------------------------------------------------------------------------------------------
      
        self.PlotFrame3.QHBox1 = QHBox (self.PlotFrame3)
        self.PlotFrame3.QHBox1.setMargin (0)
        self.PlotFrame3.QHBox1.setSpacing (5)
        self.PlotFrame3.QHBox1.setMidLineWidth (0)
        self.PlotFrame3.mainLayout.addWidget (self.PlotFrame3.QHBox1)

        self.PlotFrame3.QVGroupBox10 = QVGroupBox (self.PlotFrame3.QHBox1)
        self.PlotFrame3.QVGroupBox11 = QVGroupBox (self.PlotFrame3.QHBox1)
        self.PlotFrame3.QVGroupBox10.setMargin (0)
        self.PlotFrame3.QVGroupBox11.setMargin (0)

        self.PlotFrame3.FilesLabel = QLabel ('Files', self.PlotFrame3.QVGroupBox10)

        self.PlotFrame3.FilesListBox = QListBox (self.PlotFrame3.QVGroupBox10)
        self.PlotFrame3.FilesListBox.setMinimumSize (200, 70)
        self.PlotFrame3.FilesListBox.setMaximumSize (200, 70)

        i = 0
        while i < len (PostprocessingXYPlot_Parameters_list):

            self.PlotFrame3.FilesListBox.insertItem (str (PostprocessingXYPlot_Parameters_list [i][4]))
            i = i+1

        self.connect (self.PlotFrame3.FilesListBox, SIGNAL ('selectionChanged ()'), self.PlotFrame3_listBox_selectionChanged)

        self.PlotFrame3.FileLineEdit = QLineEdit (self.PlotFrame3.QVGroupBox10)
        self.PlotFrame3.FileLineEdit.setMinimumSize (200, 25)
        self.PlotFrame3.FileLineEdit.setMaximumSize (200, 25)

        self.PlotFrame3.FileDescriptionLabel = QLabel ('File Description', self.PlotFrame3.QVGroupBox11)

        self.PlotFrame3.FileDescriptionTextBrowser = QTextBrowser (self.PlotFrame3.QVGroupBox11)
               
#----------------------------------------------------------------------------------------------

        self.PlotFrame3.QHGroupBox2 = QHGroupBox (self.PlotFrame3)
        self.PlotFrame3.QHGroupBox2.setMargin (10)
        self.PlotFrame3.QHGroupBox2.setMidLineWidth (0)
        self.PlotFrame3.mainLayout.addWidget (self.PlotFrame3.QHGroupBox2)

        self.PlotFrame3.OKPB = QPushButton ('OK', self.PlotFrame3.QHGroupBox2)
        self.PlotFrame3.CancelPB = QPushButton ('Cancel', self.PlotFrame3.QHGroupBox2)
        self.PlotFrame3.HelpPB = QPushButton ('&Help', self.PlotFrame3.QHGroupBox2)

##         self.connect (self.PlotFrame3.OKPB, SIGNAL ('clicked ()'), self.PlotFrame3_ok)
        self.connect (self.PlotFrame3.OKPB, SIGNAL ('clicked ()'), self.plot2)
        self.connect (self.PlotFrame3.CancelPB, SIGNAL ('clicked ()'), self.PlotFrame3_cancel)
        self.connect (self.PlotFrame3.HelpPB, SIGNAL ('clicked ()'), self.PlotFrame3_help)
        
#----------------------------------------------------------------------------------------------

        self.PlotFrame3.show ()
        
#----------------------------------------------------------------------------------------------

    def PlotFrame3_ok (self):

        global Postprocessing1_Parameters_list

        Postprocessing1_Parameters_list.append (str (self.PlotFrame3.PlotTitleLineEdit.text ()))
        Postprocessing1_Parameters_list.append (str (self.PlotFrame3.LegendTitleLineEdit.text ()))
        Postprocessing1_Parameters_list.append (str (self.PlotFrame3.FileLineEdit.text ()))
        Postprocessing1_Parameters_list.append (str (self.PlotFrame3.FileDescriptionTextBrowser.text ()))

        self.PlotFrame3.close ()    
        
    def PlotFrame3_cancel (self):

        self.PlotFrame3.close ()

    def PlotFrame3_help (self):

        self.Help ()

    def PlotFrame3_listBox_selectionChanged (self):

        index = self.PlotFrame3.FilesListBox.currentItem ()
        self.PlotFrame3.FileLineEdit.setText (str (self.PlotFrame3.FilesListBox.text (index)))
        i = 0
        trouve = 0
        while ((i < len (PostprocessingXYPlot_Parameters_list)) and (not trouve)):

            if str (PostprocessingXYPlot_Parameters_list [i][4]) == str (self.PlotFrame3.FilesListBox.text (index)):
                trouve = 1
                self.PlotFrame3.FileDescriptionTextBrowser.setText (str (PostprocessingXYPlot_Parameters_list [i][5]))
            else:
                i = i+1

#----------------------------------------------------------------------------------------------

    def postprocessing_variables_to_plot (self):

        self.PostprocessingVariablesToPlotFrame = QFrame ()
        self.PostprocessingVariablesToPlotFrame.setCaption ('Postprocessing: variables to plot')
        self.PostprocessingVariablesToPlotFrame.setMinimumWidth (280)

        self.PostprocessingVariablesToPlotFrame.mainLayout = QVBoxLayout (self.PostprocessingVariablesToPlotFrame, 10, -1, 'PostprocessingVariablesToPlotFrame_mainLayout')
        self.PostprocessingVariablesToPlotFrame.mainLayout.setMargin (Marge)
        self.PostprocessingVariablesToPlotFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        PostprocessingVariablesToPlot_comment = '\n '

        self.PostprocessingVariablesToPlotFrame.QHGroupBoxA = QHGroupBox (self.PostprocessingVariablesToPlotFrame)
        QToolTip.add (self.PostprocessingVariablesToPlotFrame.QHGroupBoxA, PostprocessingVariablesToPlot_comment)

        self.PostprocessingVariablesToPlotFrame.QHGroupBoxA.setMargin (5)
        self.PostprocessingVariablesToPlotFrame.QHGroupBoxA.setMidLineWidth (0)
        self.PostprocessingVariablesToPlotFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.PostprocessingVariablesToPlotFrame.mainLayout.addWidget (self.PostprocessingVariablesToPlotFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.PostprocessingVariablesToPlotFrame.QHBox0 = QHBox (self.PostprocessingVariablesToPlotFrame)
        self.PostprocessingVariablesToPlotFrame.QHBox0.setMargin (0)
        self.PostprocessingVariablesToPlotFrame.QHBox0.setSpacing (5)
        self.PostprocessingVariablesToPlotFrame.QHBox0.setMidLineWidth (0)
        self.PostprocessingVariablesToPlotFrame.mainLayout.addWidget (self.PostprocessingVariablesToPlotFrame.QHBox0)

        self.PostprocessingVariablesToPlotFrame.QVGroupBox00 = QVGroupBox (self.PostprocessingVariablesToPlotFrame.QHBox0)

        self.PostprocessingVariablesToPlotFrame.QVGroupBox00.setMargin (10)
        
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesLabel = QLabel ('Available variables', self.PostprocessingVariablesToPlotFrame.QVGroupBox00)
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesLabel.resize (self.PostprocessingVariablesToPlotFrame.AvailableVariablesLabel.sizeHint ())
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox = QComboBox (self.PostprocessingVariablesToPlotFrame.QVGroupBox00)
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox.setMinimumSize (200, 25)
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox.setMaximumSize (200, 25)
        self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox.setEditable (1)
        self.connect (self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox, SIGNAL ('activated (int)'), self.PostprocessingVariablesToPlotFrame_AvailableVariablesComboBox_activate)

        self.PostprocessingVariablesToPlotFrame.VariablesToPlotLabel = QLabel ('Variables to plot', self.PostprocessingVariablesToPlotFrame.QVGroupBox00)
        self.PostprocessingVariablesToPlotFrame.VariablesToPlotLabel.resize (self.PostprocessingVariablesToPlotFrame.VariablesToPlotLabel.sizeHint ())

        self.PostprocessingVariablesToPlotFrame.VariablesToPlotComboBox = QComboBox (self.PostprocessingVariablesToPlotFrame.QVGroupBox00)
        self.PostprocessingVariablesToPlotFrame.VariablesToPlotComboBox.setMinimumSize (200, 25)
        self.PostprocessingVariablesToPlotFrame.VariablesToPlotComboBox.setMaximumSize (200, 25)
##        self.connect (self.PostprocessingVariablesToPlotFrame.VariablesToPlotComboBox, SIGNAL ('activated (int)'), self.PostprocessingVariablesToPlotFrame_VariablesToPlotComboBox_activate)
   
#----------------------------------------------------------------------------------------------        

        self.PostprocessingVariablesToPlotFrame.QHGroupBox2 = QHGroupBox (self.PostprocessingVariablesToPlotFrame)
        self.PostprocessingVariablesToPlotFrame.QHGroupBox2.setMargin (10)
        self.PostprocessingVariablesToPlotFrame.QHGroupBox2.setMidLineWidth (0)
        self.PostprocessingVariablesToPlotFrame.mainLayout.addWidget (self.PostprocessingVariablesToPlotFrame.QHGroupBox2)

        self.PostprocessingVariablesToPlotFrame.OKPB = QPushButton ('OK', self.PostprocessingVariablesToPlotFrame.QHGroupBox2)
        self.PostprocessingVariablesToPlotFrame.DeletePB = QPushButton ('Delete', self.PostprocessingVariablesToPlotFrame.QHGroupBox2)
        self.PostprocessingVariablesToPlotFrame.CancelPB = QPushButton ('Cancel', self.PostprocessingVariablesToPlotFrame.QHGroupBox2)
        self.PostprocessingVariablesToPlotFrame.HelpPB = QPushButton ('&Help', self.PostprocessingVariablesToPlotFrame.QHGroupBox2)

        self.connect (self.PostprocessingVariablesToPlotFrame.OKPB, SIGNAL ('clicked ()'), self.PostprocessingVariablesToPlotFrame_ok)
##         self.connect (self.PostprocessingVariablesToPlotFrame.DeletePB, SIGNAL ('clicked ()'), self.PostprocessingVariablesToPlotFrame_delete)
        self.connect (self.PostprocessingVariablesToPlotFrame.CancelPB, SIGNAL ('clicked ()'), self.PostprocessingVariablesToPlotFrame_cancel)
        self.connect (self.PostprocessingVariablesToPlotFrame.HelpPB, SIGNAL ('clicked ()'), self.PostprocessingVariablesToPlotFrame_help)
           
#----------------------------------------------------------------------------------------------        
        
        self.PostprocessingVariablesToPlotFrame.show ()
        
#----------------------------------------------------------------------------------------------

    def PostprocessingVariablesToPlotFrame_ok (self):

        self.PostprocessingVariablesToPlotFrame.close ()

    def PostprocessingVariablesToPlotFrame_delete (self):

        print 'delete'

    def PostprocessingVariablesToPlotFrame_cancel (self):

        self.PostprocessingVariablesToPlotFrame.close ()

    def PostprocessingVariablesToPlotFrame_help (self):

        self.Help ()

    def PostprocessingVariablesToPlotFrame_AvailableVariablesComboBox_activate (self):

        global PostprocessingVariablesToPlot_list

        self.PostprocessingVariablesToPlotFrame.VariablesToPlotComboBox.insertItem (self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox.currentText ())
        PostprocessingVariablesToPlot_list.append (str (self.PostprocessingVariablesToPlotFrame.AvailableVariablesComboBox.currentText ()))

#----------------------------------------------------------------------------------------------

    def summary (self):

        self.SummaryFrame = QFrame ()
        self.SummaryFrame.setCaption ('Summary')
        setPosition (self.SummaryFrame)

        self.SummaryFrame.mainLayout = QVBoxLayout (self.SummaryFrame, 10, -1, 'Summary_mainLayout')
        self.SummaryFrame.mainLayout.setMargin (Marge)
        self.SummaryFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        Summary_comment = Comments ['Summary']

        self.SummaryFrame.QHGroupBoxA = QHGroupBox (self.SummaryFrame)
	QToolTip.add (self.SummaryFrame.QHGroupBoxA, Summary_comment)

        self.SummaryFrame.QHGroupBoxA.setMargin (5)
        self.SummaryFrame.QHGroupBoxA.setMidLineWidth (0)
        self.SummaryFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.SummaryFrame.mainLayout.addWidget (self.SummaryFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.SummaryFrame.QHGroupBox0 = QHGroupBox (self.SummaryFrame)
        self.SummaryFrame.QHGroupBox0.setMargin (10)
        self.SummaryFrame.QHGroupBox0.setMidLineWidth (0)
        self.SummaryFrame.mainLayout.addWidget (self.SummaryFrame.QHGroupBox0)

        self.SummaryFrame.QTextEdit = QTextEdit (self.SummaryFrame.QHGroupBox0)
        self.SummaryFrame.QTextEdit.setMinimumSize (300, 350)
	
#----------------------------------------------------------------------------------------------     

        self.SummaryFrame.QHGroupBox2 = QHGroupBox (self.SummaryFrame)
        self.SummaryFrame.QHGroupBox2.setMargin (10)
        self.SummaryFrame.QHGroupBox2.setMidLineWidth (0)
        self.SummaryFrame.mainLayout.addWidget (self.SummaryFrame.QHGroupBox2)

        self.SummaryFrame.OKPB = QPushButton ('OK', self.SummaryFrame.QHGroupBox2)
        self.SummaryFrame.ReadPB = QPushButton ('Read from file', self.SummaryFrame.QHGroupBox2)
        self.SummaryFrame.CancelPB = QPushButton ('Cancel', self.SummaryFrame.QHGroupBox2)
        self.SummaryFrame.HelpPB = QPushButton ('&Help', self.SummaryFrame.QHGroupBox2)

        self.connect (self.SummaryFrame.OKPB, SIGNAL ('clicked ()'), self.SummaryFrame_ok)
        self.connect (self.SummaryFrame.ReadPB, SIGNAL ('clicked ()'), self.SummaryFrame_read)
        self.connect (self.SummaryFrame.CancelPB, SIGNAL ('clicked ()'), self.SummaryFrame_cancel)
        self.connect (self.SummaryFrame.HelpPB, SIGNAL ('clicked ()'), self.SummaryFrame_help)

#----------------------------------------------------------------------------------------------     

        self.SummaryFrame_init ()
        self.SummaryFrame.show ()

#----------------------------------------------------------------------------------------------

    def SummaryFrame_ok (self):

        global Title
	
        summary_file = open ('./'+str (Title)+'.txt', 'w')
        text = str (self.SummaryFrame.QTextEdit.text ())
	summary_file.write (text)
	summary_file.close ()	
        self.SummaryFrame.close ()
    
    def SummaryFrame_read (self):
        
        report = QFileDialog.getOpenFileName (QString.null, "*.txt", self)
        if report.isEmpty ():
            self.statusBar().message ('Loading aborted', 2000)
            return
        fileName = str (report)
        try:
            case = open (fileName, 'r')
        except:
            return
        m = ''
        for i in case.readlines ():
            m = m + i
	self.SummaryFrame.QTextEdit.setText (m)

    def SummaryFrame_cancel (self):
        
        self.SummaryFrame.close ()

    def SummaryFrame_help (self):

        self.Help ()

    def SummaryFrame_init (self):
    
        try:
            summary_file = open ('./'+str (Title)+'.txt', 'r')
            m = ''
            for i in summary_file.readlines ():
                m = m + i
	    self.SummaryFrame.QTextEdit.setText (m)
        except:
            pass
    
#----------------------------------------------------------------------------------------------
       
    def Help (self):

# debug_help

        #  Test sur la plateforme:
        #  if string.find (sys.platform, 'linux') != -1:
#        command = 'netscape -geometry 768x512 Html/index.htm&'#        command = 'mozilla -geometry 768x512 '+os.environ ['ALLI_ROOT']+'/ALLIANCES/src/Geoi/Html/index.htm &'
        #command = 'xpdf index.pdf&'
        os.system (command)
#        frame = wx.Frame(None,-1," toto",size = (610,380))
#        htmlPanel = MyHtml(frame,-1)
#        frame.Show(True)


#----------------------------------------------------------------------------------------------

    def reaction (self):

        self.ReactionFrame = QFrame ()
        self.ReactionFrame.setCaption ('Reaction')

        self.ReactionFrame.show ()

#----------------------------------------------------------------------------------------------

    def interactive_contours (self):

        global InteractiveContours_AvailableAqueousComponents_list
        
        self.InteractiveContoursFrame = QFrame ()
        self.InteractiveContoursFrame.setCaption ('Contours (Interactive)')
        setPosition (self.InteractiveContoursFrame)

        self.InteractiveContoursFrame.mainLayout = QVBoxLayout (self.InteractiveContoursFrame, 10, -1, 'InteractiveContoursFrame_mainLayout')
        self.InteractiveContoursFrame.mainLayout.setMargin (Marge)
        self.InteractiveContoursFrame.mainLayout.setSpacing (Space)
        
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        InteractiveContours_comment = '\n '

        self.InteractiveContoursFrame.QHGroupBoxA = QHGroupBox (self.InteractiveContoursFrame)
	QToolTip.add (self.InteractiveContoursFrame.QHGroupBoxA, InteractiveContours_comment)

        self.InteractiveContoursFrame.QHGroupBoxA.setMargin (5)
        self.InteractiveContoursFrame.QHGroupBoxA.setMidLineWidth (0)
        self.InteractiveContoursFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.InteractiveContoursFrame.mainLayout.addWidget (self.InteractiveContoursFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.InteractiveContoursFrame.QHGroupBox0 = QHGroupBox (self.InteractiveContoursFrame)
        self.InteractiveContoursFrame.QHGroupBox0.setMargin (10)
        self.InteractiveContoursFrame.QHGroupBox0.setMidLineWidth (0)
        self.InteractiveContoursFrame.mainLayout.addWidget (self.InteractiveContoursFrame.QHGroupBox0)

        self.InteractiveContoursFrame.QVBox01 = QVBox (self.InteractiveContoursFrame.QHGroupBox0)
        self.InteractiveContoursFrame.QVBox02 = QVBox (self.InteractiveContoursFrame.QHGroupBox0)
        self.InteractiveContoursFrame.QVBox03 = QVBox (self.InteractiveContoursFrame.QHGroupBox0)

        self.InteractiveContoursFrame.QVBox01.setMargin (0)
        self.InteractiveContoursFrame.QVBox01.setSpacing (5)
        self.InteractiveContoursFrame.QVBox03.setMargin (0)
        self.InteractiveContoursFrame.QVBox03.setSpacing (5)
       
        self.InteractiveContoursFrame.QVBox02.setMinimumSize (10, 10)

        self.InteractiveContoursFrame.AqueousSolutionLabel = QLabel ('Aqueous Components to plot', self.InteractiveContoursFrame.QVBox01)
        self.InteractiveContoursFrame.AqueousSolutionLabel.resize (self.InteractiveContoursFrame.AqueousSolutionLabel.sizeHint ())

        self.InteractiveContoursFrame.AqueousSolutionComboBox = QComboBox (self.InteractiveContoursFrame.QVBox01)
        self.InteractiveContoursFrame.AqueousSolutionComboBox.setMinimumSize (200, 25)
        self.InteractiveContoursFrame.AqueousSolutionComboBox.setMaximumSize (200, 25)

##         i = 0
##         while i < len (InteractiveContours_AqueousComponentsToPlot_list):
##             self.InteractiveContoursFrame.AqueousSolutionComboBox.insertItem (str (InteractiveContours_AqueousComponentsToPlot_list [i]))
##             i = i+1
       
        self.InteractiveContoursFrame.AvailableLabel = QLabel ('Available Aqueous Components', self.InteractiveContoursFrame.QVBox03)
        self.InteractiveContoursFrame.AvailableLabel.resize (self.InteractiveContoursFrame.AqueousSolutionLabel.sizeHint ())
        
        self.InteractiveContoursFrame.AvailableComboBox = QComboBox (self.InteractiveContoursFrame.QVBox03)
        self.InteractiveContoursFrame.AvailableComboBox.setMinimumSize (200, 25)
        self.InteractiveContoursFrame.AvailableComboBox.setMaximumSize (200, 25)
        self.connect (self.InteractiveContoursFrame.AvailableComboBox, SIGNAL ('activated (int)'), self.InteractiveContoursFrame_AvailableComboBox_activate)


# mineraux

        InteractiveXYPlot_AvailableMineralPhases_list = []
        i = 0
        while i < len (MineralPhases_list):
            spec = str (MineralPhases_list [i])
            if (spec != ''):
                if spec in InteractiveXYPlot_AvailableMineralPhases_list:
                    i = i+1
                else:
                    InteractiveXYPlot_AvailableMineralPhases_list.append (str (spec))
                    i = i+1
            else:
                break
        InteractiveXYPlot_AvailableMineralPhases_list.sort ()
        InteractiveXYPlot_AvailableMineralPhases_list.reverse ()
        k = 0
        while k < len (InteractiveXYPlot_AvailableMineralPhases_list):
            self.InteractiveContoursFrame.AvailableComboBox.insertItem (InteractiveXYPlot_AvailableMineralPhases_list [k], 0)
            k = k+1


##  On recupere les especes composantes aqueuses (en traitant les redondances).
##  Ces especes sont stockees dans la liste InteractiveXYPlot_AvailableAqueousComponents_list
        
        i = 0
        while i < len (AqueousStates_list):
            j = 0
            while (j < len (AqueousStates_Species_list [i])):
                spec = str (AqueousStates_Species_list [i][j][0])
                if (spec != ''):
                    if spec in InteractiveContours_AvailableAqueousComponents_list:
                        j = j+1
                    else:
                        InteractiveContours_AvailableAqueousComponents_list.append (str (spec))
                        j = j+1
                else:
                    break
            i = i+1

##  On effectue ensuite un tri et une inversion de cette liste,
##  puis on la recopie dans la boite combo correspondante

    #   Tri
        InteractiveContours_AvailableAqueousComponents_list.sort ()
        
    #   Inversion de l ordre des elements pour qu ils apparaissent dans l ordre lexicographique
        InteractiveContours_AvailableAqueousComponents_list.reverse ()

    #   Recopie
        k = 0
        while k < len (InteractiveContours_AvailableAqueousComponents_list):
            self.InteractiveContoursFrame.AvailableComboBox.insertItem (InteractiveContours_AvailableAqueousComponents_list [k], 0)
            k = k+1
      
#----------------------------------------------------------------------------------------------

        self.InteractiveContoursFrame.QVGroupBox11 = QHGroupBox (self.InteractiveContoursFrame)
        self.InteractiveContoursFrame.QVGroupBox11.setMargin (10)
        self.InteractiveContoursFrame.mainLayout.addWidget (self.InteractiveContoursFrame.QVGroupBox11)

        self.InteractiveContoursFrame.QHBox110 = QHBox (self.InteractiveContoursFrame.QVGroupBox11)
        self.InteractiveContoursFrame.QHBox110.setMargin (0)
        self.InteractiveContoursFrame.QHBox110.setSpacing (5)

        self.InteractiveContoursFrame.PlotFrequencyLabel = QLabel ('Plot Frequency', self.InteractiveContoursFrame.QHBox110)
        self.InteractiveContoursFrame.PlotFrequencyLabel.resize (self.InteractiveContoursFrame.PlotFrequencyLabel.sizeHint ())
        
        self.InteractiveContoursFrame.PlotFrequencyLineEdit = QLineEdit (self.InteractiveContoursFrame.QHBox110)
##        self.InteractiveContoursFrame.PlotFrequencyLineEdit.setText (str (InteractiveContours_Parameters_list [2]))
        self.InteractiveContoursFrame.PlotFrequencyLineEdit.setMinimumSize (70, 25)
        self.InteractiveContoursFrame.PlotFrequencyLineEdit.setMaximumSize (70, 25)

        self.InteractiveContoursFrame.SpacerLabel = QLabel ('', self.InteractiveContoursFrame.QHBox110)
        self.InteractiveContoursFrame.SpacerLabel.setMinimumSize (240, 25)
        self.InteractiveContoursFrame.SpacerLabel.setMaximumSize (240, 25)

#----------------------------------------------------------------------------------------------

        self.InteractiveContoursFrame.QHGroupBox2 = QHGroupBox (self.InteractiveContoursFrame)
        self.InteractiveContoursFrame.QHGroupBox2.setMargin (10)
        self.InteractiveContoursFrame.QHGroupBox2.setMidLineWidth (0)
        self.InteractiveContoursFrame.mainLayout.addWidget (self.InteractiveContoursFrame.QHGroupBox2)

        self.InteractiveContoursFrame.OKPB = QPushButton ('OK', self.InteractiveContoursFrame.QHGroupBox2)
        self.InteractiveContoursFrame.DeletePB = QPushButton ('Delete', self.InteractiveContoursFrame.QHGroupBox2)
        self.InteractiveContoursFrame.CancelPB = QPushButton ('Cancel', self.InteractiveContoursFrame.QHGroupBox2)
        self.InteractiveContoursFrame.HelpPB = QPushButton ('&Help', self.InteractiveContoursFrame.QHGroupBox2)

        self.connect (self.InteractiveContoursFrame.OKPB, SIGNAL ('clicked ()'), self.InteractiveContoursFrame_ok)
        self.connect (self.InteractiveContoursFrame.DeletePB,  SIGNAL ('clicked ()'), self.InteractiveContoursFrame_delete)
        self.connect (self.InteractiveContoursFrame.CancelPB, SIGNAL ('clicked ()'), self.InteractiveContoursFrame_cancel)
        self.connect (self.InteractiveContoursFrame.HelpPB, SIGNAL ('clicked ()'), self.InteractiveContoursFrame_help)

#----------------------------------------------------------------------------------------------

        self.InteractiveContoursFrame.show ()

#----------------------------------------------------------------------------------------------

    def InteractiveContoursFrame_ok (self):

##         global InteractiveXYPlot_Parameters_list
##         global InteractiveXYPlot_AqueousComponentsToPlot_list
##         global InteractiveXYPlot_AvailableAqueousComponents_list

##         InteractiveXYPlot_AvailableAqueousComponents_list.sort ()

##         InteractiveXYPlot_Parameters_list [0] = int (str (self.InteractiveXYPlotFrame.ILineEdit.text ()))
##         InteractiveXYPlot_Parameters_list [1] = int (str (self.InteractiveXYPlotFrame.JLineEdit.text ()))
##         InteractiveXYPlot_Parameters_list [2] = int (str (self.InteractiveXYPlotFrame.PlotFrequencyLineEdit.text ()))

        InteractiveContours_Parameters_list [0] = int (str (self.InteractiveContoursFrame.PlotFrequencyLineEdit.text ()))

        self.InteractiveContoursFrame.close ()
        pass

    def InteractiveContoursFrame_delete (self):

##         global InteractiveXYPlot_AqueousComponentsToPlot_list

##         if ((self.InteractiveXYPlotFrame.AqueousSolutionComboBox.count ()) != 0):
##             text = str (self.InteractiveXYPlotFrame.AqueousSolutionComboBox.currentText ())
##             index = int (InteractiveXYPlot_AqueousComponentsToPlot_list.index (text))
##             self.InteractiveXYPlotFrame.AqueousSolutionComboBox.removeItem (self.InteractiveXYPlotFrame.AqueousSolutionComboBox.currentItem ())
##             del InteractiveXYPlot_AqueousComponentsToPlot_list [index]
##             if ((self.InteractiveXYPlotFrame.AqueousSolutionComboBox.count ()) != 0):
##                 self.InteractiveXYPlotFrame.AqueousSolutionComboBox.setCurrentItem (0)
##         else:
##             self.InteractiveXYPlotFrameMB = QMessageBox()
##             self.InteractiveXYPlotFrameMB.setCaption ('Error')
##             self.InteractiveXYPlotFrameMB.setText ('There is no more Aqueous Component to plot.')
##             self.InteractiveXYPlotFrameMB.setIcon (QMessageBox.Critical)
##             self.InteractiveXYPlotFrameMB.show ()
        pass
            
    def InteractiveContoursFrame_cancel (self):

        self.InteractiveContoursFrame.close ()

    def InteractiveContoursFrame_help (self):

        self.Help ()

    def InteractiveContoursFrame_AvailableComboBox_activate (self):

##         global InteractiveXYPlot_AqueousComponentsToPlot_list

##         self.InteractiveXYPlotFrame.AqueousSolutionComboBox.insertItem (self.InteractiveXYPlotFrame.AvailableComboBox.currentText (), 0)
##         InteractiveXYPlot_AqueousComponentsToPlot_list.append (str (self.InteractiveXYPlotFrame.AvailableComboBox.currentText ()))
##         InteractiveXYPlot_AqueousComponentsToPlot_list.sort ()

        pass



    def postprocessing_contours (self):

        global PostprocessingContours_AvailableAqueousComponents_list
        global PostprocessingContours_Parameters_list
      
        self.PostprocessingContoursFrame = QFrame ()
        self.PostprocessingContoursFrame.setCaption ('Contours (Postprocessing)')
        setPosition (self.PostprocessingContoursFrame)

        self.PostprocessingContoursFrame.mainLayout = QVBoxLayout (self.PostprocessingContoursFrame, 10, -1, 'PostprocessingContoursFrame_mainLayout')
        self.PostprocessingContoursFrame.mainLayout.setMargin (Marge)
        self.PostprocessingContoursFrame.mainLayout.setSpacing (Space)
      
#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        PostprocessingContours_comment = Comments ['Postprocessing_Contours']

        self.PostprocessingContoursFrame.QHGroupBoxA = QHGroupBox (self.PostprocessingContoursFrame)
	QToolTip.add (self.PostprocessingContoursFrame.QHGroupBoxA, PostprocessingContours_comment)

        self.PostprocessingContoursFrame.QHGroupBoxA.setMargin (5)
        self.PostprocessingContoursFrame.QHGroupBoxA.setMidLineWidth (0)
        self.PostprocessingContoursFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.PostprocessingContoursFrame.mainLayout.addWidget (self.PostprocessingContoursFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.PostprocessingContoursFrame.QHGroupBox0 = QHGroupBox (self.PostprocessingContoursFrame)
        self.PostprocessingContoursFrame.QHGroupBox0.setMargin (10)
        self.PostprocessingContoursFrame.QHGroupBox0.setMidLineWidth (0)
        self.PostprocessingContoursFrame.mainLayout.addWidget (self.PostprocessingContoursFrame.QHGroupBox0)

        self.PostprocessingContoursFrame.QVBox01 = QVBox (self.PostprocessingContoursFrame.QHGroupBox0)
        self.PostprocessingContoursFrame.QVBox02 = QVBox (self.PostprocessingContoursFrame.QHGroupBox0)
        self.PostprocessingContoursFrame.QVBox03 = QVBox (self.PostprocessingContoursFrame.QHGroupBox0)

        self.PostprocessingContoursFrame.QVBox01.setMargin (0)
        self.PostprocessingContoursFrame.QVBox01.setSpacing (5)
        self.PostprocessingContoursFrame.QVBox03.setMargin (0)
        self.PostprocessingContoursFrame.QVBox03.setSpacing (5)
       
        self.PostprocessingContoursFrame.QVBox02.setMinimumSize (10, 10)

        self.PostprocessingContoursFrame.AqueousSolutionLabel = QLabel ('Elements to plot', self.PostprocessingContoursFrame.QVBox01)
        self.PostprocessingContoursFrame.AqueousSolutionLabel.resize (self.PostprocessingContoursFrame.AqueousSolutionLabel.sizeHint ())

        self.PostprocessingContoursFrame.AqueousSolutionComboBox = QComboBox (self.PostprocessingContoursFrame.QVBox01)
        self.PostprocessingContoursFrame.AqueousSolutionComboBox.setMinimumSize (180, 25)
        self.PostprocessingContoursFrame.AqueousSolutionComboBox.setMaximumSize (180, 25)
        #self.PostprocessingContoursFrame.AqueousSolutionComboBox.setEditable (1)
        
        i = 0
        while i < len (PostprocessingContours_AqueousComponentsToPlot_list):
            self.PostprocessingContoursFrame.AqueousSolutionComboBox.insertItem (str (PostprocessingContours_AqueousComponentsToPlot_list [i]))
            i = i+1
       
        self.PostprocessingContoursFrame.AvailableLabel = QLabel ('Available Elements', self.PostprocessingContoursFrame.QVBox03)
        self.PostprocessingContoursFrame.AvailableLabel.resize (self.PostprocessingContoursFrame.AqueousSolutionLabel.sizeHint ())
        
        self.PostprocessingContoursFrame.AvailableComboBox = QComboBox (self.PostprocessingContoursFrame.QVBox03)
        self.PostprocessingContoursFrame.AvailableComboBox.setMinimumSize (180, 25)
        self.PostprocessingContoursFrame.AvailableComboBox.setMaximumSize (180, 25)
        self.connect (self.PostprocessingContoursFrame.AvailableComboBox, SIGNAL ('activated (int)'), self.PostprocessingContoursFrame_AvailableComboBox_activate)

##
### We retrieve minerals...
##
        PostprocessingContours_AvailableMineralPhases_list = []
        i = 0
        while i < len (MineralPhases_list):
            spec = str (MineralPhases_list [i])
            if (spec != ''):
                if spec in PostprocessingContours_AvailableMineralPhases_list:
                    i = i+1
                else:
                    PostprocessingContours_AvailableMineralPhases_list.append (str (spec))
                    i = i+1
            else:
                break
#
## Update of mineral list for contour postprocessing with available equilibrium minerals.
#
        for mineral in AqueousStates_MineralPhases_list:
	   if mineral[1] not in PostprocessingContours_AvailableMineralPhases_list:
	       PostprocessingContours_AvailableMineralPhases_list.append(mineral[1])
	       pass
	   pass
	   
        PostprocessingContours_AvailableMineralPhases_list.sort ()
        PostprocessingContours_AvailableMineralPhases_list.reverse ()
        k = 0
        while k < len (PostprocessingContours_AvailableMineralPhases_list):
            self.PostprocessingContoursFrame.AvailableComboBox.insertItem (PostprocessingContours_AvailableMineralPhases_list [k], 0)
            k = k+1

        PostprocessingContours_AvailableComponents_list = []
        i = 0
        while i < len (Components_list):
            spec = str (Components_list [i])
            if (spec != ''):
                if spec in PostprocessingContours_AvailableMineralPhases_list or spec in PostprocessingContours_AvailableAqueousComponents_list:
                    i = i+1
                else:
                    PostprocessingContours_AvailableComponents_list.append (str (spec))
                    i = i+1
            else:
                pass
        PostprocessingContours_AvailableComponents_list.sort ()
        PostprocessingContours_AvailableComponents_list.reverse ()
        k = 0
        while k < len (PostprocessingContours_AvailableComponents_list):
            self.PostprocessingContoursFrame.AvailableComboBox.insertItem (PostprocessingContours_AvailableComponents_list [k], 0)
            k = k+1


##  On recupere les especes composantes aqueuses (en traitant les redondances).
##  Ces especes sont stockees dans la liste InteractiveXYPlot_AvailableAqueousComponents_list
        
        i = 0
        while i < len (AqueousStates_list):
            j = 0
            while (j < len (AqueousStates_Species_list [i])):
                spec = str (AqueousStates_Species_list [i][j][0])
                if (spec != ''):
                    if spec in PostprocessingContours_AvailableAqueousComponents_list:
                        j = j+1
                    else:
                        PostprocessingContours_AvailableAqueousComponents_list.append (str (spec))
                        j = j+1
                else:
                    break
            i = i+1

##  On effectue ensuite un tri et une inversion de cette liste,
##  puis on la recopie dans la boite combo correspondante

    #   Tri
        PostprocessingContours_AvailableAqueousComponents_list.sort ()
        
    #   Inversion de l ordre des elements pour qu ils apparaissent dans l ordre lexicographique
        PostprocessingContours_AvailableAqueousComponents_list.reverse ()

    #   Recopie
        k = 0
        while k < len (PostprocessingContours_AvailableAqueousComponents_list):
            self.PostprocessingContoursFrame.AvailableComboBox.insertItem (PostprocessingContours_AvailableAqueousComponents_list [k], 0)
            k = k+1
            
        self.PostprocessingContoursFrame.AvailableComboBox.insertItem ('pH', 0)
        self.PostprocessingContoursFrame.AvailableComboBox.insertItem ('pe', 1)
        self.PostprocessingContoursFrame.AvailableComboBox.insertItem ('Eh', 2)
          
#----------------------------------------------------------------------------------------------

        self.PostprocessingContoursFrame.QHGroupBox1 = QHGroupBox (self.PostprocessingContoursFrame)
        self.PostprocessingContoursFrame.QHGroupBox1.setMargin (0)
        self.PostprocessingContoursFrame.QHGroupBox1.setMidLineWidth (0)
        self.PostprocessingContoursFrame.mainLayout.addWidget (self.PostprocessingContoursFrame.QHGroupBox1)

        self.PostprocessingContoursFrame.SaveFrequencyLabel = QLabel ('Save Frequency', self.PostprocessingContoursFrame.QHGroupBox1)

        self.PostprocessingContoursFrame.SpacerLabel = QLabel ('    ', self.PostprocessingContoursFrame.QHGroupBox1)
        self.PostprocessingContoursFrame.SpacerLabel.setMinimumSize (100, 25)
        self.PostprocessingContoursFrame.SpacerLabel.setMaximumSize (100, 25)

        self.PostprocessingContoursFrame.SaveFrequencyLineEdit = QLineEdit (self.PostprocessingContoursFrame.QHGroupBox1)
        self.PostprocessingContoursFrame.SaveFrequencyLineEdit.setMinimumSize (100, 25)
        self.PostprocessingContoursFrame.SaveFrequencyLineEdit.setMaximumSize (100, 25)
        self.PostprocessingContoursFrame.SaveFrequencyLineEdit.setText (str (PostprocessingContours_Parameters_list [0]))
        
        self.PostprocessingContoursFrame.TimeUnitComboBox = QComboBox (self.PostprocessingContoursFrame.QHGroupBox1)
        self.PostprocessingContoursFrame.TimeUnitComboBox.setMinimumSize (100, 25)
        self.PostprocessingContoursFrame.TimeUnitComboBox.setMaximumSize (100, 25)
        self.PostprocessingContoursFrame.TimeUnitComboBox.insertItem ('s', 0)
        self.PostprocessingContoursFrame.TimeUnitComboBox.insertItem ('Hour(s)', 1)
        self.PostprocessingContoursFrame.TimeUnitComboBox.insertItem ('Day(s)', 2)
        self.PostprocessingContoursFrame.TimeUnitComboBox.insertItem ('Year(s)', 3)
        if str (PostprocessingContours_Parameters_list [1]) == 's':
            self.PostprocessingContoursFrame.TimeUnitComboBox.setCurrentItem (0)
        elif str (PostprocessingContours_Parameters_list [1]) == 'Hours':
            self.PostprocessingContoursFrame.TimeUnitComboBox.setCurrentItem (1)
        elif str (PostprocessingContours_Parameters_list [1]) == 'Days':
            self.PostprocessingContoursFrame.TimeUnitComboBox.setCurrentItem (2)
        elif str (PostprocessingContours_Parameters_list [1]) == 'Years':
            self.PostprocessingContoursFrame.TimeUnitComboBox.setCurrentItem (3)

#----------------------------------------------------------------------------------------------

        self.PostprocessingContoursFrame.QHGroupBox2 = QHGroupBox (self.PostprocessingContoursFrame)
        self.PostprocessingContoursFrame.QHGroupBox2.setMargin (10)
        self.PostprocessingContoursFrame.QHGroupBox2.setMidLineWidth (0)
        self.PostprocessingContoursFrame.mainLayout.addWidget (self.PostprocessingContoursFrame.QHGroupBox2)

        self.PostprocessingContoursFrame.OKPB = QPushButton ('OK', self.PostprocessingContoursFrame.QHGroupBox2)
        self.PostprocessingContoursFrame.DeletePB = QPushButton ('Delete', self.PostprocessingContoursFrame.QHGroupBox2)
        self.PostprocessingContoursFrame.CancelPB = QPushButton ('Cancel', self.PostprocessingContoursFrame.QHGroupBox2)
        self.PostprocessingContoursFrame.HelpPB = QPushButton ('&Help', self.PostprocessingContoursFrame.QHGroupBox2)

        self.connect (self.PostprocessingContoursFrame.OKPB, SIGNAL ('clicked ()'), self.PostprocessingContoursFrame_ok)
        self.connect (self.PostprocessingContoursFrame.DeletePB,  SIGNAL ('clicked ()'), self.PostprocessingContoursFrame_delete)
        self.connect (self.PostprocessingContoursFrame.CancelPB, SIGNAL ('clicked ()'), self.PostprocessingContoursFrame_cancel)
        self.connect (self.PostprocessingContoursFrame.HelpPB, SIGNAL ('clicked ()'), self.PostprocessingContoursFrame_help)

#----------------------------------------------------------------------------------------------

        self.PostprocessingContoursFrame.show ()

#----------------------------------------------------------------------------------------------

    def PostprocessingContoursFrame_ok (self):

        global PostprocessingContours_Parameters_list
        global PostprocessingContours_AqueousComponentsToPlot_list
        global PostprocessingContours_AvailableAqueousComponents_list
        
        PostprocessingContours_Parameters_list [0] = str (self.PostprocessingContoursFrame.SaveFrequencyLineEdit.text ())
        if str (self.PostprocessingContoursFrame.TimeUnitComboBox.currentItem ()) == '0':
            PostprocessingContours_Parameters_list [1] = 's'
        elif str (self.PostprocessingContoursFrame.TimeUnitComboBox.currentItem ()) == '1':
            PostprocessingContours_Parameters_list [1] = 'Hours'
        elif str (self.PostprocessingContoursFrame.TimeUnitComboBox.currentItem ()) == '2':
            PostprocessingContours_Parameters_list [1] = 'Days'
        elif str (self.PostprocessingContoursFrame.TimeUnitComboBox.currentItem ()) == '3':
            PostprocessingContours_Parameters_list [1] = 'Years'

        self.PostprocessingContoursFrame.close ()

    def PostprocessingContoursFrame_delete (self):

        global PostprocessingContours_AqueousComponentsToPlot_list

        if ((self.PostprocessingContoursFrame.AqueousSolutionComboBox.count ()) != 0):
            text = str (self.PostprocessingContoursFrame.AqueousSolutionComboBox.currentText ())
            index = int (PostprocessingContours_AqueousComponentsToPlot_list.index (text))
            self.PostprocessingContoursFrame.AqueousSolutionComboBox.removeItem (self.PostprocessingContoursFrame.AqueousSolutionComboBox.currentItem ())
            del PostprocessingContours_AqueousComponentsToPlot_list [index]
            if ((self.PostprocessingContoursFrame.AqueousSolutionComboBox.count ()) != 0):
                self.PostprocessingContoursFrame.AqueousSolutionComboBox.setCurrentItem (0)
	    else:
	        pass
        else:
            self.PostprocessingContoursFrameMB = QMessageBox()
            self.PostprocessingContoursFrameMB.setCaption ('Error')
            self.PostprocessingContoursFrameMB.setText ('There is no more Element to plot.')
            self.PostprocessingContoursFrameMB.setIcon (QMessageBox.Critical)
            self.PostprocessingContoursFrameMB.show ()

    def PostprocessingContoursFrame_cancel (self):

        self.PostprocessingContoursFrame.close ()

    def PostprocessingContoursFrame_help (self):

        self.Help ()

    def PostprocessingContoursFrame_AvailableComboBox_activate (self):
    
        global PostprocessingContours_AqueousComponentsToPlot_list
        
        self.PostprocessingContoursFrame.AqueousSolutionComboBox.insertItem (self.PostprocessingContoursFrame.AvailableComboBox.currentText (), self.PostprocessingContoursFrame.AqueousSolutionComboBox.currentItem ())
	PostprocessingContours_AqueousComponentsToPlot_list.append (str (self.PostprocessingContoursFrame.AvailableComboBox.currentText ()))
	PostprocessingContours_AqueousComponentsToPlot_list.sort ()
	self.PostprocessingContoursFrame.AqueousSolutionComboBox.setCurrentItem (0)

#========================================================================

    def contours_2 (self):

        command = "$PARAVIEW/paraview &"
        os.system (command)

    def grid (self):

##  for each zone: [xmin, ymin, xmax, ymax, dx, dy]        
## pb pour introduire geometric ratio...

        Mesh_description = []
        names = []
        temp_list = []
        i = 0
        while i < len (Zone_Material_AqueousState_list):

            temp_list = []
            xmin = int (str (Zone_Material_AqueousState_list [i][2]))
            ymin = int (str (Zone_Material_AqueousState_list [i][3]))
            xmax = int (str (Zone_Material_AqueousState_list [i][4]))
            ymax = int (str (Zone_Material_AqueousState_list [i][5]))
            delta_x = 1./(float (xmax - xmin+1.))
            delta_y = (float (ymax - ymin+1.))
            if delta_y == 0:
                delta_y = 1
                ymin = 0
                ymax = 1                
            temp_list.append (xmin-1)
            temp_list.append (ymin-1)
            temp_list.append (xmax)
            temp_list.append (ymax)
            temp_list.append (delta_x)
            temp_list.append (delta_y)	    
            Mesh_description.append (temp_list)
            i = i+1
            names = Zones_list
            
        try:
            if len (Mesh_description) != 0:
                mesh_file = open ('./TkGridDisplay_file.py', 'w')
                mesh_file.write ('\nfrom TkGridDisplay import Mesh')
                mesh_file.write ('\nfrom Tkinter import *')
                mesh_file.write ('\ntop = Tk ()')
                mesh_file.write ('\nf = Mesh (top, ')
                mesh_file.write (str (Mesh_description))
                mesh_file.write (', ')
                mesh_file.write (str (names))
                mesh_file.write (')')
                mesh_file.write ('\ntop.mainloop ()')
                #mesh_file.write ('\ntop.destroy()')
                mesh_file.close ()
                os.system ('python ./TkGridDisplay_file.py&')
		sleep (3)
                os.system ('rm -if ./TkGridDisplay_file.py')
            else:
                self.gridMB = QMessageBox()
                self.gridMB.setCaption ('Error')
                self.gridMB.setText ('You have to define a meshing at first.')
                self.gridMB.setIcon (QMessageBox.Critical)
                self.gridMB.show ()            
        except:
            self.gridMB2 = QMessageBox()
            self.gridMB2.setCaption ('Error')
            self.gridMB2.setText ('There is a problem to visualize the Grid.\nBe sure you are allowed to write into this directory.')
            self.gridMB2.setIcon (QMessageBox.Critical)
            self.gridMB2.show ()            

    def grid2 (self):

        x1 = 0.
        y1 = 0.
        xgrid_end_points = [x1]
        ygrid_end_points = [y1]
        interv_x = []
        interv_y = []
        xmaxmax = 0.
        ymaxmax = 0.
        i = 0
        while i < len (Mesh_list_InI):
            xmax = float (str (Mesh_list_InI [i][1]))
            xmaxmax = xmaxmax + xmax
            xgrid_end_points.append (xmaxmax)
            interv_x.append (Mesh_list_InI [i][0])
            i = i+1
        i = 0
        while i < len (Mesh_list_InJ):
            ymax = float (str (Mesh_list_InJ [i][1]))
            ymaxmax = ymaxmax + ymax
            ygrid_end_points.append (ymaxmax)
            interv_y.append (Mesh_list_InJ [i][0])
            i = i+1
        if ygrid_end_points == [0.]:
            ygrid_end_points.append (20)
            interv_y.append (4)
        xgrid_end_points.sort ()
        ygrid_end_points.sort()
        Mt3dTkMeshVis(xgrid_end_points,ygrid_end_points,interv_x,interv_y)

    def velocity_vectors (self):

        self.VelocityVectorsFrame = QFrame ()
        self.VelocityVectorsFrame.setCaption ('Velocity Vectors')

        self.VelocityVectorsFrame.show ()

    def initialize (self):

        self.InitializeFrame = QFrame ()
        self.InitializeFrame.setCaption ('Initialize')

        self.InitializeFrame.show ()

    def new (self):

        pass 

#debug_new	
	
	
	
	
	

    def open (self):

        global Title

        global Concentration_Unit
        global Density_Unit
        global Dispersivity_Unit
        global EffectiveDiffusion_Unit
        global Enthalpy_Unit
        global Head_Unit
        global Length_Unit
        global Permeability_Unit
        global Temperature_Unit
        global Time_Unit

        global Solver
        global PorosityState

        global ChemistryTool

        global DefaultDatabase
        global Available_Databases_list

        global Components_list
        global ComponentSpecies_Name_list
        global ComponentSpecies_Formula_list
        global Components_Properties_list

        global AqueousSpecies_list
        global AqueousSpecies_Formula_list
        global AqueousSpecies_Properties_list
        global AqueousSpecies_Species_list

        global MineralPhases_list
        global MineralPhases_Formula_list
        global MineralPhases_Properties_list
        global MineralPhases_Species_list
        global Default_log_k 
        global Default_Enthalpy
        
        global ExchangeSpecies_list
        global ExchangeSpecies_Properties_list
        global ExchangeSpecies_Reactants_list
        global DebyeHuckel_a
        global DebyeHuckel_b
        
        global ExchangeMasterSpecies_list 
        global ExchangeMasterSpecies_Formula_list
        
        global SurfaceSpecies_list 
        global SurfaceSpecies_Properties_list
        global SurfaceSpecies_Reactants_list
        
        global SurfaceMasterSpecies_list
        global SurfaceMasterSpecies_Formula_list
        
        global AqueousStates_list
        global AqueousStates_Properties_list
        global AqueousStates_Species_list
        global AqueousStates_Default_Temperature
        global AqueousStates_Default_pH
        global AqueousStates_Default_pe
        
        global AqueousStates_MineralPhases_list
        global AqueousStates_MineralPhases_Properties_list
        
        global AqueousStates_ExchangeSpecies_list
        global AqueousStates_ExchangeSpecies_Properties_list
        
        global AqueousStates_SurfaceSpecies_list
        global AqueousStates_SurfaceSpecies_Properties_list
        
        global AqueousStates_KineticRates_list
        global AqueousStates_KineticRates_Properties_list
        
        global AqueousStates_Gas_list
        global AqueousStates_Gas_Properties_list
        
        global Materials_list
        global Materials_Properties_list
        global DiffusionLaws_dict
        global KxPermeability
        global KyPermeability
        global EffectivePorosity
        global EffectiveDiffusion
        global LongitudinalDispersivity
        global TransverseDispersivity

        global DiffusionState
        
        global DefaultKxPermeability
        global DefaultKyPermeability
        global DefaultKzPermeability
        global DefaultEffectivePorosity
        global DefaultEffectiveDiffusion
        global DefaultLongitudinalDispersivity
        global DefaultTransverseDispersivity
        
        global MeshLine_Direction
        
        global GridLineInI
        global LineNumberInI
        global NumberOfLinesInI

        global Mesh_list_InI
        global MeshLineInINumberOfCells
        global MeshLineInILength
        global MeshLineInIGeometricRatio

        global GridLineInJ
        global LineNumberInJ
        global NumberOfLinesInJ

        global Mesh_list_InJ
        global MeshLineInJNumberOfCells
        global MeshLineInJLength
        global MeshLineInJGeometricRatio

        global Zones_list
        global Zone_Material_AqueousState_list
        global BoundaryConditionTimeVariation_dict
        
        global Zone_BCKind_list

        global BCValues_list
	
        global DarcyVelocity_kind
        global DarcyVelocity_list
        
        global InteractiveXYPlot_Parameters_list
        global InteractiveXYPlot_AqueousComponentsToPlot_list
        global InteractiveXYPlot_AvailableAqueousComponents_list

        global InteractiveXYPlot_Space_and_Time_Parameters_list
        global InteractiveXYPlot_Space_and_Time_ElementsToPlot_list

        global PostprocessingContours_Parameters_list
        global PostprocessingContours_AqueousComponentsToPlot_list
        global PostprocessingContours_AvailableAqueousComponents_list

        global Modflow_accl
        global Modflow_mxiter
        global Modflow_hclose
        
        global Mt3d_mxiter
        global Mt3d_iter1
        global Mt3d_accl
        global Mt3d_cclose
        global Mt3d_ConjugateGradientPreconditioner
        global Mt3d_advection
        
        global PhreeqC_NumberOfIterations
        global PhreeqC_ConvergenceCriterion
        global PhreeqC_KNOBS
	global PhreeqC_pe_step_size_list
        
        global Iterate_Algorithm
        global Iterate_InitialTime
        global Iterate_InitialTimeStepSize
        global Iterate_SimulationTime
        global Iterate_MinTimeStep
        global Iterate_MaxTimeStep
        global Iterate_IterationTargetNumberForThePicard
        global Iterate_MaxOfIterationsForThePicard
        global Iterate_CouplingPrecision
        global Iterate_RelaxationMinFactor
        global Iterate_RelaxationMaxFactor

        global Parallel_NumberOfNodes

        global ExpectedOutputs_list
        global Times_list

        global AqueousSolutionToEquilibrate_list

        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame       
        
        
        
        # unstructured
        global Medfile
        global Traces_Parameters
        global InitialConditions_list
        global BoundaryConditions_list
        global Unstructured_Zone_Material_list


        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
                mode = 'unstructured'
            else:
                mode = 'structured'
        else:
            mode = 'structured'
        
        if mode == 'structured':
            fn = QFileDialog.getOpenFileName ('./', '*.geoi', self)
        else:
            fn = QFileDialog.getOpenFileName ('./', '*.geoi_u', self)
        
        if fn.isEmpty():
            self.statusBar().message ('Loading aborted', 2000)
            return

       # try:
        fileName = str (fn)
        try:
            case = open (fileName,'r')
        except:
            return

        for l in case.readlines():
            code = l
            exec code

        Title = str (title)

        Concentration_Unit = str (concentration_Unit)
        Density_Unit = str (density_Unit)
        Dispersivity_Unit = str (dispersivity_Unit)
        EffectiveDiffusion_Unit = str (effectiveDiffusion_Unit)
        Enthalpy_Unit = str (enthalpy_Unit)
        Head_Unit = str (head_Unit)
        Length_Unit = str (length_Unit)
        Permeability_Unit = str (permeability_Unit)
        Temperature_Unit = str (temperature_Unit)
        Time_Unit = str (time_Unit)

        Solver = str (solver)
        try:
	    PorosityState = str (porosityState)
        except:
	    pass

        ChemistryTool = str (chemistryTool)

        DefaultDatabase = str (defaultDatabase)
        Available_Databases_list = available_Databases_list

        Components_list = components_list
        ComponentSpecies_Name_list = componentSpecies_Name_list
        ComponentSpecies_Formula_list = componentSpecies_Formula_list
        Components_Properties_list = components_Properties_list

        AqueousSpecies_list = aqueousSpecies_list
        AqueousSpecies_Formula_list = aqueousSpecies_Formula_list
        AqueousSpecies_Properties_list = aqueousSpecies_Properties_list
        AqueousSpecies_Species_list = aqueousSpecies_Species_list 

        MineralPhases_list = mineralPhases_list
        MineralPhases_Formula_list = mineralPhases_Formula_list
        MineralPhases_Properties_list = mineralPhases_Properties_list
        MineralPhases_Species_list = mineralPhases_Species_list

        ExchangeSpecies_list = exchangeSpecies_list
        ExchangeSpecies_Properties_list = exchangeSpecies_Properties_list
        ExchangeSpecies_Reactants_list = exchangeSpecies_Reactants_list
        DebyeHuckel_a = str (debyeHuckel_a)
        DebyeHuckel_b = str (debyeHuckel_b)

        ExchangeMasterSpecies_list = exchangeMasterSpecies_list
        ExchangeMasterSpecies_Formula_list = exchangeMasterSpecies_Formula_list

        SurfaceSpecies_list = surfaceSpecies_list
        SurfaceSpecies_Properties_list = surfaceSpecies_Properties_list
        SurfaceSpecies_Reactants_list = surfaceSpecies_Reactants_list

        SurfaceMasterSpecies_list = surfaceMasterSpecies_list
        SurfaceMasterSpecies_Formula_list = surfaceMasterSpecies_Formula_list

        AqueousStates_list = aqueousStates_list
        AqueousStates_Properties_list = aqueousStates_Properties_list
        AqueousStates_Species_list = aqueousStates_Species_list
        AqueousStates_Default_Temperature = aqueousStates_Default_Temperature
        AqueousStates_Default_pH = aqueousStates_Default_pH
        AqueousStates_Default_pe = aqueousStates_Default_pe

        AqueousStates_MineralPhases_list = aqueousStates_MineralPhases_list
        AqueousStates_MineralPhases_Properties_list = aqueousStates_MineralPhases_Properties_list

        AqueousStates_ExchangeSpecies_list = aqueousStates_ExchangeSpecies_list
        AqueousStates_ExchangeSpecies_Properties_list = aqueousStates_ExchangeSpecies_Properties_list

        AqueousStates_SurfaceSpecies_list = aqueousStates_SurfaceSpecies_list
        AqueousStates_SurfaceSpecies_Properties_list = aqueousStates_SurfaceSpecies_Properties_list

        AqueousStates_KineticRates_list = aqueousStates_KineticRates_list
        AqueousStates_KineticRates_Properties_list = aqueousStates_KineticRates_Properties_list

        AqueousStates_Gas_list = aqueousStates_Gas_list
        AqueousStates_Gas_Properties_list = aqueousStates_Gas_Properties_list

        Materials_list = materials_list 
        Materials_Properties_list = materials_Properties_list
        try:
	    DiffusionLaws_dict = str (diffusionLaws_dict)
        except:
	    pass
        try:
            DiffusionState = str (diffusionState)
        except:
            pass

     #   KxPermeability = Kxpermeability
     #   KyPermeability = Kypermeability
     #   EffectivePorosity = effectivePorosity
     #   EffectiveDiffusion = effectiveDiffusion
     #   LongitudinalDispersivity = longitudinalDispersivity
     #   TransverseDispersivity = transverseDispersivity

#            DefaultKxPermeability = defaultKxPermeability
#            DefaultKyPermeability = defaultKyPermeability
#            DefaultEffectivePorosity = defaultEffectivePorosity
#            DefaultEffectiveDiffusion = defaultEffectiveDiffusion
#            DefaultLongitudinalDispersivity = defaultLongitudinalDispersivity
#            DefaultTransverseDispersivity = defaultTransverseDispersivity

        if mode == 'structured':

            MeshLine_Direction = str (meshLine_Direction)

            GridLineInI = str (gridLineInI)
            LineNumberInI = int (str (lineNumberInI))
            NumberOfLinesInI = int (str (numberOfLinesInI))

            Mesh_list_InI = mesh_list_InI
            MeshLineInINumberOfCells = int (str (meshLineInINumberOfCells))
            MeshLineInILength = float (str (meshLineInILength))
            MeshLineInIGeometricRatio = float (str (meshLineInIGeometricRatio))

            GridLineInJ = str (gridLineInJ)
            LineNumberInJ = int (str (lineNumberInJ))
            NumberOfLinesInJ = int (str (numberOfLinesInJ))

            Mesh_list_InJ = mesh_list_InJ
            MeshLineInJNumberOfCells = int (str (meshLineInJNumberOfCells))
            MeshLineInJLength = float (str (meshLineInJLength))
            MeshLineInJGeometricRatio = float (str (meshLineInJGeometricRatio))

            Zones_list = zones_list        
            Zone_Material_AqueousState_list = zone_Material_AqueousState_list
            BoundaryConditionTimeVariation_dict = boundaryConditionTimeVariation_dict

            Zone_BCKind_list = zone_BCKind_list

            BCValues_list = bCValues_list

            InteractiveXYPlot_Parameters_list = interactiveXYPlot_Parameters_list
            InteractiveXYPlot_AqueousComponentsToPlot_list = interactiveXYPlot_AqueousComponentsToPlot_list
            InteractiveXYPlot_AvailableAqueousComponents_list = interactiveXYPlot_AvailableAqueousComponents_list

            InteractiveXYPlot_Space_and_Time_Parameters_list = interactiveXYPlot_Space_and_Time_Parameters_list
            InteractiveXYPlot_Space_and_Time_ElementsToPlot_list = interactiveXYPlot_Space_and_Time_ElementsToPlot_list

            PostprocessingContours_Parameters_list = postprocessingContours_Parameters_list
            PostprocessingContours_AqueousComponentsToPlot_list = postprocessingContours_AqueousComponentsToPlot_list
            PostprocessingContours_AvailableAqueousComponents_list = postprocessingContours_AvailableAqueousComponents_list

            Modflow_accl = str (modflow_accl)
            Modflow_mxiter = str (modflow_mxiter)
            Modflow_hclose = str (modflow_hclose)

            Mt3d_mxiter = str (mt3d_mxiter)
            Mt3d_iter1 = str (mt3d_iter1)
            Mt3d_accl = str (mt3d_accl)
            Mt3d_cclose = str (mt3d_cclose)
            Mt3d_ConjugateGradientPreconditioner = str (mt3d_ConjugateGradientPreconditioner)
            Mt3d_advection = str (mt3d_advection)

        else:
            Medfile = str (medfile)
            Traces_Parameters = traces_Parameters
            InitialConditions_list = initialConditions_list
            BoundaryConditions_list = boundaryConditions_list
            #Unstructured_Zone_Material_list = unstructured_Zone_Material_list
            try:
                Unstructured_Zone_Material_list = unstructured_Zone_Material_list
            except NameError:
                self.Title_MB = QMessageBox()
                self.Title_MB.setCaption ('Warning')
                self.Title_MB.setText ('The list \"Unstructured_Zone_Material_list\" is not defined\nin your casefile. You have to define it under Transport/set Zones.')
                self.Title_MB.setIcon (QMessageBox.Warning)
                self.Title_MB.show ()
            try:
                self.import_unstructured_mesh_from_file (Medfile)
            except (AttributeError, RuntimeError):
                self.Title_MB = QMessageBox()
                self.Title_MB.setCaption ('Error')
                self.Title_MB.setText ("The file "+str (medfile)+"\nis missing.")
                self.Title_MB.setIcon (QMessageBox.Critical)
                self.Title_MB.show ()


# debug_open

        DarcyVelocity_kind = str (darcyVelocity_kind)
        DarcyVelocity_list = darcyVelocity_list

        PhreeqC_NumberOfIterations = str (phreeqC_NumberOfIterations)
	try:
	    PhreeqC_pe_step_size_list = phreeqC_pe_step_size_list
	except:
	    pass
#        PhreeqC_ConvergenceCriterion = str (phreeqC_ConvergenceCriterion)
#        try:
#            PhreeqC_KNOBS = str (PhreeqC_KNOBS)
#        except:
#            pass

        Iterate_Algorithm = str (iterate_Algorithm)
        Iterate_InitialTime = str (iterate_InitialTime)
        Iterate_InitialTimeStepSize = str (iterate_InitialTimeStepSize)
        Iterate_SimulationTime = str (iterate_SimulationTime)
        Iterate_MinTimeStep = str (iterate_MinTimeStep)
        Iterate_MaxTimeStep = str (iterate_MaxTimeStep)
        Iterate_IterationTargetNumberForThePicard = str (iterate_IterationTargetNumberForThePicard)
        Iterate_MaxOfIterationsForThePicard = str (iterate_MaxOfIterationsForThePicard)
        Iterate_CouplingPrecision = str (iterate_CouplingPrecision)
        Iterate_RelaxationMinFactor = str (iterate_RelaxationMinFactor)
        Iterate_RelaxationMaxFactor = str (iterate_RelaxationMaxFactor)


        try:
            Parallel_NumberOfNodes = parallel_NumberOfNodes
        except:
            pass

        try:
            ExpectedOutputs_list = expectedOutputs_list
        except:
            pass
        try:
            Times_list = times_list
        except:
            pass

        AqueousSolutionToEquilibrate_list = aqueousSolutionToEquilibrate_list

        try:
            fileName_path = os.environ ['ALLIANCES_DAT'] + '/share/alliances/resources/' + DefaultDatabase
            self.import_database (fileName_path)
        except:
            self.MB = QMessageBox()
            self.MB.setCaption ('Error')
            self.MB.setText ('A problem occurs when you\ntried to open the database.')
            self.MB.setIcon (QMessageBox.Critical)
            self.MB.show ()

        Passed_Into_TitleFrame = 1
        Passed_Into_UnitsFrame = 1
        Passed_Into_Physics_SoftwareFrame = 1

        if mode == 'structured':
            self.menu_Activation ()
            self.view.tree_menu_enabling ()
        elif mode == 'unstructured':
            self.unstructured_open_menu_activation ()
                
# debug_open                
                
        #except:
        #    self.MB = QMessageBox()
        #    self.MB.setCaption ('Error')
        #    self.MB.setText ('A problem occurs when you\ntried to open the casefile.')
       #     self.MB.setIcon (QMessageBox.Critical)
       #     self.MB.show ()
            
            
            
            
            
            
            
            
        """
        try:
            fileName = str (fn)
            try:
                case = open (fileName,'r')
            except:
                return

            for l in case.readlines():
                code = l
                exec code

            Title = str (title)

            Concentration_Unit = str (concentration_Unit)
            Density_Unit = str (density_Unit)
            Dispersivity_Unit = str (dispersivity_Unit)
            EffectiveDiffusion_Unit = str (effectiveDiffusion_Unit)
            Enthalpy_Unit = str (enthalpy_Unit)
            Head_Unit = str (head_Unit)
            Length_Unit = str (length_Unit)
            Permeability_Unit = str (permeability_Unit)
            Temperature_Unit = str (temperature_Unit)
            Time_Unit = str (time_Unit)

            Solver = str (solver)
            try:
	        PorosityState = str (porosityState)
            except:
	        pass

            ChemistryTool = str (chemistryTool)

            DefaultDatabase = str (defaultDatabase)
            Available_Databases_list = available_Databases_list

            Components_list = components_list
            ComponentSpecies_Name_list = componentSpecies_Name_list
            ComponentSpecies_Formula_list = componentSpecies_Formula_list
            Components_Properties_list = components_Properties_list

            AqueousSpecies_list = aqueousSpecies_list
            AqueousSpecies_Formula_list = aqueousSpecies_Formula_list
            AqueousSpecies_Properties_list = aqueousSpecies_Properties_list
            AqueousSpecies_Species_list = aqueousSpecies_Species_list 

            MineralPhases_list = mineralPhases_list
            MineralPhases_Formula_list = mineralPhases_Formula_list
            MineralPhases_Properties_list = mineralPhases_Properties_list
            MineralPhases_Species_list = mineralPhases_Species_list

            ExchangeSpecies_list = exchangeSpecies_list
            ExchangeSpecies_Properties_list = exchangeSpecies_Properties_list
            ExchangeSpecies_Reactants_list = exchangeSpecies_Reactants_list
            DebyeHuckel_a = str (debyeHuckel_a)
            DebyeHuckel_b = str (debyeHuckel_b)

            ExchangeMasterSpecies_list = exchangeMasterSpecies_list
            ExchangeMasterSpecies_Formula_list = exchangeMasterSpecies_Formula_list

            SurfaceSpecies_list = surfaceSpecies_list
            SurfaceSpecies_Properties_list = surfaceSpecies_Properties_list
            SurfaceSpecies_Reactants_list = surfaceSpecies_Reactants_list

            SurfaceMasterSpecies_list = surfaceMasterSpecies_list
            SurfaceMasterSpecies_Formula_list = surfaceMasterSpecies_Formula_list

            AqueousStates_list = aqueousStates_list
            AqueousStates_Properties_list = aqueousStates_Properties_list
            AqueousStates_Species_list = aqueousStates_Species_list
            AqueousStates_Default_Temperature = aqueousStates_Default_Temperature
            AqueousStates_Default_pH = aqueousStates_Default_pH
            AqueousStates_Default_pe = aqueousStates_Default_pe

            AqueousStates_MineralPhases_list = aqueousStates_MineralPhases_list
            AqueousStates_MineralPhases_Properties_list = aqueousStates_MineralPhases_Properties_list

            AqueousStates_ExchangeSpecies_list = aqueousStates_ExchangeSpecies_list
            AqueousStates_ExchangeSpecies_Properties_list = aqueousStates_ExchangeSpecies_Properties_list

            AqueousStates_SurfaceSpecies_list = aqueousStates_SurfaceSpecies_list
            AqueousStates_SurfaceSpecies_Properties_list = aqueousStates_SurfaceSpecies_Properties_list

            AqueousStates_KineticRates_list = aqueousStates_KineticRates_list
            AqueousStates_KineticRates_Properties_list = aqueousStates_KineticRates_Properties_list

            AqueousStates_Gas_list = aqueousStates_Gas_list
            AqueousStates_Gas_Properties_list = aqueousStates_Gas_Properties_list

            Materials_list = materials_list 
            Materials_Properties_list = materials_Properties_list
            try:
	        DiffusionLaws_dict = str (diffusionLaws_dict)
            except:
	        pass
            try:
                DiffusionState = str (diffusionState)
            except:
                pass

         #   KxPermeability = Kxpermeability
         #   KyPermeability = Kypermeability
         #   EffectivePorosity = effectivePorosity
         #   EffectiveDiffusion = effectiveDiffusion
         #   LongitudinalDispersivity = longitudinalDispersivity
         #   TransverseDispersivity = transverseDispersivity

#            DefaultKxPermeability = defaultKxPermeability
#            DefaultKyPermeability = defaultKyPermeability
#            DefaultEffectivePorosity = defaultEffectivePorosity
#            DefaultEffectiveDiffusion = defaultEffectiveDiffusion
#            DefaultLongitudinalDispersivity = defaultLongitudinalDispersivity
#            DefaultTransverseDispersivity = defaultTransverseDispersivity
            
            if mode == 'structured':

                MeshLine_Direction = str (meshLine_Direction)

                GridLineInI = str (gridLineInI)
                LineNumberInI = int (str (lineNumberInI))
                NumberOfLinesInI = int (str (numberOfLinesInI))

                Mesh_list_InI = mesh_list_InI
                MeshLineInINumberOfCells = int (str (meshLineInINumberOfCells))
                MeshLineInILength = float (str (meshLineInILength))
                MeshLineInIGeometricRatio = float (str (meshLineInIGeometricRatio))

                GridLineInJ = str (gridLineInJ)
                LineNumberInJ = int (str (lineNumberInJ))
                NumberOfLinesInJ = int (str (numberOfLinesInJ))

                Mesh_list_InJ = mesh_list_InJ
                MeshLineInJNumberOfCells = int (str (meshLineInJNumberOfCells))
                MeshLineInJLength = float (str (meshLineInJLength))
                MeshLineInJGeometricRatio = float (str (meshLineInJGeometricRatio))

                Zones_list = zones_list        
                Zone_Material_AqueousState_list = zone_Material_AqueousState_list
                BoundaryConditionTimeVariation_dict = boundaryConditionTimeVariation_dict

                Zone_BCKind_list = zone_BCKind_list

                BCValues_list = bCValues_list

                InteractiveXYPlot_Parameters_list = interactiveXYPlot_Parameters_list
                InteractiveXYPlot_AqueousComponentsToPlot_list = interactiveXYPlot_AqueousComponentsToPlot_list
                InteractiveXYPlot_AvailableAqueousComponents_list = interactiveXYPlot_AvailableAqueousComponents_list

                InteractiveXYPlot_Space_and_Time_Parameters_list = interactiveXYPlot_Space_and_Time_Parameters_list
                InteractiveXYPlot_Space_and_Time_ElementsToPlot_list = interactiveXYPlot_Space_and_Time_ElementsToPlot_list

                PostprocessingContours_Parameters_list = postprocessingContours_Parameters_list
                PostprocessingContours_AqueousComponentsToPlot_list = postprocessingContours_AqueousComponentsToPlot_list
                PostprocessingContours_AvailableAqueousComponents_list = postprocessingContours_AvailableAqueousComponents_list

                Modflow_accl = str (modflow_accl)
                Modflow_mxiter = str (modflow_mxiter)
                Modflow_hclose = str (modflow_hclose)

                Mt3d_mxiter = str (mt3d_mxiter)
                Mt3d_iter1 = str (mt3d_iter1)
                Mt3d_accl = str (mt3d_accl)
                Mt3d_cclose = str (mt3d_cclose)
                Mt3d_ConjugateGradientPreconditioner = str (mt3d_ConjugateGradientPreconditioner)
                Mt3d_advection = str (mt3d_advection)
                
            else:
                Medfile = str (medfile)
                Traces_Parameters = traces_Parameters
                InitialConditions_list = initialConditions_list
                BoundaryConditions_list = boundaryConditions_list
                try:
                    self.import_unstructured_mesh_from_file (Medfile)
                except:
                    pass


 # debug_open

            DarcyVelocity_kind = str (darcyVelocity_kind)
            DarcyVelocity_list = darcyVelocity_list

            PhreeqC_NumberOfIterations = str (phreeqC_NumberOfIterations)
            PhreeqC_ConvergenceCriterion = str (phreeqC_ConvergenceCriterion)

            Iterate_Algorithm = str (iterate_Algorithm)
            Iterate_InitialTime = str (iterate_InitialTime)
            Iterate_InitialTimeStepSize = str (iterate_InitialTimeStepSize)
            Iterate_SimulationTime = str (iterate_SimulationTime)
            Iterate_MinTimeStep = str (iterate_MinTimeStep)
            Iterate_MaxTimeStep = str (iterate_MaxTimeStep)
            Iterate_IterationTargetNumberForThePicard = str (iterate_IterationTargetNumberForThePicard)
            Iterate_MaxOfIterationsForThePicard = str (iterate_MaxOfIterationsForThePicard)
            Iterate_CouplingPrecision = str (iterate_CouplingPrecision)
            Iterate_RelaxationMinFactor = str (iterate_RelaxationMinFactor)
            Iterate_RelaxationMaxFactor = str (iterate_RelaxationMaxFactor)

            AqueousSolutionToEquilibrate_list = aqueousSolutionToEquilibrate_list

            try:
                fileName_path = os.environ ['ALLIANCES_DAT'] + '/share/alliances/resources/' + DefaultDatabase
                self.import_database (fileName_path)
            except:
                self.MB = QMessageBox()
                self.MB.setCaption ('Error')
                self.MB.setText ('A problem occurs when you\ntried to open the database.')
                self.MB.setIcon (QMessageBox.Critical)
                self.MB.show ()

            Passed_Into_TitleFrame = 1
            Passed_Into_UnitsFrame = 1
            Passed_Into_Physics_SoftwareFrame = 1

            if mode == 'structured':
                self.menu_Activation ()
                self.view.tree_menu_enabling ()
            elif mode == 'unstructured':
                self.unstructured_open_menu_activation ()
                
# debug_open                
                
        except:
            self.MB = QMessageBox()
            self.MB.setCaption ('Error')
            self.MB.setText ('A problem occurs when you\ntried to open the casefile.')
            self.MB.setIcon (QMessageBox.Critical)
            self.MB.show ()
        """

#---------------------------------------------------------------------------------------------

    def save (self):

        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
                mode = 'unstructured'
            else:
                mode = 'structured'
        else:
            mode = 'structured'

        if (Solver == 'Modflow_Mt3d_PhreeqC' and (ChemistryTool == 'PhreeqC' or ChemistryTool == 'Traces_PhreeqC')) or (Solver == 'Chemistry') or (Solver == 'PhreeqC') or (Solver == 'Chess') or (Solver == 'Modflow'):
            
            if str (self.filename) == '':
                self.saveAs()
                return
            try:
                case = open (str (self.filename),'w+')
            except:
                self.statusBar().message('Could not write to %s' % (self.filename),5000)
                return
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#============================================================================')
            case.write ('\n#  Casefile: you could find here all data which are necessary')
            case.write ('\n#            to define a case. ')
            case.write ('\n')
            case.write ('\n#  This file is created whithin the /File/Save menu.')
            case.write ('\n#============================================================================')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------')
            case.write ('\n#  Title of the study')
            case.write ('\n#---------------------------')
            case.write ('\ntitle = \'')
            case.write (str (Title))
            case.write ('\'')
            case.write ('\n#---------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#------------------------------------')
            case.write ('\n#  Units')
            case.write ('\n#------------------------------------')
            case.write ('\nconcentration_Unit = \'')
            case.write (str (Concentration_Unit))
            case.write ('\'')
            case.write ('\ndensity_Unit = \'')
            case.write (str (Density_Unit))
            case.write ('\'')
            case.write ('\ndispersivity_Unit = \'')
            case.write (str (Dispersivity_Unit))
            case.write ('\'')
            case.write ('\neffectiveDiffusion_Unit = \'')
            case.write (str (EffectiveDiffusion_Unit))
            case.write ('\'')
            case.write ('\nenthalpy_Unit = \'')
            case.write (str (Enthalpy_Unit))
            case.write ('\'')
            case.write ('\nhead_Unit = \'')
            case.write (str (Head_Unit))
            case.write ('\'')
            case.write ('\nlength_Unit = \'')
            case.write (str (Length_Unit))
            case.write ('\'')
            case.write ('\npermeability_Unit = \'')
            case.write (str (Permeability_Unit))
            case.write ('\'')
            case.write ('\ntemperature_Unit = \'')
            case.write (str (Temperature_Unit))
            case.write ('\'')
            case.write ('\ntime_Unit = \'')
            case.write (str (Time_Unit))
            case.write ('\'')
            case.write ('\n#------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n#  WhichSolverFrame Parameter')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n#')
            case.write ('\n#  The Solver is defined here:')
            case.write ('\n#')
            case.write ('\n#    - \'Modflow\': to do Hydraulic.')
            case.write ('\n#    - \'Modflow_Mt3d\': to do Hydraulic and Transport.')
            case.write ('\n#    - \'Modflow_Mt3d_PhreeqC\': to do Transport coupled with chemistry.')
            case.write ('\n#')
# commentaire pour expliquer qu on doit aussi definir certains parametres physiques
            case.write ('\nsolver = \'')
            case.write (str (Solver))
            case.write ('\'')
            case.write ('\nporosityState = \'')
            case.write (str (PorosityState))
            case.write ('\'')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n#  ChemistryToolFrame Parameter')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n#')
            case.write ('\n#  Here is defined the code used for Chemistry')
            case.write ('\n#')
            case.write ('\nchemistryTool = \'')
            case.write (str (ChemistryTool))
            case.write ('\'')
            case.write ('\n#--------------------------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------')
            case.write ('\n#  Default Database')
            case.write ('\n#---------------------------')       
            case.write ('\ndefaultDatabase = \'')
            case.write (str (DefaultDatabase))
            case.write ('\'')
            case.write ('\navailable_Databases_list = ')
            case.write (str (Available_Databases_list))
            case.write ('\n#---------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\n#  AqueousMasterSpeciesFrame Parameters')
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\ncomponents_list = ')
            case.write (str (Components_list))
            case.write ('\n')
            case.write ('\ncomponentSpecies_Name_list = ')
            case.write (str (ComponentSpecies_Name_list))
            case.write ('\n')
            case.write ('\ncomponentSpecies_Formula_list = ')
            case.write (str (ComponentSpecies_Formula_list))
            case.write ('\n')
            case.write ('\ncomponents_Properties_list = ')
            case.write (str (Components_Properties_list))
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\n#  AqueousSpeciesFrame Parameters')
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\naqueousSpecies_list = ')
            case.write (str (AqueousSpecies_list))
            case.write ('\n')
            case.write ('\naqueousSpecies_Formula_list = ')
            case.write (str (AqueousSpecies_Formula_list))
            case.write ('\n')
            case.write ('\naqueousSpecies_Properties_list = ')
            case.write (str (AqueousSpecies_Properties_list))
            case.write ('\n')
            case.write ('\naqueousSpecies_Species_list = ')
            case.write (str (AqueousSpecies_Species_list))
            case.write ('\n#---------------------------------------------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------')
            case.write ('\n#  MineralPhasesFrame Parameters')
            case.write ('\n#----------------------------------')
            case.write ('\nmineralPhases_list = ')
            case.write (str (MineralPhases_list))
            case.write ('\n')
            case.write ('\nmineralPhases_Formula_list = ')
            case.write (str (MineralPhases_Formula_list))
            case.write ('\n')
            case.write ('\nmineralPhases_Properties_list = ')
            case.write (str (MineralPhases_Properties_list))
            case.write ('\n')





    #        case.write ('\nmineralPhases_list = [')
            """
	    if len (MineralPhases_list) != 0:
	        case.write (str (MineralPhases_list [0]))
                if len (MineralPhases_list) > 0:
	            case.write (',\n')
		    i = 1
		    while i < len (MineralPhases_list) - 1:
	                case.write ('                                 '+str (MineralPhases_Properties_list [i]))
	                case.write (',\n')
	                i = i+1
	            case.write ('                                 '+str (MineralPhases_Properties_list [len (MineralPhases_Properties_list) - 1]))
		    case.write ('\n')
	        else:
	            case.write (']')	
	    else:
	        case.write (']')

            case.write (str (MineralPhases_list))
            case.write ('\n')



            case.write ('\nmineralPhases_Formula_list = ')
            case.write (str (MineralPhases_Formula_list))
            case.write ('\n')


	    case.write ('\nmineralPhases_Properties_list = [')
            case.write (str (MineralPhases_Properties_list [0]))
            case.write (',\n')
	    i = 1
	    while i < len (MineralPhases_Properties_list) - 1:
	        case.write ('                                 '+str (MineralPhases_Properties_list [i]))
	        case.write (',\n')
	        i = i+1
	    case.write ('                                 '+str (MineralPhases_Properties_list [len (MineralPhases_Properties_list) - 1]))
	    case.write (']')


	    #debug_save



            """

            case.write ('\n')
            case.write ('\nmineralPhases_Species_list = ')
            case.write (str (MineralPhases_Species_list))
            case.write ('\n')




            """
            case.write ('\nmineralPhases_Species_list_bis = [')
            if ((len (MineralPhases_Species_list) != 0) and (str (MineralPhases_Species_list [0][0][0])) != ''):
                case.write (str (MineralPhases_Species_list [0]))
                case.write ('\n')
	    k = 1
	    while k < (len (MineralPhases_Species_list) - 1):
	        case.write ('                                 '+str (MineralPhases_Species_list [k]))
	        case.write (',\n')
	        k = k+1
            if len (MineralPhases_Species_list) > 1:
                case.write ('                                 '+str (MineralPhases_Species_list [len (MineralPhases_Species_list) - 1]))
	        case.write (']')
            """






            case.write ('\n#----------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#------------------------------------')
            case.write ('\n#  ExchangeSpeciesFrame Parameters')
            case.write ('\n#------------------------------------')
            case.write ('\nexchangeSpecies_list = ')
            case.write (str (ExchangeSpecies_list))
            case.write ('\n')
            case.write ('\nexchangeSpecies_Properties_list = ')
            case.write (str (ExchangeSpecies_Properties_list))
            case.write ('\n')
            case.write ('\nexchangeSpecies_Reactants_list = ')
            case.write (str (ExchangeSpecies_Reactants_list))
            case.write ('\n')
            case.write ('\n#  Debye-Huckel Parameters')
            case.write ('\ndebyeHuckel_a = ')
            case.write (str (DebyeHuckel_a))
            case.write ('\ndebyeHuckel_b = ')
            case.write (str (DebyeHuckel_b))
            case.write ('\n#------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#------------------------------------------')
            case.write ('\n#  ExchangeMasterSpeciesFrame Parameters')
            case.write ('\n#------------------------------------------')
            case.write ('\nexchangeMasterSpecies_list = ')
            case.write (str (ExchangeMasterSpecies_list))
            case.write ('\n')
            case.write ('\nexchangeMasterSpecies_Formula_list = ')
            case.write (str (ExchangeMasterSpecies_Formula_list))
            case.write ('\n#------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------------------')
            case.write ('\n#  Data_SurfaceComplexationSpeciesFrame Parameters')
            case.write ('\n#----------------------------------------------------')
            case.write ('\nsurfaceSpecies_list = ')
            case.write (str (SurfaceSpecies_list))
            case.write ('\n')
            case.write ('\nsurfaceSpecies_Properties_list = ')
            case.write (str (SurfaceSpecies_Properties_list))
            case.write ('\n')
            case.write ('\nsurfaceSpecies_Reactants_list = ')
            case.write (str (SurfaceSpecies_Reactants_list))
            case.write ('\n#----------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------------------------')
            case.write ('\n#  Data_SurfaceComplexationMasterSpeciesFrame Parameters')
            case.write ('\n#----------------------------------------------------------')
            case.write ('\nsurfaceMasterSpecies_list = ')
            case.write (str (SurfaceMasterSpecies_list))
            case.write ('\n')
            case.write ('\nsurfaceMasterSpecies_Formula_list = ')
            case.write (str (SurfaceMasterSpecies_Formula_list))
            case.write ('\n#----------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#-------------------------------------')
            case.write ('\n#  AqueousStateFrame Parameters')
            case.write ('\n#-------------------------------------')
            case.write ('\naqueousStates_list = ')
            case.write (str (AqueousStates_list))
            case.write ('\n')
            case.write ('\n  #')
            case.write ('\n  #  In the aqueousStates_Properties_list, the properties for each aqueous state (solution) are given:')
            case.write ('\n  #  It means that this list has the same number of elements than the naqueousStates_list.')
            case.write ('\n  #  The positions of an Aqueous State and its own properties are the same in the two lists')
            case.write ('\n  #  Each element of the aqueousStates_Properties_list is a list, containing:')
            case.write ('\n  #')
            case.write ('\n  #    - The Temperature of the corresponding Aqueous Solution.')
            case.write ('\n  #    - The pH of the corresponding Aqueous Solution.')
            case.write ('\n  #    - The pe of the corresponding Aqueous Solution.')
            case.write ('\n  #')        
            case.write ('\naqueousStates_Properties_list = ')
            case.write (str (AqueousStates_Properties_list))
            case.write ('\n')
            case.write ('\n  #')
            case.write ('\n  #  The aqueousStates_Species_list is the list containing the species of each aqueous solution.')
            case.write ('\n  #  This is a list of lists: there are 3 levels:')
            case.write ('\n  #')
            case.write ('\n  #    - The aqueousStates_Species_list contains the species and their concentrations')
            case.write ('\n  #      for all aqueous solutions.')
            case.write ('\n  #    - The second level contains the lists of all species and their concentrations')
            case.write ('\n  #      contained by the considered solution.')
            case.write ('\n  #    - Each third-level list contains a species with its concentration in the considered solution.')
            case.write ('\n  #')
            case.write ('\naqueousStates_Species_list = ')
            case.write (str (AqueousStates_Species_list))
            case.write ('\n')
            case.write ('\n#  Initialization parameters')
            case.write ('\naqueousStates_Default_Temperature = ')
            case.write (str (AqueousStates_Default_Temperature))
            case.write ('\naqueousStates_Default_pH = ')
            case.write (str (AqueousStates_Default_pH))
            case.write ('\naqueousStates_Default_pe = ')
            case.write (str (AqueousStates_Default_pe))
            case.write ('\n#-------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#-----------------------------------------------')
            case.write ('\n#  State_EquilibriumPhasesFrame Parameters')
            case.write ('\n#-----------------------------------------------')
            case.write ('\naqueousStates_MineralPhases_list = ')
            case.write (str (AqueousStates_MineralPhases_list))
            case.write ('\n')
            case.write ('\naqueousStates_MineralPhases_Properties_list = ')
            case.write (str (AqueousStates_MineralPhases_Properties_list))
            case.write ('\n#-----------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#-------------------------------------------------')
            case.write ('\n#  State_IonExchangeFrame Parameters ')
            case.write ('\n#-------------------------------------------------')
            case.write ('\naqueousStates_ExchangeSpecies_list = ')
            case.write (str (AqueousStates_ExchangeSpecies_list))
            case.write ('\n')
            case.write ('\naqueousStates_ExchangeSpecies_Properties_list = ')
            case.write (str (AqueousStates_ExchangeSpecies_Properties_list))
            case.write ('\n#-------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------------------------------------')
            case.write ('\n#  State_SurfaceComplexationCompositionFrame Parameters')
            case.write ('\n#---------------------------------------------------------')
            case.write ('\n')
            case.write ('\naqueousStates_SurfaceSpecies_list = ')
            case.write (str (AqueousStates_SurfaceSpecies_list))
            case.write ('\n')
            case.write ('\naqueousStates_SurfaceSpecies_Properties_list = ')
            case.write (str (AqueousStates_SurfaceSpecies_Properties_list))
            case.write ('\n#---------------------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------------')
            case.write ('\n#  State_KineticRatesFrame Parameters')
            case.write ('\n#----------------------------------------------')
            case.write ('\naqueousStates_KineticRates_list = ')
            case.write (str (AqueousStates_KineticRates_list))
            case.write ('\n')
            case.write ('\naqueousStates_KineticRates_Properties_list = ')
            case.write (str (AqueousStates_KineticRates_Properties_list))
            case.write ('\n#----------------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#-------------------------------------')
            case.write ('\n#  State_GasPhaseFrame Parameters')
            case.write ('\n#-------------------------------------')
            case.write ('\naqueousStates_Gas_list = ')
            case.write (str (AqueousStates_Gas_list))
            case.write ('\n')
            case.write ('\naqueousStates_Gas_Properties_list = ')
            case.write (str (AqueousStates_Gas_Properties_list))
            case.write ('\n#-------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#---------------------------------')
            case.write ('\n#  MaterialsFrame Parameters')
            case.write ('\n#---------------------------------')
            case.write ('\nmaterials_list = ')
            case.write (str (Materials_list))
            case.write ('\n')
            case.write ('\nmaterials_Properties_list = ')
            case.write (str (Materials_Properties_list))
            case.write ('\ndiffusionLaws = ')
            case.write (str (DiffusionLaws_dict))
            case.write ('\ndiffusionState = \'')
            case.write (str (DiffusionState))
            case.write ('\'')
            
            
            
            
            """
            case.write ('\n')
            case.write ('\n#  Initialization parameters')
            case.write ('\nKxpermeability = ')
            case.write (str (KxPermeability))
            case.write ('\nKypermeability = ')
            case.write (str (KyPermeability))
            case.write ('\neffectivePorosity = ')
            case.write (str (EffectivePorosity))
            case.write ('\neffectiveDiffusion = ')
            case.write (str (EffectiveDiffusion))
            case.write ('\nlongitudinalDispersivity = ')
            case.write (str (LongitudinalDispersivity))
            case.write ('\ntransverseDispersivity = ')
            case.write (str (TransverseDispersivity))
            """
            case.write ('\n#---------------------------------')
            """
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------')
            case.write ('\n#  Hydraulic Parameters Default Values')
            case.write ('\n#----------------------------------------')
            case.write ('\ndefaultKxPermeability = ')
            case.write (str (DefaultKxPermeability))
            case.write ('\ndefaultKyPermeability = ')
            case.write (str (DefaultKyPermeability))
            case.write ('\ndefaultEffectivePorosity = ')
            case.write (str (DefaultEffectivePorosity))
            case.write ('\ndefaultEffectiveDiffusion = ')
            case.write (str (DefaultEffectiveDiffusion))
            case.write ('\ndefaultLongitudinalDispersivity = ')
            case.write (str (DefaultLongitudinalDispersivity))
            case.write ('\ndefaultTransverseDispersivity = ')
            case.write (str (DefaultTransverseDispersivity))
            case.write ('\n#----------------------------------------')
            """
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            if mode == 'structured':
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  MeshBuildingUpDirectionFrame Parameters')
                case.write ('\n#--------------------------------------------')
                case.write ('\nmeshLine_Direction = \'')
                case.write (str (MeshLine_Direction))
                case.write ('\'')        
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-------------------------------')
                case.write ('\n#  MeshLineInIFrame Parameters')
                case.write ('\n#-------------------------------')
                case.write ('\ngridLineInI = \'')
                case.write (str (GridLineInI))       
                case.write ('\'')        
                case.write ('\nlineNumberInI = ')
                case.write (str (LineNumberInI))
                case.write ('\nnumberOfLinesInI = ')
                case.write (str (NumberOfLinesInI))
                case.write ('\n#-------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-------------------------------')
                case.write ('\n#  MeshLineInIParametersFrame Parameters')
                case.write ('\n#-------------------------------')
                case.write ('\nmesh_list_InI = ')
                case.write (str (Mesh_list_InI))
                case.write ('\n')
                case.write ('\nmeshLineInINumberOfCells = ')
                case.write (str (MeshLineInINumberOfCells))
                case.write ('\nmeshLineInILength = ')
                case.write (str (MeshLineInILength))
                case.write ('\nmeshLineInIGeometricRatio = ')
                case.write (str (MeshLineInIGeometricRatio))        
                case.write ('\n#-------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-------------------------------')
                case.write ('\n#  MeshLineInJFrame Parameters')
                case.write ('\n#-------------------------------')
                case.write ('\ngridLineInJ = \'')
                case.write (str (GridLineInJ))       
                case.write ('\'')        
                case.write ('\nlineNumberInJ = ')
                case.write (str (LineNumberInJ))
                case.write ('\nnumberOfLinesInJ = ')
                case.write (str (NumberOfLinesInJ))
                case.write ('\n#-------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-------------------------------')
                case.write ('\n#  MeshLineInJParametersFrame Parameters')
                case.write ('\n#-------------------------------')
                case.write ('\nmesh_list_InJ = ')
                case.write (str (Mesh_list_InJ))
                case.write ('\n')
                case.write ('\nmeshLineInJNumberOfCells = ')
                case.write (str (MeshLineInJNumberOfCells))
                case.write ('\nmeshLineInJLength = ')
                case.write (str (MeshLineInJLength))
                case.write ('\nmeshLineInJGeometricRatio = ')
                case.write (str (MeshLineInJGeometricRatio))        
                case.write ('\n#-------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-----------------------------------')
                case.write ('\n#  SetZonesFrame Parameters ')
                case.write ('\n#-----------------------------------')
                case.write ('\nzones_list = ')
                case.write (str (Zones_list))
                case.write ('\n')
                case.write ('\nzone_Material_AqueousState_list = ')
                case.write (str (Zone_Material_AqueousState_list))
                case.write ('\n')
                case.write ('\nboundaryConditionTimeVariation_dict = ')
                case.write (str (BoundaryConditionTimeVariation_dict))
                case.write ('\n#-----------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#------------------------------')
                case.write ('\n#  HydraulicBCFrame Parameter')
                case.write ('\n#------------------------------')
                case.write ('\nzone_BCKind_list = ')
                case.write (str (Zone_BCKind_list))
                case.write ('\n#------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#-------------------------------------')
                case.write ('\n#  HydraulicBCValuesFrame Parameter')
                case.write ('\n#-------------------------------------')
                case.write ('\nbCValues_list = ')
                case.write (str (BCValues_list))
                case.write ('\n#-------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#----------------------------------')
                case.write ('\n#  Interactive XYPlot Parameters (Time)')
                case.write ('\n#----------------------------------')
                case.write ('\ninteractiveXYPlot_Parameters_list = ')
                case.write (str (InteractiveXYPlot_Parameters_list))
                case.write ('\ninteractiveXYPlot_AqueousComponentsToPlot_list = ')
                case.write (str (InteractiveXYPlot_AqueousComponentsToPlot_list))
                case.write ('\ninteractiveXYPlot_AvailableAqueousComponents_list = ')
                case.write (str (InteractiveXYPlot_AvailableAqueousComponents_list))
                case.write ('\n#----------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#----------------------------------')
                case.write ('\n#  Interactive XYPlot Parameters (Space and Time)')
                case.write ('\n#----------------------------------')
                case.write ('\ninteractiveXYPlot_Space_and_Time_Parameters_list = ')
                case.write (str (InteractiveXYPlot_Space_and_Time_Parameters_list))
                case.write ('\ninteractiveXYPlot_Space_and_Time_ElementsToPlot_list = ')
                case.write (str (InteractiveXYPlot_Space_and_Time_ElementsToPlot_list))
                case.write ('\n#----------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#------------------------------------')
                case.write ('\n#  Postprocessing Contours Parameters')
                case.write ('\n#------------------------------------')
                case.write ('\npostprocessingContours_Parameters_list = ')
                case.write (str (PostprocessingContours_Parameters_list))
                case.write ('\npostprocessingContours_AqueousComponentsToPlot_list = ')
                case.write (str (PostprocessingContours_AqueousComponentsToPlot_list))
                case.write ('\npostprocessingContours_AvailableAqueousComponents_list = ')
                case.write (str (PostprocessingContours_AvailableAqueousComponents_list))
                case.write ('\n#------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#------------------------------')
                case.write ('\n#  Modflow Solver Parameters')
                case.write ('\n#------------------------------')
                case.write ('\n  #')
                case.write ('\n  #  - accl is the Under Relaxation Factor')
                case.write ('\n  #  - mxiter is the Maximum Number of Iterations')
                case.write ('\n  #  - hclose is the Residual Convergence')
                case.write ('\n  #')
                case.write ('\nmodflow_accl = ')
                case.write (str (Modflow_accl))
                case.write ('\nmodflow_mxiter = ')
                case.write (str (Modflow_mxiter))
                case.write ('\nmodflow_hclose = ')
                case.write (str (Modflow_hclose))
                case.write ('\n#------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#------------------------------')
                case.write ('\n#  Mt3d Solver Parameters')
                case.write ('\n#------------------------------')
                case.write ('\nmt3d_mxiter = ')
                case.write (str (Mt3d_mxiter))
                case.write ('\nmt3d_iter1 = ')
                case.write (str (Mt3d_iter1))
                case.write ('\nmt3d_accl = ')
                case.write (str (Mt3d_accl))
                case.write ('\nmt3d_cclose = ')
                case.write (str (Mt3d_cclose))
                case.write ('\n')
                case.write ('\nmt3d_ConjugateGradientPreconditioner = \'')
                case.write (str (Mt3d_ConjugateGradientPreconditioner))
                case.write ('\'')
                case.write ('\n')
                case.write ('\nmt3d_advection = \'')
                case.write (str (Mt3d_advection))
                case.write ('\'')
                case.write ('\n#------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
            else:
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  Mesh')
                case.write ('\n#--------------------------------------------')
                case.write ('\nmedfile = \'')
                case.write (str (Medfile))
                case.write ('\'')        
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  Zones')
                case.write ('\n#--------------------------------------------')
                case.write ('\nunstructured_Zone_Material_list = ')
                case.write (str (Unstructured_Zone_Material_list))
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  Initial Conditions')
                case.write ('\n#--------------------------------------------')
                case.write ('\ninitialConditions_list = ')
                case.write (str (InitialConditions_list))   
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  Boundary Conditions')
                case.write ('\n#--------------------------------------------')
                case.write ('\nboundaryConditions_list = ')
                case.write (str (BoundaryConditions_list))   
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n#--------------------------------------------')
                case.write ('\n#  Traces Parameters')
                case.write ('\n#--------------------------------------------')
                case.write ('\ntraces_Parameters = ')
                case.write (str (Traces_Parameters))   
                case.write ('\n#--------------------------------------------')
                case.write ('\n')
                case.write ('\n')
                case.write ('\n')
                
                
                
                
                
# debug_save                
                
            case.write ('\n#------------------------------')
            case.write ('\n#  PhreeqC Solver Parameters')
            case.write ('\n#------------------------------')
            case.write ('\nphreeqC_NumberOfIterations = ')
            case.write (str (PhreeqC_NumberOfIterations))
	    case.write ('\nphreeqC_pe_step_size_list = ')
            case.write (str (PhreeqC_pe_step_size_list))
	    #case.write ('\nphreeqC_ConvergenceCriterion = ')
            #case.write (str (PhreeqC_ConvergenceCriterion))
            #case.write ('\nphreeqC_KNOBS = ')
            #case.write (str (PhreeqC_KNOBS))
            case.write ('\n#------------------------------')
            case.write ('\n')
            case.write ('\n')        
            case.write ('\n')
            case.write ('\n#-------------------------------------')
            case.write ('\n#  SetDarcyVelocityFrame Parameter')
            case.write ('\n#-------------------------------------')
            case.write ('\ndarcyVelocity_kind = \'')
            case.write (str (DarcyVelocity_kind))
            case.write ('\'')
            case.write ('\n')
            case.write ('\ndarcyVelocity_list = ')
            case.write (str (DarcyVelocity_list))
            case.write ('\n#-------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------')
            case.write ('\n#  IterateFrame Parameters ')
            case.write ('\n#----------------------------------------')
            case.write ('\niterate_Algorithm = \'')
            case.write (str (Iterate_Algorithm))
            case.write ('\'')
            case.write ('\niterate_InitialTime = ')
            case.write (str (Iterate_InitialTime))
            case.write ('\niterate_InitialTimeStepSize = ')
            case.write (str (Iterate_InitialTimeStepSize))
            case.write ('\niterate_SimulationTime = ')
            case.write (str (Iterate_SimulationTime))
            case.write ('\n')
            case.write ('\niterate_MinTimeStep = ')
            case.write (str (Iterate_MinTimeStep))
            case.write ('\niterate_MaxTimeStep = ')
            case.write (str (Iterate_MaxTimeStep))
            case.write ('\niterate_IterationTargetNumberForThePicard = ')
            case.write (str (Iterate_IterationTargetNumberForThePicard))
            case.write ('\niterate_MaxOfIterationsForThePicard = ')
            case.write (str (Iterate_MaxOfIterationsForThePicard))
            case.write ('\niterate_CouplingPrecision = ')
            case.write (str (Iterate_CouplingPrecision))
            case.write ('\niterate_RelaxationMinFactor = ')
            case.write (str (Iterate_RelaxationMinFactor))
            case.write ('\niterate_RelaxationMaxFactor = ')
            case.write (str (Iterate_RelaxationMaxFactor))
            case.write ('\n#---------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')            
            case.write ('\n#----------------------------------------')
            case.write ('\n#  ParallelFrame Parameter ')
            case.write ('\n#----------------------------------------')
            case.write ('\nparallel_NumberOfNodes = ')
            case.write (str (Parallel_NumberOfNodes))
            case.write ('\n#----------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------')
            case.write ('\n#  TablesFrame Parameter ')
            case.write ('\n#----------------------------------------')
            case.write ('\nexpectedOutputs_list = ')
            case.write (str (ExpectedOutputs_list))
            case.write ('\ntimes_list = ')
            case.write (str (Times_list))
            case.write ('\n#----------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n#----------------------------------------')
            case.write ('\n#  EquilibrateFrame Parameter ')
            case.write ('\n#----------------------------------------')
            case.write ('\naqueousSolutionToEquilibrate_list = ')
            case.write (str (AqueousSolutionToEquilibrate_list))
            case.write ('\n#----------------------------------------')
            case.write ('\n')
            case.write ('\n')
            case.write ('\n')
            case.close()

            self.statusBar().message('File %s saved' % (self.filename),2000)

#---------------------------------------------------------------------------------------------
        
    def saveAs(self):

        if len (sys.argv) != 1: 
            if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
                mode = 'unstructured'
            else:
                mode = 'structured'
        else:
            mode = 'structured'
        if(Solver == 'Modflow_Mt3d_PhreeqC' and (ChemistryTool == 'PhreeqC' or ChemistryTool == 'Traces_PhreeqC')) or (Solver == 'Chemistry') or (Solver == 'PhreeqC') or (Solver == 'Chess') or (Solver == 'Modflow'):
        #if Solver == 'Modflow_Mt3d_PhreeqC' and (ChemistryTool == 'PhreeqC' or ChemistryTool == 'Traces_PhreeqC'):

            if mode == 'structured':
                fn = QFileDialog.getSaveFileName ('./', '*.geoi', self)
                fn = str (fn)
                if fn != '':
                    if fn [len (fn) - 5:] != '.geoi':    
                        i = len (fn) -1
                        again = 1
                        if '/' in fn:
                            if '.' in fn [fn.index('/'):]:
                                while i > -1 and again:
                                    if fn [i] == '.':
                                        again = 0
                                        if '/' in fn [i:]:
                                            fn = fn + '.geoi'
                                        else:
                                            fn = fn [:i] + '.geoi'
                                    else:
                                        pass
                                    i = i-1
                            else:
                                fn = fn + '.geoi'
                        else:
                            pass
                    else:
                        pass
                    fn = fn.replace (' ', '_')
                    self.filename = fn
                    self.save ()
                else:
                    self.statusBar().message('Saving aborted',2000)
            else:
                fn = QFileDialog.getSaveFileName ('./', '*.geoi_u', self)
                fn = str (fn)
                if fn != '':
                    if fn [len (fn) - 7:] != '.geoi_u':    
                        i = len (fn) -1
                        again = 1
                        if '/' in fn:
                            if '.' in fn [fn.index('/'):]:
                                while i > -1 and again:
                                    if fn [i] == '.':
                                        again = 0
                                        if '/' in fn [i:]:
                                            fn = fn + '.geoi_u'
                                        else:
                                            fn = fn [:i] + '.geoi_u'
                                    else:
                                        pass
                                    i = i-1
                            else:
                                fn = fn + '.geoi_u'
                        else:
                            pass
                    else:
                        pass
                    fn = fn.replace (' ', '_')
                    self.filename = fn
                    self.save ()
                else:
                    self.statusBar().message('Saving aborted',2000)
                
        #elif Solver == 'PhreeqC':
            

#---------------------------------------------------------------------------------------------

    def about (self):

        QMessageBox.about (self, 'About Geoi', 'Geochemical Graphical User Interface - Version 2.0 - 2002-2005\
                           \n\nAuthors:\n  - François CORRIHONS \n  - Alain DIMIER\
                           \n\nThis software is released under the GNU General Public License.\
                           \nPlease see http://www.gnu.org/copyleft/gpl.html for details.')

#-----------------------------------------------------------------------------------------
#  Mise a jour de la version

    def aboutQt (self):

        QMessageBox.aboutQt (self,'About Qt')

#-----------------------------------------------------------------------------------------

    def parallel_frame (self):
    
        self.ParallelFrame = QFrame ()
        self.ParallelFrame.setCaption ('Parallel Settings')
        setPosition (self.ParallelFrame)
        
        self.ParallelFrame.mainLayout = QVBoxLayout (self.ParallelFrame, 10,-1, 'ParallelFrame_mainLayout')
        self.ParallelFrame.mainLayout.setMargin (Marge)
        self.ParallelFrame.mainLayout.setSpacing (Space)

#----------------------------------------------------------------------------------------------

        #ParallelFrame_comment = Comments ['Parallel']

        #self.ParallelFrame.QHGroupBoxA = QHGroupBox (self.ParallelFrame)
	#QToolTip.add (self.ParallelFrame.QHGroupBoxA, ParallelFrame_comment)

        #self.ParallelFrame.QHGroupBoxA.setMargin (5)
        #self.ParallelFrame.QHGroupBoxA.setMidLineWidth (0)
        #self.ParallelFrame.QHGroupBoxA.setMinimumSize (80, 20)
        #self.ParallelFrame.mainLayout.addWidget (self.ParallelFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------

        self.ParallelFrame.QHGroupBox0 = QHGroupBox (self.ParallelFrame)
        self.ParallelFrame.QHGroupBox0.setMargin (10)
        self.ParallelFrame.QHGroupBox0.setMidLineWidth (0)
        self.ParallelFrame.mainLayout.addWidget (self.ParallelFrame.QHGroupBox0)

        self.ParallelFrame.NumberOfNodesLabel = QLabel ('Number of nodes', self.ParallelFrame.QHGroupBox0)
        self.ParallelFrame.NumberOfNodesLabel.resize (self.ParallelFrame.NumberOfNodesLabel.sizeHint ())

        self.ParallelFrame.NumberOfNodesLineEdit = QLineEdit (self.ParallelFrame.QHGroupBox0)
        self.ParallelFrame.NumberOfNodesLineEdit.setText (str (Parallel_NumberOfNodes))

#-----------------------------------------------------------------------------------------------

        self.ParallelFrame.QHGroupBox1 = QHGroupBox (self.ParallelFrame)
        self.ParallelFrame.QHGroupBox1.setMargin (10)
        self.ParallelFrame.QHGroupBox1.setMidLineWidth (0)
        self.ParallelFrame.mainLayout.addWidget (self.ParallelFrame.QHGroupBox1)

        self.ParallelFrame.OKPB = QPushButton ('OK', self.ParallelFrame.QHGroupBox1)
        self.ParallelFrame.OKPB.setFocus ()
        self.ParallelFrame.CancelPB = QPushButton ('Cancel', self.ParallelFrame.QHGroupBox1)
        self.ParallelFrame.HelpPB = QPushButton ('&Help', self.ParallelFrame.QHGroupBox1)

        self.connect (self.ParallelFrame.OKPB, SIGNAL ('clicked ()'), self.ParallelFrame_ok)
        self.connect (self.ParallelFrame.CancelPB, SIGNAL ('clicked ()'), self.ParallelFrame_cancel)
        self.connect (self.ParallelFrame.HelpPB, SIGNAL ('clicked ()'), self.ParallelFrame_help)

        self.ParallelFrame.show ()
        
#-----------------------------------------------------------------------------------------------    
    
    def ParallelFrame_ok (self):
    
        global Parallel_NumberOfNodes
        
        try: 
            Parallel_NumberOfNodes = int (str (self.ParallelFrame.NumberOfNodesLineEdit.text ()))
            self.ParallelFrame.close ()
        except ValueError:
            self.ParallelFrame_MB = QMessageBox()
            self.ParallelFrame_MB.setCaption ('Error')
            self.ParallelFrame_MB.setText ('Please Enter an Integer.')
            self.ParallelFrame_MB.setIcon (QMessageBox.Critical)
            self.ParallelFrame_MB.show ()
            self.ParallelFrame.NumberOfNodesLineEdit.clear ()
            self.ParallelFrame.NumberOfNodesLineEdit.setFocus ()
        
    def ParallelFrame_cancel (self):
    
        self.ParallelFrame.close ()

    def ParallelFrame_help (self):
    
        self.Help ()

#-----------------------------------------------------------------------------------------

    def test_if_s_is_in_list (self, s, list):

        if s in list:
            print str (s)+' is in '+str (list)
#            nb = QMessageBox.warning (self, 'Warning', str (s)+' is already in '+str (list)'.\nDo you really want to add ?', QMessageBox.Yes #| QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
            nb = QMessageBox.warning (self, 'Warning', ' is already in.\nDo you really want to add ?', QMessageBox.Yes | QMessageBox.Default, QMessageBox.No | QMessageBox.Escape)
            if nb == 3:         #  This number belongs to the "YES" button   
                self.close ()
        else:
            list.append (s)

#-----------------------------------------------------------------------------------------

    def xmgrace (self):
		
        g = Grace ()					
			
#-----------------------------------------------------------------------------------------		

    def get_outputs (self):

        global outputs_list
        global AqueousState_to_equilibrate	


        """
        self.OutputsFrame = QFrame ()
        self.OutputsFrame.setCaption ('Outputs')

        self.OutputsFrame.setMinimumSize (400, 500)

        self.OutputsFrame.mainLayout = QVBoxLayout (self.OutputsFrame, 10, -1, "OutputsFrame_mainLayout")
        self.OutputsFrame.mainLayout.setSpacing (5)   # 10
        self.OutputsFrame.mainLayout.setMargin (5)    # 10

#----------------------------------------------------------------------------------------------
#  Comment Box (beginning)
#----------------------------------------------------------------------------------------------

        OutputsFrame_comment = 'This frame is used to display the outputs.'

        self.OutputsFrame.QHGroupBoxA = QHGroupBox (self.OutputsFrame)
        QToolTip.add (self.OutputsFrame.QHGroupBoxA, OutputsFrame_comment)

        self.OutputsFrame.QHGroupBoxA.setMargin (0)
        self.OutputsFrame.QHGroupBoxA.setMidLineWidth (0)
        self.OutputsFrame.QHGroupBoxA.setMinimumSize (80, 20)
        self.OutputsFrame.mainLayout.addWidget (self.OutputsFrame.QHGroupBoxA)

#----------------------------------------------------------------------------------------------
#  Comment Box (end)
#----------------------------------------------------------------------------------------------

        self.OutputsFrame.QHGroupBox0 = QHGroupBox (self.OutputsFrame)
        self.OutputsFrame.QHGroupBox0.setMidLineWidth (0)
        self.OutputsFrame.mainLayout.addWidget (self.OutputsFrame.QHGroupBox0)
        nan = 'nan'
        """
        
        
        
        
        
        
        
        
        try:
            tmp_file = open ('./outputs.py', 'r')
            for line in tmp_file.readlines ():
                code = line
                exec code
            outputs_list = outputs
        except:
            return  
        outputfile = "./"+AqueousState_to_equilibrate+"_gi.out"
        f = open (outputfile, 'w')
        f.write ('\n#')
        f.write ('\n##')
        f.write ("%20s"%('\n## Solution:  '))
        f.write (AqueousState_to_equilibrate)	
        f.write ('\n##')
        f.write ('\n#')	
        f.write ('\n-------  Description of Solution -------')
        f.write ('\n')
	string = str('  pH                       = ').ljust(40)
        f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [4]))
	string = str('  pe                       = ').ljust(40)
        f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [5]))
	string = str('  Eh                       = ').ljust(40)
        f.write ("%40s"%(string))
	Eh_formula = (float (str (outputs_list [5])) * 2.3025850930 * float (str (outputs_list [8])) * 0.00831470 * 0.0103633924)
	f.write ("%15.10e\n"%(Eh_formula))
	string = str('  Activity of water        = ').ljust(40)
        f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [6]))
	string = str('  Ionic Strength           =').ljust(40)
	f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [7]))
	string = str('  Temperature  (deg C)     = ').ljust(40)
	f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [8]))
	string = str('  Electrical Balance (eq)  =').ljust(40)
	f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [9]))
	string = str('  Total H                  = ').ljust(40)
	f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [10]))
	string = str('  Total O                  = ').ljust(40)
	f.write ("%40s"%(string))
        f.write ("%15.10e\n"%(outputs_list [11]))
        f.write ('\n')
        f.write ('\n-------  Component Species  -------')
        f.write ('\n')
        comp_species = outputs_list [12: 12 + outputs_list[0]]
        i = len (comp_species)-1
        while i >= 0:
            if str (comp_species [i][0][0]) == 'H' or str (comp_species [i][0][0]) == 'O':
                index = comp_species.index (comp_species [i])
                del comp_species [index]
            i = i-1
            
        outputFormat(f,comp_species,6,40)
#	i = 0
#        while i < len (comp_species):
#            f.write ('\n')
#            temp = str(comp_species [i][0]).ljust(6)

#	    string = str(temp+' '*(40-len(temp))+" = ").ljust(40)
#	    f.write ("%40s"%(string))
#            f.write ('                   ')
#            f.write ("%15.10e\n"%(comp_species [i][1]))
#            i = i+1

        f.write ('\n')
        f.write ('\n-------  Secondary Species  -------')
        f.write ('\n')
        secondary_species = outputs_list [12 + outputs_list[0]: 12 + outputs_list[0] + outputs_list[1]]
        outputFormat(f,secondary_species,40,50)
            
        f.write ('\n')
        f.write ('\n-------  Sorbed Species  -------')
        f.write ('\n')
        sorbed_species = outputs_list [12 + outputs_list[0] + outputs_list[1]: 12 + outputs_list[0] + outputs_list[1] + outputs_list[2]]
        outputFormat(f,sorbed_species,40,50)
        
        f.write ('\n')
        f.write ('\n-------  Minerals  -------')
        f.write ('\n')
        minerals = outputs_list [12 + outputs_list[0] + outputs_list[1] + outputs_list[2]: 12 + outputs_list[0] + outputs_list[1] + outputs_list[2] + outputs_list[3]]
        outputFormat(f,minerals,40,50)

        tmp_file.close ()
        f.close ()
        os.system ('rm -f ./outputs.py')

        #self.TB = QTextBrowser (self.OutputsFrame.QHGroupBox0)
        #outputs_file = open ('./outputs_file.py', 'r')
        outputs_file = open (outputfile, 'r')
        m=''
        #for l in outputs_file.readlines ():
	#    m=m+unicode(l,'latin-1')
        #self.TB.setText (m)
        
	try:
	    os.system ('nedit ' +outputfile+'&')
	except OSError:
	    os.system ('emacs ' +outputfile+'&')
        

        """
        try:
            tmp_file = open ('./outputs.py', 'r')
            for line in tmp_file.readlines ():
                code = line
                exec code
            outputs_list = outputs
        except:
            return  
        
        f = open ('./outputs_file.py', 'w')
        f.write ('\n#')
        f.write ('\n##')
        f.write ('\n## Solution:  ')
        f.write (AqueousState_to_equilibrate)	
        f.write ('\n##')
        f.write ('\n#')	
        f.write ('\n-------  Description of Solution  -------')
        f.write ('\n')
        f.write ('\n pH                      =   ')
        f.write (str (outputs_list [4]))
        f.write ('\n pe                      =   ')
        f.write (str (outputs_list [5]))
        f.write ('\n Eh                      =   ')
	Eh_formula = (float (str (outputs_list [5])) * 2.3025850930 * float (str (outputs_list [8])) * 0.00831470 * 0.0103633924)
	f.write (str (Eh_formula))
        f.write ('\n Activity of water       =   ')
        f.write (str (outputs_list [6]))
        f.write ('\n Ionic Strength          =   ')
        f.write (str (outputs_list [7]))
        f.write ('\n Temperature  (deg C)    =  ')
        f.write (str (outputs_list [8]))
        f.write ('\n Electrical Balance (eq) =   ')
        f.write (str (outputs_list [9]))
        f.write ('\n Total H                 =   ')
        f.write (str (outputs_list [10]))
        f.write ('\n Total O                 =   ')
        f.write (str (outputs_list [11]))
        f.write ('\n')
        f.write ('\n-------  Component Species  -------')
        f.write ('\n')
        comp_species = outputs_list [12: 12 + outputs_list[0]]
        i = len (comp_species)-1
        while i >= 0:
            if str (comp_species [i][0][0]) == 'H' or str (comp_species [i][0][0]) == 'O':
                index = comp_species.index (comp_species [i])
                del comp_species [index]
            i = i-1
            
        i = 0
        while i < len (comp_species):
            f.write ('\n')
            f.write (str (comp_species [i][0]))
            f.write ('                   ')
            f.write (str (comp_species [i][1]))
            i = i+1

        f.write ('\n')
        f.write ('\n-------  Secondary Species  -------')
        f.write ('\n')
        secondary_species = outputs_list [12 + outputs_list[0]: 12 + outputs_list[0] + outputs_list[1]]
        i = 0
        while i < len (secondary_species):
            f.write ('\n')
            f.write (str (secondary_species [i][0]))
            f.write ('                   ')
            f.write (str (secondary_species [i][1]))
            i = i+1
            
        f.write ('\n')
        f.write ('\n-------  Sorbed Species  -------')
        f.write ('\n')
        sorbed_species = outputs_list [12 + outputs_list[0] + outputs_list[1]: 12 + outputs_list[0] + outputs_list[1] + outputs_list[2]]
        i = 0
        while i < len (sorbed_species):
            f.write ('\n')
            f.write (str (sorbed_species [i][0]))
            f.write ('                   ')
            f.write (str (sorbed_species [i][1]))
            i = i+1
        
        f.write ('\n')
        f.write ('\n-------  Minerals  -------')
        f.write ('\n')
        minerals = outputs_list [12 + outputs_list[0] + outputs_list[1] + outputs_list[2]: 12 + outputs_list[0] + outputs_list[1] + outputs_list[2] + outputs_list[3]]
        i = 0
        while i < len (minerals):
            f.write ('\n')
            f.write (str (minerals [i][0]))
            f.write ('                   ')
            f.write (str (minerals [i][1]))
            i = i+1

        tmp_file.close ()
        f.close ()
        os.system ('rm -f ./outputs.py')

        self.TB = QTextBrowser (self.OutputsFrame.QHGroupBox0)
        outputs_file = open ('./outputs_file.py', 'r')
        m=''
        for l in outputs_file.readlines ():
            m=m+l
            self.TB.setText (m)
        """    
#----------------------------------------------------------------------------------------------
        """    
        self.OutputsFrame.QHGroupBox1 = QHGroupBox (self.OutputsFrame)
        self.OutputsFrame.QHGroupBox1.setMargin (10)
        self.OutputsFrame.QHGroupBox1.setMidLineWidth (0)
        self.OutputsFrame.mainLayout.addWidget (self.OutputsFrame.QHGroupBox1)

        self.OutputsFrame.OKPB = QPushButton ('OK', self.OutputsFrame.QHGroupBox1)
        self.OutputsFrame.PrintPB = QPushButton ('Print', self.OutputsFrame.QHGroupBox1)
        self.OutputsFrame.HelpPB = QPushButton ('&Help', self.OutputsFrame.QHGroupBox1)            

        self.connect (self.OutputsFrame.OKPB, SIGNAL ('clicked ()'), self.OutputsFrame_ok)
        self.connect (self.OutputsFrame.PrintPB, SIGNAL ('clicked ()'), self.OutputsFrame_print)
        self.connect (self.OutputsFrame.HelpPB, SIGNAL ('clicked ()'), self.OutputsFrame_help)      

#----------------------------------------------------------------------------------------------
        
        self.OutputsFrame.show ()
        """     
#-----------------------------------------------------------------------------------------		

    def OutputsFrame_ok (self):

        self.OutputsFrame.close ()

    def OutputsFrame_print (self):

        os.system ('a2ps outputs_file.py')

    def OutputsFrame_help (self):

        self.Help ()

#-----------------------------------------------------------------------------------------		

class FCCentralWidget (QWidget):
 
    def __init__ (self, *args):

        apply (QWidget.__init__, (self, ) + args)
        self.mainFrameListView ()

#-----------------------------------------------------------------------------------------
        
    def mainFrameListView (self):
        
        closed_xpm = [
            "16 16 9 1",
            "g c #808080",
            "b c #c0c000",
            "e c #c0c0c0",
            "# c #000000",
            "c c #ffff00",
            ". c None",
            "a c #585858",
            "f c #a0a0a4",
            "d c #ffffff",
            "..###...........",
            ".#abc##.........",
            ".#daabc#####....",
            ".#ddeaabbccc#...",
            ".#dedeeabbbba...",
            ".#edeeeeaaaab#..",
            ".#deeeeeeefe#ba.",
            ".#eeeeeeefef#ba.",
            ".#eeeeeefeff#ba.",
            ".#eeeeefefff#ba.",
            ".##geefeffff#ba.",
            "...##gefffff#ba.",
            ".....##fffff#ba.",
            ".......##fff#b##",
            ".........##f#b##",
            "...........####."]

        open_xpm = [
            "16 16 11 1",
            "# c #000000",
            "g c #c0c0c0",
            "e c #303030",
            "a c #ffa858",
            "b c #808080",
            "d c #a0a0a4",
            "f c #585858",
            "c c #ffdca8",
            "h c #dcdcdc",
            "i c #ffffff",
            ". c None",
            "....###.........",
            "....#ab##.......",
            "....#acab####...",
            "###.#acccccca#..",
            "#ddefaaaccccca#.",
            "#bdddbaaaacccab#",
            ".eddddbbaaaacab#",
            ".#bddggdbbaaaab#",
            "..edgdggggbbaab#",
            "..#bgggghghdaab#",
            "...ebhggghicfab#",
            "....#edhhiiidab#",
            "......#egiiicfb#",
            "........#egiibb#",
            "..........#egib#",
            "............#ee#"]

        locked = [
            "16 16 10 1",
            "h c #808080",
            "b c #ffa858",
            "f c #c0c0c0",
            "e c #c05800",
            "# c #000000",
            "c c #ffdca8",
            ". c None",
            "a c #585858",
            "g c #a0a0a4",
            "d c #ffffff",
            "..#a#...........",
            ".#abc####.......",
            ".#daa#eee#......",
            ".#ddf#e##b#.....",
            ".#dfd#e#bcb##...",
            ".#fdccc#daaab#..",
            ".#dfbbbccgfg#ba.",
            ".#ffb#ebbfgg#ba.",
            ".#ffbbe#bggg#ba.",
            ".#fffbbebggg#ba.",
            ".##hf#ebbggg#ba.",
            "...###e#gggg#ba.",
            ".....#e#gggg#ba.",
            "......###ggg#b##",
            ".........##g#b##",
            "...........####."]

        pix_file = [
            "16 16 7 1",
            "# c #000000",
            "b c #ffffff",
            "e c #000000",
            "d c #404000",
            "c c #c0c000",
            "a c #ffffc0",
            ". c None",
            "................",
            ".........#......",
            "......#.#a##....",
            ".....#b#bbba##..",
            "....#b#bbbabbb#.",
            "...#b#bba##bb#..",
            "..#b#abb#bb##...",
            ".#a#aab#bbbab##.",
            "#a#aaa#bcbbbbbb#",
            "#ccdc#bcbbcbbb#.",
            ".##c#bcbbcabb#..",
            "...#acbacbbbe...",
            "..#aaaacaba#....",
            "...##aaaaa#.....",
            ".....##aa#......",
            ".......##......."]
        
#--------------------------------------------
#  Pixmaps
        filelocked = QPixmap (locked)
        fileopen = QPixmap (open_xpm)
        fileclosed = QPixmap (closed_xpm)
#--------------------------------------------

        self.mainLayout = QVBoxLayout (self, 10,-1, 'mainLayout')
        self.mainLayout.setMargin (10)
        self.mainLayout.setSpacing (10)
        
#------------------------------------------------------------------------------------------------------------------------------------------

        self.QVGroupBox0 = QVGroupBox (self)
        self.QVGroupBox0.setMargin (10)
        self.QVGroupBox0.setMidLineWidth (0)
        self.mainLayout.addWidget (self.QVGroupBox0)

        self.MainFrameListView = QListView (self.QVGroupBox0, 'MainFrameListView')
        self.MainFrameListView.setRootIsDecorated (1)   #  pour avoir les "+" et les "-" dans l arborescence
        self.MainFrameListView.addColumn(self.tr(''))
        self.MainFrameListView.resize(1280,250)
        # We don't want the column to be sorted        
        self.MainFrameListView.setSorting (-1)

        # Item 1: File Menu
        self.item1 = QListViewItem (self.MainFrameListView, None)
        self.item1.setText (0, self.tr ('File'))
        self.item1.setPixmap (0, fileopen)
        self.item1.setOpen (0)

        self.item10 = QListViewItem (self.item1, None)
        self.item10.setText (0, self.tr ('New'))
        
        self.item11 = QListViewItem (self.item1, self.item10)
        self.item11.setText (0, self.tr ('Open'))
        
        self.item12 = QListViewItem (self.item1, self.item11)
        self.item12.setText (0, self.tr ('Save'))

        self.item13 = QListViewItem (self.item1, self.item12)
        self.item13.setText (0, self.tr ('Save As'))

        self.item14 = QListViewItem (self.item1, self.item13)
        self.item14.setText (0, self.tr ('Exit'))

        # Item 2: Define Menu
        self.item2 = QListViewItem (self.MainFrameListView, self.item1)
        self.item2.setText (0, self.tr ('Define'))
        self.item2.setPixmap (0, fileopen)
        self.item2.setOpen (0)

        self.item21 = QListViewItem (self.item2, None)
        self.item21.setText (0, self.tr ('Title'))
        
        self.item22 = QListViewItem (self.item2, self.item21)
        self.item22.setText (0, self.tr ('Units'))

        self.item23 = QListViewItem (self.item2, self.item22)
        self.item23.setText (0, self.tr ('Physics / Software'))

        self.item24 = QListViewItem (self.item2, self.item23)
        self.item24.setText (0, self.tr ('XY Plot'))

        self.item241 = QListViewItem (self.item24, None)
        self.item241.setText (0, self.tr ('Interactive'))

        self.item2411 = QListViewItem (self.item241, None)
        self.item2411.setText (0, self.tr ('Point Concentration over Time'))

        self.item2412 = QListViewItem (self.item241, self.item2411)
        self.item2412.setText (0, self.tr ('Concentration over Space and Time'))

        self.item242 = QListViewItem (self.item24, self.item241)
        self.item242.setText (0, self.tr ('Postprocessing'))

        self.item25 = QListViewItem (self.item2, self.item24)
        self.item25.setText (0, self.tr ('Contours'))
        
        self.item25bis = QListViewItem (self.item2, self.item25)
        self.item25bis.setText (0, self.tr ('Tables'))
        
        self.item251 = QListViewItem (self.item25, None)
        self.item251.setText (0, self.tr ('interactive'))
        
        self.item252 = QListViewItem (self.item25, self.item251)
        self.item252.setText (0, self.tr ('postprocessing'))

        # Item 3: Chemistry Menu
        self.item3 = QListViewItem (self.MainFrameListView, self.item2)
        self.item3.setText (0, self.tr ('Chemistry'))
        self.item3.setPixmap (0, fileopen)
        self.item3.setOpen (0)

        self.item31 = QListViewItem (self.item3, None)
        self.item31.setText (0, self.tr ('Database'))
        
        self.item32 = QListViewItem (self.item3, self.item31)
        self.item32.setText (0, self.tr ('Chemistry Base Addenda'))

        self.item321 = QListViewItem (self.item32, None)
        self.item321.setText (0, self.tr ('Aqueous Phase'))

        self.item3211 = QListViewItem (self.item321, None)
        self.item3211.setText (0, self.tr ('Aqueous Component Species'))

        self.item3212 = QListViewItem (self.item321, self.item3211)
        self.item3212.setText (0, self.tr ('Aqueous Secondary Species'))        

        self.item322 = QListViewItem (self.item32, self.item321)
        self.item322.setText (0, self.tr ('Mineral Phase'))
        
        self.item323 = QListViewItem (self.item32, self.item322)
        self.item323.setText (0, self.tr ('Exchange'))

        self.item3231 = QListViewItem (self.item323, None)
        self.item3231.setText (0, self.tr ('Exchange Master Species'))
        
        self.item3232 = QListViewItem (self.item323, self.item3231)
        self.item3232.setText (0, self.tr ('Exchange Species'))

        self.item324 = QListViewItem (self.item32, self.item323)
        self.item324.setText (0, self.tr ('Surface'))

        self.item3241 = QListViewItem (self.item324, None)
        self.item3241.setText (0, self.tr ('Surface Master Species'))
        
        self.item3242 = QListViewItem (self.item324, self.item3241)
        self.item3242.setText (0, self.tr ('Surface Species'))

        self.item33 = QListViewItem (self.item3, self.item32)
        self.item33.setText (0, self.tr ('Chemical State Definition'))

        self.item331 = QListViewItem (self.item33, None)
        self.item331.setText (0, self.tr ('Aqueous Solution'))
        
        self.item332 = QListViewItem (self.item33, self.item331)
        self.item332.setText (0, self.tr ('Equilibrium Phases'))

        self.item333 = QListViewItem (self.item33, self.item332)
        self.item333.setText (0, self.tr ('exchange'))

        self.item334 = QListViewItem (self.item33, self.item333)
        self.item334.setText (0, self.tr ('surface'))
        
        self.item335 = QListViewItem (self.item33, self.item334)
        self.item335.setText (0, self.tr ('Kinetics'))

        self.item3351 = QListViewItem (self.item335, None)
        self.item3351.setText (0, self.tr ('Kinetic Rates for Minerals'))
        
        self.item3352 = QListViewItem (self.item335, self.item3351)
        self.item3352.setText (0, self.tr ('Kinetic Rates for Species'))

        self.item336 = QListViewItem (self.item33, self.item335)
        self.item336.setText (0, self.tr ('Gas Phase'))

        # Item 4: Transport Menu
        self.item4 = QListViewItem (self.MainFrameListView, self.item3)
        self.item4.setText (0, self.tr ('Transport'))
        self.item4.setPixmap (0, fileopen)
        self.item4.setOpen (0)

        self.item41 = QListViewItem (self.item4, None)
        self.item41.setText (0, self.tr ('Materials'))

        self.item42 = QListViewItem (self.item4, self.item41)
        self.item42.setText (0, self.tr ('Mesh'))

        self.item43 = QListViewItem (self.item4, self.item42)
        self.item43.setText (0, self.tr ('Set Zones'))
       
        self.item44 = QListViewItem (self.item4, self.item43)
        self.item44.setText (0, self.tr ('Hydraulic B.C.'))

        self.item45 = QListViewItem (self.item4, self.item44)
        self.item45.setText (0, self.tr ('Set Darcy Velocity'))

        # Item 5: Solve Menu
        self.item5 = QListViewItem (self.MainFrameListView, self.item4)
        self.item5.setText (0, self.tr ('Solve'))
        self.item5.setPixmap (0, fileopen)
        self.item5.setOpen (0)

        self.item51 = QListViewItem (self.item5, None)
        self.item51.setText (0, self.tr ('Solver Parameters'))

        self.item511 = QListViewItem (self.item51, None)
        self.item511.setText (0, self.tr ('Chemistry'))

        self.item512 = QListViewItem (self.item51, self.item511)
        self.item512.setText (0, self.tr ('Hydraulic'))
        
        self.item513 = QListViewItem (self.item51, self.item512)
        self.item513.setText (0, self.tr ('Transport'))
        
        self.item52 = QListViewItem (self.item5, self.item51)
        self.item52.setText (0, self.tr ('run'))
        
	"""
        # Item 6: Run Menu        
        self.item6 = QListViewItem (self.MainFrameListView, self.item5)
        self.item6.setText (0, self.tr ('Run'))
        self.item6.setPixmap (0, fileopen)
        self.item6.setOpen (0)

        self.item61 = QListViewItem (self.item6, None)
        self.item61.setText (0, self.tr ('run'))
	"""
        
        # Item 7: Display Menu
        self.item7 = QListViewItem (self.MainFrameListView, self.item5)
        self.item7.setText (0, self.tr ('Display'))
        self.item7.setPixmap (0, fileopen)
        self.item7.setOpen (0)

        self.item71 = QListViewItem (self.item7, None)
        self.item71.setText (0, self.tr ('Grid'))

        self.item72 = QListViewItem (self.item7, self.item71)
        self.item72.setText (0, self.tr ('contours'))

        self.item73 = QListViewItem (self.item7, self.item72)
        self.item73.setText (0, self.tr ('Velocity Vectors'))

        # Item 8: Plot Menu
        self.item8 = QListViewItem (self.MainFrameListView, self.item7)
        self.item8.setText (0, self.tr ('Plot'))
        self.item8.setPixmap (0, fileopen)
        self.item8.setOpen (0)

        self.item81 = QListViewItem (self.item8, None)
        self.item81.setText (0, self.tr ('XY_Plot'))
		
        self.item82 = QListViewItem (self.item8, self.item81)
        self.item82.setText (0, self.tr ('Post_processing'))

        # Item 9: Parallel Menu
        self.item9 = QListViewItem (self.MainFrameListView, self.item8)
        self.item9.setText (0, self.tr ('Parallel'))
        self.item9.setPixmap (0, fileopen)
        self.item9.setOpen (0)

        self.item91 = QListViewItem (self.item9, None)
        self.item91.setText (0, self.tr ('Settings'))
        
        # Item 10: Report Menu
        self.item10 = QListViewItem (self.MainFrameListView, self.item9)
        self.item10.setText (0, self.tr ('Report'))
        self.item10.setPixmap (0, fileopen)
        self.item10.setOpen (0)

        self.item101 = QListViewItem (self.item10, None)
        self.item101.setText (0, self.tr ('Summary'))

        # Item 11: Help Menu
        self.item11 = QListViewItem (self.MainFrameListView, self.item10)
        self.item11.setText (0, self.tr ('Help'))
        self.item11.setPixmap (0, fileopen)
        self.item11.setOpen (0)

        self.item111 = QListViewItem (self.item11, None)
        self.item111.setText (0, self.tr ('User\'s Guide'))

        self.item112 = QListViewItem (self.item11, self.item111)
        self.item112.setText (0, self.tr ('About'))

        self.connect (self.MainFrameListView, SIGNAL ('doubleClicked (QListViewItem*)'), self.QListViewItem_DoubleClicked_slot)
        self.tree_menu_disabling ()

        # Outputs Part
        self.MainFrameTextBrowser = QTextBrowser (self.QVGroupBox0)
	
	#self.MainFrameTextBrowser.QKeyEvent = QKeyEvent ()

    def tree_menu_disabling (self):

        # Define Menu
#        self.item241.setEnabled (0)
        self.item2411.setEnabled (0)
        self.item2412.setEnabled (0)
        self.item242.setEnabled (0)
        self.item251.setEnabled (0)
        self.item25bis.setEnabled (0)
        self.item252.setEnabled (0)

        # Chemistry Menu
        self.item31.setEnabled (0)
        self.item3211.setEnabled (0)
        self.item3212.setEnabled (0)
        self.item322.setEnabled (0)
        self.item3231.setEnabled (0)
        self.item3232.setEnabled (0)
        self.item3241.setEnabled (0)
        self.item3242.setEnabled (0)
        self.item331.setEnabled (0)
        self.item332.setEnabled (0)
        self.item333.setEnabled (0)
        self.item334.setEnabled (0)
        self.item3351.setEnabled (0)
        self.item3352.setEnabled (0)
        self.item336.setEnabled (0)

        # Transport Menu
        self.item41.setEnabled (0)
        self.item42.setEnabled (0)
        self.item43.setEnabled (0)
        self.item44.setEnabled (0)
        self.item45.setEnabled (0)

        # Solve Menu
        self.item511.setEnabled (0)
        self.item512.setEnabled (0)
        self.item513.setEnabled (0)
        self.item52.setEnabled (0)

        # Run Menu
        #self.item61.setEnabled (0)

        # Display Menu
        self.item71.setEnabled (0)
        self.item72.setEnabled (0)
        self.item73.setEnabled (0)

        # Plot Menu
        self.item81.setEnabled (0)
        self.item82.setEnabled (0)

        # Parallel Menu
        self.item91.setEnabled (0)

        # Report Menu
        self.item101.setEnabled (0)
        
    def tree_menu_enabling (self):

        global Passed_Into_TitleFrame
        global Passed_Into_UnitsFrame
        global Passed_Into_Physics_SoftwareFrame

        if ((Passed_Into_TitleFrame == 1) and (Passed_Into_UnitsFrame == 1) and (Passed_Into_Physics_SoftwareFrame == 1)):

            # Define Menu
            self.item241.setEnabled (1)
            self.item2411.setEnabled (1)
            self.item2412.setEnabled (1)        
            self.item242.setEnabled (0)
            self.item251.setEnabled (0)
            self.item25bis.setEnabled (1)
            self.item252.setEnabled (1)

            # Chemistry Menu
            self.item31.setEnabled (1)
            self.item3211.setEnabled (1)
            self.item3212.setEnabled (1)
            self.item322.setEnabled (1)
            self.item3231.setEnabled (1)
            self.item3232.setEnabled (1)
            self.item3241.setEnabled (1)
            self.item3242.setEnabled (1)
            self.item331.setEnabled (1)
            self.item332.setEnabled (1)
            self.item333.setEnabled (1)
            self.item334.setEnabled (1)
            self.item3351.setEnabled (1)
            #self.item3352.setEnabled (1)
            self.item336.setEnabled (1)

            # Transport Menu
            self.item41.setEnabled (1)
            self.item42.setEnabled (1)
            self.item43.setEnabled (1)
            #self.item44.setEnabled (1)
            self.item45.setEnabled (1)

            # Solve Menu
            self.item511.setEnabled (1)
            self.item512.setEnabled (1)
            self.item513.setEnabled (1)
            self.item52.setEnabled (1)

            # Run Menu
            #self.item61.setEnabled (1)

            # Display Menu
            self.item71.setEnabled (1)
            self.item72.setEnabled (1)

            # Plot Menu
            self.item81.setEnabled (1)
            self.item82.setEnabled (0)

            # Parallel Menu
            self.item91.setEnabled (1)

            # Report Menu
            self.item101.setEnabled (1)
            
      #      mw.activation_test ()
			
			
            if Solver == 'PhreeqC':
                # Transport Menu
                self.item41.setEnabled (0)
                self.item42.setEnabled (0)
                self.item43.setEnabled (0)
                self.item44.setEnabled (0)		

                # Display Menu
                self.item71.setEnabled (0)
                self.item72.setEnabled (0)		

    def QListViewItem_DoubleClicked_slot (self):

        CurrentItem = self.MainFrameListView.currentItem ()
        text = str (CurrentItem.text (0))

        if text == 'New':
            mw.new ()

        if text == 'Open':
            mw.open ()

        elif text == 'Save':
            mw.save ()

        elif text == 'Save As':
            mw.saveAs ()

        elif text == 'Exit':
            mw.exit ()

        elif text == 'Title':
            mw.title_of_the_study ()

        elif text == 'Units':
            mw.units ()

        elif text == 'Physics / Software':
            mw.which_solver ()

##         elif text == 'Interactive':
##             mw.interactive_XY_plot ()

        elif text == 'Point Concentration over Time':
            mw.interactive_XY_plot ()

        elif text == 'Concentration over Space and Time':
            mw.over_space_and_time ()

        elif text == 'Postprocessing':
            #mw.postprocessing_XY_plot ()
            pass
            
        elif text == 'interactive':
            mw.interactive_contours ()

        elif text == 'Tables':
            mw.tables ()

        elif text == 'postprocessing':
            pass
            mw.postprocessing_contours ()

        elif text == 'Database':
            mw.database ()

        elif text == 'Aqueous Component Species':
            mw.aqueous_master_species ()

        elif text == 'Aqueous Secondary Species':
            mw.aqueous_species ()

        elif text == 'Mineral Phase':
            mw.mineral_phase ()

        elif text == 'Exchange Master Species':
            mw.exchange_master_species ()

        elif text == 'Exchange Species':
            mw.exchange_species ()

        elif text == 'Surface Master Species':
            mw.surface_master_species ()

        elif text == 'Surface Species':
            mw.surface_species ()

        elif text == 'Aqueous Solution':
            mw.aqueous_solution ()

        elif text == 'Equilibrium Phases':
            mw.equilibrium_phases ()

        elif text == 'exchange':
            mw.ion_exchange_state ()

        elif text == 'surface':
            mw.surface_complexation_state ()

        elif text == 'Kinetic Rates for Minerals':
            mw.Kinetics ()
 
        elif text == 'Kinetic Rates for Species':
            mw.Kinetics_for_components ()
    
        elif text == 'Gas Phase':
            mw.gas_phase ()

        elif text == 'Materials':
            mw.materials ()

        elif text == 'Mesh':
            mw.mesh_direction ()

        elif text == 'Set Zones':
            mw.set_zones ()

        elif text == 'Hydraulic B.C.':
            mw.boundary_conditions ()

        elif text == 'Set Darcy Velocity':
            mw.setDarcyVelocity ()

        elif text == 'Chemistry':
            mw.chemistry_solver_parameters ()

        elif text == 'Hydraulic':
            mw.hydraulic_solver_parameters ()

        elif text == 'Transport':
            mw.transport_solver_parameters ()
# debug_solve
        elif text == 'Initialize':
            pass
        #mw.initialize ()

        elif text == 'run':
            mw.iterate ()
            #mw.hydraulicRun ()

        elif text == 'Grid':
            mw.grid ()

        elif text == 'contours':        # a changer (2 fois "contours")
            mw.contours_2 () 

        elif text == 'Velocity Vectors':
            pass
         #mw.velocity_vectors ()

        elif text == 'XY_Plot':
            mw.xmgrace ()

        elif text == 'Post_processing':  # a changer (3 fois "Postprocessing")
            mw.plot3 ()

        elif text == 'Settings':
            mw.parallel_frame ()

        elif text == 'Summary':
            mw.summary ()

        elif text == 'User\'s Guide':
            mw.Help ()

        elif text == 'About':
            mw.about ()

    def activate (self):

        if self.MainFrameListView.isOpen (self.item_3):
            self.item_3.setPixmap (0, fileopen)
        else :
            self.item_3.setPixmap (0, fileclosed)

            
#----------------------------------------------------------------------------------------------
"""
This function is used to set the position
of each frame in the desktop.
The frame is displayed in the top left corner.
"""
def setPosition (Frame):
    p = QPoint (0,0)
    Frame.move (p)
#----------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------
#debug_test
def split_formula(string):
    return findall(r'[A-Z][a-z]*[0-9-.]*',string)
def split_valence(string):
    if '+' in string:
	string = string[0:string.find('+')]
    elif '-' in string:
	string = string[0:string.find('-')]
    return findall(r'[A-Z]*[a-z]*[0-9-.]*',string)
def ion_counter(string):
    #string = sub(r'([A-Za-z]*)(\d*)',r'\1 \2',string)
    string = sub(r'([A-Za-z]*)([0-9-.-0-9]*)',r'\1 \2',string)
    tu = string.split(' ')
    if tu[1] == '':
        tu[1]='1'
    tu[1] = float(tu[1])
    return tu
def ion_sumup(liste):
    tu = []
    ion = []
    for i in liste:
        if i[0] in ion:
	    j = ion.index(i[0])
	    tu[j][1]+= i[1]
	    pass
	else:
	    ion.append(i[0])
	    tu.append(i)
	    pass
    return tu
def stoech(string):
    newi = []
    for i in string:
        if i !='':
            newi.append(ion_counter(i))
    stoechfinal = ion_sumup(newi)
    return stoechfinal	
def stoechBilanzierung_old(links,rechts):
    ok = 1
    for i in links:
        num = i[1]
        for j in rechts:
            if i[0]==j[0]:
	        num-=j[1]
        if num !=0:
            ok = 0
    return ok
def reactantListe(rechts):
    c = []
    for ion in rechts:
        a = split_valence(ion[0]) 
        b = ''
        for j in a:
            b = b+j
        a =split_formula(b)
        for j in a:
            if j !='':
                c.append(ion_counter(j))
	        c[-1][1]*=ion[1]
    return c	    

def Mineral_wa(essai):
    a = findall('[A-Z][^A-Z]',essai)
    if essai.find(a[0])!=0:
        try:
	    coef = float(essai[0:essai.find(a[0])])
	except ValueError:
            mw.Check_H2O_coefMB = QMessageBox()
            mw.Check_H2O_coefMB.setCaption ('Error')
            mw.Check_H2O_coefMB.setText ('You can only define after the colon a quantity of H2O.\nThe coefficient must be an integer or a float\nHere it is \"'+essai[0:essai.find(a[0])]+'\".\nPlease modify it.')
            mw.Check_H2O_coefMB.setIcon (QMessageBox.Critical)
            mw.Check_H2O_coefMB.show ()
	    coef = 1.
    else:
        coef = 1.
    return coef

def stoechBilanzierung(links,rechts):
    ok = 1
    for k in rechts:
        k[1]*=-1
    for i in links+rechts:
        num = 0
        for j in links+rechts:
            if i[0]==j[0]:
	        num-=j[1]
        if abs(num) >1.e-6:
            ok = 0
    return ok

def check_H2O (string):
    ok = 1
    if string.find ('H2O') != -1:
	s1 = string [:string.find ('H2O')]
	s2 = string [string.find ('H2O'):]
	if s1 != '':
	    try:
	        coef = float (s1)
            except ValueError:
        	mw.Check_H2O_coefMB = QMessageBox()
        	mw.Check_H2O_coefMB.setCaption ('Error')
        	mw.Check_H2O_coefMB.setText ('You can only define after the colon a quantity of H2O.\nThe coefficient must be an integer or a float\nHere it is \"'+s1+'\".\nPlease modify it.')
        	mw.Check_H2O_coefMB.setIcon (QMessageBox.Critical)
        	mw.Check_H2O_coefMB.show ()
		ok = 0	    
	else:
	    coef = 0.0
	if s2 != 'H2O':
            mw.Check_H2OMB = QMessageBox()
            mw.Check_H2OMB.setCaption ('Error')
            mw.Check_H2OMB.setText ('You can only define after the colon a quantity of H2O.')
            mw.Check_H2OMB.setIcon (QMessageBox.Critical)
            mw.Check_H2OMB.show ()
	    ok = 0
	else:
	    pass	    
    else:	
        mw.Check_H2OMB = QMessageBox()
        mw.Check_H2OMB.setCaption ('Error')
        mw.Check_H2OMB.setText ('You can only define after the colon a quantity of H2O.\nYou have entered \"'+str (string)+'\".\nPlease modify it.')
        mw.Check_H2OMB.setIcon (QMessageBox.Critical)
        mw.Check_H2OMB.show ()
	ok = 0
    return ok

#----------------------------------------------------------------------------------------------



      #=================================================================#
      #                                                                 #
      #                                                                 #
      #                             MAIN                                #
      #                                                                 #
      #                                                                 #
      #=================================================================#



# debug_config

#-----------------------------------------------------------------------------------------------------------
"""
We initialize the window system and construct an application object (a)
with the command line arguments argv.
Then we set the font policy ('Times') and the font size (10).
We have chosen the Motif Style.
"""
a = QApplication (sys.argv)

# Defaults
policy = 'Times'
size = 10
bold = 0
style = QWindowsStyle ()
#style = QMotifStyle ()

try:
    f = open ('./geoiconfig', 'r')
    for l in f.readlines ():
        if l.find ('font') != -1:
            if l.find ('*'):
                m = l [l.index ('*')+1:]
                if l.find ('*'):
                    m = m [:m.index ('*')]
                    #-----------------------------------
                    # a modifier...
                    if m.find ('bold') != -1:
                        bold = 1
                    #-----------------------------------    
                    elif m.find ('-'):
                        policy = m [:m.index ('-')]
                        size   = int (m [m.index ('-')+1:])
        elif l.find ('style') != -1:
            if l.find ('*'):
                m = l [l.index ('*')+1:]
                if l.find ('*'):
                    m = m [:m.index ('*')]
                    if m == 'Windows':
                        style = QWindowsStyle ()
                    elif m == 'Motif':
                        style = QMotifStyle ()                        
                        
        
except:
    pass
    #print 'No config file'


MyFont = QFont (policy, size)
if bold:
    MyFont.setBold (1)
a.setFont (MyFont)
a.setStyle (style)
#-----------------------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------
"""
We use the class defined at the top.
Looking at the command line arguments, we either create the mainwindow
(for structured or unstructured meshings) or display an error message.
"""
mode = 'structured'
if len (sys.argv) != 1: 
    if str (sys.argv [1]) == '-u' or str (sys.argv [1]) == 'u':
        mode = 'unstructured'
        mw = ApplicationWindow ()
        mw.setMinimumSize (600, 650)
        mw.setCaption ('Geochemical - Transport GUI - Unstructured Meshings')
        a.setMainWidget (mw)
        mw.show ()
    else:
        MB = QMessageBox()
        MB.setCaption ('Error - Geochemical - Transport GUI')
        MB.setText ('Options are:\n    -u   : Unstructured meshings.\
                                 \n     u   : Unstructured meshings.')
#                                 \n    -h   : Online help.')
        MB.setIcon (QMessageBox.Critical)
        MB.show ()
else:
    mode = 'structured'
    mw = ApplicationWindow ()
    mw.setMinimumSize (600, 650)
    mw.setCaption ('Geochemical - Transport GUI - Structured Meshings')
    a.setMainWidget (mw)
    mw.show ()
#----------------------------------------------------------------------------



#---------------------------------------------------------------------------------------------
"""
We connect signal and slot to be able to close the application.

    - lastWindowClosed ():
       This signal is emitted when the user has closed the last remaining top level window.

    - quit ():
       This slot tells the application to exit with return code 0 (success).
       This function is a slot, so you may connect any signal to activate quit()
       (just like lastWindowClosed () here).
"""
a.connect (a, SIGNAL('lastWindowClosed()'), a, SLOT ('quit()'))
#---------------------------------------------------------------------------------------------
#a.setCursor (Qt.WaitCursor)


#-------------------------------------------------------------------------------------------------------------
"""
To enter the main event loop and wait until exit() is called or the main widget is destroyed.
It is necessary to call this function to start event handling.
The main event loop receives events from the window system and dispatches these to the application widgets.
"""
a.exec_loop ()
#-------------------------------------------------------------------------------------------------------------
